Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x658, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6e8, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x6da8638
	void HandleTimelineScrubbed();// 0x6da866c

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x505573c

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x230, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x234, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x238, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x248, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x258, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x268, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x278, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x288, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x288, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x290, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x298, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a0, Size: 0x4]
	float KillZ;//[Offset: 0x2a4, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2a8, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b0, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2b4, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2b8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c0, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2c8, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2d0, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2d8, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2dc, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2e8, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2ec, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2f0, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2f8, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x318, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x33c, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x340, Size: 0x8]
	float TimeDilation;//[Offset: 0x348, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x34c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x350, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x354, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x358, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x35c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x360, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x364, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3a8, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3d0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3d8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3e0, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3e8, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3f8, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x6da9948

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x62, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x63, Size: 0x1]
	byte RemoteRole;//[Offset: 0x64, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x9c, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 0x40]
	Actor* Owner;//[Offset: 0xe8, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf0, Size: 0x8]
	byte Role;//[Offset: 0xf8, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf9, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xfa, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xfb, Size: 0x1]
	int InputPriority;//[Offset: 0xfc, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 0x4]
	int NetTag;//[Offset: 0x10c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x120, Size: 0x8]
	Actor*[] Children;//[Offset: 0x128, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 0x10]
	FName[] Layers;//[Offset: 0x158, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x168, Size: 0x8]
	FName[] Tags;//[Offset: 0x178, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x18f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x190, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x195, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f8, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x208, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x6b2dc3c
	void UserConstructionScript();// 0x505573c
	void TearOff();// 0x6b32454
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x6b2ef98
	void SetTickGroup(byte NewTickGroup);// 0x6b2dcec
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6b2e948
	void SetReplicates(bool bInReplicates);// 0x6b322e0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x6b3222c
	void SetOwner(Actor* NewOwner);// 0x6b2e31c
	void SetNetDormancy(byte NewDormancy);// 0x6b2e1ac
	void SetLifeSpan(float InLifespan);// 0x6b2e5dc
	void SetAutoDestroyWhenFinished(bool bVal);// 0x6b323a8
	void SetActorTickInterval(float TickInterval);// 0x6b2e418
	void SetActorTickEnabled(bool bEnabled);// 0x6b2e4f4
	void SetActorScale3D(Vector NewScale3D);// 0x6b3125c
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x6b2fbac
	void SetActorHiddenInGame(bool bNewHidden);// 0x6b2fac0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x6b2fa14
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6b2ea2c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6b2ead8
	void ReceiveTick(float DeltaSeconds);// 0x505573c
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x505573c
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x505573c
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x505573c
	void ReceiveEndPlay(byte EndPlayReason);// 0x505573c
	void ReceiveDestroyed();// 0x505573c
	void ReceiveBeginPlay();// 0x505573c
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x505573c
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x505573c
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x505573c
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x505573c
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x505573c
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x505573c
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x505573c
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x505573c
	void ReceiveActorEndCursorOver();// 0x505573c
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x505573c
	void ReceiveActorBeginCursorOver();// 0x505573c
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x6b2dae0
	void OnRep_ReplicateMovement();// 0x6b32470
	void OnRep_ReplicatedMovement();// 0x6b2e3c8
	void OnRep_Owner();// 0x6b3238c
	void OnRep_Instigator();// 0x6b321bc
	void OnRep_AttachmentReplication();// 0x6b321d8
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x6b2d458
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x6b2e89c
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x6b2df00
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b306e0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x6b31504
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b2fc50
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b2fe38
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b2ffe8
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b31300
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b319ec
	void K2_OnReset();// 0x505573c
	void K2_OnEndViewTarget(PlayerController* PC);// 0x505573c
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x505573c
	SceneComponent* K2_GetRootComponent();// 0x6b31640
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x6b2d838
	Rotator K2_GetActorRotation();// 0x6b318f4
	Vector K2_GetActorLocation();// 0x6b31ba8
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6b2edc0
	void K2_DestroyComponent(ActorComponent* Component);// 0x6b2f75c
	void K2_DestroyActor();// 0x6b2f9d8
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6b2f3ec
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6b2f07c
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x6b2f278
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x6b2f5e8
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b308d4
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b30abc
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b30c6c
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b30198
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b30380
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6b30530
	bool IsOverlappingActor(const Actor* Other);// 0x6b2e250
	bool IsChildActor();// 0x6b2e160
	bool IsActorTickEnabled();// 0x6b2e4bc
	bool IsActorBeingDestroyed();// 0x6b2e848
	bool HasAuthority();// 0x6b2f9b4
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x6b30f74
	Vector GetVelocity();// 0x6b31600
	Transform GetTransform();// 0x6b31c00
	bool GetTickableWhenPaused();// 0x6b2e9f4
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x6b310cc
	byte GetRemoteRole();// 0x6b321f4
	ChildActorComponent* GetParentComponent();// 0x6b2e024
	Actor* GetParentActor();// 0x6b2dff0
	Actor* GetOwner();// 0x6b2e300
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x6b2e688
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6b2e748
	byte GetLocalRole();// 0x6b32210
	float GetLifeSpan();// 0x6b2e5a0
	Controller* GetInstigatorController();// 0x6b31c3c
	Pawn* GetInstigator();// 0x6b31c70
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x6b31ca4
	float GetInputAxisValue(const FName InputAxisName);// 0x6b31fb8
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x6b31e30
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x6b30e1c
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x6b31020
	float GetGameTimeSinceCreation();// 0x6b2e868
	float GetDotProductTo(const Actor* OtherActor);// 0x6b30ec8
	float GetDistanceTo(const Actor* OtherActor);// 0x6b31178
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x6b2d700
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x6b2d608
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x6b2d930
	FName GetAttachParentSocketName();// 0x6b2de98
	Actor* GetAttachParentActor();// 0x6b2decc
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x6b2dd90
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x6b2e058
	Vector GetActorUpVector();// 0x6b3184c
	float GetActorTimeDilation();// 0x6b2ecdc
	float GetActorTickInterval();// 0x6b2e3e4
	Vector GetActorScale3D();// 0x6b31224
	Vector GetActorRightVector();// 0x6b317f8
	Vector GetActorRelativeScale3D();// 0x6b2fb74
	Vector GetActorForwardVector();// 0x6b318a0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x6b2d9dc
	bool GetActorEnableCollision();// 0x6b2f9f4
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x6b3165c
	void ForceNetUpdate();// 0x6b2dc20
	void FlushNetDormancy();// 0x6b2e198
	void EnableInput(PlayerController* PlayerController);// 0x6b32110
	void DisableInput(PlayerController* PlayerController);// 0x6b32064
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x6b2eeec
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6b2eb84
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6b2ec30
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x6b2f800
	bool ActorHasTag(FName Tag);// 0x6b2ed10

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14d, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x6d44c14
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x6d45700
	void SetWorldScale3D(Vector NewScale);// 0x6d46838
	void SetVisibilityByFlag(bool bNewVisibility, int Flag, bool bPropagateToChildren);// 0x6d44cdc
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x6d44e1c
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x6d47c4c
	void SetRelativeScale3D(Vector NewScale3D);// 0x6d474e4
	void SetMobility(byte NewMobility);// 0x6d44500
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x6d44b14
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x6d4479c
	void ResetRelativeTransform();// 0x6d47588
	void OnRep_Visibility(bool OldValue);// 0x6d47b50
	void OnRep_Transform();// 0x6d47c38
	void OnRep_AttachSocketName();// 0x6d47bfc
	void OnRep_AttachParent();// 0x6d47c24
	void OnRep_AttachChildren();// 0x6d47c10
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d46650
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d468dc
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d445ac
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d46a8c
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d47608
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d477f0
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d448f0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d479a0
	Transform K2_GetComponentToWorld();// 0x6d45ff4
	Vector K2_GetComponentScale();// 0x6d46060
	Rotator K2_GetComponentRotation();// 0x6d46098
	Vector K2_GetComponentLocation();// 0x6d460d0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x6d45484
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x6d457f0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x6d459f8
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d46108
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d462f0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d464a0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d47184
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d47334
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d46c3c
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d46e24
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x6d46fd4
	bool IsVisible();// 0x6d44f20
	bool IsSimulatingPhysics(FName BoneName);// 0x6d45e94
	bool IsAnySimulatingPhysics();// 0x6d45e54
	Vector GetUpVector();// 0x6d45f84
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x6d45280
	Rotator GetSocketRotation(FName InSocketName);// 0x6d45110
	Quat GetSocketQuaternion(FName InSocketName);// 0x6d45058
	Vector GetSocketLocation(FName InSocketName);// 0x6d451c8
	bool GetShouldUpdatePhysicsVolume();// 0x6d47cf8
	Vector GetRightVector();// 0x6d45f4c
	Transform GetRelativeTransform();// 0x6d4759c
	PhysicsVolume* GetPhysicsVolume();// 0x6d44ae0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x6d45d5c
	int GetNumChildrenComponents();// 0x6d45d28
	Vector GetForwardVector();// 0x6d45fbc
	Vector GetComponentVelocity();// 0x6d44f60
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x6d45b78
	SceneComponent* GetChildComponent(int ChildIndex);// 0x6d45c7c
	FName GetAttachSocketName();// 0x6d45e1c
	SceneComponent* GetAttachParent();// 0x6d45e38
	FName[] GetAllSocketNames();// 0x6d453d4
	bool DoesSocketExist(FName InSocketName);// 0x6d44fa0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x6d455fc

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0x6b37394
	void SetTickGroup(byte NewTickGroup);// 0x6b36e54
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x6b37214
	void SetIsReplicated(bool ShouldReplicate);// 0x6b37168
	void SetComponentTickInterval(float TickInterval);// 0x6b36fd0
	void SetComponentTickEnabled(bool bEnabled);// 0x6b370b4
	void SetAutoActivate(bool bNewAutoActivate);// 0x6b372c0
	void SetActive(bool bNewActive, bool bReset);// 0x6b373b0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6b36ba4
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6b36c50
	void ReceiveTick(float DeltaSeconds);// 0x505573c
	void ReceiveEndPlay(byte EndPlayReason);// 0x505573c
	void ReceiveBeginPlay();// 0x505573c
	void OnRep_IsActive();// 0x6b37650
	void K2_DestroyComponent(Object* Object);// 0x6b36ef8
	bool IsComponentTickEnabled();// 0x6b37074
	bool IsBeingDestroyed();// 0x6b3766c
	bool IsActive();// 0x6b37374
	Actor* GetOwner();// 0x6b37634
	float GetComponentTickInterval();// 0x6b36f9c
	void Deactivate();// 0x6b374b4
	bool ComponentHasTag(FName Tag);// 0x6b37584
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x6b36cfc
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x6b36da8
	void Activate(bool bReset);// 0x6b374d0

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x260, Size: 0x4]
	int Priority;//[Offset: 0x264, Size: 0x4]
	float FluidFriction;//[Offset: 0x268, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x228, Size: 0x1]
	Color BrushColor;//[Offset: 0x22c, Size: 0x4]
	int PolyFlags;//[Offset: 0x230, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	Model* Brush;//[Offset: 0x238, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x240, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x250, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x4b0, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x4b8, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x290, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x294, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x298, Size: 0x4]
	float MinScreenSizeCulling;//[Offset: 0x29c, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x2a0, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2a1, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x2a2, Size: 0x1]
	enum LightmapType;//[Offset: 0x2a3, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a4, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a4, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a4, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a4, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a5, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a5, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a5, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a5, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a5, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a5, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a5, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a5, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a6, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a6, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a6, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a6, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a6, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a6, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a6, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a6, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a7, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a7, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a7, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a7, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a7, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a7, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a7, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a7, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1]
	bool bForceGenLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a8, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a8, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a9, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a9, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a9, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a9, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a9, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a9, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a9, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a9, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2aa, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2aa, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2aa, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2aa, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2aa, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2aa, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2aa, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2aa, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2ac, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x2ae, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2af, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2b0, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x2b4, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x2b8, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2c0, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x2d0, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x2e0, Size: 0x4]
	int VisibilityId;//[Offset: 0x2e4, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2e8, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x2f8, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x2f9, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x2fa, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x2fb, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x300, Size: 0x4]
	float BoundsScale;//[Offset: 0x30c, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x320, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x330, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x350, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x480, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x481, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x482, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x483, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x484, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x486, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x487, Size: 0x1]
	delegate OnClicked;//[Offset: 0x488, Size: 0x1]
	delegate OnReleased;//[Offset: 0x489, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x48a, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x48b, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x48c, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x48d, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x4a8, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x6d29260
	void WakeRigidBody(FName BoneName);// 0x6d25d6c
	void WakeAllRigidBodies();// 0x6d23c30
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x6d28004
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x6d232f4
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x6d256bc
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x6d25760
	void SetSimulatePhysics(bool bSimulate);// 0x6d27f50
	void SetRenderMainPassStencil(bool bValue);// 0x6d242a8
	void SetRenderInMainPass(bool bValue);// 0x6d241fc
	void SetRenderCustomDepth(bool bValue);// 0x6d24540
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x6d25610
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x6d22fb8
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6d261f0
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6d26328
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x6d26470
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x6d26c44
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x6d26710
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x6d265b8
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x6d26850
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x6d25b68
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x6d25abc
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x6d25c14
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x6d284f4
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x6d285e0
	void SetMassScale(FName BoneName, float InMassScale);// 0x6d2387c
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x6d235e0
	void SetMainPassStencilValue(int Value);// 0x6d24354
	void SetLinearDamping(float InDamping);// 0x6d23a90
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x6d29310
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x6d258b8
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x6d29464
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x6d2580c
	void SetEnableGravity(bool bGravityEnabled);// 0x6d23b7c
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x6d28b48
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x6d28c34
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x6d28d18
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x6d28df8
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x6d243f8
	void SetCustomDepthStencilValue(int Value);// 0x6d2449c
	void SetCullDistance(float NewCullDistance);// 0x6d22f14
	void SetConstraintMode(byte ConstraintMode);// 0x6d27ea4
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x6d23110
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x6d23064
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x6d2546c
	void SetCollisionObjectType(byte Channel);// 0x6d2538c
	void SetCollisionEnabled(byte NewType);// 0x6d25564
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x6d25e18
	void SetCastShadow(bool NewCastShadow);// 0x6d25a10
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x6d25964
	void SetBoundsScale(float NewBoundsScale);// 0x6d28784
	void SetAngularDamping(float InDamping);// 0x6d239a8
	void SetAllUseCCD(bool InUseCCD);// 0x6d23240
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x6d269a8
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x6d23c4c
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x6d23d4c
	void SetAllMassScale(float InMassScale);// 0x6d2371c
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x6d233f0
	void PutRigidBodyToSleep(FName BoneName);// 0x6d25cc8
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x6d24ca8
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x6d245ec
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x6d2503c
	bool K2_IsQueryCollisionEnabled();// 0x6d23fac
	bool K2_IsPhysicsCollisionEnabled();// 0x6d23f64
	bool K2_IsCollisionEnabled();// 0x6d23ff4
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x6d24940
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x6d28a98
	bool IsOverlappingActor(const Actor* Other);// 0x6d289e8
	bool IsGravityEnabled();// 0x6d23b3c
	bool IsAnyRigidBodyAwake();// 0x6d23200
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x6d28fbc
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x6d29170
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x6d280cc
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x6d26aa0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x6d26b94
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x6d25fb0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x6d26060
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x6d26128
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x6d28828
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x6d288e8
	int GetNumMaterials();// 0x6d241c0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x6d28104
	MaterialInterface* GetMaterial(int ElementIndex);// 0x6d286d0
	float GetMassScale(FName BoneName);// 0x6d237c8
	float GetMass();// 0x6d235a4
	float GetLinearDamping();// 0x6d23a54
	Vector GetInertiaTensor(FName BoneName);// 0x6d234ec
	bool GetGenerateOverlapEvents();// 0x6d29510
	byte GetCollisionResponseToChannel(byte Channel);// 0x6d23eb0
	FName GetCollisionProfileName();// 0x6d25438
	byte GetCollisionObjectType();// 0x6d23e74
	byte GetCollisionEnabled();// 0x6d24038
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x6d24074
	Vector GetCenterOfMass(FName BoneName);// 0x6d25f00
	float GetAngularDamping();// 0x6d2396c
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x6d28210
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x6d28348
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x6d28440
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x6d28f0c
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x6d290c0
	void ClearMoveIgnoreComponents();// 0x6d28ee0
	void ClearMoveIgnoreActors();// 0x6d290ac
	bool CanCharacterStepUp(Pawn* Pawn);// 0x6d22e5c
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x6d26ed8
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x6d26d84
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x6d27014
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x6d276ac
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x6d27150
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x6d2786c
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x6d27d68
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x6d27310
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x6d27440
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x6d27570
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x6d27af0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x6d2799c
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x6d27c2c

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x6d38db4
	int GetTileCount();// 0x6d38de8
	int GetTileBorderSize();// 0x6d38d84
	int GetSize();// 0x6d38e1c

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x6d93370
	int Blueprint_GetSizeX();// 0x6d933a4

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x6cc21ac
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x6cc2570
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x6cc24bc
	PhysicalMaterial* GetPhysicalMaterial();// 0x6cc25ac
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x6cc238c
	Material* GetBaseMaterial();// 0x6cc25e8

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	bool bForceLODsShareLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa0, Size: 0x4]
	float MinScreenSize;//[Offset: 0xa4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x148, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x6d84ff0
	int GetNumSections(int InLOD);// 0x6d853e8
	int GetNumLODs();// 0x6d8556c
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x6d857f0
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x6d8574c
	int GetMaterialIndex(FName MaterialSlotName);// 0x6d851e4
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x6d8533c
	BoxSphereBounds GetBounds();// 0x6d85500
	Box GetBoundingBox();// 0x6d85494
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x6d85094
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x6d856a8
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x6d855a0
	void AddSocket(StaticMeshSocket* Socket);// 0x6d85140
	FName AddMaterial(MaterialInterface* Material);// 0x6d85290

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x61cedb8
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x61ce980
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x61ceee8
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x61cea88

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x61bf6c4
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x61bd5d8
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x61bd4dc
	void ReversePolygonFacing(PolygonID PolygonID);// 0x61bd42c
	void ReserveNewVertices(int NumberOfNewVertices);// 0x61c1da0
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x61c1aac
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x61c11bc
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x61c0b4c
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x61c04dc
	void ReserveNewEdges(int NumberOfNewEdges);// 0x61c1684
	bool IsVertexValid(VertexID VertexID);// 0x61c1b50
	bool IsVertexOrphaned(VertexID VertexID);// 0x61c01d0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x61c1728
	bool IsTriangleValid(const TriangleID TriangleID);// 0x61c0bf0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x61be7cc
	bool IsPolygonValid(PolygonID PolygonID);// 0x61c0580
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x61c028c
	bool IsEmpty();// 0x61c1e44
	bool IsEdgeValid(EdgeID EdgeID);// 0x61c1260
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x61bef9c
	bool IsEdgeInternal(EdgeID EdgeID);// 0x61bf0ac
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x61bfde4
	Vector GetVertexPosition(VertexID VertexID);// 0x61bf7c4
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x61c00c4
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x61bf60c
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x61bf500
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x61be178
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x61bd714
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x61bf3ec
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x61bf220
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x61bfc18
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x61bfa4c
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x61bffb0
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x61bf880
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x61be4ac
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x61be6b8
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x61be5c0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x61be888
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x61be940
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x61be398
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x61be284
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x61bdccc
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x61bde98
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x61be064
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x61bd820
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x61bdbb8
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x61bdaa4
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x61bd268
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x61bd8d8
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x61bfd2c
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x61bf334
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x61bf168
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x61bfb60
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x61bf994
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x61bfef8
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x61bdde0
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x61bdfac
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x61bd9ec
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x61bd1b0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x61bedd0
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x61bec04
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x61be9f8
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x61beb0c
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x61bee88
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x61becbc
	void Empty();// 0x61c1e7c
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x61c17e4
	void DeleteVertex(VertexID VertexID);// 0x61c1c0c
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x61c0cac
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x61c0348
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x61c063c
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x61c131c
	void CreateVertexWithID(VertexID VertexID);// 0x61c1cbc
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x61c18f8
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x61c19f4
	VertexID CreateVertex();// 0x61c1d6c
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x61c0e80
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x61c103c
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x61c0810
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x61c03f8
	PolygonGroupID CreatePolygonGroup();// 0x61c04a8
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x61c09cc
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x61c1430
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x61c1578
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x61bd37c

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x6cc0e4c
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x6cc0f50
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x6cc11ac
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x6cc12b0
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x6cc150c
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6cc1610
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6cc0ba4
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6cc0ccc
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6cc0d9c
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6cc1034
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6cc1100
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6cc1394
	float K2_GetScalarParameterValue(FName ParameterName);// 0x6cc1460
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x6cc0ab4
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x6cc096c
	void CopyInterpParameters(MaterialInstance* Source);// 0x6cc0a10

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x234, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x238, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x239, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x23a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x240, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x248, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x258, Size: 0x8]
	Controller* Controller;//[Offset: 0x260, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x26c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x278, Size: 0xc]
	void SpawnDefaultController();// 0x6cfb948
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x6cfbac0
	void ReceiveUnpossessed(Controller* OldController);// 0x505573c
	void ReceivePossessed(Controller* NewController);// 0x505573c
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x6cfbd5c
	void OnRep_PlayerState();// 0x6cfbbbc
	void OnRep_Controller();// 0x6cfbbd8
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6cfb3d8
	Vector K2_GetMovementInputVector();// 0x6cfb3a0
	bool IsPlayerControlled();// 0x6cfba00
	bool IsPawnControlled();// 0x6cfbc48
	bool IsMoveInputIgnored();// 0x6cfb518
	bool IsLocallyControlled();// 0x6cfba40
	bool IsControlled();// 0x6cfbc80
	bool IsBotControlled();// 0x6cfb9c0
	Vector GetPendingMovementInputVector();// 0x6cfb7d4
	Vector GetNavAgentLocation();// 0x6cfba80
	PawnMovementComponent* GetMovementComponent();// 0x6cfbed0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x6cfbcb8
	Vector GetLastMovementInputVector();// 0x6cfb79c
	Rotator GetControlRotation();// 0x6cfbbf4
	Controller* GetController();// 0x6cfbc2c
	Rotator GetBaseAimRotation();// 0x6cfb980
	void DetachFromControllerPendingDestroy();// 0x6cfb964
	Vector ConsumeMovementInputVector();// 0x6cfb75c
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x6cfb80c
	void AddControllerYawInput(float Val);// 0x6cfb604
	void AddControllerRollInput(float Val);// 0x6cfb558
	void AddControllerPitchInput(float Val);// 0x6cfb6b0

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x230, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x240, Size: 0x10]
	FName StateName;//[Offset: 0x250, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x258, Size: 0x8]
	Character* Character;//[Offset: 0x268, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x270, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2a8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	void UnPossess();// 0x6bad158
	void StopMovement();// 0x6bad13c
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x6bad710
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x6bad088
	void SetIgnoreLookInput(bool bNewLookInput);// 0x6bacf78
	void SetControlRotation(out const Rotator NewRotation);// 0x6bad814
	void ResetIgnoreMoveInput();// 0x6bad06c
	void ResetIgnoreLookInput();// 0x6bacf5c
	void ResetIgnoreInputFlags();// 0x6bacf00
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x505573c
	void ReceivePossess(Pawn* PossessedPawn);// 0x505573c
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x505573c
	void Possess(Pawn* InPawn);// 0x6bad16c
	void OnRep_PlayerState();// 0x6bad594
	void OnRep_Pawn();// 0x6bad5b0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x6bad5cc
	Pawn* K2_GetPawn();// 0x6bad348
	bool IsPlayerController();// 0x6bad2ac
	bool IsMoveInputIgnored();// 0x6bad02c
	bool IsLookInputIgnored();// 0x6bacf1c
	bool IsLocalPlayerController();// 0x6bad250
	bool IsLocalController();// 0x6bad210
	Actor* GetViewTarget();// 0x6bad30c
	Rotator GetDesiredRotation();// 0x6bad2cc
	Rotator GetControlRotation();// 0x6bad8cc
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x6bad37c
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x6bad474
	PlayerController* CastToPlayerController();// 0x6bad560

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x228, Size: 0x4]
	int PlayerId;//[Offset: 0x22c, Size: 0x4]
	byte Ping;//[Offset: 0x230, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 0x1]
	int StartTime;//[Offset: 0x234, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x238, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x248, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x258, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x288, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x300, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x505573c
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x505573c
	void OnRep_UniqueId();// 0x6d1e578
	void OnRep_Score();// 0x6d1e5e8
	void OnRep_PlayerName();// 0x6d1e5cc
	void OnRep_PlayerId();// 0x6d1e594
	void OnRep_bIsInactive();// 0x6d1e5b0
	FString GetPlayerName();// 0x6d1e4c8

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x290, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x300, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x304, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x350, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x380, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x390, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x6b9a1dc
	void StopJumping();// 0x6b9a914
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x6b9a674
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x6b9b898
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x6b9c610
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x6b9be30
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6b9b9f4
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6b9c1d4
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x6b9c894
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x6b9a090
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x6b9a720
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x6b9a344
	void OnRep_RootMotion();// 0x6b9a07c
	void OnRep_ReplicatedBasedMovement();// 0x6b9aa1c
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x6b9aa08
	void OnRep_IsCrouched();// 0x6b9a94c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x505573c
	void OnLanded(out const HitResult Hit);// 0x505573c
	void OnJumped();// 0x6b9a4dc
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6b9a4f8
	void K2_UpdateCustomMovement(float DeltaTime);// 0x505573c
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x505573c
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x505573c
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x505573c
	void Jump();// 0x6b9a930
	bool IsPlayingRootMotion();// 0x6b9a044
	bool IsPlayingNetworkedRootMotionMontage();// 0x6b99fd4
	bool IsJumpProvidingForce();// 0x6b9a85c
	bool HasAnyRootMotion();// 0x6b9a00c
	AnimMontage* GetCurrentMontage();// 0x6b9a640
	Vector GetBaseTranslationOffset();// 0x6b9a9e0
	Rotator GetBaseRotationOffsetRotator();// 0x6b9a968
	float GetAnimRootMotionTranslationScale();// 0x6b99fa0
	void Crouch(bool bClientSimulation);// 0x6b9a290
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6b9b310
	void ClientCheatWalk();// 0x6b9a180
	void ClientCheatGhost();// 0x6b9a148
	void ClientCheatFly();// 0x6b9a164
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6b9ab24
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6b9aff4
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x6b9b560
	void ClientAckGoodMove(float Timestamp);// 0x6b9b7f4
	bool CanJumpInternal();// 0x6b9a89c
	bool CanJump();// 0x6b9a8dc
	bool CanCrouch();// 0x6b9a19c
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x6b9aa38

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x6b4e738

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x6b5a204

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x6baf5b8

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x6baeea0
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x6baefa4

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x505573c
	FString GetNotifyName();// 0x6b57f38

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x700, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x708, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x710, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x718, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x720, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x748, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x754, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x780, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x790, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x7a0, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x7d0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x7d4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x7d5, Size: 0x1]
	byte AnimationMode;//[Offset: 0x7d7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d9, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d9, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d9, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d9, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7da, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7da, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7da, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7da, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7da, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7db, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7db, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7db, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7db, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7db, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7db, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7db, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7dc, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7dc, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7dc, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7dc, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7dc, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dd, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dd, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7dd, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7dd, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7dd, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7dd, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7dd, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7dd, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7de, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7de, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7de, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7de, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7de, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x7e0, Size: 0x2]
	enum MassMode;//[Offset: 0x7e2, Size: 0x1]
	float UniformMass;//[Offset: 0x7e4, Size: 0x4]
	float TotalMass;//[Offset: 0x7e8, Size: 0x4]
	float Density;//[Offset: 0x7ec, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x7f0, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x7f4, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x7f8, Size: 0x4]
	float BendingStiffness;//[Offset: 0x7fc, Size: 0x4]
	float AreaStiffness;//[Offset: 0x800, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x804, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x808, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x80c, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x810, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x820, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x830, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x840, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x918, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x91c, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x928, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x980, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xa50, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x6d55ef4
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x6d55090
	void ToggleDisablePostProcessBlueprint();// 0x6d56500
	void TermBodiesBelow(FName ParentBoneName);// 0x6d53d14
	void SuspendClothingSimulation();// 0x6d551b0
	void Stop();// 0x6d55994
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x6d552c4
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x6d54ec0
	void SetTeleportRotationThreshold(float Threshold);// 0x6d54a38
	void SetTeleportDistanceThreshold(float Threshold);// 0x6d54960
	void SetPosition(float InPos, bool bFireNotifies);// 0x6d5586c
	void SetPlayRate(float Rate);// 0x6d55794
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x6d53bc4
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x6d546e8
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x6d5545c
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x6d53b18
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x6d54404
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x6d545f4
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x6d5641c
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x6d54e14
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x6d52fac
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x6d5309c
	void SetClothMaxDistanceScale(float Scale);// 0x6d551ec
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x6d54830
	void SetAnimClass(class Object NewClass);// 0x6d56370
	void SetAnimationMode(byte InAnimationMode);// 0x6d55c1c
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x6d55a54
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x6d52c6c
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x6d54f94
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x6d54b10
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x6d54d40
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x6d53340
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x6d53494
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x6d531cc
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x6d53c68
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x6d538c0
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x6d539c4
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x6d53728
	void ResumeClothingSimulation();// 0x6d5519c
	void ResetClothTeleportMode();// 0x6d55150
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x6d55cc0
	void ResetAllowedAnimCurveEvaluation();// 0x6d54c18
	void ResetAllBodiesSimulatePhysics();// 0x6d539b0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x6d55af8
	void Play(bool bLooping);// 0x6d559a8
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x6d55590
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x6d5603c
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x6d55f98
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x6d54200
	bool IsPlaying();// 0x6d5595c
	bool IsClothingSimulationSuspended();// 0x6d55164
	bool IsBodyGravityEnabled(FName BoneName);// 0x6d54544
	bool HasValidAnimationInstance();// 0x6d55d64
	float GetTeleportRotationThreshold();// 0x6d54adc
	float GetTeleportDistanceThreshold();// 0x6d54a04
	Vector GetSkeletalCenterOfMass();// 0x6d540d0
	AnimInstance* GetPostProcessInstance();// 0x6d562d4
	float GetPosition();// 0x6d55838
	float GetPlayRate();// 0x6d55760
	float GetMorphTarget(FName MorphTargetName);// 0x6d5539c
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x6d55e48
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x6d55d9c
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x6d56120
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x6d56228
	bool GetDisablePostProcessBlueprint();// 0x6d564c8
	bool GetDisableAnimCurves();// 0x6d54dec
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x6d52ac8
	float GetClothMaxDistanceScale();// 0x6d55290
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x6d5492c
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x6d54108
	AnimInstance* GetAnimInstance();// 0x6d56308
	class Object GetAnimClass();// 0x6d5633c
	byte GetAnimationMode();// 0x6d55be8
	bool GetAllowRigidBodyAnimNode();// 0x6d54f6c
	bool GetAllowedAnimCurveEvaluate();// 0x6d54d1c
	void ForceClothNextUpdateTeleportAndReset();// 0x6d551c4
	void ForceClothNextUpdateTeleport();// 0x6d551d8
	FName FindConstraintBoneName(int ConstraintIndex);// 0x6d52f00
	void ClearMorphTargets();// 0x6d55448
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x6d52dd8
	void BindClothToMasterPoseComponent();// 0x6d5513c
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x6d54c2c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x6d53db8
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x6d53f44
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x6d535e8

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x4e8, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x4f0, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x4f8, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x600, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x608, Size: 0x4]
	int MinLodModel;//[Offset: 0x60c, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x61c, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x628, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x65c, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65e, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65e, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x65e, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x65e, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x65e, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x65e, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65f, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65f, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65f, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65f, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x65f, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x65f, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x65f, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x65f, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x660, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x660, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x660, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x660, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x660, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x660, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x661, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x661, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x664, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x678, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x6a0, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x6d5c3fc
	void UnHideBoneByName(FName BoneName);// 0x6d5ba94
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x6d5bf70
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x6d5bdb0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x6d5b86c
	void ShowAllMaterialSections(int LODIndex);// 0x6d5b7c8
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x6d5c7b4
	bool SetSkinWeightProfile(FName InProfileName);// 0x6d5c4b4
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x6d5c608
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x6d5cbc4
	void SetRenderStatic(bool bNewValue);// 0x6d5b62c
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x6d5d2f0
	void SetMinLOD(int InNewMinLOD);// 0x6d5d218
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x6d5c2d0
	void SetForcedLOD(int InNewForcedLOD);// 0x6d5d174
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x6d5cfe8
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x6d5d094
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x6d5cf44
	bool IsUsingSkinWeightProfile();// 0x6d5c3c0
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x6d5b6d8
	bool IsBoneHiddenByName(FName BoneName);// 0x6d5b9e4
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x6d5bb38
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x6d5c8bc
	FName GetSocketBoneName(FName InSocketName);// 0x6d5cd0c
	Vector GetRefPosePosition(int BoneIndex);// 0x6d5c130
	FName GetParentBone(FName BoneName);// 0x6d5cb18
	int GetNumLODs();// 0x6d5d2bc
	int GetNumBones();// 0x6d5cf10
	int GetForcedLOD();// 0x6d5d140
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x6d5ca1c
	FName GetCurrentSkinWeightProfileName();// 0x6d5c3e0
	FName GetBoneName(int BoneIndex);// 0x6d5cdb8
	int GetBoneIndex(FName BoneName);// 0x6d5ce64
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x6d5bc20
	void ClearVertexColorOverride(int LODIndex);// 0x6d5c710
	void ClearSkinWeightProfile();// 0x6d5c4a0
	void ClearSkinWeightOverride(int LODIndex);// 0x6d5c564
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x6d5c1e0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x4b0, Size: 0x10]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	MaterialInterface* MultiplePassMaterial;//[Offset: 0x4c8, Size: 0x8]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e0, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x6cc814c
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x6cc8230
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x6cc8318
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x6cc8458
	FName[] GetMaterialSlotNames();// 0x6cc8510
	MaterialInterface*[] GetMaterials();// 0x6cc867c
	int GetMaterialIndex(FName MaterialSlotName);// 0x6cc85c8

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	float MinScreenSize;//[Offset: 0x140, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x144, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x145, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x146, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x147, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x147, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x147, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x147, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x147, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x6d4e920
	int NumSockets();// 0x6d4e3b0
	FString[] K2_GetAllMorphTargetNames();// 0x6d4e75c
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x6d4e20c
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x6d4e304
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x6d4e874
	BoxSphereBounds GetImportedBounds();// 0x6d4e9c4
	BoxSphereBounds GetBounds();// 0x6d4ea30
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x6d4e3e4
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x6d4e5ac
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x6d4e6b0

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x6d5a3dc
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x6d5a500

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x6b42ff0
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x6b4460c
	Pawn* TryGetPawnOwner();// 0x6b4629c
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x6b459a4
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x6b46110
	void SetRootMotionMode(byte Value);// 0x6b44410
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x6b4603c
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x6b45f68
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x6b43308
	void SavePoseSnapshot(FName SnapshotName);// 0x6b461f0
	void ResetDynamics(enum InTeleportType);// 0x6b42ad8
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x6b45a8c
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x6b45d08
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x6b45520
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x6b45608
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x6b44c60
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x6b45000
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x6b450e8
	void Montage_Resume(const AnimMontage* Montage);// 0x6b453d8
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x6b456f0
	void Montage_Pause(const AnimMontage* Montage);// 0x6b4547c
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x6b45210
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x6b452f4
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x6b44ea0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x6b44f50
	float Montage_GetPosition(const AnimMontage* Montage);// 0x6b44d48
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x6b44a58
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x6b44bb0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x6b44df4
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x6b44b04
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x6b430ec
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x6b44754
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x6b446b0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x6b42c38
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x6b458b4
	bool IsAnyMontagePlaying();// 0x6b44a20
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x6b42db8
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x6b42ea8
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x6b42b7c
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x6b439d4
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x6b43ac0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x6b43710
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x6b437fc
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x6b438e8
	bool GetReceiveNotifiesFromLinkedInstances();// 0x6b460f0
	bool GetPropagateNotifiesToLinkedInstances();// 0x6b4601c
	SkeletalMeshComponent* GetOwningComponent();// 0x6b45f00
	Actor* GetOwningActor();// 0x6b45f34
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x6b44560
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x6b444b4
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x6b44838
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x6b44940
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x6b43bac
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x6b43c98
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x6b43d84
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x6b43f1c
	float GetInstanceMachineWeight(int MachineIndex);// 0x6b44008
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x6b43e70
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x6b440b4
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x6b44160
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x6b4420c
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x6b442b8
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x6b44364
	float GetCurveValue(FName CurveName);// 0x6b43664
	FName GetCurrentStateName(int MachineIndex);// 0x6b433f0
	AnimMontage* GetCurrentActiveMontage();// 0x6b449ec
	void GetAllCurveNames(out FName[] OutNames);// 0x6b4349c
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x6b4355c
	void ClearMorphTargets();// 0x6b432f4
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x6b431e8
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x505573c
	void BlueprintPostEvaluateAnimation();// 0x505573c
	void BlueprintLinkedAnimationLayersInitialized();// 0x505573c
	void BlueprintInitializeAnimation();// 0x505573c
	void BlueprintBeginPlay();// 0x505573c

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x6bb1004

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x6bafb98
	LinearColor GetClampedLinearColorValue(float InTime);// 0x6bafae0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x62453d8
	void PhysicsAssetUpdated();// 0x62454a0
	void EnableGravityOverride(out const Vector InVector);// 0x6245320
	void DisableGravityOverride();// 0x6245304
	void ClothConfigUpdated();// 0x6245484

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x505573c
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x505573c
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x505573c
	FString GetNotifyName();// 0x6b58da8

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x386, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3ac, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5a0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x5e0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x6ba15b0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x6ba1688
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x6ba1e90
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x6ba2048
	void SetGroupsToIgnore(int GroupFlags);// 0x6ba20f8
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x6ba219c
	void SetGroupsToAvoid(int GroupFlags);// 0x6ba224c
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x6ba22f0
	void SetAvoidanceGroup(int GroupFlags);// 0x6ba23a0
	void SetAvoidanceEnabled(bool bEnable);// 0x6ba1f9c
	float K2_GetWalkableFloorZ();// 0x6ba1654
	float K2_GetWalkableFloorAngle();// 0x6ba172c
	float K2_GetModifiedMaxAcceleration();// 0x6ba1b50
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x6ba1484
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x6ba1290
	bool IsWalking();// 0x6ba1e50
	bool IsWalkable(out const HitResult Hit);// 0x6ba1760
	float GetValidPerchRadius();// 0x6ba1844
	float GetPerchRadiusThreshold();// 0x6ba1878
	PrimitiveComponent* GetMovementBase();// 0x6ba1e00
	float GetMinAnalogSpeed();// 0x6ba1b8c
	float GetMaxJumpHeightWithJumpTime();// 0x6ba1bc8
	float GetMaxJumpHeight();// 0x6ba1c04
	float GetMaxBrakingDeceleration();// 0x6ba1ad8
	float GetMaxAcceleration();// 0x6ba1b14
	Vector GetLastUpdateVelocity();// 0x6ba2444
	Rotator GetLastUpdateRotation();// 0x6ba246c
	Vector GetLastUpdateLocation();// 0x6ba24a8
	Vector GetImpartedMovementBaseVelocity();// 0x6ba1dc0
	Vector GetCurrentAcceleration();// 0x6ba1aa0
	Character* GetCharacterOwner();// 0x6ba1f80
	float GetAnalogInputModifier();// 0x6ba1a6c
	void DisableMovement();// 0x6ba1e34
	void ClearAccumulatedForces();// 0x6ba1a50
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6ba1068
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x6ba1c40
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x6ba1958
	void AddForce(Vector Force);// 0x6ba18ac

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x6cfe34c
	bool IsMoveInputIgnored();// 0x6cfe3b8
	Vector GetPendingInputVector();// 0x6cfe470
	Pawn* GetPawnOwner();// 0x6cfe384
	Vector GetLastInputVector();// 0x6cfe438
	Vector ConsumeInputVector();// 0x6cfe3f8
	void AddInputVector(Vector WorldVector, bool bForce);// 0x6cfe4a8

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x6cd5110
	void StopActiveMovement();// 0x6cd5160
	bool IsSwimming();// 0x6cd5010
	bool IsMovingOnGround();// 0x6cd5050
	bool IsFlying();// 0x6cd4fd0
	bool IsFalling();// 0x6cd5090
	bool IsCrouching();// 0x6cd50d0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0x6ccdea0
	void SnapUpdatedComponentToPlane();// 0x6ccd490
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x6ccdd0c
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x6ccd808
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x6ccd9a0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x6ccd8b4
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x6ccd754
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x6ccda68
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x6ccddb8
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x6ccdb14
	float K2_GetModifiedMaxSpeed();// 0x6ccdf74
	float K2_GetMaxSpeedModifier();// 0x6ccdfb0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x6ccdebc
	Vector GetPlaneConstraintOrigin();// 0x6ccd6d4
	Vector GetPlaneConstraintNormal();// 0x6ccd714
	enum GetPlaneConstraintAxisSetting();// 0x6ccda4c
	PhysicsVolume* GetPhysicsVolume();// 0x6ccde64
	float GetMaxSpeed();// 0x6ccdfec
	float GetGravityZ();// 0x6cce028
	Vector ConstrainNormalToPlane(Vector Normal);// 0x6ccd4ac
	Vector ConstrainLocationToPlane(Vector Location);// 0x6ccd564
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x6ccd61c

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x4c8, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x4cc, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x6b98ed0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x6b98ddc
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x6b98ce8
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x6b9877c
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x6b9888c
	float GetUnscaledCapsuleRadius();// 0x6b989d4
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x6b98994
	float GetUnscaledCapsuleHalfHeight();// 0x6b989b8
	float GetShapeScale();// 0x6b9873c
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x6b989f0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x6b98b30
	float GetScaledCapsuleRadius();// 0x6b98cb8
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x6b98c54
	float GetScaledCapsuleHalfHeight();// 0x6b98c94

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x4b0, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x4b8, Size: 0x8]
	Color ShapeColor;//[Offset: 0x4c0, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c4, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c4, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c4, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2b8, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c0, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2c8, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d0, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2d8, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e0, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2ec, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x304, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x310, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x320, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x334, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x338, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x344, Size: 0xc]
	int ClientCap;//[Offset: 0x350, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x358, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x360, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x368, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x370, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f1, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x438, Size: 0x8]
	float InputYawScale;//[Offset: 0x44c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x450, Size: 0x4]
	float InputRollScale;//[Offset: 0x454, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x45c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x460, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x478, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x47a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x508, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x528, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x580, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x590, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x6d10190
	bool WasInputKeyJustPressed(Key Key);// 0x6d1031c
	void ToggleSpeaking(bool bInSpeaking);// 0x6d154e0
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x6d1238c
	void SwitchLevel(FString URL);// 0x6d16554
	void StopHapticEffect(enum Hand);// 0x6d12170
	void StartFire(byte FireModeNum);// 0x6d15648
	void SetVirtualJoystickVisibility(bool bVisible);// 0x6d0f4ec
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x6d0f27c
	void SetName(FString S);// 0x6d1660c
	void SetMouseLocation(const int X, const int Y);// 0x6d156f4
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x6d12f60
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x6d12048
	void SetDisableHaptics(bool bNewDisabled);// 0x6d11f94
	void SetControllerLightColor(Color Color);// 0x6d11ef4
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6d0ee08
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x6d0f158
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x6d0f060
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x6d10a18
	void ServerViewPrevPlayer();// 0x6d10b10
	void ServerViewNextPlayer();// 0x6d10b6c
	void ServerVerifyViewTarget();// 0x6d10bc8
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x6d10c24
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x6d10cfc
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x6d10dd4
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x6d14f74
	void ServerToggleAILogging();// 0x6d10838
	void ServerShortTimeout();// 0x6d10f04
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x6d16d34
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x6d11018
	void ServerRestartPlayer();// 0x6d11148
	void ServerPause();// 0x6d111a4
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x6d11200
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x6d1521c
	void ServerExecRPC(FString Msg);// 0x6d169fc
	void ServerExec(FString Msg);// 0x6d1694c
	void ServerCheckClientPossessionReliable();// 0x6d10f60
	void ServerCheckClientPossession();// 0x6d10fbc
	void ServerChangeName(FString S);// 0x6d112d4
	void ServerCamera(FName NewMode);// 0x6d113bc
	void ServerAcknowledgePossession(Pawn* P);// 0x6d114a0
	void SendToConsole(FString Command);// 0x6d14994
	void RestartLevel();// 0x6d16b9c
	void ResetControllerLightColor();// 0x6d11ee0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x6d157d8
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x6d12214
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x6d12470
	void Pause();// 0x6d166c4
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x6d0ed54
	void LocalTravel(FString URL);// 0x6d16ae4
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x6d12928
	bool IsInputKeyDown(Key Key);// 0x6d104a8
	void GetViewportSize(out int SizeX, out int SizeY);// 0x6d1307c
	SpectatorPawn* GetSpectatorPawn();// 0x6d0ed38
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x6d0fa24
	Vector GetInputVectorKeyState(Key Key);// 0x6d0fe7c
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6d0fcd8
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x6d0f798
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x6d0fb3c
	float GetInputKeyTimeDown(Key Key);// 0x6d0f89c
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6d0f64c
	float GetInputAnalogKeyState(Key Key);// 0x6d10008
	HUD* GetHUD();// 0x6d13048
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x6d15bcc
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6d15d98
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6d15f48
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x6d160f8
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6d1627c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x6d163e8
	Vector GetFocalLocation();// 0x6d0ecf8
	void FOV(float NewFOV);// 0x6d16bb8
	void EnableCheats();// 0x6d16c64
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x6d15928
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x6d15abc
	void ConsoleKey(Key Key);// 0x6d14a4c
	void ClientWasKicked(const FText KickReason);// 0x6d11820
	void ClientVoiceHandshakeComplete();// 0x6d154c4
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x6d11928
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x6d119e0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x6d14bd4
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x6d11bc8
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x6d11d58
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x6d10894
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x6d12740
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x6d12b00
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x6d12bf0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x6d12ce8
	void ClientStartOnlineSession();// 0x6d11804
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6d12db0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x6d12e5c
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x6d16c80
	void ClientSetHUD(class HUD NewHUDClass);// 0x6d13180
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x6d1322c
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x6d13360
	void ClientSetCameraMode(FName NewCamMode);// 0x6d1350c
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x6d135b8
	void ClientSetBlockOnAsyncLoading();// 0x6d13778
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x6d1678c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x6d16894
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x6d1173c
	void ClientRestart(Pawn* NewPawn);// 0x6d13794
	void ClientReset();// 0x6d13840
	void ClientRepObjRef(Object* Object);// 0x6d166e0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x6d11584
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x6d1385c
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x6d139e0
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x6d13b28
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x6d13c98
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x6d1282c
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x6d13dc8
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6d13eac
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x6d14020
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x6d14da4
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x6d14300
	void ClientIgnoreMoveInput(bool bIgnore);// 0x6d14440
	void ClientIgnoreLookInput(bool bIgnore);// 0x6d144f4
	void ClientGotoState(FName NewState);// 0x6d145a8
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x6d14654
	void ClientForceGarbageCollection();// 0x6d1474c
	void ClientFlushLevelStreaming();// 0x6d14768
	void ClientEndOnlineSession();// 0x6d117e8
	void ClientEnableNetworkVoice(bool bEnable);// 0x6d15594
	void ClientCommitMapChange();// 0x6d1477c
	void ClientClearCameraLensEffects();// 0x6d12d94
	void ClientCapBandwidth(int Cap);// 0x6d14798
	void ClientCancelPendingMapChange();// 0x6d14844
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x6d14860
	void ClearAudioListenerOverride();// 0x6d0f144
	void ClearAudioListenerAttenuationOverride();// 0x6d0f04c
	bool CanRestartPlayer();// 0x6d0f00c
	void Camera(FName NewMode);// 0x6d0f440
	void AddYawInput(float Val);// 0x6d106e0
	void AddRollInput(float Val);// 0x6d10634
	void AddPitchInput(float Val);// 0x6d1078c
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x6d0f5a0

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x138, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x148, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x158, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x180, Size: 0x10]
	Margin Padding;//[Offset: 0x190, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b0, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c0, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d0, Size: 0x8]
	int Priority;//[Offset: 0x1d8, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1dc, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1dc, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1dc, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1dc, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1e8, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f0, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1f8, Size: 0x10]
	void UnregisterInputComponent();// 0x6082090
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x6083a64
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x60837e0
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x60839c0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x608373c
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x505573c
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x60820cc
	void StopListeningForAllInputActions();// 0x60820b8
	void StopAnimationsAndLatentActions();// 0x6083c44
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x6082974
	void StopAllAnimations();// 0x6082960
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x6084008
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x6082550
	void SetPadding(Margin InPadding);// 0x60830e0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x6083ca0
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x6082638
	void SetInputActionPriority(int NewPriority);// 0x6081f3c
	void SetInputActionBlocking(bool bShouldBlock);// 0x6081e90
	void SetForegroundColor(SlateColor InForegroundColor);// 0x6083188
	void SetDesiredSizeInViewport(Vector2D Size);// 0x6083f68
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x608331c
	void SetAnchorsInViewport(Anchors Anchors);// 0x6083ec0
	void SetAlignmentInViewport(Vector2D Alignment);// 0x6083e20
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x60824ac
	void RemoveFromViewport();// 0x60840f4
	void RegisterInputComponent();// 0x60820a4
	void PreConstruct(bool IsDesignTime);// 0x505573c
	void PlaySound(SoundBase* SoundToPlay);// 0x6082358
	void PlayEnterAnim();// 0x505573c
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x6082c90
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x6082a18
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x6082b54
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x6082ed8
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x60828b4
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x505573c
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x505573c
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x505573c
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x505573c
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x505573c
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x505573c
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x505573c
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x505573c
	void OnPaint(out PaintContext Context);// 0x505573c
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x505573c
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x505573c
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x505573c
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x505573c
	void OnMouseCaptureLost();// 0x505573c
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x505573c
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x505573c
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x505573c
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x505573c
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x505573c
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x505573c
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x505573c
	void OnInitialized();// 0x505573c
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x505573c
	void OnFocusLost(FocusEvent InFocusEvent);// 0x505573c
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x505573c
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x505573c
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x505573c
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x505573c
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x505573c
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x505573c
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x608346c
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x60833c0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x505573c
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x505573c
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x60821b4
	bool IsPlayingAnimation();// 0x6082334
	bool IsListeningForInputAction(FName ActionName);// 0x6081fe0
	bool IsInViewport();// 0x6083d44
	bool IsInteractable();// 0x505573c
	bool IsAnyAnimationPlaying();// 0x6082720
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x60823fc
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x6082758
	Pawn* GetOwningPlayerPawn();// 0x6083c6c
	HUD* GetOwningHUD();// 0x6081e5c
	bool GetIsVisible();// 0x6083d7c
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x6082808
	Anchors GetAnchorsInViewport();// 0x6083de8
	Vector2D GetAlignmentInViewport();// 0x6083db4
	void DoPlayEnterAnim(bool InPlayFlag);// 0x6083518
	void Destruct();// 0x505573c
	void Construct();// 0x505573c
	void CancelLatentActions();// 0x6083c58
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x6083b54
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x60838d0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x60835c4
	void AddToViewport(int ZOrder);// 0x60841b8
	bool AddToPlayerScreen(int ZOrder);// 0x6084108

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	byte DetailMode;//[Offset: 0xc8, Size: 0x1]
	WidgetNavigation* Navigation;//[Offset: 0xd0, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd8, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x120, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x608e780
	void SetUserFocus(PlayerController* PlayerController);// 0x608e044
	void SetToolTipText(out const FText InToolTipText);// 0x608e9f4
	void SetToolTip(Widget* Widget);// 0x608e950
	void SetRenderTranslation(Vector2D Translation);// 0x608ec90
	void SetRenderTransformPivot(Vector2D Pivot);// 0x608ebf0
	void SetRenderTransformAngle(float Angle);// 0x608ed64
	void SetRenderTransform(WidgetTransform InTransform);// 0x608ef48
	void SetRenderShear(Vector2D Shear);// 0x608ee08
	void SetRenderScale(Vector2D Scale);// 0x608eea8
	void SetRenderOpacity(float InOpacity);// 0x608e6a8
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x608dc04
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x608da24
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x608db14
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x608dcec
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x608ddd4
	void SetKeyboardFocus();// 0x608e2cc
	void SetIsEnabled(bool bInIsEnabled);// 0x608eb04
	void SetFocus();// 0x608e0e8
	void SetDetailMode(byte InDetailMode);// 0x608e604
	void SetCursor(byte InCursor);// 0x608e8ac
	void SetClipping(enum InClipping);// 0x608e52c
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x608df00
	void ResetCursor();// 0x608e898
	void RemoveFromParent();// 0x608d9d4
	EventReply OnReply__DelegateSignature();// 0x505573c
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x505573c
	bool IsVisible();// 0x608e860
	bool IsHovered();// 0x608e440
	void InvalidateLayoutAndVolatility();// 0x608e01c
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x608e0fc
	bool HasUserFocus(PlayerController* PlayerController);// 0x608e21c
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x608e2e0
	bool HasMouseCapture();// 0x608e3d0
	bool HasKeyboardFocus();// 0x608e408
	bool HasFocusedDescendants();// 0x608e1ac
	bool HasAnyUserFocus();// 0x608e1e4
	Widget* GetWidget__DelegateSignature();// 0x505573c
	enum GetVisibility();// 0x608e82c
	Geometry GetTickSpaceGeometry();// 0x608d964
	FText GetText__DelegateSignature();// 0x505573c
	enum GetSlateVisibility__DelegateSignature();// 0x505573c
	SlateColor GetSlateColor__DelegateSignature();// 0x505573c
	SlateBrush GetSlateBrush__DelegateSignature();// 0x505573c
	float GetRenderTransformAngle();// 0x608ed30
	float GetRenderOpacity();// 0x608e74c
	PanelWidget* GetParent();// 0x608d9f0
	Geometry GetPaintSpaceGeometry();// 0x608d92c
	PlayerController* GetOwningPlayer();// 0x608d8bc
	LocalPlayer* GetOwningLocalPlayer();// 0x608d880
	byte GetMouseCursor__DelegateSignature();// 0x505573c
	LinearColor GetLinearColor__DelegateSignature();// 0x505573c
	bool GetIsEnabled();// 0x608ebb8
	int GetInt32__DelegateSignature();// 0x505573c
	GameInstance* GetGameInstance();// 0x608d8f8
	float GetFloat__DelegateSignature();// 0x505573c
	Vector2D GetDesiredSize();// 0x608dfe8
	enum GetClipping();// 0x608e5d0
	enum GetCheckBoxState__DelegateSignature();// 0x505573c
	Geometry GetCachedGeometry();// 0x608d99c
	bool GetBool__DelegateSignature();// 0x505573c
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x505573c
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x505573c
	void ForceVolatile(bool bForce);// 0x608e480
	void ForceLayoutPrepass();// 0x608e030

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	Margin Margin;//[Offset: 0x1c, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x58, Size: 0x8]
	FName ResourceName;//[Offset: 0x60, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x68, Size: 0x14]
	byte DrawAs;//[Offset: 0x7c, Size: 0x1]
	byte Tiling;//[Offset: 0x7d, Size: 0x1]
	byte Mirroring;//[Offset: 0x7e, Size: 0x1]
	byte ImageType;//[Offset: 0x7f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x130, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x606b9e4
	bool RemoveChild(Widget* Content);// 0x606b888
	bool HasChild(Widget* Content);// 0x606ba94
	bool HasAnyChildren();// 0x606b850
	int GetChildrenCount();// 0x606bd4c
	int GetChildIndex(const Widget* Content);// 0x606bb44
	Widget* GetChildAt(int Index);// 0x606bca0
	Widget*[] GetAllChildren();// 0x606bbf0
	void ClearChildren();// 0x606b834
	PanelSlot* AddChild(Widget* Content);// 0x606b938

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	byte DetailMode;//[Offset: 0x378, Size: 0x1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x609061c
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x6090398
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x6090578
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x60902f4
	void SetDetailMode(byte InDetailMode);// 0x6090248
	float GetStartTime();// 0x6090830
	float GetEndTime();// 0x60907fc
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x609070c
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x6090488

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x5e51610
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x5e5170c

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x6080778
	FName GetUserTag();// 0x608081c

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x6c072d0
	bool WasControllerKeyJustPressed(Key Key);// 0x6c0745c
	bool IsControllerKeyDown(Key Key);// 0x6c075e8
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x6c06e18
	Vector GetControllerVectorKeyState(Key Key);// 0x6c06fbc
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x6c06b8c
	float GetControllerKeyTimeDown(Key Key);// 0x6c06c90
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x6c06a40
	float GetControllerAnalogKeyState(Key Key);// 0x6c07148

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x6d1db60
	void SetBind(FName BindName, FString Command);// 0x6d1da6c
	void InvertAxisKey(const Key AxisKey);// 0x6d1d8ec
	void InvertAxis(const FName AxisName);// 0x6d1d848
	void ClearSmoothing();// 0x6d1d834

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x6d72f10
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x6d72dc8
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x6d73134
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x6d72e6c
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x6d72bd4
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x6d72cbc

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x6059b34
	void Dragged(out const PointerEvent PointerEvent);// 0x605986c
	void DragCancelled(out const PointerEvent PointerEvent);// 0x60599d0

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x6bfc08c
	void ShowTitleSafeArea();// 0x6bfc070
	void SetConsoleTarget(int PlayerIndex);// 0x6bfbfc4

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x505573c
	void ReceiveInit();// 0x505573c
	void HandleTravelError(byte FailureType);// 0x505573c
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x505573c
	void DebugRemovePlayer(int ControllerId);// 0x6be411c
	void DebugCreatePlayer(int ControllerId);// 0x6be41c8

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x228, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x234, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x240, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x258, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x268, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x278, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x280, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x288, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x298, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2a0, Size: 0x8]
	void ShowHUD();// 0x6c00ff8
	void ShowDebugToggleSubCategory(FName Category);// 0x6c00ea8
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x6c00e04
	void ShowDebug(FName DebugType);// 0x6c00f4c
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x6c00940
	void RemoveAllDebugStrings();// 0x6c00a30
	void ReceiveHitBoxRelease(const FName BoxName);// 0x505573c
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x505573c
	void ReceiveHitBoxClick(const FName BoxName);// 0x505573c
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x505573c
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x505573c
	Vector Project(Vector Location);// 0x6bff1a4
	void PreviousDebugTarget();// 0x6bfeb8c
	void NextDebugTarget();// 0x6bfeba8
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x6c0075c
	PlayerController* GetOwningPlayerController();// 0x6bfebf8
	Pawn* GetOwningPawn();// 0x6bfebc4
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x6bfede0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x6bffb58
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6bffd10
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x6c00514
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x6c00174
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x6bff254
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x6bff548
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x6bff784
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x6c00320
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x6bff024
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x6bfec2c
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x6c00a44

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x6b95e18
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x6b95f50
	Vector K2_Project(Vector WorldLocation);// 0x6b96188
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x6b96524
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x6b97230
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x6b96c4c
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x6b96238
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x6b963d8
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x6b97014
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x6b974dc
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x6b96670
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x6b967e0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x6b9604c

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x228, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8]
	float DefaultFOV;//[Offset: 0x240, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x248, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x250, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x620]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8c0, Size: 0x620]
	TViewTarget ViewTarget;//[Offset: 0xee0, Size: 0x630]
	TViewTarget PendingViewTarget;//[Offset: 0x1510, Size: 0x630]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1b70, Size: 0x620]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2190, Size: 0x620]
	CameraModifier*[] ModifierList;//[Offset: 0x27b0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x27c0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x27d0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x27d4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x27e0, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2800, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2810, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2818, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2858, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2878, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2888, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2898, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28a0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28a0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28a0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28a0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28a1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x28a4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x28a8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x28ac, Size: 0x4]
	float ViewYawMax;//[Offset: 0x28b0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x28b4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x28b8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x28c0, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x6d0d308
	void StopCameraFade();// 0x6d0ce3c
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x6d0c7e8
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x6d0d118
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x6d0d210
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x6d0c8e0
	void StopAllCameraShakes(bool bImmediately);// 0x6d0d064
	void StopAllCameraAnims(bool bImmediate);// 0x6d0c734
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x6d0ce58
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x6d0cd04
	void SetGameCameraCutThisFrame();// 0x6d0c710
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x6d0d8a8
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x6d0d68c
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x6d0d400
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6d0d4f4
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x6d0c9d8
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x6d0db74
	void OnPhotographySessionStart();// 0x6d0db58
	void OnPhotographySessionEnd();// 0x6d0db3c
	void OnPhotographyMultiPartCaptureStart();// 0x6d0db20
	void OnPhotographyMultiPartCaptureEnd();// 0x6d0db04
	PlayerController* GetOwningPlayerController();// 0x6d0dac8
	float GetFOVAngle();// 0x6d0d86c
	Rotator GetCameraRotation();// 0x6d0d82c
	Vector GetCameraLocation();// 0x6d0d7ec
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x6d0d960
	void ClearCameraLensEffects();// 0x6d0d670
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x505573c
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x6d0da14
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x6d0d738

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x505573c
	void ReceivePlayShake(float Scale);// 0x505573c
	bool ReceiveIsFinished();// 0x6b91448
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x505573c

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x580]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5c0, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellOpacity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellFadeness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	byte BloomMethod;//[Offset: 0x17, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x18, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	float NightfellRadius;//[Offset: 0x60, Size: 0x4]
	float NightfellOpacity;//[Offset: 0x64, Size: 0x4]
	float NightfellFadeness;//[Offset: 0x68, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x190, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x1a0, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1b0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1b4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1b8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1bc, Size: 0x4]
	float FilmSlope;//[Offset: 0x1c0, Size: 0x4]
	float FilmToe;//[Offset: 0x1c4, Size: 0x4]
	float FilmShoulder;//[Offset: 0x1c8, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x1cc, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1d0, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1d4, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1e4, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1f4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1f8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1fc, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x200, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x210, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x220, Size: 0x10]
	float FilmContrast;//[Offset: 0x230, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x234, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x238, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x23c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x240, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x250, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x254, Size: 0x4]
	float BloomIntensity;//[Offset: 0x258, Size: 0x4]
	float BloomThreshold;//[Offset: 0x25c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x260, Size: 0x4]
	float Bloom1Size;//[Offset: 0x264, Size: 0x4]
	float Bloom2Size;//[Offset: 0x268, Size: 0x4]
	float Bloom3Size;//[Offset: 0x26c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x270, Size: 0x4]
	float Bloom5Size;//[Offset: 0x274, Size: 0x4]
	float Bloom6Size;//[Offset: 0x278, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x27c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x28c, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2cc, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2dc, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2e0, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2e8, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2f0, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2f4, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2f8, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2fc, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x300, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x308, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x30c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x31c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x32c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x330, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x338, Size: 0x4]
	float CameraISO;//[Offset: 0x33c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x340, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x344, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x348, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x34c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x350, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x358, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x360, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x368, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x36c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x370, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x374, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x378, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x37c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x380, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x384, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x388, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x38c, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x390, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3a0, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3a4, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3a8, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3b0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x430, Size: 0x4]
	float GrainJitter;//[Offset: 0x434, Size: 0x4]
	float GrainIntensity;//[Offset: 0x438, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x440, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x444, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x44c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x450, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x454, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x45c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x460, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x464, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x468, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x46c, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x474, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x478, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x488, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x48c, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x490, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x494, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x498, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4a0, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x4ac, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4b0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4b4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4b8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4bc, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4c0, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x4c4, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4c8, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4cc, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4d0, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4d4, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4d8, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4dc, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4e0, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4e4, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4e8, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4ec, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4f0, Size: 0x4]
	float LPVSize;//[Offset: 0x4f4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4f8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4fc, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x500, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x504, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x508, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x50c, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x510, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x514, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x518, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x51c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x520, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x524, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x528, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x52c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x530, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x534, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x538, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x53c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x53e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x540, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x544, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x548, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x54c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x550, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x554, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x558, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x55c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x560, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x568, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x580]
	float BasePostProcessBlendWeight;//[Offset: 0x5e0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x6b8ecb0
	void SetScale(float NewDuration);// 0x6b8eb68
	void SetDuration(float NewDuration);// 0x6b8ec0c

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x284, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x288, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x28c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x290, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x6b95458
	void PlayCameraShake(class CameraShake InCameraShake);// 0x6b95504
	void Play();// 0x6b955a8
	float GetAttenuationFactor(out const Vector Location);// 0x6b953a0

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x6b903b8
	Actor* GetViewTarget();// 0x6b9037c
	void EnableModifier();// 0x6b902ac
	void DisableModifier(bool bImmediate);// 0x6b902c8
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x505573c
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x505573c

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30]
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x228, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x238, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x248, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x258, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x268, Size: 0x10]
	void ToggleActive();// 0x6bc74d4
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6bc7224
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6bc73f0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6bc6f78
	void SetFloatParameter(FName ParameterName, float Param);// 0x6bc7308
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6bc7140
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x6bc705c
	void OnRep_bCurrentlyActive();// 0x6bc7510
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x6bc752c
	bool IsActive();// 0x6bc749c
	void Deactivate();// 0x6bc74e8
	void Activate();// 0x6bc74fc

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x4b0, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x4b8, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x4c8, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d9, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d9, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4d9, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4d9, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4d9, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4da, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4da, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4da, Size: 0x1]
	byte LODMethod;//[Offset: 0x4e5, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x4e6, Size: 0x1]
	float SignificanceValue;//[Offset: 0x4e8, Size: 0x4]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x4f0, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x500, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x510, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x520, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x530, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	Vector OldPosition;//[Offset: 0x544, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x550, Size: 0xc]
	float WarmupTime;//[Offset: 0x55c, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x560, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x568, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x570, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x590, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x5a8, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x600, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x608, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x610, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x611, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x612, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x640, Size: 0x10]
	float LastFrameTickTime;//[Offset: 0x718, Size: 0x4]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6cf8a28
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6cf8d48
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6cf8dec
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x6cf98cc
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x6cf9798
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x6cf99fc
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x6cf9c60
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x6cf9b2c
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x6cf9d90
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x6cf9ec0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x6cf9fac
	int GetNumActiveParticles();// 0x6cf8d14
	MaterialInterface* GetNamedMaterial(FName InName);// 0x6cf8880
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x6cf9020
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x6cf8ed0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x6cf9168
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x6cf9400
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x6cf92b0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x6cf9548
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x6cf9690
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x6cf86d0
	void EndTrails();// 0x6cf8b94
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x6cf8934
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x6cf8ba8

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6cf7e44
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x6cf78cc
	void SetFloatParameter(FName ParameterName, float Param);// 0x6cf7f30
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x6cf7b38
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x6cf7d58
	void SetBoolParameter(FName ParameterName, bool Param);// 0x6cf8020
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x6cf7980
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x6cf7c6c
	void ReleaseToPool();// 0x6cf78b0
	FXSystemAsset* GetFXSystemAsset();// 0x6cf7c30

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x6cf3df8

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x610]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x610]
	PlayerState* PlayerState;//[Offset: 0x620, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x228, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float AspectRatio;//[Offset: 0x24c, Size: 0x4]
	float FOVAngle;//[Offset: 0x250, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x254, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x580]
	int GetAutoActivatePlayerIndex();// 0x6b8e584

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x284, Size: 0x4]
	float OrthoWidth;//[Offset: 0x288, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x28c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x290, Size: 0x4]
	float AspectRatio;//[Offset: 0x294, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x298, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x299, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2d0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x300, Size: 0x580]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x6b8f808
	void SetProjectionMode(byte InProjectionMode);// 0x6b8f768
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x6b8f6c8
	void SetOrthoWidth(float InOrthoWidth);// 0x6b8fb50
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x6b8fab0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x6b8fa10
	void SetFieldOfView(float InFieldOfView);// 0x6b8fbf0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x6b8f8bc
	void SetAspectRatio(float InAspectRatio);// 0x6b8f970
	void RemoveBlendable(interface classNone InBlendableObject);// 0x6b8f2c0
	void OnCameraMeshHiddenChanged();// 0x6b8f2ac
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x6b8f55c
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6b8f3ec

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x284, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x288, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x290, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	void TurnAtRate(float Rate);// 0x6bb8704
	void MoveUp_World(float Val);// 0x6bb87b0
	void MoveRight(float Val);// 0x6bb885c
	void MoveForward(float Val);// 0x6bb8908
	void LookUpAtRate(float Rate);// 0x6bb8658

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x4c8, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x6d74df4
	float GetUnscaledSphereRadius();// 0x6d74d90
	float GetShapeScale();// 0x6d74d50
	float GetScaledSphereRadius();// 0x6d74dac

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x4e4, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x4e8, Size: 0x4]
	int MinLOD;//[Offset: 0x4ec, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x4f0, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x4f8, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x500, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x504, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x504, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x504, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x504, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x504, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x504, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x504, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x504, Size: 0x1]
	bool bMinimizeLightmapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x505, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x505, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x505, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x505, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x505, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x505, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x505, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x508, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x50c, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x510, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x514, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x518, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x528, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x538, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x6d88f34
	void SetReverseCulling(bool ReverseCulling);// 0x6d88c44
	void SetForcedLodModel(int NewForcedLodModel);// 0x6d88e90
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x6d88dec
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x6d88fec
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x6d88cf0

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x6ba51d4
	void ViewSelf();// 0x6ba4dc4
	void ViewPlayer(FString S);// 0x6ba4d0c
	void ViewClass(class Actor DesiredClass);// 0x6ba4bb4
	void ViewActor(FName ActorName);// 0x6ba4c60
	void UpdateSafeArea();// 0x6ba3f9c
	void ToggleServerStatReplicatorUpdateStatNet();// 0x6ba3fb0
	void ToggleServerStatReplicatorClientOverwrite();// 0x6ba3fc4
	void ToggleDebugCamera();// 0x6ba4994
	void ToggleAILogging();// 0x6ba4978
	void TestCollisionDistance();// 0x6ba4644
	void Teleport();// 0x6ba52b8
	void Summon(FString ClassName);// 0x6ba4dfc
	void StreamLevelOut(FName PackageName);// 0x6ba49b0
	void StreamLevelIn(FName PackageName);// 0x6ba4b08
	void SpawnServerStatReplicator();// 0x6ba3fec
	void Slomo(float NewTimeDilation);// 0x6ba50f0
	void SetWorldOrigin();// 0x6ba4130
	void SetMouseSensitivityToDefault();// 0x6ba4114
	void ServerToggleAILogging();// 0x6ba491c
	void ReceiveInitCheatManager();// 0x505573c
	void ReceiveEndPlay();// 0x505573c
	void PlayersOnly();// 0x6ba4de0
	void OnlyLoadLevel(FName PackageName);// 0x6ba4a5c
	void LogLoc();// 0x6ba4144
	void InvertMouse();// 0x6ba40f8
	void God();// 0x6ba519c
	void Ghost();// 0x6ba51b8
	void FreezeFrame(float Delay);// 0x6ba52d4
	void Fly();// 0x6ba51f0
	void FlushLog();// 0x6ba4160
	void EnableDebugCamera();// 0x6ba3f80
	void DumpVoiceMutingState();// 0x6ba45d4
	void DumpPartyState();// 0x6ba460c
	void DumpOnlineSessionState();// 0x6ba4628
	void DumpChatState();// 0x6ba45f0
	void DisableDebugCamera();// 0x6ba3f64
	void DestroyTarget();// 0x6ba5028
	void DestroyServerStatReplicator();// 0x6ba3fd8
	void DestroyPawns(class Pawn aClass);// 0x6ba4eb4
	void DestroyAllPawnsExceptTarget();// 0x6ba4f60
	void DestroyAll(class Actor aClass);// 0x6ba4f7c
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x6ba4814
	void DebugCapsuleSweepPawn();// 0x6ba467c
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x6ba46b4
	void DebugCapsuleSweepClear();// 0x6ba4660
	void DebugCapsuleSweepChannel(byte Channel);// 0x6ba4768
	void DebugCapsuleSweepCapture();// 0x6ba4698
	void DebugCapsuleSweep();// 0x6ba4900
	void DamageTarget(float DamageAmount);// 0x6ba5044
	void CheatScript(FString ScriptName);// 0x6ba4000
	void ChangeSize(float F);// 0x6ba520c
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x6ba417c
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x6ba43e0
	void BugIt(FString ScreenShotDescription);// 0x6ba4328

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a5, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a5, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a5, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a5, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a5, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a5, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5a8, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b0, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5b8, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c0, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x648, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x650, Size: 0x8]
	float SpeedScale;//[Offset: 0x658, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x65c, Size: 0x4]
	float InitialAccel;//[Offset: 0x660, Size: 0x4]
	float InitialDecel;//[Offset: 0x664, Size: 0x4]
	void ToggleDisplay();// 0x6bb678c
	void ShowDebugSelectedInfo();// 0x6bb67a0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x6bb66b4
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x505573c
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x505573c
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x505573c
	Actor* GetSelectedActor();// 0x6bb6758

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x4b0, Size: 0x4]
	float FrustumAngle;//[Offset: 0x4b4, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x4b8, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x4bc, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x4c0, Size: 0x4]
	Texture* Texture;//[Offset: 0x4c8, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x168, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1528, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b08, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x228, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x238, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x240, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x248, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x250, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x258, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x260, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x268, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x270, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x278, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x280, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x288, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x290, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x298, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	void StartPlay();// 0x6be6318
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x6be572c
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x6be5604
	bool ShouldReset(Actor* ActorToReset);// 0x6be6220
	void ReturnToMainMenuHost();// 0x6be61e8
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x6be5820
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x6be5940
	void RestartPlayer(Controller* NewPlayer);// 0x6be5a2c
	void ResetLevel();// 0x6be6204
	bool PlayerCanRestart(PlayerController* Player);// 0x6be5ad8
	bool MustSpectate(PlayerController* NewPlayerController);// 0x6be6084
	void K2_PostLogin(PlayerController* NewPlayer);// 0x505573c
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x505573c
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x505573c
	void K2_OnLogout(Controller* ExitingController);// 0x505573c
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x505573c
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x6be5b90
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x6be5518
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x6be546c
	bool HasMatchStarted();// 0x6be62d8
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x6be613c
	int GetNumSpectators();// 0x6be6334
	int GetNumPlayers();// 0x6be6370
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x6be63ac
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x6be5c8c
	Actor* ChoosePlayerStart(Controller* Player);// 0x6be5d90
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x6be5e44
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x6be5f8c

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x228, Size: 0x4]
	int MaxPlayers;//[Offset: 0x22c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x230, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x234, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	FName SessionName;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x228, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x230, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x238, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x240, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x254, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x258, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x25c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x6bf8168
	void OnRep_ReplicatedWorldTimeSeconds();// 0x6bf8130
	void OnRep_ReplicatedHasBegunPlay();// 0x6bf814c
	void OnRep_GameModeClass();// 0x6bf8184
	bool HasMatchStarted();// 0x6bf8308
	bool HasBegunPlay();// 0x6bf8348
	float GetServerWorldTimeSeconds();// 0x6bf8388
	float GetPlayerStartTime(Controller* Controller);// 0x6bf8254
	float GetPlayerRespawnDelay(Controller* Controller);// 0x6bf81a0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	uint32 Channels;//[Offset: 0x22c, Size: 0x4]
	uint32 InRate;//[Offset: 0x230, Size: 0x4]
	uint32 OutRate;//[Offset: 0x234, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x23c, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x240, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x248, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x24c, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x254, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x258, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x260, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x264, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x26c, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x270, Size: 0x4]
	uint32 InPackets;//[Offset: 0x274, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x278, Size: 0x4]
	uint32 InBunches;//[Offset: 0x27c, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x280, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x284, Size: 0x4]
	uint32 InLoss;//[Offset: 0x288, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x28c, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x290, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x298, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x29c, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a0, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2a4, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2a8, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2dc, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e0, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x228, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x22c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x230, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x234, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x238, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x23c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x240, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x244, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x248, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x250, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x254, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x258, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x25c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x260, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x264, Size: 0x4]
	float MoveRepSize;//[Offset: 0x268, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x26c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x270, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x274, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x278, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x27c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x280, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x284, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x288, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x28c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x298, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x29c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2ac, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2bc, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2c4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x228, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x230, Size: 0x8]
	float PlayRate;//[Offset: 0x238, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x240, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x244, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x244, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x248, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x250, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x268, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x278, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	float InterpPosition;//[Offset: 0x28c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x294, Size: 0x1]
	delegate OnPlay;//[Offset: 0x298, Size: 0x10]
	delegate OnStop;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPause;//[Offset: 0x2b8, Size: 0x10]
	void Stop();// 0x6cc6f34
	void SetPosition(float NewPosition, bool bJump);// 0x6cc6e0c
	void SetLoopingState(bool bNewLooping);// 0x6cc6d3c
	void Reverse();// 0x6cc6f18
	void Play();// 0x6cc6f50
	void Pause();// 0x6cc6efc
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x6cc6bf0
	void ChangePlaybackDirection();// 0x6cc6df0

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x288, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x290, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x298, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x6ba69ec

--------------------------------
Class: Interface.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x4c8, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x505573c
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6c91cc4
	bool RemoteEvent(FName EventName);// 0x6c91ec8
	void LevelReset();// 0x505573c

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x240, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x4b0, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b8, Size: 0x1]
	float ScreenSize;//[Offset: 0x4bc, Size: 0x4]
	float U;//[Offset: 0x4c0, Size: 0x4]
	float UL;//[Offset: 0x4c4, Size: 0x4]
	float V;//[Offset: 0x4c8, Size: 0x4]
	float VL;//[Offset: 0x4cc, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x6b723ac
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x6b721f8
	void SetSprite(Texture2D* NewSprite);// 0x6b7251c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x6c92934
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x6c92ba4
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x6c92af0
	void SetPriority(int NewPriority);// 0x6c929a8
	void SetLevelLODIndex(int LODIndex);// 0x6c92a4c
	bool IsStreamingStatePending();// 0x6c92884
	bool IsLevelVisible();// 0x6c928e0
	bool IsLevelLoaded();// 0x6c928bc
	FName GetWorldAssetPackageFName();// 0x6c92974
	Level* GetLoadedLevel();// 0x6c92918
	LevelScriptActor* GetLevelScriptActor();// 0x6c92798
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6c927cc

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x260, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x271, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x850, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9fc, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa20, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa38, Size: 0x10]
	<class Object> AlwaysRecordClasses;//[Offset: 0x14b8, Size: 0x50]
	<Actor*> RecordingAtThisFrame;//[Offset: 0x1508, Size: 0x50]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x6b71830
	int GetObjectCount();// 0x6b71958
	int GetNewAvoidanceUID();// 0x6b71924
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x6b71780

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x6da8b74

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapID;//[Offset: 0x400, Size: 0x4]
	FName PreloadAssets;//[Offset: 0x404, Size: 0x8]
	class SolarPostProcessSettingItem* PostProcessItemClass;//[Offset: 0x410, Size: 0x8]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x418, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x420, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x424, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	Transform SpectatorPawnStartPoint;//[Offset: 0x430, Size: 0x30]

--------------------------------
Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x590]

--------------------------------
Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x580]

--------------------------------
Class: BP_Controller_BattleRoyale_C.BP_CMPlayerController_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa18, Size: 0x8]
	void ReceiveBeginPlay();// 0x3aa89b4
	void ReceiveTick(float DeltaSeconds);// 0x505573c
	void BindSpectateEvent(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void ReceivePossess(Pawn* PossessedPawn);// 0x505573c
	void BindEvent();// 0x505573c
	void RefreshUI(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x505573c
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x505573c
	void UnBindEvent();// 0x505573c
	void ExecuteUbergraph_BP_Controller_BattleRoyale(int EntryPoint, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_Event_DeltaSeconds, SolarSpectateInfo* K2Node_CustomEvent_SpectateInfo, Pawn* K2Node_Event_PossessedPawn, bool CallFunc_IsServer_ReturnValue, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarSpectateInfo* K2Node_CustomEvent_SpectateInfo, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, Pawn* K2Node_Event_UnpossessedPawn, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SolarSpectateInfo* CallFunc_GetSpectateInfo_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, UI_Relive_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, UI_Relive_C* CallFunc_Array_Get_Item, int CallFunc_FTrunc_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x505573c

--------------------------------
Class: BP_CMPlayerController_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa08, Size: 0x8]
	bool ExitSafeareaPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	void OnTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x505573c
	void InitEffectEvent();// 0x505573c
	void ExecuteUbergraph_BP_CMPlayerController(int EntryPoint, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarSpectateInfo* K2Node_CustomEvent_SpectateInfo, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x505573c

--------------------------------
Class: SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	SCMPlayerRPCComponent* RpcComponent;//[Offset: 0xa00, Size: 0x8]
	void ServerHandlePlayerLevelLoaded(FString LevelName);// 0x48ffe90
	void RequestUpdataDataManager();// 0x48ffe74

--------------------------------
Class: SolarPlayerController.PlayerController.Controller.Actor.Object
	delegate OnPawnReplicated;//[Offset: 0x5d8, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x5e8, Size: 0x10]
	delegate OnCatchInputActionDelegate;//[Offset: 0x5f8, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0x608, Size: 0x10]
	delegate OnNotifiedMarkedItemWasPickedUpDelegate;//[Offset: 0x618, Size: 0x10]
	SolarInputManager* InputManager;//[Offset: 0x628, Size: 0x8]
	delegate OnHUDSpawnedDelegate;//[Offset: 0x630, Size: 0x10]
	Vector2D InputMovementVector;//[Offset: 0x6b4, Size: 0x8]
	float InputRotatePitch;//[Offset: 0x6bc, Size: 0x4]
	float InteractHoldTimer;//[Offset: 0x6d4, Size: 0x4]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x718, Size: 0x8]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x720, Size: 0x8]
	float FreeLookSmoothSpeed;//[Offset: 0x728, Size: 0x4]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x738, Size: 0x8]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x740, Size: 0x8]
	FString PlayerId;//[Offset: 0x750, Size: 0x10]
	float VehicleInteractionDistance;//[Offset: 0x788, Size: 0x4]
	SolarVehiclePawn*[] InteractingVehicles;//[Offset: 0x790, Size: 0x10]
	SolarVehiclePawn* BestInteractingVehicle;//[Offset: 0x7a0, Size: 0x8]
	int PeekInput;//[Offset: 0x7b4, Size: 0x4]
	delegate OnTeammateHUDDodgeSet;//[Offset: 0x808, Size: 0x10]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0x818, Size: 0x50]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 0x1]
	Actor*[] UniqueActorArray;//[Offset: 0x8d0, Size: 0x10]
	float HangUpTime;//[Offset: 0x8e0, Size: 0x4]
	UserWidget* DamageTextWidget;//[Offset: 0x920, Size: 0x8]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0x928, Size: 0x10]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0x938, Size: 0x8]
	SolarWarmClockComponent* WarmClockComp;//[Offset: 0x9e0, Size: 0x8]
	delegate OnSpectateInfoRep;//[Offset: 0x9e8, Size: 0x10]
	void WorldMarkDelayExecFunction();// 0x4abc40c
	void UseMedicine();// 0x4ab3128
	void UnMarkWorldInLevel(int64 instanceID);// 0x4ab64c4
	void Turn(float Value);// 0x4abcb40
	void TryRechargeShield();// 0x4ab310c
	void TryPickupFirstItem();// 0x4ab30f0
	void TriggerVoiceByType(enum VoiceType);// 0x4ab6374
	void TriggerVoiceByNumber(int VoiceIndex);// 0x4ab62d0
	void SwtichVehicleSeatNotification();// 0x4ab6c0c
	void SwitchWeaponByReverseOrder();// 0x4ab0b60
	void SwitchWeaponByOrder();// 0x4ab0b74
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x4ab1124
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x4ab280c
	void StopSpectateCountdown();// 0x4ab14e0
	void StopRecordingAtDS();// 0x4ab8684
	void StartSpectateCountdown(RepCountdownData InCountdownData);// 0x4ab14f4
	void StartRecordingAtDS(FString Filename);// 0x4ab86b4
	void SolarSlot(int ID);// 0x4ab6ab4
	void SolarShowPanelUI(int Type);// 0x4abb014
	void SolarServerNetProfileStop();// 0x4ab4988
	void SolarServerNetProfileStart();// 0x4ab499c
	void SolarOpenUI(FString UIID, int RootID);// 0x4abb168
	void SolarModule(int ID);// 0x4ab6b60
	void SolarISPC(FString _str);// 0x4aba470
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x4abb424
	void SolarGM_TutorialTipsUI(int ID);// 0x4ab8f00
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x4ab9af8
	void SolarGM_StopRecordingAtDS();// 0x4ab86a0
	void SolarGM_StartShrinkSafeArea();// 0x4aba780
	void SolarGM_StartRecordingAtDS(FString Filename);// 0x4ab876c
	void SolarGM_SpawnMonsterGroupAtCrosshairServer(int inPlayerTeamSize, int NumberToSpawn, int StrengthGrade);// 0x4ab9e9c
	void SolarGM_SpawnMonsterGroupAtCrosshair(int inPlayerTeamSize, int NumberToSpawn, int StrengthGrade);// 0x4ab9fcc
	void SolarGM_SpawnMonsterAIAtCrosshair(int MonsterAICharacterID, int StrengthGrade);// 0x4ab9db8
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num);// 0x4aba0f4
	void SolarGM_SpawnBotAIAtCrosshair(int AICharacterID);// 0x4aba2e0
	void SolarGM_SpawnAIAtCrosshairServer(int AICharacterID, bool bIsBotAI, int StrengthGrade);// 0x4aba1a0
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x4ab962c
	void SolarGM_ShowNotice(int NoticeId);// 0x4ab9334
	void SolarGM_ShowDrone(bool IsShow);// 0x4aba6b8
	void SolarGM_ShowAllSafeArea(bool IsShow);// 0x4aba848
	void SolarGM_SetTeamID(int InTeamID);// 0x4ab9100
	void SolarGM_SetStatDataForDebug();// 0x4ab91c0
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x4ab88d4
	void SolarGM_SetReconnection(bool IsReconnection);// 0x4ab9288
	void SolarGM_SetPlayerData(FString InPlayerId);// 0x4ab8fa4
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x4ab8bc0
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0x4ab8c70
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0x4ab8d14
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0x4ab8b1c
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0x4ab8e5c
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0x4ab8db8
	void SolarGM_ServerStartShrinkSafeArea();// 0x4aba764
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x4ab9578
	void SolarGM_ServerShowAllSafeArea(bool IsShow);// 0x4aba794
	void SolarGM_ServerSetTeamID(int InTeamID);// 0x4ab9054
	void SolarGM_ServerSetStatDataForDebug();// 0x4ab91a4
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x4ab881c
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x4ab91d4
	void SolarGM_ServerSetPlayerData(FString InPlayerId);// 0x4ab89b4
	void SolarGM_ServerDumpAllPlayer();// 0x4ab9a30
	void SolarGM_ServerDebugOffline();// 0x4ab8984
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x4ab6c3c
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x4aba8f4
	void SolarGM_ServerChangeDayLight(int ID);// 0x4aba568
	void SolarGM_ResetZoneBombsFire();// 0x4ab93f4
	void SolarGM_RefreshSafeArea();// 0x4abae0c
	void SolarGM_RedZoneServer(const int ZoneId);// 0x4abaa54
	void SolarGM_RedZone(const int ZoneId);// 0x4abab00
	void SolarGM_PoisonServer(FString GMType);// 0x4ababa4
	void SolarGM_Poison(FString GMType);// 0x4abad5c
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x4ab96d8
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x4ab9784
	void SolarGM_PickHomeitems(int ID, int InCount);// 0x4abb25c
	void SolarGM_PauseMonsterSpawnVolumesServer(bool pauseSpawn);// 0x4ab9ba4
	void SolarGM_PauseMonsterSpawnVolumes(bool pauseSpawn);// 0x4ab9c58
	void SolarGM_NoviceTestGetWidget(FString PanelName, FString ChildWidgetName);// 0x4abac5c
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x4aba384
	void SolarGM_KillAllAIServer(bool KillBot);// 0x4ab9d04
	void SolarGM_KickMeOut();// 0x4ab8670
	void SolarGM_GoPreviousHomeCameraMode();// 0x4ab27e4
	void SolarGM_GoNextHomeCameraMode();// 0x4ab27f8
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x4ab2740
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x4ab19fc
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x4ab1958
	void SolarGM_Freelook(bool Open);// 0x4abb574
	void SolarGM_DumpAllPlayer(bool bSendToServer);// 0x4ab9a4c
	void SolarGM_DebugOffline();// 0x4ab89a0
	void SolarGM_DebugAllAIServer(int debugValue);// 0x4ab9828
	void SolarGM_DebugAllAI(int debugValue);// 0x4ab98d4
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x4aba9a8
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector CharacterLocation, float Distance, float Damage);// 0x4ab9408
	void SolarGM_ClientSetPlayerData(FString InPlayerId);// 0x4ab8a6c
	void SolarGM_ClientGotoLogin();// 0x505573c
	void SolarGM_ClientDumpAllPlayer(FString DumpString);// 0x4ab9978
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x4abae20
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x4ab7abc
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x4ab764c
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x4ab7e24
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x4ab6df0
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x4ab8108
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x4ab71dc
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x4ab83fc
	void SolarGM_ChangeDayLight(int ID);// 0x4aba614
	void SolarGM(FString _str);// 0x4abb620
	void SolarEnergy(int InMode, int ID);// 0x4abb340
	void SolarCloseUI(FString UIID);// 0x4abb0b8
	void SolarClosePanelUI(int Type);// 0x4abaf70
	void SolarClientNetProfileStop();// 0x4ab49b0
	void SolarClientNetProfileStart();// 0x4ab49c4
	void ShowBackpackUI();// 0x505573c
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x505573c
	void SetAllTeammateHUDDodge(bool bDodge);// 0x4ab49f4
	void ServerTeleportTo(const Vector DestLocation);// 0x4ab3210
	void ServerSyncPlayerSelfReport();// 0x4abce54
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x4ab1078
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x4ab4560
	void ServerSpawnVehicle(const int SpawnID);// 0x4ab460c
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x4ab44b4
	void ServerSpawnSolarRadar(FString BpPath);// 0x4ab4764
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x4ab46b8
	void ServerSpawnChargingPile(FString BpPath);// 0x4ab481c
	void ServerSpawnAirdrop(const int AirdropID);// 0x4ab4408
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float SpreadStatuSpeed);// 0x4ab3720
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x4ab3438
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x4ab32b8
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x4ab3524
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x4ab38d4
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x4ab3f10
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x4ab3c98
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x4ab3acc
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float Lifetime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x4ab41cc
	void ServerSetPlayerLevel(int InLevel);// 0x4ab0d78
	void ServerSetHangUpBehavior();// 0x4ab2d18
	void ServerSetFreeLook(bool bInFreeLook);// 0x4abbac4
	void ServerSetAppLifetimeState(enum NewLifeState);// 0x4ab3044
	void ServerSetActorOwner(Actor* TargetActor);// 0x4abcff8
	void ServerRPCResetZoneBombsFire();// 0x4ab93d8
	void ServerRespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x4ab1c08
	void ServerRespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x4ab1f6c
	void ServerResetUniqueSkillCDDebugOnly();// 0x4ab0b14
	void ServerRequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x4ab1dac
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x4ab21bc
	void ServerPlayerUpgrade(int InLevel);// 0x4ab0ccc
	void ServerPlayerResumeSettlement();// 0x4abcfe4
	void ServerPlayerRequestLogout();// 0x4abd184
	void ServerPlayerOutBySelf(enum InPath);// 0x4abd0d8
	void ServerPlayerGoToSettlement();// 0x4abd1a0
	void ServerNetProfile(bool startOrStop);// 0x4ab48d4
	void ServerInviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x4ab2110
	void ServerGoSpectatePreviousPlayer();// 0x4ab1928
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerId);// 0x4ab0f14
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerId);// 0x4ab17c0
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x4ab0fcc
	void ServerGoSpectatePlayerByIndex(int Index);// 0x4ab1870
	void ServerGoSpectateNextPlayer();// 0x4ab1914
	void ServerGainExperience(int InExp);// 0x4ab0e24
	void ServerEnableCheats();// 0x4ab31f4
	void ServerCmd(FString Cmd);// 0x4ab313c
	void ServerClearUniqueSkillCDDebugOnly();// 0x4ab0b30
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x4ab793c
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x4ab74cc
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x4ab7d28
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x4ab6cf4
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x4ab800c
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x4ab705c
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x4ab82f8
	void ServerCancelSkydivingFollow();// 0x4ab1e58
	void ServerCallMonsterAICmd(int InType, float Param);// 0x4ab2d34
	void SendRepliableMessageServer(const int Message);// 0x4ab5cd0
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x4ab5e30
	void SendRepliableMessageByMessageID(out const int ID);// 0x4ab5d7c
	void SendQuickMessageServer(FString Message, bool bSound);// 0x4ab5ef0
	void SendQuickMessageNewServer(const int VoiceType);// 0x4ab5a30
	void SendQuickMessageNewClient(FString NickName, const int VoiceType, const int CharID, const int SkinId, bool bGender, const int PosInTeam, bool bLocalPlayer, bool bShowLocMessage);// 0x4ab5770
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x4ab5adc
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x4ab5460
	void SendLocalizationTeamMessageNewServer(const LocTextParam[] TextParams, const int VoiceType);// 0x4ab5330
	void SendLocalizationTeamMessageNewClient(const int CharacterId, const int SkinId, bool bGender, const int VoiceType, FString NickName, const LocTextParam[] TextParams, int PosInTeam);// 0x4ab4e8c
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x4ab5128
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent);// 0x4ab55e0
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x4ab2a7c
	void RespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x4ab2360
	void RespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x4ab2508
	void ResetPeekInput();// 0x4ab4c2c
	void ResetAllInput();// 0x4abc5b0
	void RequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x4ab2450
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x4ab269c
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x505573c
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x4ab6098
	int QueryStage();// 0x505573c
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x4abbe88
	void PostAkEventByName(FString EventName);// 0x4abcc38
	void PlayerGoToSettleMent();// 0x4abcd38
	void PlayerGotoLobbyWithLogout();// 0x4abcd24
	void PassiveTriggeredVoice(enum VoiceType);// 0x4ab5ff4
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x505573c
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x4ab6194
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x505573c
	void OnSpectateTargetItemsChanged(SolarSpectateInfo* SpecInfo);// 0x4ab143c
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x4ab12ac
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x505573c
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x4ab0b88
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x505573c
	void OnSeamlessTravelEnd();// 0x4abcc1c
	void OnReceivedSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState);// 0x505573c
	void OnReceivedSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState);// 0x505573c
	void OnReceiveBattleEnd();// 0x505573c
	void OnPutAwayWeaponPressed();// 0x4ab0b4c
	void OnPlayerStateSpectateInfoRepHandler(SolarSpectateInfo* SpecInfo);// 0x4ab1390
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x4ab15b0
	void OnPawnReplicated__DelegateSignature();// 0x505573c
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(out const int64 InItemInstanceId);// 0x505573c
	void OnEnterVoyageDelegate__DelegateSignature();// 0x505573c
	void OnEnterLanding();// 0x4ab49d8
	void OnCustomizeLevelLoaded();// 0x4ab1a10
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x505573c
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x505573c
	void OnCharacterRebirthLua();// 0x505573c
	void OnCharacterDeathLua();// 0x505573c
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x505573c
	void OnBeforeSpectateTargetChange(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x4ab11c8
	void OnAppHasReactivated();// 0x4ab4e34
	void OnAppHasDeactiveated();// 0x4ab4e48
	void NotifyMonsterSpawn();// 0x505573c
	void NotifyCrouchIsLocked();// 0x505573c
	void NotifyAppReactivate();// 0x505573c
	void NotifyAppHasDeactivate();// 0x505573c
	void NofityCustomizeLevelLoaded();// 0x505573c
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x4ab6690
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x4ab65a8
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x4ab6874
	void MarkPointInNavMap(const Vector2D InMarkedPoint, bool bFromWorldMark);// 0x4ab6780
	void MarkOnWorldByMinimapPosition(int PosInTeam, const Vector2D MinimapPos);// 0x4ab6924
	void MarkedAsAppHasReactivated();// 0x4ab4dfc
	void MarkedAsAppHasDeactivated();// 0x4ab4e18
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x505573c
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x4ab2f0c
	void LookUp(float Value);// 0x4abc854
	void LogMarkAndQuickVoice(int Type, int SubType);// 0x4abc8f8
	void KickMeOutAtDS(FString InPlayerId);// 0x4ab85b8
	bool IsThirdPersonSpectateCameraMode();// 0x4ab1748
	bool IsSpectatingOtherPlayer();// 0x4ab1788
	bool IsHasSkydiveAndEnd();// 0x4ab2328
	void InviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x4ab25f8
	void InputWorldMarkReleased();// 0x4abc3e4
	void InputWorldMarkPressed();// 0x4abc3f8
	void InputVerticalJetReleased();// 0x4abc538
	void InputVerticalJetPressed();// 0x4abc54c
	void InputUseMedicineReleased();// 0x4abc1a0
	void InputUseMedicinePressed();// 0x4abc1b4
	void InputToggleTertiaryWeapon_Checkbox();// 0x4abc31c
	void InputToggleSecondaryWeaponReleased();// 0x4abc358
	void InputToggleSecondaryWeaponPressed();// 0x4abc36c
	void InputToggleSecondaryWeapon_Checkbox();// 0x4abc330
	void InputTogglePrimaryWeaponReleased();// 0x4abc380
	void InputTogglePrimaryWeaponPressed();// 0x4abc394
	void InputTogglePrimaryWeapon_Checkbox();// 0x4abc344
	void InputToggleGunsightReleased();// 0x4abc290
	void InputToggleGunsightPressed();// 0x4abc2a4
	void InputSwitchToSeatTwoPressed();// 0x4abc100
	void InputSwitchToSeatThreePressed();// 0x4abc0ec
	void InputSwitchToSeatOnePressed();// 0x4abc114
	void InputSwitchToSeatFourPressed();// 0x4abc0d8
	void InputSwitchFireModeReleased();// 0x4abc128
	void InputSwitchFireModePressed();// 0x4abc13c
	void InputStartRepairVehicleReleased();// 0x4abc024
	void InputSprintLockStart();// 0x4abc2b8
	void InputSprintFreeTerminate();// 0x4abc2cc
	void InputSprintFreeStart();// 0x4abc2e0
	void InputSprintFreeReleasedOnPC();// 0x4abc2f4
	void InputSprintFreePressedOnPC();// 0x4abc308
	void InputRoleAbilityUniqueReleased();// 0x4abbfac
	void InputRoleAbilityUniquePressed();// 0x4abbfc0
	void InputRoleAbilityNormalReleased();// 0x4abbf84
	void InputRoleAbilityNormalPressed();// 0x4abbf98
	void InputReloadReleased();// 0x4abc3bc
	void InputReloadPressed();// 0x4abc3d0
	void InputRechargeShieldReleased();// 0x4abc178
	void InputRechargeShieldPressed();// 0x4abc18c
	void InputPickupReleased();// 0x4abc150
	void InputPickupPressed();// 0x4abc164
	void InputOpenSettingPressed();// 0x4abc3a8
	void InputMoveRight(float InValueY);// 0x4abc70c
	void InputMovementYReceived(float InValueY);// 0x4abc5c4
	void InputMovementXReceived(float InValueX);// 0x4abc668
	void InputMoveForward(float InValueX);// 0x4abc7b0
	void InputMapPressed();// 0x4abc420
	void InputLeftFireReleased();// 0x4abc498
	void InputLeftFirePressed();// 0x4abc4ac
	void InputJumpReleased();// 0x4abc588
	void InputJumpPressed();// 0x4abc59c
	void InputInteractReleased();// 0x4abc448
	void InputInteractPressed();// 0x4abc45c
	void InputHorizontalJetReleased();// 0x4abc510
	void InputHorizontalJetPressed();// 0x4abc524
	void InputGunsightReleased();// 0x4abc268
	void InputGunsightPressed();// 0x4abc27c
	void InputGetOnVehicleReleased();// 0x4abc04c
	void InputGetOffVehicleReleased();// 0x4abc038
	void InputFreeLookReleased();// 0x4abc470
	void InputFreeLookPressed();// 0x4abc484
	void InputFireReleased();// 0x4abc4c0
	void InputFirePressed();// 0x4abc4d4
	void InputEscapeUIPressed();// 0x4abc434
	void InputEquip2Released();// 0x4abc218
	void InputEquip2Pressed();// 0x4abc22c
	void InputEquip1Released();// 0x4abc240
	void InputEquip1Pressed();// 0x4abc254
	void InputEjectReleased();// 0x4abc1f0
	void InputEjectPressed();// 0x4abc204
	void InputDriveVehicleReleased();// 0x4abc060
	void InputCrouchReleased();// 0x4abc560
	void InputCrouchPressed();// 0x4abc574
	void InputCancelVehicleAbilityReleased();// 0x4abc074
	void InputBuilding();// 0x4abbf70
	void InputBackpackReleased();// 0x4abc1c8
	void InputBackpackPressed();// 0x4abc1dc
	void InputAltFireReleased();// 0x4abc4e8
	void InputAltFirePressed();// 0x4abc4fc
	void InputActiveVehicleSecondAbilityReleased();// 0x4abc088
	void InputActiveVehicleSecondAbilityPressed();// 0x4abc09c
	void InputActiveVehicleFirstAbilityReleased();// 0x4abc0b0
	void InputActiveVehicleFirstAbilityPressed();// 0x4abc0c4
	void InputActionSecondaryReleased();// 0x4abbfd4
	void InputActionSecondaryPressed();// 0x4abbfe8
	void InputActionPrimaryReleased();// 0x4abbffc
	void InputActionPrimaryPressed();// 0x4abc010
	bool IfSolarCharacterIsDriver();// 0x4ab4c68
	static void HandleDamageText(Actor* InDamageSource, Controller* InAutonomousController, out SolarPointDamageEvent InPointDamageEvent);// 0x4ab2938
	void HandleBeginSpectateRequest();// 0x4ab1734
	void GyroscopeTilt(Vector Tilt);// 0x4abca9c
	void GyroscopeRotationRate(Vector RotationRate);// 0x4abc9f8
	SolarCharacter* GetViewportFocusedCharacter();// 0x4abbd00
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x4ab1698
	SolarSpectateInfo* GetSpectateInfo();// 0x4ab1700
	SolarCharacter* GetSpectatedCharacter();// 0x4ab16cc
	SolarPlayerState* GetSolarViewPlayerState();// 0x4abbdd4
	SolarPlayerState* GetSolarPlayerState();// 0x4abb6d0
	SolarCharacter* GetSolarCharacter();// 0x4abcce8
	enum GetPlayNetStateInGame();// 0x4abd0a4
	PlayerStatisticsData* GetPlayerStatData();// 0x4abba90
	FString GetPlayerID();// 0x4ab4d08
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x505573c
	byte GetMyTeamID();// 0x4ab4dc0
	byte GetMyPosInTeam();// 0x4ab4cd4
	Vector2D GetMyMarkedPointInNavMap();// 0x4ab4ca0
	int GetMultiKillNum();// 0x4abba28
	int GetKillNum();// 0x4abba5c
	int GetKillingSpreesNum();// 0x4abb9f4
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x4ab2900
	SolarCameraComponent* GetCurrentCameraComponent();// 0x4abbda0
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x4ab84f8
	Rotator GetCharacterViewRotation();// 0x4abbd34
	Rotator GetCameraRotation();// 0x4abbe48
	Vector GetCameraLocation();// 0x4abbe08
	SolarCharacter* GetCameraFocusedCharacter();// 0x4abbcc4
	SolarCameraComponent* GetActiveCamera();// 0x4abbd6c
	void ExcludeDifferentTeam(int TeamID);// 0x4ab4aa0
	void EndOBCurrentBattle();// 0x4ab0eec
	void DropPassengerNotification();// 0x4ab6c20
	void DestroyCharacterCorpse();// 0x4abcc00
	void DebugSetPlayerData();// 0x505573c
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x505573c
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x4abcd4c
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x4abb874
	void ClientShowDiePage();// 0x4abb97c
	void ClientRespondSkydivingLeaderTransferRequest(SolarPlayerState* DesiredLeaderPlayerState, bool bAgreed);// 0x4ab1b10
	void ClientRespondSkydivingFollowInvitation(SolarPlayerState* FollowerPlayerState, bool bAgreed);// 0x4ab1e74
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x4ab1a24
	void ClientResetSpectatedView();// 0x4ab193c
	void ClientRequestSkydivingLeaderTransfer(SolarPlayerState* RequesterPlayerState);// 0x4ab1d00
	void ClientReplacePlayerKillEffect(Actor* InSource, Actor* InTarget);// 0x4ab2c2c
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x4ab2b74
	void ClientPlayerGoViewInstigatorCustomTime(float ReachTime, float ViewTime, float ViewSelfBoyTime);// 0x4abbb94
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs);// 0x4abce68
	void ClientInviteSkydivingFollow(SolarPlayerState* InviterPlayerState);// 0x4ab2064
	void ClientGoViewInstigator();// 0x4abbb78
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x4abb70c
	void ClientCloseUI(FString UIName);// 0x4abb7bc
	void ClientClearAudioListenerOverride();// 0x4abcbe4
	void ClientCharacterIsDead();// 0x4abb998
	void ClientBeginOBCurrentBattleInternal();// 0x4ab0ed0
	void ClearMarkedPointInNavMapLuaCall();// 0x4ab4e78
	void ClearMarkedPointInNavMap();// 0x4ab4e5c
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x4ab77c4
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x4ab7354
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x4ab7c34
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x4ab7f18
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x4ab6ee4
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x4ab81fc
	bool CanWorldMark();// 0x4ab6570
	bool CanSolarCharacterLaunchJetPack();// 0x4ab6a44
	bool CanSolarCharacterInput();// 0x4ab6a7c
	bool CanSolarCharacterCrouch();// 0x4ab6a0c
	void CancelSkydivingFollow();// 0x4ab24f4
	void CallMonsterAICmd(int InType, float Param);// 0x4ab2e24
	void BuyRescurrectionEnded();// 0x4ab62bc
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification);// 0x4ab2268
	void BuildSkydivingFollowOnEnteringTeam();// 0x4ab2314
	void BindDelegatesDependGameState();// 0x4abc9e4
	void BeNotifiedMarkedItemWasPickedUp(const int64 InItemInstanceId);// 0x4ab6418
	void BeginOBCurrentBattle();// 0x4ab0f00
	void BackToLobby();// 0x4abd1fc
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x4ab4b44
	void AddRightPeekInput();// 0x4ab4c40
	void AddLeftPeekInput();// 0x4ab4c54

--------------------------------
Class: RepCountdownData
	int RepTimes;//[Offset: 0x0, Size: 0x4]
	int RepTextID;//[Offset: 0x4, Size: 0x4]
	int RepPassiveTextID;//[Offset: 0x8, Size: 0x4]
	int RepPassiveCharacterID;//[Offset: 0xc, Size: 0x4]
	float RepDuration;//[Offset: 0x10, Size: 0x4]
	float RepRemaining;//[Offset: 0x14, Size: 0x4]
	float RepAmount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: SolarPlayerState.PlayerState.Info.Actor.Object
	delegate OnTeammatePlayerStateRepDelegate;//[Offset: 0x320, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Offset: 0x330, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Offset: 0x340, Size: 0x10]
	delegate OnPlayerChangedGoldsDelegate;//[Offset: 0x350, Size: 0x10]
	int Gold;//[Offset: 0x360, Size: 0x4]
	int[] CostedGolds;//[Offset: 0x368, Size: 0x10]
	int[] ReceivedGolds;//[Offset: 0x378, Size: 0x10]
	int CharacterId;//[Offset: 0x388, Size: 0x4]
	int SkinId;//[Offset: 0x38c, Size: 0x4]
	int ClanId;//[Offset: 0x390, Size: 0x4]
	FString ClanName;//[Offset: 0x398, Size: 0x10]
	FString ClanShortName;//[Offset: 0x3a8, Size: 0x10]
	int BagId;//[Offset: 0x3b8, Size: 0x4]
	int CapsuleID;//[Offset: 0x3bc, Size: 0x4]
	int TailFlameID;//[Offset: 0x3c0, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x3c8, Size: 0x10]
	FString NickName;//[Offset: 0x3d8, Size: 0x10]
	uint32 BattleVoiceId;//[Offset: 0x3e8, Size: 0x4]
	byte TeamID;//[Offset: 0x3ec, Size: 0x1]
	uint64 UserId;//[Offset: 0x3f0, Size: 0x8]
	byte PosInTeam;//[Offset: 0x3f8, Size: 0x1]
	FString Side;//[Offset: 0x400, Size: 0x10]
	FString Job;//[Offset: 0x410, Size: 0x10]
	int CharacterLevel;//[Offset: 0x420, Size: 0x4]
	int AvatarID;//[Offset: 0x424, Size: 0x4]
	int AvatarFrameID;//[Offset: 0x428, Size: 0x4]
	int Gender;//[Offset: 0x42c, Size: 0x4]
	int AccountLevel;//[Offset: 0x430, Size: 0x4]
	int FriendNum;//[Offset: 0x434, Size: 0x4]
	int RoleID;//[Offset: 0x438, Size: 0x4]
	MedalInfo[] Medals;//[Offset: 0x440, Size: 0x10]
	LastBattleInfo LastBattleInfo;//[Offset: 0x450, Size: 0x1c]
	int RoleUltimateSkillCDState;//[Offset: 0x46c, Size: 0x4]
	int[] SettlementItems;//[Offset: 0x470, Size: 0x10]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x480, Size: 0x10]
	SettlementReward[] SettlementRewards;//[Offset: 0x490, Size: 0x10]
	SettlementCrateReward[] CrateRewards;//[Offset: 0x4a0, Size: 0x10]
	uint32 PlayerNumber;//[Offset: 0x4b0, Size: 0x4]
	int[] BackpackUnLockGridNumArr;//[Offset: 0x4b8, Size: 0x10]
	<int,int> VehicleSkinData;//[Offset: 0x4c8, Size: 0x50]
	float CurrentHealth;//[Offset: 0x518, Size: 0x4]
	float MaxHealth;//[Offset: 0x51c, Size: 0x4]
	ShieldInfo CurShieldInfo;//[Offset: 0x520, Size: 0x8]
	byte ReviveItemNum;//[Offset: 0x528, Size: 0x1]
	int TalentID;//[Offset: 0x52c, Size: 0x4]
	int LikeValue;//[Offset: 0x530, Size: 0x4]
	int ReceivedGiftNum;//[Offset: 0x534, Size: 0x4]
	int SpectatorNum;//[Offset: 0x538, Size: 0x4]
	enum TalentState;//[Offset: 0x53c, Size: 0x1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 0x1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 0x1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x540, Size: 0x8]
	Vector SelfLastVehicleLocation;//[Offset: 0x548, Size: 0xc]
	Vector TeamLastVehicleLocation;//[Offset: 0x554, Size: 0xc]
	byte CurrentPlayerStateInGame;//[Offset: 0x560, Size: 0x1]
	byte CurrentCharacterStateInGame;//[Offset: 0x561, Size: 0x1]
	WorldMarkData MarkedWorldData;//[Offset: 0x568, Size: 0x50]
	int AccountFlag;//[Offset: 0x5b8, Size: 0x4]
	FString OS;//[Offset: 0x5c0, Size: 0x10]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	float HangUpTime;//[Offset: 0x5dc, Size: 0x4]
	uint32 Elo;//[Offset: 0x5e0, Size: 0x4]
	uint32 RankLevel;//[Offset: 0x5e4, Size: 0x4]
	uint32 RankLevel2;//[Offset: 0x5e8, Size: 0x4]
	byte LobbyTeamMemberNum;//[Offset: 0x5ec, Size: 0x1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	int RepliableMessageID;//[Offset: 0x614, Size: 0x4]
	float RepliableMessageStartTime;//[Offset: 0x618, Size: 0x4]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	Vector CharacterLocation;//[Offset: 0x620, Size: 0xc]
	int WarmId;//[Offset: 0x62c, Size: 0x4]
	int WarmType;//[Offset: 0x630, Size: 0x4]
	float WaitTimeBeforeEnterSpectateMode;//[Offset: 0x634, Size: 0x4]
	delegate OnSpectateInfoRep;//[Offset: 0x638, Size: 0x10]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x648, Size: 0x8]
	SolarPlayerState* RevengePlayerState;//[Offset: 0x650, Size: 0x8]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x658, Size: 0x8]
	enum NetStateInGame;//[Offset: 0x660, Size: 0x1]
	int KillNum;//[Offset: 0x670, Size: 0x4]
	int AssistNum;//[Offset: 0x674, Size: 0x4]
	Vector DeathPos;//[Offset: 0x678, Size: 0xc]
	int ReconnectNum;//[Offset: 0x684, Size: 0x4]
	float MultiKillDurationTime;//[Offset: 0x698, Size: 0x4]
	SettlementTempData SettleSyncData;//[Offset: 0x6a0, Size: 0x88]
	SolarPlayerState*[] TeammatesState;//[Offset: 0x728, Size: 0x10]
	int PlayerRank;//[Offset: 0x738, Size: 0x4]
	int TeamRank;//[Offset: 0x73c, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 0x1]
	float MvpScore;//[Offset: 0x744, Size: 0x4]
	float KDA;//[Offset: 0x748, Size: 0x4]
	int ResurrectionTimes;//[Offset: 0x74c, Size: 0x4]
	int CharacterExp;//[Offset: 0x750, Size: 0x4]
	int AccountExp;//[Offset: 0x754, Size: 0x4]
	<int,int> WeaponExps;//[Offset: 0x758, Size: 0x50]
	int Zomborg;//[Offset: 0x7a8, Size: 0x4]
	int ZomborgExtra;//[Offset: 0x7ac, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x7b0, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x7c0, Size: 0x4]
	enum PlayerOutPath;//[Offset: 0x7c5, Size: 0x1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c6, Size: 0x1]
	bool isPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c7, Size: 0x1]
	int InteractValue;//[Offset: 0x7c8, Size: 0x4]
	float LastInteractTime;//[Offset: 0x7cc, Size: 0x4]
	float DamageFactor;//[Offset: 0x7d0, Size: 0x4]
	float VehicleProbability;//[Offset: 0x7d4, Size: 0x4]
	bool bIsTimeoutPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0x7f8, Size: 0x58]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0x850, Size: 0x10]
	Vector PlayerLocation;//[Offset: 0x860, Size: 0xc]
	SolarPlayerState* ExposeTo;//[Offset: 0x870, Size: 0x8]
	enum SkydivingState;//[Offset: 0x878, Size: 0x1]
	byte SkydivingLeaderPosInTeam;//[Offset: 0x879, Size: 0x1]
	byte SkydivingFollowFormationPos;//[Offset: 0x87a, Size: 0x1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0x880, Size: 0x8]
	int[] PreCompletedAchievementIDs;//[Offset: 0x890, Size: 0x10]
	int PlayerLevel;//[Offset: 0x8a0, Size: 0x4]
	int PlayerExperience;//[Offset: 0x8a4, Size: 0x4]
	SpatializeInfoTrack* TrackInfo;//[Offset: 0x8a8, Size: 0x8]
	float TrackRevealDistance;//[Offset: 0x8b0, Size: 0x4]
	enum AppLifetimeState;//[Offset: 0x8b4, Size: 0x1]
	bool WillFollowMovementOfSkydivingLeader();// 0x4acddb8
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x4ad0aa4
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x4ad0b94
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x4acef1c
	void StatVehicleDriveType(int DriveType);// 0x4acee70
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x4ad0490
	void SetRoleUltimateSkillCDState(const int NewState);// 0x4acf33c
	void SetRoleID(const int InRoleID);// 0x4acf48c
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x4ad00b8
	void SetIsTimeoutPlayer(const bool InValue);// 0x4acfdb0
	void SetIsSameTeamWithLocalPlayer(bool bIsSameTeam);// 0x4ad0778
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x4acf530
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x4ace268
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x4ace1c4
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x4ace30c
	void ServerChangeRoleID(const int InRoleID);// 0x4acf3e0
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x4acea68
	void ReceiveTeamIdReplicated();// 0x505573c
	void ReceiveTalentStateSet(enum InState);// 0x505573c
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x4ace41c
	void ReceivePostInitializeComponents();// 0x505573c
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer, const bool NeedSyncToDS);// 0x4acf8e8
	void ReceiveClientInitialize(Controller* C);// 0x505573c
	bool PlayerCanRebirthByReviveItem();// 0x4acfd78
	bool PlayerCanRebirthBlueprint();// 0x4acf774
	bool PlayerCanRebirth();// 0x4acfe78
	void OnUpdatedPlayerStateLoginData();// 0x4ad01c4
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x505573c
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x505573c
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x505573c
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x4acd890
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x4acefc0
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnRequestStartResurrect(DeathTreasureBox* InDeatbox);// 0x505573c
	void OnRequestCancelResurrect(DeathTreasureBox* InDeatbox);// 0x505573c
	void OnRep_UserId();// 0x505573c
	void OnRep_TeammatesState();// 0x505573c
	void OnRep_TeamLastVehicleLocation();// 0x4ace774
	void OnRep_TeamId();// 0x4ace9ec
	void OnRep_TalentID();// 0x4ace7dc
	void OnRep_SpectateInfo();// 0x4acf26c
	void OnRep_SkydivingState();// 0x4acdd6c
	void OnRep_SkydivingLeaderPosInTeam();// 0x4acdd58
	void OnRep_SkinId();// 0x4acea1c
	void OnRep_Side();// 0x4ace580
	void OnRep_SelfLastVehicleLocation();// 0x4ace790
	void OnRep_RoleUltimateSkillCDState();// 0x505573c
	void OnRep_RoleID();// 0x505573c
	void OnRep_ReviveItemNum();// 0x4ace8c0
	void OnRep_RepliableMsg();// 0x4ace7c8
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x4ace7f0
	void OnRep_PlayerLocation();// 0x4ace18c
	void OnRep_PlayerLevel();// 0x4acda70
	void OnRep_NetStateInGame();// 0x4ace5b0
	void OnRep_MaxHealth();// 0x4ace998
	void OnRep_MarkedWorldData();// 0x4ace5e0
	void OnRep_MarkedPointInNavMap();// 0x4ace7ac
	void OnRep_KillNum();// 0x4ace59c
	void OnRep_Job();// 0x4ace56c
	void OnRep_Gold();// 0x4acea54
	void OnRep_ExposeLocationArray();// 0x4ace1a8
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x4ace8dc
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x4ace6b8
	void OnRep_CurrentHealth();// 0x4ace9b4
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x4ace5fc
	void OnRep_ClanId();// 0x4acea00
	void OnRep_CharacterId();// 0x4acea38
	void OnRep_BattleVoiceId();// 0x505573c
	void OnRep_BackpackUnLockGridNumArr();// 0x4ace9d0
	void OnRep_AccountFlag();// 0x4ace5cc
	void OnRefreshReviveInfo();// 0x4ace8ac
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x505573c
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x505573c
	void OnPlayerUpdateStatData(enum InType);// 0x4ad01d8
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp);// 0x505573c
	void OnPlayerChangedGolds(enum ChangedGoldType, int CostGoldNum, enum CostResult);// 0x4acf7b4
	void OnOtherPlayerStopSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x4acf0a4
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x4acf188
	void OnCancelResurrectProgress(const int InTextId);// 0x4acd7ec
	void NotifyUpdateTeamMateLevelUI();// 0x505573c
	void NotifyAddExperience(int ExpAdded);// 0x4acdc08
	bool NeedPerformSpectateInfoOnSimulate();// 0x4acf73c
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x505573c
	bool IsUnfollowShortcutEnabled();// 0x4acdd80
	bool IsTimeOutPlayer();// 0x4acfe5c
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x4ad0894
	bool IsSpectatingOtherPlayer();// 0x4acf710
	bool IsSkydivingLeader();// 0x4acdf44
	bool IsSkydivingCompleted();// 0x4acddf0
	bool IsSkydiving();// 0x4acde14
	bool IsSameTeamWithReferToPlayer();// 0x4ad0824
	bool IsSameTeamWithLocalPlayer();// 0x4ad085c
	bool IsPreStartSkydiving();// 0x4acde38
	bool IsPlayerTeam();// 0x4ad063c
	bool IsPlayerOnline();// 0x4acffbc
	bool IsPlayerOffline();// 0x4acfff4
	bool IsPlayer();// 0x4acfed4
	bool IsOutBySelf();// 0x4ad0064
	bool IsOfflinePlayer();// 0x4acff0c
	bool IsOBPlayer();// 0x4acfeb8
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x4acde5c
	bool IsMonster();// 0x4acff44
	bool IsMaxLevelInGame();// 0x4acda38
	bool IsLocalPlayerSpectatingMe();// 0x4acf6a8
	bool IsKickOutByServer();// 0x4ad002c
	bool IsBuyingResurrection();// 0x505573c
	bool IsBeingSpectated();// 0x4acf6e0
	bool IsAIPlayer();// 0x4acff7c
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x4ad03d0
	bool HasSkydivingLeader();// 0x4acdf0c
	bool HasSettled();// 0x4aced4c
	int GetWeaponSettlmentExp(int weaponid);// 0x505573c
	int GetVehicleSkinID(int VehicleID);// 0x4acfc94
	FString GetUserID();// 0x4acf280
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x4ad0674
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x4ad0590
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x4ad015c
	SolarSpectateInfo* GetSpectateTargetSpectateInfo();// 0x4acf634
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x4acf660
	SolarCharacter* GetSpectateTargetCharacter();// 0x4acf684
	SolarSpectateInfo* GetSpectateInfo();// 0x4acf618
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x4ad027c
	SolarPlayerController* GetSolarPlayerController();// 0x4ad02b0
	SolarCharacter* GetSolarCharacter();// 0x4ad02e4
	SolarCharacter* GetPossessedCharacter();// 0x4ace3b0
	PlayerStatisticsData* GetPlayerStatData();// 0x4ad0190
	enum GetPlayerNetState();// 0x4ad009c
	FString GetPlayerNameWithoutUID();// 0x4ad0318
	void GetNotSettlementItems(out SolarItemData[] Items);// 0x4acec90
	MedalInfo[] GetMedalInfo();// 0x4acfbe4
	bool GetIsPlayerBattleEnd();// 0x4acf5d8
	float GetExpSettleModePunishRatio();// 0x505573c
	int GetExpItemCount();// 0x4acda04
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x4acda8c
	float GetCurrentTalentCDDuration();// 0x4ace504
	float GetCurrentTalentActiveDuration();// 0x4ace538
	Vector GetCharacterLocation();// 0x4ace3e4
	void GetCanSettlementItems(out int[] Items);// 0x4acebd0
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x505573c
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x505573c
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x4acfa3c
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x4aced84
	void ClearTeammatesMark();// 0x4aced68
	bool CheckIfTeamLastVehicleLocationValid();// 0x4ad0cbc
	bool CheckIfTeamIdValid();// 0x4ad0d9c
	bool CheckIfSelfLastVehicleLocationValid();// 0x4ad0cf4
	bool CheckIfPosInTeamValid();// 0x4ad0d64
	bool CheckIfMarkedPointInNavMapValid();// 0x4ad0d2c
	bool CheckIfInactive();// 0x4ad0c84
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x4ad0944
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x4ad09f4
	bool CheckIfBattleVoiceIdValid();// 0x4ad0dd4
	bool CheckGoldIsEnough(const int InCostedGold);// 0x4acfb34
	bool CanReviveItemPutInDeathBox();// 0x4acfd40
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x4acdf7c
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x4ace0dc
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x4ace02c
	int CalculateZomborg();// 0x505573c
	float CalculateCharacterExp();// 0x505573c
	float CalculateAccountExp();// 0x505573c
	void AssignReplaceTeamPosBySide(FString InSide);// 0x4ad0e20
	void AssignPosInTeamBySide();// 0x4ad0e0c
	void AssignPosInTeam();// 0x4ad0ed0
	void AddExperience(int InExp);// 0x4acdcb4

--------------------------------
Class: MedalInfo
	int MedalID;//[Offset: 0x0, Size: 0x4]
	int MedalType;//[Offset: 0x4, Size: 0x4]
	int MedalPos;//[Offset: 0x8, Size: 0x4]
	int MedalLv;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LastBattleInfo
	float MvpScore;//[Offset: 0x0, Size: 0x4]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int HitDown;//[Offset: 0x8, Size: 0x4]
	int AssistNum;//[Offset: 0xc, Size: 0x4]
	int RescueNum;//[Offset: 0x10, Size: 0x4]
	int AliveTime;//[Offset: 0x14, Size: 0x4]
	int CauseDamage;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	FString LocVariable;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	FString ItemList;//[Offset: 0x28, Size: 0x10]
	int Order;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SettlementReward
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Amount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SettlementCrateReward
	int64 crateID;//[Offset: 0x0, Size: 0x8]
	SettlementReward[] Items;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 0x4]
	float CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WorldMarkData
	Vector WorldPos;//[Offset: 0x0, Size: 0xc]
	Vector2D ScreenCoordinate;//[Offset: 0xc, Size: 0x8]
	enum Type;//[Offset: 0x14, Size: 0x1]
	int ItemID;//[Offset: 0x18, Size: 0x4]
	int64 ItemInstanceId;//[Offset: 0x20, Size: 0x8]
	int NameLocID;//[Offset: 0x28, Size: 0x4]
	FString IconImg;//[Offset: 0x30, Size: 0x10]
	int WeaponLevel;//[Offset: 0x40, Size: 0x4]
	enum InteractableType;//[Offset: 0x44, Size: 0x1]
	int OuterBoxThisID;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SolarSpectateInfo.Actor.Object
	delegate OnBeginUpdateSpectateInfo;//[Offset: 0x228, Size: 0x10]
	delegate OnStopUpdateSpectateInfo;//[Offset: 0x238, Size: 0x10]
	delegate OnOtherPlayerBeginSpectateMe;//[Offset: 0x248, Size: 0x10]
	delegate OnOtherPlayerStopSpectateMe;//[Offset: 0x258, Size: 0x10]
	delegate OnBeforeSpectateTargetChange;//[Offset: 0x268, Size: 0x10]
	delegate OnSpectateTargetChanged;//[Offset: 0x278, Size: 0x10]
	delegate OnSpectatePhaseChanged;//[Offset: 0x288, Size: 0x10]
	delegate OnSwitchSpectateTargetFailed;//[Offset: 0x298, Size: 0x10]
	delegate OnSpectatorOfMyTargetChanged;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSpectateInfoOfMyTargetReadied;//[Offset: 0x2b8, Size: 0x10]
	delegate OnSpectateCharacterOfMyTargetReadied;//[Offset: 0x2c8, Size: 0x10]
	SpectatingOthersInfo SpectatingOthersInfo;//[Offset: 0x438, Size: 0x60]
	<SolarPlayerState*> SpectatingMePlayerStates;//[Offset: 0x498, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0x4e8, Size: 0x8]
	enum SpectatePhase;//[Offset: 0x4f6, Size: 0x1]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x568, Size: 0x10]
	InteractiveTaskStatus TaskStatus;//[Offset: 0x578, Size: 0x78]
	DataTable* InteractiveTaskTable;//[Offset: 0x5f0, Size: 0x8]
	FString TaskTablePath;//[Offset: 0x5f8, Size: 0x10]
	Rotator PlayerCameraRotation;//[Offset: 0x608, Size: 0xc]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x618, Size: 0x10]
	ReplicateMaxPileData[] CharacterBackpackItemMaxPiles;//[Offset: 0x628, Size: 0x10]
	int CharacterVJetRestTimes;//[Offset: 0x638, Size: 0x4]
	int CharacterVJetModuleLevel;//[Offset: 0x63c, Size: 0x4]
	int CharacterHJetRestTimes;//[Offset: 0x640, Size: 0x4]
	int CharacterHJetModuleLevel;//[Offset: 0x644, Size: 0x4]
	RepCountdownData SpectateCountdownData;//[Offset: 0x648, Size: 0x1c]
	BattleUpgradeEffectParamData[] BattleUpgradeEffectData;//[Offset: 0x668, Size: 0x10]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x4b03d78
	void ServerStopSpectateOtherPlayer_Internal();// 0x4b05e1c
	void ServerStopSpectateOtherPlayer();// 0x4b05f68
	void ServerSpectatePreviousPlayer();// 0x4b05f30
	void ServerSpectateNextPlayer();// 0x4b05f4c
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x4b05e54
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x4b05f90
	void ServerSetPlayerCameraRotation(const Rotator Rotation);// 0x4b03cd0
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x4b04e74
	void ServerRequestSendTask(int InTaskID);// 0x4b042f4
	void ServerRequestIncreaseTargetTaskLevel();// 0x4b04234
	void ServerRequestAvailableTask();// 0x4b0446c
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x4b05434
	void ServerBeginSpectateOtherPlayer_Internal();// 0x4b05e38
	void ServerBeginSpectateOtherPlayer();// 0x4b05f7c
	bool SendTask(int InTaskID);// 0x4b048fc
	void SendGift(const int GiftID, const int Num);// 0x4b04d90
	void RequestSendTask(int InTaskID);// 0x4b04250
	void RequestIncreaseTargetTaskLevel();// 0x4b04220
	void RequestAvailableTask();// 0x4b043a0
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x4b057a8
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnStopRecordingReplay();// 0x4b05f08
	void OnStartRecordingReplay();// 0x4b05f1c
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnSpectatePhaseChanged__DelegateSignature(enum CurrentPhase);// 0x505573c
	void OnSpectateInfoOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnRep_TaskStatus();// 0x4b03e1c
	void OnRep_SpectatePhase();// 0x4b05794
	void OnRep_SpectateCountdownData();// 0x4b03c58
	void OnRep_CharacterVJetRestTimes();// 0x4b03ca8
	void OnRep_CharacterVJetModuleLevel();// 0x4b03c94
	void OnRep_CharacterHJetRestTimes();// 0x4b03c80
	void OnRep_CharacterHJetModuleLevel();// 0x4b03c6c
	void OnRep_CharacterBackpackItems();// 0x4b03cbc
	void OnRep_BattleUpgradeEffectData();// 0x4b03c44
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnOpenAirBoxNum(enum InStatType);// 0x4b04a64
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x4b05564
	void OnIncreaseKillNumWithWeaponType(enum InStatType, int InWeaponID);// 0x4b04bc0
	void OnIncreaseKillNumWithPunch(enum InStatType);// 0x4b049c0
	void OnIncreaseKillNumWithAnyVehicle(enum InStatType);// 0x4b04b1c
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x4b04f60
	void OnCurrentPlayerCountChanged();// 0x4b049ac
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnBeforeSpectateTargetChange__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnAvailableAirDropsNumChanged();// 0x4b04b08
	bool NeedUpdateSpectateInfo();// 0x4b06234
	bool IsSpectatingOtherPlayer();// 0x4b062e8
	bool IsRecordingReplay();// 0x4b0626c
	bool IsLocalPlayerSpectatingMe();// 0x4b06288
	bool IsBeingSpectated();// 0x4b062c0
	bool IncreaseTaskLevel(SolarPlayerState* SendPlayer);// 0x4b0484c
	<SolarPlayerState*> GetSpectatorsOfMyTarget();// 0x4b060c4
	<SolarPlayerState*> GetSpectatingMePlayerStates();// 0x4b061a4
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x4b06188
	SolarCharacter* GetSpectateTargetCharacter();// 0x4b060a8
	void GetSpectateReportInfo(out SpectateReportInfo SpectateReportInfo, bool HasNextTarget);// 0x4b0568c
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x4b06154
	SpectateConditions GetSpectateConditions();// 0x4b06080
	SolarPlayerState* GetSolarPlayerState();// 0x4b0604c
	bool GetInteractiveTaskConfigByID(int InTaskID, out InteractiveTaskConfig OutConfig);// 0x4b046e4
	int[] GetAvailableTaskByRandom();// 0x4b04578
	void GetAllInteractiveTaskConfigFromTable(out InteractiveTaskConfig[] OutAllConfig);// 0x4b04628
	SolarPlayerState*[] GetAllAlivePlayers();// 0x4b04ca8
	bool CostCurrencyByTaskAction(int InTaskID, int CurTasklevel);// 0x4b04488
	void ClientSetSpectatorsOfMyTarget(const SolarPlayerState*[] SpectatorsOfMyTarget);// 0x4b05c78
	void ClientSetSpectateTargetInfo(SolarPlayerState* TargetPS, SolarCharacter* TargetCharacter);// 0x4b05d30
	void ClientSetServerRecording(bool bInServerRecording);// 0x4b05a6c
	void ClientSendSwitchSpectateTargetFailed();// 0x4b05a50
	void ClientRemoveSpectatingMePlayer(SolarPlayerState* Player);// 0x4b05b20
	void ClientOnReconnected(enum InSpecPhase, FString InTargetPSId, const FString[] InSpectatorsOfMyTargetId, const FString[] InSpectatingMePlayersId);// 0x4b0584c
	void ClientNotifyTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x4b04028
	void ClientNotifySelfTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x4b03e30
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x4b05044
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x4b0523c
	void ClientNotifyAvailableTaskResult(const int[] AvailableTask);// 0x4b043b4
	void ClientAddSpectatingMePlayer(SolarPlayerState* Player);// 0x4b05bcc
	bool CheckIsCanSpectateOthers();// 0x4b04d58
	bool CanISpectate(const SolarPlayerState* Target);// 0x4b0630c

--------------------------------
Class: SpectatingOthersInfo
	SolarPlayerState* SpectateTargetPlayerState;//[Offset: 0x0, Size: 0x8]
	SolarCharacter* SpectateTargetCharacter;//[Offset: 0x8, Size: 0x8]
	<SolarPlayerState*> SpectatorsOfMyTarget;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	delegate PendingBeginPlay;//[Offset: 0x5f0, Size: 0x10]
	delegate OnPlayerStatePossessDelegate;//[Offset: 0x630, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x640, Size: 0x10]
	enum SolarCharacterType;//[Offset: 0x650, Size: 0x1]
	SolarCharacter* ClientControlledCharacter;//[Offset: 0x6a8, Size: 0x8]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x6b0, Size: 0x8]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 0x1]
	float CheckInRoomInterval;//[Offset: 0x6bc, Size: 0x4]
	ReconnectionParams ReconnectionParams;//[Offset: 0x6c5, Size: 0x1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x6e0, Size: 0x8]
	SolarSpecABP_Vehicle* SolarSpecAnim_Vehicle;//[Offset: 0x6e8, Size: 0x8]
	int BodyHitSoundCount;//[Offset: 0x700, Size: 0x4]
	int BodyHitByPunchSoundCount;//[Offset: 0x704, Size: 0x4]
	SolarPile*[] ChargingPileQueue;//[Offset: 0x708, Size: 0x10]
	int64 ChargingDoneSoundCD;//[Offset: 0x718, Size: 0x8]
	class CameraShake* HitCameraShake;//[Offset: 0x730, Size: 0x8]
	float CameraShakeCD;//[Offset: 0x738, Size: 0x4]
	MaterialParameterCollection* CameraFOVParameterCollection;//[Offset: 0x740, Size: 0x8]
	delegate OnCharacterIDSet;//[Offset: 0x758, Size: 0x10]
	delegate OnSkinIDSet;//[Offset: 0x768, Size: 0x10]
	delegate OnCharacterSkinReset;//[Offset: 0x778, Size: 0x10]
	enum BodyScaleType;//[Offset: 0x788, Size: 0x1]
	int AssignedCharacterID;//[Offset: 0x78c, Size: 0x4]
	int AssignedSkinID;//[Offset: 0x790, Size: 0x4]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0x8e0, Size: 0x8]
	class GameplayEffect* ExtraVJetTimesEffect;//[Offset: 0x8f8, Size: 0x8]
	class GameplayEffect* VJetChargeScaleEffect;//[Offset: 0x900, Size: 0x8]
	class GameplayEffect* ExtraHJetTimesEffect;//[Offset: 0x908, Size: 0x8]
	class GameplayEffect* HJetChargeScaleEffect;//[Offset: 0x910, Size: 0x8]
	GameplayTag ExtraJetTimesSetterTag;//[Offset: 0x918, Size: 0x8]
	GameplayTag JetChargeScaleSetterTag;//[Offset: 0x920, Size: 0x8]
	int DeathBoxId;//[Offset: 0x928, Size: 0x4]
	int MonsterDeathBoxId;//[Offset: 0x92c, Size: 0x4]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0x938, Size: 0x8]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0x940, Size: 0x8]
	delegate OnBackpackItemUpdate;//[Offset: 0x968, Size: 0x10]
	delegate OnBackpackEnergyUpdate;//[Offset: 0x978, Size: 0x10]
	delegate OnBackpackEquipUpdate;//[Offset: 0x988, Size: 0x10]
	delegate OnBatteryIdUpdate;//[Offset: 0x998, Size: 0x10]
	delegate OnEnergyStateUpdate;//[Offset: 0x9a8, Size: 0x10]
	delegate OnChargeInfoUpdate;//[Offset: 0x9b8, Size: 0x10]
	delegate OnConsumableNumUpdated;//[Offset: 0x9c8, Size: 0x10]
	delegate OnMaxEnergyUpdate;//[Offset: 0x9d8, Size: 0x10]
	delegate OnCurEnergyUpdate;//[Offset: 0x9e8, Size: 0x10]
	delegate OnBackpackWeaponPartUpdate;//[Offset: 0x9f8, Size: 0x10]
	<int,int> MaxPileMap;//[Offset: 0xa08, Size: 0x50]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0xa58, Size: 0x10]
	ReplicateBagGradeData[] GradeKeyBagGradeArray;//[Offset: 0xa68, Size: 0x10]
	BagRequirementData[] BagRequirementArr;//[Offset: 0xa78, Size: 0x10]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0xa88, Size: 0x50]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0xad8, Size: 0x10]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0xae8, Size: 0x50]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0xb38, Size: 0x10]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0xb48, Size: 0x10]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0xb58, Size: 0x50]
	int[] WeaponPartsArray;//[Offset: 0xbf8, Size: 0x10]
	byte[] IgnoreScopeSlots;//[Offset: 0xc10, Size: 0x10]
	int BeReplacedWeaponItemID;//[Offset: 0xc20, Size: 0x4]
	byte EnergyState;//[Offset: 0xc24, Size: 0x1]
	float MaxEnergyValue;//[Offset: 0xc28, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0xc2c, Size: 0x4]
	float MaxExtraEnergyValue;//[Offset: 0xc30, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0xc34, Size: 0x4]
	int EnergyModuleID;//[Offset: 0xc38, Size: 0x4]
	float AddedEnergyMax;//[Offset: 0xc3c, Size: 0x4]
	int ExtraEnergyModuleID;//[Offset: 0xc40, Size: 0x4]
	float AddedExtraEnergyMax;//[Offset: 0xc44, Size: 0x4]
	int VJetPackModuleID;//[Offset: 0xc48, Size: 0x4]
	int HJetPackModuleID;//[Offset: 0xc4c, Size: 0x4]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc51, Size: 0x1]
	int DayLightID;//[Offset: 0xc54, Size: 0x4]
	float SolarChargeRatio;//[Offset: 0xc58, Size: 0x4]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c, Size: 0x1]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0xc60, Size: 0xc]
	enum BackpackPropellingMode;//[Offset: 0xc6c, Size: 0x1]
	AttributeDefaults ItemAttributeData;//[Offset: 0xc70, Size: 0x10]
	SolarGameplayAbilitySet* ItemGrantedAbilities;//[Offset: 0xc80, Size: 0x8]
	Vector2D InputVector;//[Offset: 0xc88, Size: 0x8]
	GyroscopeConfig* GyroscopeConfig;//[Offset: 0xc90, Size: 0x8]
	byte IdleTurnType;//[Offset: 0xc98, Size: 0x1]
	Rotator CharacterLookAt;//[Offset: 0xc9c, Size: 0xc]
	float TurnSpeed;//[Offset: 0xcc0, Size: 0x4]
	float TurnChangeSpeedThreshold;//[Offset: 0xcc4, Size: 0x4]
	float TurnAngleThreshold;//[Offset: 0xcc8, Size: 0x4]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0xcd0, Size: 0x10]
	delegate OnHealthUpdateDelegate;//[Offset: 0xcf8, Size: 0x10]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd08, Size: 0x1]
	FName DissolvedDeathFXBindingSocketName;//[Offset: 0xd14, Size: 0x8]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0xd20, Size: 0x8]
	SolarCharacter* RescuingCharater;//[Offset: 0xd28, Size: 0x8]
	byte CurrentRescueState;//[Offset: 0xd30, Size: 0x1]
	byte LastRescueState;//[Offset: 0xd31, Size: 0x1]
	InjectorMeshPreset RescueInjectorPreset;//[Offset: 0xd50, Size: 0x50]
	int FastReliefPassiveTextID;//[Offset: 0xda0, Size: 0x4]
	StaticMeshComponent* RescueInjector;//[Offset: 0xda8, Size: 0x8]
	SolarCharacter* RescuedCharater;//[Offset: 0xdd4, Size: 0x8]
	float RescueTime;//[Offset: 0xddc, Size: 0x4]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0xde8, Size: 0x10]
	SolarItemData[] DeathBoxArray;//[Offset: 0xdf8, Size: 0x10]
	float DeathBoxEnergy;//[Offset: 0xe08, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0xe10, Size: 0x8]
	float KneeWaterInfluencesCharacterSpeed;//[Offset: 0xe18, Size: 0x4]
	float WaterDraftDepthWhenDeathVerge;//[Offset: 0xe1c, Size: 0x4]
	float ShoalWaterMaxDepth;//[Offset: 0xe20, Size: 0x4]
	float HeavyJumpWaterMinAxisVelocity;//[Offset: 0xe24, Size: 0x4]
	WaterEffectPreset SwimmingWaterEffectPreset;//[Offset: 0xe28, Size: 0x50]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0xe78, Size: 0x8]
	WaterEffectPreset HeavyJumpWaterEffectPreset;//[Offset: 0xe80, Size: 0x50]
	WaterEffectPreset[] SoftJumpWaterEffectPresets;//[Offset: 0xed0, Size: 0x10]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0xee0, Size: 0x10]
	int AirDropSkillTextID;//[Offset: 0xf0c, Size: 0x4]
	FName PickupCollisionProfileName;//[Offset: 0xf10, Size: 0x8]
	SolarItemComponent* SolarItemComponent;//[Offset: 0xf18, Size: 0x8]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0xf20, Size: 0x8]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf28, Size: 0x1]
	ParticleSystem* TreatFX;//[Offset: 0xf30, Size: 0x28]
	float MinHealthRatioToShowMedicineFX;//[Offset: 0xf58, Size: 0x4]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0xf60, Size: 0x8]
	int TreatmentTextID;//[Offset: 0xf68, Size: 0x4]
	enum CurrentTreatState;//[Offset: 0xf6c, Size: 0x1]
	int TreatmentCount;//[Offset: 0xf70, Size: 0x4]
	delegate OnShieldRecharge;//[Offset: 0xf78, Size: 0x10]
	delegate OnShieldBreak;//[Offset: 0xf88, Size: 0x10]
	delegate OnShowShieldHUD;//[Offset: 0xf98, Size: 0x10]
	delegate OnShowShieldHUDItem;//[Offset: 0xfa8, Size: 0x10]
	delegate OnShieldUpFX;//[Offset: 0xfb8, Size: 0x10]
	delegate OnCurShieldValueChanged;//[Offset: 0xfc8, Size: 0x10]
	delegate OnShieldIDChanged;//[Offset: 0xfd8, Size: 0x10]
	delegate OnShieldValueLow;//[Offset: 0xfe8, Size: 0x10]
	int CurrShieldId;//[Offset: 0xffc, Size: 0x4]
	int CurUniqueShieldId;//[Offset: 0x1000, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x1004, Size: 0x4]
	int NextUpgradeShieldID;//[Offset: 0x1008, Size: 0x4]
	int NextUpgradeShieldEnergy;//[Offset: 0x100c, Size: 0x4]
	float CurrShieldValue;//[Offset: 0x1010, Size: 0x4]
	enum CurrShieldState;//[Offset: 0x1014, Size: 0x1]
	int CurrShieldLevel;//[Offset: 0x1018, Size: 0x4]
	bool bHasPreAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101c, Size: 0x1]
	OperatorMeshPreset ShieldOperatorPreset;//[Offset: 0x10c0, Size: 0xa0]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0x1160, Size: 0x8]
	StaticMesh* ShieldOperatorSM;//[Offset: 0x1168, Size: 0x8]
	StaticMesh* ShieldOperatorBigSM;//[Offset: 0x1170, Size: 0x8]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0x1178, Size: 0x8]
	CurveFloat* ShieldOperatorExpandCurve;//[Offset: 0x1180, Size: 0x8]
	CurveFloat* ShieldOperatorNarrowCurve;//[Offset: 0x1188, Size: 0x8]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0x1190, Size: 0x98]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0x1228, Size: 0x98]
	FName EffectAttachBone;//[Offset: 0x12c0, Size: 0x8]
	ShieldEffect ShieldRechargeEffect;//[Offset: 0x12c8, Size: 0x38]
	ShieldEffect ShieldBrokenEffect;//[Offset: 0x1300, Size: 0x38]
	float HitEffectOffset;//[Offset: 0x1338, Size: 0x4]
	int ShieldRechargeTextID;//[Offset: 0x133c, Size: 0x4]
	int ShieldRechargePassiveTextID;//[Offset: 0x1340, Size: 0x4]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0x1348, Size: 0x50]
	TreasureBoxOperatorMeshPreset TreasureBoxOperatorMeshPreset;//[Offset: 0x13a0, Size: 0x50]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0x13f0, Size: 0x8]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0x13f8, Size: 0x8]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0x1400, Size: 0x10]
	ParticleSystem* RevivePickupFX;//[Offset: 0x1418, Size: 0x28]
	ParticleSystem* ReviveClearFX;//[Offset: 0x1440, Size: 0x28]
	delegate OnHUDNickNameSet;//[Offset: 0x1468, Size: 0x10]
	delegate OnHUDTeamPosSet;//[Offset: 0x1478, Size: 0x10]
	delegate OnHUDDistanceSet;//[Offset: 0x1488, Size: 0x10]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x1498, Size: 0x10]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x14a8, Size: 0x10]
	WidgetComponent* TeammateHUDComp;//[Offset: 0x14b8, Size: 0x8]
	TeammateHUDPreset TeammateHUDPreset;//[Offset: 0x14c0, Size: 0x20]
	float HUDZNomral;//[Offset: 0x14e8, Size: 0x4]
	float HUDZSwim;//[Offset: 0x14ec, Size: 0x4]
	float HUDZCrouch;//[Offset: 0x14f0, Size: 0x4]
	float HUDZCrawl;//[Offset: 0x14f4, Size: 0x4]
	float HUDChangeTime;//[Offset: 0x14f8, Size: 0x4]
	float HUDChangeSpeed;//[Offset: 0x14fc, Size: 0x4]
	float CheckHUDDistanceToCenter;//[Offset: 0x1500, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x1504, Size: 0x4]
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0x1518, Size: 0x8]
	class UserWidget* RadarScannedScreenUIClass;//[Offset: 0x1520, Size: 0x8]
	MaterialInterface* RadarDetectedMaterial;//[Offset: 0x1528, Size: 0x28]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x1550, Size: 0x8]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x1558, Size: 0x120]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x1678, Size: 0x8]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x1680, Size: 0x8]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x1690, Size: 0x8]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x1708, Size: 0x8]
	delegate OnPlayerHitAtDirection;//[Offset: 0x1720, Size: 0x10]
	float DamageLimitTime;//[Offset: 0x1730, Size: 0x4]
	float MinHitTurnBackDistance;//[Offset: 0x1734, Size: 0x4]
	float MaxHitTurnBackDistance;//[Offset: 0x1738, Size: 0x4]
	float HitTurnBackDuration;//[Offset: 0x173c, Size: 0x4]
	float HitTurnBackCD;//[Offset: 0x1740, Size: 0x4]
	float BaseHitTurnSpeed;//[Offset: 0x1744, Size: 0x4]
	float MinHitTurnSpeedRate;//[Offset: 0x1748, Size: 0x4]
	float ArmorReduceValue;//[Offset: 0x174c, Size: 0x4]
	float HeadHitValue;//[Offset: 0x1750, Size: 0x4]
	delegate OnTakeDamageDelegate;//[Offset: 0x1758, Size: 0x10]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x1770, Size: 0x4]
	float MinDistSquared;//[Offset: 0x1774, Size: 0x4]
	float MaxDistSquared;//[Offset: 0x1778, Size: 0x4]
	float HitTurnBackTimeStamp;//[Offset: 0x177c, Size: 0x4]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x1780, Size: 0x10]
	float DefaultHitTraceLifetime;//[Offset: 0x17d4, Size: 0x4]
	CurveFloat* DefaultHitTraceWidgetScaleCurve;//[Offset: 0x17d8, Size: 0x8]
	float SniperHitTraceLifetime;//[Offset: 0x17e0, Size: 0x4]
	CurveFloat* SniperHitTraceWidgetScaleCurve;//[Offset: 0x17e8, Size: 0x8]
	float MeleeHitTraceLifetime;//[Offset: 0x17f0, Size: 0x4]
	float VehicleHitTraceLifetime;//[Offset: 0x17f4, Size: 0x4]
	CurveFloat* VehicleHitTraceWidgetScaleCurve;//[Offset: 0x17f8, Size: 0x8]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x1838, Size: 0x8]
	float PeekSpeed;//[Offset: 0x1840, Size: 0x4]
	int DesirePeekValue;//[Offset: 0x1844, Size: 0x4]
	IMChatObject* IMChatObj;//[Offset: 0x1848, Size: 0x8]
	int AIActorCapacity;//[Offset: 0x1850, Size: 0x4]
	SolarCharacterAbility* CharacterAbility;//[Offset: 0x1878, Size: 0x8]
	SolarGameplayAbilitySet* DefaultAbilitiesWithCharacterData;//[Offset: 0x1880, Size: 0x8]
	CharacterGameplayTagsConfig* GameplayTagsConfig;//[Offset: 0x1888, Size: 0x8]
	float StandJogSpeed;//[Offset: 0x18b8, Size: 0x4]
	float StandRunSpeed;//[Offset: 0x18bc, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x18c0, Size: 0x4]
	float CrouchJogSpeed;//[Offset: 0x18c4, Size: 0x4]
	float CrouchRunSpeed;//[Offset: 0x18c8, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x18cc, Size: 0x4]
	float JetLandingTriggerMinVelocity;//[Offset: 0x18d0, Size: 0x4]
	float JetLandingHeightThreshold;//[Offset: 0x18d4, Size: 0x4]
	float JetLandingVelocity;//[Offset: 0x18d8, Size: 0x4]
	delegate OnJogSetClient;//[Offset: 0x18e0, Size: 0x10]
	bool bIsSprintingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1900, Size: 0x1]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1908, Size: 0x8]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1914, Size: 0x1]
	float MoveSpeedScaleInHipFire;//[Offset: 0x1920, Size: 0x4]
	float MoveSpeedScaleInAdsHipFire;//[Offset: 0x1924, Size: 0x4]
	bool bEnableCustomJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1928, Size: 0x1]
	enum CurrentCustomJumpType;//[Offset: 0x1929, Size: 0x1]
	enum CurrentJetFlyType;//[Offset: 0x192c, Size: 0x1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x192d, Size: 0x1]
	CruiseAssetSet* CruiseAssetSet;//[Offset: 0x1970, Size: 0x8]
	FString AirborneStartSound;//[Offset: 0x1978, Size: 0x10]
	FString AirborneJumpSound;//[Offset: 0x1988, Size: 0x10]
	AnimSequence* CruiseStartAnim;//[Offset: 0x1998, Size: 0x8]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x19a0, Size: 0x8]
	AnimSequence* CruiseEndAnim;//[Offset: 0x19a8, Size: 0x8]
	int CapsuleID;//[Offset: 0x19c8, Size: 0x4]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19cc, Size: 0x1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x19d0, Size: 0x8]
	enum CruiseState;//[Offset: 0x19d8, Size: 0x1]
	int ForceParachuteCountDown;//[Offset: 0x19dc, Size: 0x4]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x19e0, Size: 0x8]
	SkydivingEffectPreset[] SkydivingEffectClassList;//[Offset: 0x19f0, Size: 0x10]
	float LowerLimitOfSpeedForSkydivingSoundEffect;//[Offset: 0x1a00, Size: 0x4]
	float MinPitchToPlaySkydivingLandingEffect;//[Offset: 0x1a04, Size: 0x4]
	delegate OnSkydiveTraced;//[Offset: 0x1a08, Size: 0x10]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1a18, Size: 0x8]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1a20, Size: 0x10]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1a30, Size: 0x10]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1a40, Size: 0x10]
	enum CurrentSkydiveStage;//[Offset: 0x1a50, Size: 0x1]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x1a78, Size: 0x8]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x1aa8, Size: 0x8]
	float WeaponInfluencesCharacterSpeed;//[Offset: 0x1ab0, Size: 0x4]
	float WeaponBlotAnimLength;//[Offset: 0x1ab4, Size: 0x4]
	float WeaponSwitchAnimLength;//[Offset: 0x1ab8, Size: 0x4]
	float WeaponReloadAnimLength;//[Offset: 0x1abc, Size: 0x4]
	MaterialInstance* MarkMaterial;//[Offset: 0x1af8, Size: 0x8]
	SkeletalMeshComponentConfig* FirstPersonMeshConfig;//[Offset: 0x1b08, Size: 0x8]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x1b10, Size: 0x8]
	float BaseGunCollisionTraceDis;//[Offset: 0x1b18, Size: 0x4]
	float CurrentGunCollisionTraceDis;//[Offset: 0x1b1c, Size: 0x4]
	<enum,float> GunCollisionTraceStartHighIdle;//[Offset: 0x1b20, Size: 0x50]
	<enum,float> GunCollisionTraceStartHighCrouch;//[Offset: 0x1b70, Size: 0x50]
	float MinDistanceGun2Wall;//[Offset: 0x1bc0, Size: 0x4]
	float GunCollisionXYAdjustDownSide;//[Offset: 0x1bc4, Size: 0x4]
	float GunCollisionCheckZLimit;//[Offset: 0x1bc8, Size: 0x4]
	class WeaponSystemPlayer* WeaponSystemPlayerClass;//[Offset: 0x1bd0, Size: 0x8]
	class WeaponSystemPlayerAI* WeaponSystemAIClass;//[Offset: 0x1bd8, Size: 0x8]
	class MapMarkBase* TrackingMarkWidgetClass;//[Offset: 0x1be0, Size: 0x8]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x1bf0, Size: 0x8]
	SolarPlayerWeapon* CachedCurrentWeapon;//[Offset: 0x1bf8, Size: 0x8]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1ce0, Size: 0x8]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1d00, Size: 0x10]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d10, Size: 0x1]
	SolarVehicleWeapon* CurrentVehicleWeapon;//[Offset: 0x1dc8, Size: 0x8]
	VehicleRepairToolMeshPreset VehicleRepairToolMeshPreset;//[Offset: 0x1dd0, Size: 0x50]
	int RepairWeakPointTextID;//[Offset: 0x1e20, Size: 0x4]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x1e28, Size: 0x8]
	class ActorEffect* VehicleStealthEffectClass;//[Offset: 0x1e30, Size: 0x8]
	delegate OnCharacterActivateEMP;//[Offset: 0x1e50, Size: 0x10]
	delegate OnCharacterSwitchEMPEffect;//[Offset: 0x1e60, Size: 0x10]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e70, Size: 0x1]
	bool bNoticedCantCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e71, Size: 0x1]
	enum CurrentSkillType;//[Offset: 0x1e72, Size: 0x1]
	bool bShowMapVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e73, Size: 0x1]
	bool bShowMapVoiceFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e74, Size: 0x1]
	WidgetComponent* ReplayInfoHUDComponent;//[Offset: 0x1ee8, Size: 0x8]
	float VaultDegree;//[Offset: 0x1efc, Size: 0x4]
	float VaultHalfHeight;//[Offset: 0x1f00, Size: 0x4]
	float VaultCameraDistance;//[Offset: 0x1f04, Size: 0x4]
	float VaultCheckDistanceInSprint;//[Offset: 0x1f08, Size: 0x4]
	FName DetectorProfile;//[Offset: 0x1f0c, Size: 0x8]
	MotionWarpingComponent* SolarMotionWarpingComponent;//[Offset: 0x1f18, Size: 0x8]
	DebugReplicator* DebugReplicator;//[Offset: 0x1fa8, Size: 0x8]
	FString DebugStringToDrawGASServer;//[Offset: 0x1fb0, Size: 0x10]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x1fc0, Size: 0x10]
	int BattleUpgradeEffectCurrentLevel;//[Offset: 0x2058, Size: 0x4]
	BattleUpgradeEffectContainer BattleUpgradeEffects;//[Offset: 0x2060, Size: 0x120]
	ParticleSystem* PlayerLevelUpgradeEffect;//[Offset: 0x2190, Size: 0x28]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x4987688
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x4989478
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x4987a90
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x498d6a8
	void UpdateShieldPropertyByAblility();// 0x498efdc
	void UpdateJetFlyDataToSpectating(SolarSpectateInfo* SpecInfo);// 0x4989f34
	void UpdateDyingAttr(float DeltaTime);// 0x49912f0
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent, SolarMapElementBase* ElementObj);// 0x499162c
	void UpdateBattleUpgradeEffectToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x498632c
	void UnbindActorToSelfTeam(Actor* Actor);// 0x498ad24
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x4991d6c
	void TurnCharacterToDirection(out const Vector Dir);// 0x4991e5c
	void TryStopShieldRecharge();// 0x498ee48
	void TryStatisticsRechargedTimes();// 0x498eb34
	void TryStartShieldRecharge(bool bUseBigRecharger);// 0x498ee5c
	void TrySetTeammateHUDShow();// 0x498d634
	void TrySetTeammateHUDHide();// 0x498d620
	void TrySetTeamateHUDVisiblity();// 0x498d680
	void TryRechargeShield(bool bUseBigRecharger);// 0x498f518
	void TryHideShieldOperator();// 0x498ee34
	bool TryGotoDyingState();// 0x4991394
	void TryCreatingOwnTeammate();// 0x498d33c
	void TryBreakShieldRecharge();// 0x498dedc
	void TryBreakScopeStatus();// 0x4989a0c
	void TryBindPowerBarDelegates();// 0x499076c
	void TryBindPickupDelegates();// 0x49907a8
	void TryBindItemPanelDelegates();// 0x4990794
	void TryBindHPPanelDelegates();// 0x4990780
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x498b250
	void ToggleDebugInfo();// 0x4986fac
	void ToggleDebugGASInfo();// 0x4986f98
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x498f23c
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x498b5e4
	void StopTreatmentProgressBar();// 0x498f9d0
	void StopTreatment();// 0x498fad4
	void StopShieldRechargeProgressBar();// 0x498f02c
	void StopShieldRechargeProgress();// 0x498ef08
	void StopRescueProgressBar(const int TextID);// 0x499103c
	void StopRepairWeakPointProgressBar();// 0x4987b5c
	void StopClimbSound();// 0x49953ac
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x498ca04
	void StartTurnToHitDirection(out const Vector HitDir);// 0x498bbd8
	void StartTreatmentProgressBar(const float Duration);// 0x498f9e4
	void StartTreatment();// 0x498fae8
	void StartShieldRechargeProgressBar(const float InRechargeDuration, int InContributorCharacterId);// 0x498f040
	void StartShieldRechargeProgress();// 0x498ef1c
	void StartRescueProgressBar(const float Duration, const int TextID, const bool bShowBtn);// 0x49910e0
	void StartRepairWeakPointProgressBar(const float Duration);// 0x4987b70
	void StartCheckShieldTutorials();// 0x498de10
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x49955f8
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x49956e8
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x499554c
	void SpawnDeathBoxActor();// 0x4990eac
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride, Actor* JumpPad);// 0x498a754
	void SolarGM_UpgradeBattleUpgradeEffectLevel(int UpgradeTo);// 0x4986560
	void SolarGM_ServerUpgradeBattleUpgradeEffectLevel(int UpgradeTo);// 0x49864b4
	void SolarGM_ServerEnableCustomJump(bool bEnabled);// 0x498a56c
	void SolarGM_SelectBattleUpgradeEffect(int Level, int SelectedIndex);// 0x49863d0
	void SolarGM_EnableCustomJump(int Enabled);// 0x498a620
	void ShowShieldUIFX(const int ShiledID);// 0x505573c
	void ShowShieldUI(const bool IsShow);// 0x505573c
	void ShowRevivePickupEffect();// 0x498db6c
	void ShowReviveClearEffect();// 0x498db58
	void ShowRescueInjector();// 0x4991238
	void ShowNoticeCantCharge();// 0x49879a4
	void ShieldUpgradeToNextLevel(SolarElectricShop* InEShop);// 0x498f398
	void ShieldOperatorInterpFunc(float InValue);// 0x498f2f4
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x498d91c
	void SetShowMapVoiceStep(bool bInShowMapVoiceStep);// 0x498741c
	void SetShowMapVoiceFight(bool bInShowMapVoiceFight);// 0x4987338
	void SetSelfEnergyCostEnable(bool bEnable);// 0x4990d30
	void SetRequirementBySetting();// 0x4994a4c
	void SetRenderMode(byte Mode);// 0x4989538
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x4989914
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x4994edc
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x498aac4
	void SetCurrExtraEnergy(float Amount);// 0x4990bb8
	void SetBackpackConfig(const int InCharacterID);// 0x49949a8
	void SetActiveRescueBtn(bool bIsActive);// 0x498d350
	void ServerUseItemRequest(int ItemID, int Num);// 0x4990680
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x498ea90
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x498cbbc
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x4988710
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x498e9a4
	void ServerStatisticsRechargedTimes(const int RechargedTimes, const int BigRechargedTimes);// 0x498eb5c
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x498c95c
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x49914dc
	void ServerSpawnProjectile(class Object ProjClass, const Vector StartLocation, const Vector Velocity);// 0x4989340
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x49902ec
	void ServerSetJetPackModule(const int NewJetPackModuleID, const bool bForVertical);// 0x499270c
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x49922f8
	void ServerSetIdleTurnType(byte TurnType);// 0x499224c
	void ServerSetEnergyState(enum State);// 0x4993d74
	void ServerSetDesirePeek(int NewValue);// 0x498ae6c
	void ServerSetDebugCharacterGASValue(int Value);// 0x4986d34
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x498dc24
	void ServerSetChargingPile(const bool bEnter, SolarPile* InChargingPile);// 0x4992d90
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x4991c7c
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x498baf0
	void ServerSelectLevelSkill(int Level, int SelectedIndex);// 0x4986604
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x499395c
	void ServerRPCUpgradeShield(SolarElectricShop* InTargetShop);// 0x49938b0
	void ServerRPCUnLockBagGrid(const int Grade, const int NewUnLockNum);// 0x49931d8
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x49929d8
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x49928ec
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x4992800
	void ServerRPCSwapBagGrid(const int FromGrade, const int FromGridIndex, const int TargetGrade, const int TargetIndex);// 0x4993484
	void ServerRPCSetSettlements();// 0x49944a8
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x4990ddc
	void ServerRPCSetBagRequirementArr(const BagRequirementData[] BagRequirements);// 0x49932c4
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x4993b88
	void ServerRPCInitSettlementNeedRankArr();// 0x4993878
	void ServerRPCInitBagGradeData();// 0x4993894
	void ServerRPCFixBagGrid(const int InGrade, const int InGridIndex);// 0x499337c
	void ServerRPCDisplayAllElectricShops();// 0x498c940
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x4992ac4
	void ServerRPCDiscardWeapon(const int InSlot);// 0x49936e0
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x499378c
	void ServerRPCDiscardHomeItem(const int Grade, const int gridIndex);// 0x49935f4
	void ServerRPCArrangeBag();// 0x4993468
	void ServerRecieveHitDataFromClient(SolarWeapon* Weapon, const BulletHitData HitData, const bool IsNotDelay);// 0x49891b0
	void ServerPlayTreatmentCancelSound();// 0x498f9b4
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, Vector ClientCharPos, Vector ClientItemPos);// 0x498ff9c
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x498fd9c
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x4990118
	void ServerPickUpHomeItemsGM(const int InItemID, const int InItemNum);// 0x4992f78
	void ServerPickUpHomeItemByDrag(SolarItemActor* ItemActor, int Grade, int gridIndex);// 0x498fc6c
	void ServerPickUpBoxHomeItemByDrag(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, int Grade, int gridIndex);// 0x498fafc
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x49905d4
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x49920a0
	void ServerKillMe(enum DamageType);// 0x4991850
	void ServerInitSheildComp(const int InShiledID);// 0x498ec4c
	void ServerHideShieldOperator();// 0x498ed14
	void ServerGMVehicleSubHealth(int SubHealth);// 0x4987f0c
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x4988cac
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection);// 0x49888bc
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, const VehicleEjectParams Params);// 0x49889b0
	void ServerGetOffVehicle(bool bNeedNotify);// 0x4988ae8
	void ServerDetectBlock();// 0x4986e98
	void ServerConsumeExtraEnergy(const float InAmount, const enum InUsage);// 0x4992bb0
	void ServerConsumeEnergy(const float InAmount, const enum InUsage);// 0x4992ca0
	void ServerClearJetModule();// 0x49926f0
	void ServerClearEnergyState(enum State);// 0x4993cc8
	void ServerChangeRechargeState(const bool bRecharge, const bool bUseBigRecharger);// 0x498ed30
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x49881c8
	void ServerCancelVault(float InAnimPosition, Vector InLandLocation);// 0x498708c
	void ServerCancelRescue();// 0x49914c0
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4990528
	void ServerCancelMeleeWarp();// 0x4987070
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x4993064
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x498ac54
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x4988274
	void SendMultipleMsgsToWeapon(const PlayerWeaponMsg[] MsgArray);// 0x49896b4
	void SendMsgToWeapon(const PlayerWeaponMsg Msg);// 0x49897a8
	void SendMsgToVehicleWeapon(const PlayerWeaponMsg Msg);// 0x4987d38
	void RoleAbilityCoolDownTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x4986a04
	void RoleAbilityCoolDownResetCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x49868d0
	void RoleAbilityBlockAbilityTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x498679c
	void RoleAbilityActiveCallBack(GameplayAbility* InAbility);// 0x49866f0
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x498b068
	void ResponseChosenMark();// 0x498b444
	void RequestUseBackpackItemServer(const int InItemID, const int InItemNum);// 0x4992e8c
	void RequestToStopVehicleRepairing();// 0x4987c14
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x4987c28
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x498e0fc
	void RequestDisplayAllElectricShops();// 0x498cab4
	void RequestCancelRescue();// 0x4991210
	void RemoveTreasureBoxOperator();// 0x498dcd0
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x498725c
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x4994a9c
	void RemoveShieldRepairEffectItem();// 0x498f1c4
	void RemoveShieldOperator();// 0x498f200
	void RefreshWeaponDataMapAndArray();// 0x49944c4
	void RefreshTypeItemMapAndArray();// 0x49944d8
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x498d0a4
	void RefreshMaxPileMapAndArray();// 0x4994500
	void RefreshIdItemMapAndArray();// 0x49944ec
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x505573c
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x505573c
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x505573c
	void ReceiveOnVehicleAbilityInput(byte AbilityIndex);// 0x498840c
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x498de24
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x505573c
	void QuitVehicleWholeShield();// 0x49879d8
	void QuitVehicleStealth();// 0x4987b34
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x4993a48
	void PostNotEnoughEnergyNotice();// 0x49886fc
	void PlaySquatSound();// 0x499523c
	void PlaySpeedUpEffect(bool bIsUp);// 0x4991f0c
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x498e220
	void PlayParachuteStartSound();// 0x4989f0c
	void PlayerStateReplicatedForHUD();// 0x498d780
	void OnUpdateShieldId();// 0x498e40c
	void OnTeamIDChange();// 0x498d694
	void OnTakeDamage__DelegateSignature(const SolarCharacter* Character, out const SolarPointDamageEvent DamageEvent);// 0x505573c
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x498f668
	void OnSpawnExpItem();// 0x498db0c
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x505573c
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x505573c
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x498b92c
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x505573c
	void OnShieldRechargeStart();// 0x498f450
	void OnShieldRechargeProgressBarComplete();// 0x498f018
	void OnShieldRechargeProgressBarCancel();// 0x498f004
	void OnShieldRechargeEnd();// 0x498f43c
	void OnShieldIDChangedDelegate__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x505573c
	void OnSheildUpFXDelegate__DelegateSignature();// 0x505573c
	void OnSheildRechargeDelegate__DelegateSignature();// 0x505573c
	void OnSheildBreakDelegate__DelegateSignature();// 0x505573c
	void OnRequestStartResurrect();// 0x498f7f0
	void OnRequestCancelResurrect();// 0x498f7dc
	void OnReplayCameraModeChanged(enum OldMode, enum CurMode);// 0x4987174
	void OnRepItemWeaponParts();// 0x499491c
	void OnRepIgnoreScopeSlots();// 0x4994908
	void OnRep_WeaponSystemVehicle();// 0x4987df8
	void OnRep_WeaponSystemComponentChanged();// 0x4989464
	void OnRep_WeaponDataMap();// 0x4994930
	void OnRep_VJetPackModuleID();// 0x4994814
	void OnRep_TypeKeyItemArrayChange();// 0x4994944
	void OnRep_TreatmentState(enum LastState);// 0x498f86c
	void OnRep_TreatmentCount(int LastCount);// 0x498f910
	void OnRep_SettingEnergyCostChanged();// 0x49947ec
	void OnRep_RoleAbilitySpecHandles();// 0x4986b38
	void OnRep_ReviveItemCleared();// 0x49947d8
	void OnRep_RescueState();// 0x49913cc
	void OnRep_PlayBodyHitSound(int LastBodyHitSoundCount);// 0x49952f4
	void OnRep_PlayBodyHitByPunchSound(int LastBodyHitByPunchSoundCount);// 0x4995250
	void OnRep_OutVehicleShotState();// 0x4987e0c
	void OnRep_MaxPileArrayChange();// 0x4994994
	void OnRep_MaxExtraEnergyChanged();// 0x49948e0
	void OnRep_JetPropellingInfo();// 0x49924c0
	void OnRep_IsDeathVerge();// 0x499199c
	void OnRep_IdKeyItemArrayChange();// 0x4994958
	void OnRep_HJetPackModuleID();// 0x4994800
	void OnRep_GradeKeyBagGradeArrayChange();// 0x4994980
	void OnRep_ForceParachuteCountDown();// 0x4989e84
	void OnRep_ExtraEnergyModuleIDChanged();// 0x4994828
	void OnRep_EnergyStateChanged();// 0x49948f4
	void OnRep_EnableCruising();// 0x4989ec0
	void OnRep_CurUniqueShieldId();// 0x498e420
	void OnRep_CurrShieldValue(float PreviousValue);// 0x498e368
	void OnRep_CurrShieldState(enum LastState);// 0x498e2c4
	void OnRep_CurrShieldId(int InLastShieldId);// 0x498e434
	void OnRep_CurrentSkydiveStage();// 0x4989cbc
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x499483c
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x498db80
	void OnRep_CruiseState();// 0x4989e98
	void OnRep_CharacterCapsuleSizeOverride();// 0x49959bc
	void OnRep_CapsuleID();// 0x4989eac
	void OnRep_BagRequirementArrChange();// 0x499496c
	void OnRep_BackpackPropellingMode();// 0x49924ac
	void OnRep_ActiveEMP();// 0x4987990
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x505573c
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x505573c
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x498d298
	void OnPlayerBackpackEnergyUpdate();// 0x4995398
	void OnPickupSettingChanged();// 0x49902d8
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x498d148
	void OnOutVehicleStateChanged();// 0x4988ed4
	void OnNotInBattle();// 0x4994a74
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue);// 0x505573c
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x498d794
	void OnLevelSequence_PlayAirborneJumpSound();// 0x4989f20
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x505573c
	void OnInBattle();// 0x4994a88
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x505573c
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x505573c
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x505573c
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x505573c
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x505573c
	void OnHitAtDirection__DelegateSignature(out const Vector Direction, float Duration);// 0x505573c
	void OnHealthUpdated__DelegateSignature(const SolarCharacter* Character);// 0x505573c
	bool OnExitOpenTreasureBox();// 0x498dd30
	bool OnEnterOpenTreasureBox();// 0x498dd68
	void OnEnterCombat(enum battleType);// 0x49895dc
	void OnEnergyStateUpdateEvent__DelegateSignature(byte InEnergyState);// 0x505573c
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x498cc7c
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x498cac8
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x505573c
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue);// 0x505573c
	void OnConsumableNumChangedEvent__DelegateSignature(int MedicineCount, int RadarCount, int RechargerCount, int BigRechargerCount);// 0x505573c
	void OnClientMovementComponentEnabled();// 0x4995b00
	void OnChargeInfoUpdateEvent__DelegateSignature(SolarCharacter* OwnerCharacter, const float ChargeFrequency, const float ChargeQuantity);// 0x505573c
	void OnCharacterSpawnDeathBox(bool bCheat);// 0x4990ee8
	void OnCharacterSkinReset__DelegateSignature();// 0x505573c
	void OnCharacterDeathEnd();// 0x4991c0c
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x505573c
	void OnCancelResurrectProgress(const int InTextId);// 0x498f5c4
	void OnBatteryIdUpdateEvent__DelegateSignature(int InBatteryId);// 0x505573c
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature();// 0x505573c
	void OnBackpackItemUpdateEvent__DelegateSignature();// 0x505573c
	void OnBackpackEquipUpdateEvent__DelegateSignature();// 0x505573c
	void OnBackpackEnergyUpdateEvent__DelegateSignature();// 0x505573c
	void OnApplyDyingDamage(float DeltaTime);// 0x499124c
	void NotifyLeaveSafeArea();// 0x49907d0
	void NotifyEnterSafeArea();// 0x49907bc
	void NetTriggerRadarStation();// 0x498cc68
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x4988de0
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x4988b9c
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x4987e20
	void MultiResetCharacter(const Vector Location, const Rotator Rotation, bool bClearWeapons);// 0x49959d0
	void MultiOnRebirth();// 0x4991c28
	void MarkWarningOnWorld();// 0x498b508
	void MarkQuickChatOnWorld(FString IconImg);// 0x498b458
	void MarkPointOnWorld();// 0x498b51c
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x498b304
	void KillMe();// 0x49918fc
	void K2_PlaySoundGroup(FName GroupName, SoundGroupPlayContext Context);// 0x499546c
	bool K2_IsSwimming();// 0x498a6e4
	bool K2_IsInAir();// 0x498a71c
	WidgetComponent* K2_GetTeamHUDComp();// 0x498d070
	HUD* K2_GetControlledHUD();// 0x4995ca0
	bool IsWeaponsAvailable();// 0x49898a0
	bool IsWeaponCauseTeamDamage();// 0x4989868
	bool IsViewportFocused();// 0x4987798
	bool IsVehicleFire();// 0x4989b70
	bool IsTeammateWith(const SolarCharacter* Other);// 0x498d570
	bool IsTeamHUDValid();// 0x498d504
	bool IsSprinting();// 0x498a994
	bool IsSpectatingOtherPlayer();// 0x498dad4
	bool IsSkyCharging();// 0x4990968
	bool IsShowMapVoiceStep();// 0x49873e4
	bool IsShowMapVoiceFight();// 0x4987300
	bool IsShieldValueLow();// 0x498ddd8
	bool IsShieldMaxLevel();// 0x498f464
	bool IsShieldFullyCharged();// 0x498df98
	bool IsScopeOpening();// 0x4989a90
	bool IsRescuing();// 0x4991418
	bool IsReplayPlaying();// 0x498d9f4
	bool IsReloading();// 0x4989ac8
	bool IsRechargerEnough();// 0x498df28
	bool IsPlayerLocallyControlledOrSpectated();// 0x4995e24
	bool IsPlayerLocallyControlled();// 0x4995e5c
	bool IsPileCharging();// 0x4990930
	bool IsOwnerOffline();// 0x498dda0
	bool IsOpeningTreasureBox();// 0x498dcf8
	bool IsNoCharging();// 0x4990888
	bool IsMovingOnGround(enum VelocityStatus);// 0x498aa14
	bool IsMeleeAttacking();// 0x4989c18
	bool IsMaxLevelInGame();// 0x498db20
	bool IsLocalPlayerSpectatingMe();// 0x498da64
	bool IsLocalPlayerSpectateAsThirdPerson();// 0x498da2c
	bool IsLaunching();// 0x498a8ec
	bool IsJumping();// 0x498a924
	bool IsInVehicle();// 0x4988f50
	bool IsInsideVehicle();// 0x4988ee8
	bool IsInShoulderOrScopeView();// 0x4989a58
	bool IsInScopeView();// 0x4989a20
	bool IsInRescueState();// 0x4991488
	bool IsInMassInvisibilityPrepare();// 0x4987920
	bool IsInMassInvisibility();// 0x4987958
	bool IsInDeathVerge();// 0x4991964
	bool IsHumanCharacter();// 0x4995b84
	bool IsHoldingWeapon();// 0x49898d8
	bool IsFullBodyMeleeAttacking();// 0x4989be0
	bool IsFiring();// 0x4989ba8
	bool IsExistWeaponSeatedVehicleSeat();// 0x4987ccc
	bool IsEnergyCostAndChargeDisabled();// 0x4990cf8
	bool IsE2M();// 0x49908c0
	bool IsDying();// 0x4991450
	bool IsDoingAnyAttack();// 0x4989b38
	bool IsCruising();// 0x4989ed4
	bool IsClimbing();// 0x498a95c
	bool IsCharacterDebugBlockDetectionEnabled();// 0x4986f60
	bool IsCanShowTeammateHUD();// 0x498d648
	bool IsBoxCharging();// 0x49908f8
	bool IsBolting();// 0x4989b00
	bool IsBigRechargerEnough();// 0x498def0
	bool IsBeingSpectated();// 0x498da9c
	bool IsBeingRescue();// 0x49913e0
	bool IsAllEnergyFull();// 0x4990b4c
	bool IsAiming();// 0x4989c50
	bool IsAbleToContinueRecharge();// 0x498dfd0
	void InitShieldPropertyByConfig();// 0x498eff0
	void InitShieldOperatorTimeline();// 0x498f2e0
	void InitializeItemAbility(int InCharacterID);// 0x4992408
	void InitializeCharacterData(const int InCharacterID, const int InSkinID);// 0x49950b0
	void InitGameStatisticEquipment();// 0x498c3ac
	void InitDefaultDayNight();// 0x4994a60
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x498e008
	void IncreaseRechargedTimes();// 0x498eb48
	void HideShieldRepairEffectItem();// 0x498f1d8
	void HideShieldOperator();// 0x498f214
	void HideRescueInjector();// 0x4991224
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, const bool bIsVehicle, const bool bShowLog);// 0x4988568
	bool HasAnyRecharger();// 0x498df60
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x4991b18
	<enum,int> GetWeaponPartsMap();// 0x4994514
	int[] GetWeaponPartsArray();// 0x49945a4
	bool GetWeaponItemDataBySlot(const int InSlot, out SolarItemData ItemData);// 0x4993f9c
	<int,SolarItemData> GetWeaponDataMap();// 0x4994628
	int GetVerticalJetFlyTotalTimes();// 0x498a074
	int GetVerticalJetFlyRestTimes();// 0x498a00c
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x498a3b4
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x498a1ac
	SolarVehicleWeapon* GetVehicleWeapon();// 0x4987d04
	byte GetVehicleAbilityCounter();// 0x4988320
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x49946b8
	float GetTreatmentRemaining();// 0x498f838
	float GetTreatmentDruation();// 0x498f804
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x498d3fc
	UserWidget* GetTeamHUD();// 0x498d53c
	SolarSpectateInfo* GetSpectateInfo();// 0x498d9c0
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x4995868
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x4995d3c
	SolarPlayerState* GetSolarPlayerState();// 0x4995c6c
	FString GetSolarPlayerID();// 0x4995bbc
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x4995d70
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x498ab68
	SolarBotAIController* GetSolarAIController();// 0x4995cd4
	float GetSkydiveLandingHeight();// 0x4989e50
	CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x4995004
	int GetShieldWorthByID(const int InShieldID);// 0x498ef30
	float GetShieldRecoveryAmount();// 0x498f128
	float GetShieldRechargeRemainningTime();// 0x498f190
	float GetShieldRechargeDuration();// 0x498f15c
	SolarCharacter* GetRescuingCharacter();// 0x4990fa8
	float GetRescueTime();// 0x4990fe0
	float GetRecoveryDuartionModify();// 0x505573c
	float GetRecoveryAmountModify();// 0x505573c
	Rotator GetNormalizeCameraRotation();// 0x4995194
	bool GetNewItemData(int InItemID, int InItemNum, out SolarItemData OutItemData);// 0x4993e20
	byte GetMyTeamID();// 0x4994ea8
	float GetMaxShieldValue();// 0x498f49c
	float GetMaxExtraEnergy();// 0x4990b84
	float GetMaxEnergy();// 0x4990c90
	SolarPlayerState* GetLastDownBy();// 0x4991910
	int GetJetPackModuleLevel(const bool bVertical);// 0x498a4b8
	int GetItemNumById(const int InItemID);// 0x4994350
	int GetItemMaxPile(int InItemID);// 0x49943fc
	bool GetItemDataByType(const enum ItemType, out SolarItemData ItemData);// 0x49940d8
	bool GetItemDataById(const int InItemID, out SolarItemData ItemData);// 0x4994214
	bool GetIsActiveEMP();// 0x49879b8
	Vector GetInputVector();// 0x49923e8
	<int,SolarItemData> GetIdKeyItemMap();// 0x4994748
	int GetHorizontalJetFlyTotalTimes();// 0x498a040
	int GetHorizontalJetFlyRestTimes();// 0x4989fd8
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x498a2b0
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x498a0a8
	float GetFactorialAttributeModifies(int AttributeID);// 0x4994d50
	int GetExtraEnergyModuleID();// 0x4990e90
	float GetEnergyConsumptionModify();// 0x505573c
	enum GetDriveState();// 0x4988fb0
	float GetDesirePeekValue();// 0x498af88
	Actor* GetDamagerCauserActor();// 0x498bba4
	float GetCurrShieldValue();// 0x498f4d0
	float GetCurrExtraEnergy();// 0x4990c5c
	SolarPlayerWeapon* GetCurrentWeapon();// 0x4989c88
	enum GetCurrentWalkMode();// 0x498a9e0
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x4988070
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x498811c
	byte GetCurrentRenderMode();// 0x498951c
	enum GetCurrentCustomJumpType();// 0x498a6c4
	float GetCurrEnergy();// 0x4990cc4
	float GetCumulativeAttributeModifies(int AttributeID);// 0x4994dfc
	PlayerController* GetControllingOrReplayController();// 0x4995d08
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x4989680
	SolarCharacter* GetClientViewedCharacter();// 0x4995b1c
	SolarCharacter* GetClientControlledCharacter();// 0x4995b50
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x49909a0
	Rotator GetCameraRotation();// 0x49951cc
	Vector GetCameraLocation();// 0x4995204
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x4989cd0
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x4989d90
	void GatheringDeathBoxItem();// 0x4990ec0
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarWeaponDamageEvent DamageInfo, const float ActualDamage);// 0x498c71c
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x498c3d4
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum, const int TriggerType);// 0x498c4bc
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x498c084
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x498bf90
	void GameStatisticsEquipment();// 0x498c3c0
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x498c1cc
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x498c27c
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x498c66c
	void ForceBreakSprintState();// 0x498a9cc
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x498b158
	void ExitDyingMovement();// 0x4991014
	void ExitDeathVerge(bool bClientSimulation);// 0x49919b0
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x49877d0
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x49879ec
	void EnterVehicleStealth();// 0x4987b48
	void EnterDyingMovement();// 0x4991028
	void EnterDeathVerge(bool bClientSimulation);// 0x4991a64
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x4986eb4
	void DoOperation(enum OperationType, Object* Target);// 0x4991fb8
	void DisCardShield();// 0x498dec8
	float DealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x498b788
	void CreateTreasureBoxOperator();// 0x498dce4
	void CreateShieldRepairEffectItem();// 0x498f1ec
	void CreateShieldOperator();// 0x498f228
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x498d1ec
	WidgetComponent* CreateOwnTeammateHUD();// 0x498d74c
	void ClientWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x49924d4
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x4988fe4
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount, const enum ShieldRechargeType, const int InShieldContributorCharacterId, bool bFixPreAdd);// 0x498e7a4
	void ClientSomeOneIsOpening();// 0x499050c
	void ClientSetServerBlockDetectionResult(FString Info);// 0x4986de0
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x498c888
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x498ab9c
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x498cf74
	void ClientReceivePlayerHitAtDirection(const Vector Direction);// 0x498bc88
	void ClientRadarOnceScanned(int ScannedNum);// 0x498ce1c
	void ClientPlaySoundGroup(const FName GroupName);// 0x49953c0
	void ClientPlayHitEffect(const HitResult HitResult, class SolarBullet BulletClass, const enum HitType, const PlayerController* Attacker, const Vector RelativeVector, const float VFXScale, const SolarWeapon* AttackerWeapon);// 0x498bd30
	void ClientOnShieldUpgrade();// 0x498e4d8
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x4995914
	void ClientOnContinuousTreatmentStarted();// 0x498faa4
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime);// 0x498cd70
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x498ac70
	void ClientNotifyCharacterExposed(float InRadarLifeTime);// 0x498cec8
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x4990420
	void ClientKilledCharacter();// 0x498bad4
	void ClientHideShieldOperator();// 0x498ecf8
	void ClientEquipReplaceNotice(const int OldEquipItemId, const int CurEquipItemId, const int EquipType);// 0x49925c0
	void ClientCreateTreatEffect();// 0x498fa88
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x498e6b8
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue, const float MaxShieldVal, const enum CancelReason);// 0x498e4f4
	void ClientBroadcastCharacterRoleAbilityDurationEvent(float Duration, bool bAutoClose);// 0x4986b4c
	void ClientAddHitTrace(const HitTraceInfo Info);// 0x498b530
	void ClearGameStatisticEquipment();// 0x498c398
	void ClearDeathBoxData();// 0x4990ed4
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x49874c8
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x49884b0
	void ChangeSeatByDefault();// 0x4988554
	void CGM_SpawnDeathBox();// 0x4990f94
	void CGM_EnterDeath();// 0x4991948
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x4987fb8
	bool CanRebirth();// 0x4991c44
	bool CanPeek();// 0x498af50
	void CancelVehicleAbility();// 0x4988354
	void CancelTreatment();// 0x498fac0
	void BroadcastCharacterRoleAbilityDurationEvent(float Duration, bool bAutoClose);// 0x4986c44
	void BreakRechargeShield();// 0x498f504
	void BindUpdateHUDToOnHealthUpdateDelegateProc(const SolarCharacter* Character);// 0x4991588
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x498d878
	void BindActorToSelfTeam(Actor* Actor);// 0x498adc8
	void BeginplayPending__DelegateSignature();// 0x505573c
	void BeginPlayBlueprint();// 0x505573c
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x498afbc
	void ApplyVehicleAbility(byte AbilityIndex);// 0x4988368
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x505573c
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x505573c
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x498910c
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x4994bd4
	void AddDebugString(FString DebugString);// 0x4986fc0
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x49907e4

--------------------------------
Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x4e8, Size: 0x8]
	bool bPendingEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x4f8, Size: 0x8]
	ParticleSystem* DedicatedDeathEffect;//[Offset: 0x500, Size: 0x8]
	ParticleSystem* DeathEffect;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x510, Size: 0x28]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x56c, Size: 0x4]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x570, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x578, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x5a0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5a8, Size: 0x8]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5b0, Size: 0x8]
	float DefaultRefreshBonesCountDown;//[Offset: 0x5b8, Size: 0x4]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x49aaf50
	void ResetAudioComponentTransform();// 0x49aa77c
	void PostAkEventByName(FString EventName);// 0x49aa790
	void OnRep_PendingEnterWater();// 0x49aa8b8
	void MulticastAddHitTrace(const HitTraceInfo Info);// 0x49aa90c
	void LazyRefreshBones(float DelayTime);// 0x49aa4f0
	bool K2_IsInWater();// 0x49aa8d4
	bool K2_IsAlive();// 0x49aad70
	bool IsInWater();// 0x49aaa78
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x49aab68
	bool IsInRoom();// 0x49aa9c0
	bool IsBlocked(const Actor* InOtherActor);// 0x49aaab8
	bool InSameTeamWithFirstPlayerController();// 0x49aada8
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x49aa594
	FString GetSoundEventString(enum SoundOpt);// 0x49aa684
	SolarAkGameObject* GetSolarAkGameObject();// 0x49aa840
	float GetMaxHealth();// 0x49aaf14
	float GetCurrentHealth();// 0x49aaed8
	enum GetCharacterType();// 0x49aaa00
	Vector GetCharacterLocation(bool bMiddle);// 0x49aacb8
	Vector GetCharacterDirection();// 0x49aa878
	SolarBackpackComponent* GetBackpack();// 0x49aaa3c
	void ClientOnPushedByVehicle();// 0x49aa85c
	bool CheckOpenParticleOptimization(int Bias);// 0x49aa440
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x49aade8

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: HitTraceInfo
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x0, Size: 0xc]
	float Damage;//[Offset: 0xc, Size: 0x4]
	enum WeaponType;//[Offset: 0x10, Size: 0x1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xb8, Size: 0x50]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x108, Size: 0x50]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x158, Size: 0x10]
	<class SolarAbilityEffectAccessory,SolarAbilityEffectAccessory*> EffectAccessoryMap;//[Offset: 0x168, Size: 0x50]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	float MoveSpeedCoeffient;//[Offset: 0x1c4, Size: 0x4]
	MaterialInterface* OriginalMaterial;//[Offset: 0x1c8, Size: 0x8]
	float ShieldRechargeCostCoefficient;//[Offset: 0x1d0, Size: 0x4]
	void OnRep_SpeedCoeffient();// 0x4936d88
	void OnRep_ReplicateEffectData();// 0x4936d9c
	int GetCharacterLevel();// 0x4936db0

--------------------------------
Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 0x18]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 0x10]
	class SolarAbilityEffectAccessory[] AbilityEffectAccessoryClass;//[Offset: 0x50, Size: 0x10]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x120, Size: 0x8]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x128, Size: 0x8]
	SolarAbility* AffectingAbility;//[Offset: 0x130, Size: 0x8]
	FString ExtraInfo;//[Offset: 0x138, Size: 0x10]
	<FString,float> AttributeParamMap;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 0x1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 0x1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 0x1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 0x4]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 0x10]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 0x4]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 0x8]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 0x4]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 0x1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 0x4]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 0x4]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 0x10]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 0x1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 0x10]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 0x4]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 0x10]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: SolarAbilityEffectAccessory.Actor.Object
	SolarCharacterBase* EffectAffectingCharacter;//[Offset: 0x228, Size: 0x8]
	byte EffectAccessoryInstanceType;//[Offset: 0x230, Size: 0x1]
	bool SpawnAtHitLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]

--------------------------------
Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x228, Size: 0x8]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x230, Size: 0x10]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x240, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x250, Size: 0x30]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	FString ExtraInfo;//[Offset: 0x290, Size: 0x10]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 0x8]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 0x50]
	static void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x4935f4c
	void StopSound();// 0x505573c
	static void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x49356fc
	static void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x4935c40
	static void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x49357d0
	void RestoreSound();// 0x505573c
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x4935574
	void PlaySound();// 0x505573c
	void PauseSound();// 0x505573c
	bool IsLocalControl();// 0x493553c
	bool InSameTeam();// 0x4935504
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4935b50
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x493540c
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x4935618

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x2a8, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a9, Size: 0x1]
	float OuterRadius;//[Offset: 0x2ac, Size: 0x4]
	float InnerRadius;//[Offset: 0x2b0, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2b8, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2c0, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x2d0, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2d4, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2d8, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x2dc, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x2e0, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x2e4, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x2e8, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ec, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x2f0, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x2f4, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x3ca1980
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x3ca1774
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x3ca1b98
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x3ca1aec
	void SetOutputBusVolume(float BusVolume);// 0x3ca157c
	void SetListeners(out const AkComponent*[] Listeners);// 0x3ca1a2c
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x3ca2688
	void SetEarlyReflectionsVolume(float SendVolume);// 0x3ca1620
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x3ca16c4
	void SetAttenuationScalingFactor(float Value);// 0x3ca14d8
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x3ca1d78
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3ca2370
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3ca2520
	int PostAkEventByName(FString in_EventName);// 0x3ca1ec0
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3ca1f78
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3ca2170
	float GetAttenuationRadius();// 0x3ca14a4

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x288, Size: 0x8]
	FString EventName;//[Offset: 0x290, Size: 0x10]
	void Stop();// 0x3ca7bb4
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x3ca79d4
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x3ca80f8
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x3ca83a0
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3ca7bc8
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x3ca7eac
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x3ca7754

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x3c9fdc4
	float GetMaximumDuration();// 0x3c9fd90
	float GetMaxAttenuationRadius();// 0x3c9fe30
	bool GetIsInfinite();// 0x3c9fdf8

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	static void Wakeup();// 0x494ade0
	static void UnloadBank(FString InBankName);// 0x494b454
	static void UnLoadAllBanks();// 0x494b42c
	static void Suspend(bool in_bRenderAnyway);// 0x494adf4
	int StopSoundByEvent(FString in_EventName);// 0x494b1f0
	static int StaticStopSoundByEvent(FString in_EventName);// 0x494a9d0
	static int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x494a888
	static int StaticPostAkEventByName(FString in_EventName);// 0x494ac24
	static int StaticPlaySoundByEvent(FString in_EventName);// 0x494aa80
	static int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x494ab30
	void SolarLoadAllBanks();// 0x494b418
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x494b0f0
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x494afb8
	static void SetMasterRTPCValue(float Value, int InterpolationTimeMs);// 0x494a714
	static void SetMasterRTPCMute(bool Mute);// 0x494a7ec
	static void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x494ae90
	void ReceiveTick(float DeltaTime);// 0x505573c
	void ReceiveEndPlay(const byte EndPlayReason);// 0x505573c
	void ReceiveBeginPlay();// 0x505573c
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x494acd4
	int PostAkEventByName(FString in_EventName);// 0x494b360
	int PlaySoundByEvent(FString in_EventName);// 0x494b2a8
	static void LoadBank(FString InBankName);// 0x494b4f4
	static void LoadAllBanks();// 0x494b440

--------------------------------
Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	<enum,AnimMontage*> CharacterMontageMap;//[Offset: 0x270, Size: 0x50]
	byte OwnerRole;//[Offset: 0x2c0, Size: 0x1]
	FName LeftHandIKSocketName;//[Offset: 0x2cc, Size: 0x8]
	FName RightHandWeaponSocketName;//[Offset: 0x2d4, Size: 0x8]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x2e0, Size: 0x30]
	Vector LeftHandEffectorLocation;//[Offset: 0x310, Size: 0xc]
	Rotator LeftHandEffectorRotation;//[Offset: 0x31c, Size: 0xc]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x34c, Size: 0xc]
	Vector RightHandEffectorLocation;//[Offset: 0x358, Size: 0xc]
	Vector RightHandJointLocation;//[Offset: 0x364, Size: 0xc]
	float LeftIKHandWeight;//[Offset: 0x370, Size: 0x4]
	float CurrentReloadTimeRate;//[Offset: 0x374, Size: 0x4]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x378, Size: 0x4]
	float CurrentBoltTimeRate;//[Offset: 0x37c, Size: 0x4]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	float ViewPitch;//[Offset: 0x384, Size: 0x4]
	float ViewYaw;//[Offset: 0x388, Size: 0x4]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x38c, Size: 0x4]
	BlendSpace* FireTPPBlendSpace;//[Offset: 0x398, Size: 0x8]
	float FireTPPBlendSpaceX;//[Offset: 0x3a0, Size: 0x4]
	float FIreTPPBlendSpaceY;//[Offset: 0x3a4, Size: 0x4]
	float MinSwimSpeed;//[Offset: 0x3a8, Size: 0x4]
	float Direction;//[Offset: 0x3ac, Size: 0x4]
	float Speed;//[Offset: 0x3b0, Size: 0x4]
	float InputDirection;//[Offset: 0x3b4, Size: 0x4]
	byte IdleTurnType;//[Offset: 0x3b8, Size: 0x1]
	float TurnExplicitTime;//[Offset: 0x3bc, Size: 0x4]
	int turnDirection;//[Offset: 0x3c0, Size: 0x4]
	float DamageDirection;//[Offset: 0x3c4, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x3c8, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x3cc, Size: 0x4]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x4d8, Size: 0x84]
	float Fire2PlayRateStand;//[Offset: 0x5e0, Size: 0x4]
	float Fire2PlayRateCrouch;//[Offset: 0x5e4, Size: 0x4]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 0x1]
	float FallingInputScale;//[Offset: 0x624, Size: 0x4]
	Vector IKOffsetLeftFootVector;//[Offset: 0x628, Size: 0xc]
	Vector IKOffsetRightFootVector;//[Offset: 0x634, Size: 0xc]
	Vector JointTargetLeftFootVector;//[Offset: 0x640, Size: 0xc]
	Vector JointTargetRightFootVector;//[Offset: 0x64c, Size: 0xc]
	Rotator LeftFootRotation;//[Offset: 0x658, Size: 0xc]
	Rotator RightFootRotation;//[Offset: 0x664, Size: 0xc]
	Vector HipOffsetVector;//[Offset: 0x670, Size: 0xc]
	float FootIKTraceDistanceRate;//[Offset: 0x67c, Size: 0x4]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x680, Size: 0x4]
	float FootIKInterpSpeed;//[Offset: 0x684, Size: 0x4]
	FName LeftFootSocket;//[Offset: 0x688, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x690, Size: 0x8]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	bool bNeedJetLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1]
	float LandingBlendWeight;//[Offset: 0x69c, Size: 0x4]
	float FootIKEnableDelayTime;//[Offset: 0x6c4, Size: 0x4]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	float FlailRate;//[Offset: 0x6fc, Size: 0x4]
	float ConfigPitchToZeroTime;//[Offset: 0x700, Size: 0x4]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x704, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x70c, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x714, Size: 0x8]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x71c, Size: 0x4]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x720, Size: 0x8]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x728, Size: 0x8]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73e, Size: 0x1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73f, Size: 0x1]
	int DesirePeekDir;//[Offset: 0x740, Size: 0x4]
	float PeekSpeed;//[Offset: 0x744, Size: 0x4]
	float PeekDirection;//[Offset: 0x748, Size: 0x4]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74c, Size: 0x1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74c, Size: 0x1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74c, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74c, Size: 0x1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x74c, Size: 0x1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x74c, Size: 0x1]
	byte MaxLODDamageReact;//[Offset: 0x74d, Size: 0x1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x74e, Size: 0x1]
	byte MaxLODHandIK;//[Offset: 0x74f, Size: 0x1]
	byte MaxLODFootIK;//[Offset: 0x750, Size: 0x1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x751, Size: 0x1]
	byte MaxLODWeaponJitter;//[Offset: 0x752, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x753, Size: 0x1]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x753, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x753, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x753, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x753, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x753, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x753, Size: 0x1]
	bool bIsSixDirRunForward;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x753, Size: 0x1]
	enum CurrentWalkMode;//[Offset: 0x754, Size: 0x1]
	enum LastWalkMode;//[Offset: 0x755, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x756, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x757, Size: 0x1]
	enum CurrentCruiseState;//[Offset: 0x758, Size: 0x1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x760, Size: 0x8]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x768, Size: 0x8]
	AnimSequence* CruiseEndSequence;//[Offset: 0x770, Size: 0x8]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x778, Size: 0x4]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x77c, Size: 0x4]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x780, Size: 0x4]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x784, Size: 0x4]
	enum CurrentSkydiveStage;//[Offset: 0x788, Size: 0x1]
	enum WeaponStatus;//[Offset: 0x789, Size: 0x1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78a, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78a, Size: 0x1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78a, Size: 0x1]
	class AnimInstance* VehicleSpecClass;//[Offset: 0x790, Size: 0x8]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x798, Size: 0x1]
	enum CurrentSkillType;//[Offset: 0x799, Size: 0x1]
	void OnMontagePlayStarted(AnimMontage* Montage);// 0x494f060
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x494ee80
	void OnMontagePlayBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x494ef70
	bool NeedResolveWeaponJitter();// 0x494ee48
	bool JetPack2IsDashingCompletelyOver();// 0x494ed68
	bool IsHoldingWeapon();// 0x494eb4c
	bool IsAiming();// 0x494eb28
	Vector2D GetSkydiveFlyingInput();// 0x494eb70
	int GetOwnerGroupID();// 0x494ecfc
	Vector GetJetPackDashAnimationBlend();// 0x494eda0
	Vector GetInputVector();// 0x494ee10
	Vector GetFallingInputVector();// 0x494edd8
	float GenJumpDirection(float InInputDirection);// 0x494eba4
	float GenBackwordDirection(float InInputDirection);// 0x494ec50
	bool CheckNewJetAndReset();// 0x494ed30

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 0xc]
	Rotator Thumbl01;//[Offset: 0xc, Size: 0xc]
	Rotator Thumbl02;//[Offset: 0x18, Size: 0xc]
	Rotator Index01;//[Offset: 0x24, Size: 0xc]
	Rotator Index02;//[Offset: 0x30, Size: 0xc]
	Rotator Middle01;//[Offset: 0x3c, Size: 0xc]
	Rotator Middle02;//[Offset: 0x48, Size: 0xc]
	Rotator Ring01;//[Offset: 0x54, Size: 0xc]
	Rotator Ring02;//[Offset: 0x60, Size: 0xc]
	Rotator Pinky01;//[Offset: 0x6c, Size: 0xc]
	Rotator Pinky02;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarSpecABP_Vehicle.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	float ViewPitch;//[Offset: 0x270, Size: 0x4]
	float ViewYaw;//[Offset: 0x274, Size: 0x4]
	enum InVehicleState;//[Offset: 0x278, Size: 0x1]
	enum CurrentVehicleAnimationType;//[Offset: 0x279, Size: 0x1]
	float CurrentVehicleRotationValue;//[Offset: 0x27c, Size: 0x4]
	Vector2D CurrentInputOnVehicle;//[Offset: 0x280, Size: 0x8]
	float LeanTowardRightValue;//[Offset: 0x288, Size: 0x4]
	bool bVehicleInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	Rotator OutVehicleShotRotation;//[Offset: 0x290, Size: 0xc]
	float VehicleDirection;//[Offset: 0x29c, Size: 0x4]
	bool bIronManCanFlyFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bIronManForceOutInVehicleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bHasPassenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	float VehicleSpeed;//[Offset: 0x2a4, Size: 0x4]
	byte DriveIdleTurnType;//[Offset: 0x2a8, Size: 0x1]
	float SteeringRoatingratio;//[Offset: 0x2ac, Size: 0x4]
	Vector LeftHandOnRudderLocation;//[Offset: 0x2b0, Size: 0xc]
	Vector RightHandOnRudderLocation;//[Offset: 0x2bc, Size: 0xc]
	enum WeaponStatus;//[Offset: 0x2c8, Size: 0x1]

--------------------------------
Class: SolarPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2b8, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x2c0, Size: 0x8]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2c8, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d8, Size: 0x4]
	enum Channel;//[Offset: 0x2f4, Size: 0x1]
	int Zone;//[Offset: 0x2f8, Size: 0x4]
	float MaxEnergy;//[Offset: 0x2fc, Size: 0x4]
	float PowerRecoveryCD;//[Offset: 0x300, Size: 0x4]
	float PowerRecoveryFrequency;//[Offset: 0x304, Size: 0x4]
	float PowerRecoveryQuantity;//[Offset: 0x308, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 0x1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f, Size: 0x1]
	int Level;//[Offset: 0x310, Size: 0x4]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	int OwnerTeam;//[Offset: 0x318, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0x31c, Size: 0x8]
	ChargingInfo defaultChargingInfo;//[Offset: 0x324, Size: 0x20]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x348, Size: 0x10]
	float CurrentEnergy;//[Offset: 0x358, Size: 0x4]
	float SphereRadius;//[Offset: 0x360, Size: 0x4]
	TimerHandle RecoveryHandle;//[Offset: 0x368, Size: 0x8]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x378, Size: 0x8]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x380, Size: 0x8]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x388, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x398, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3a0, Size: 0x8]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 0x1]
	float MaxHealth;//[Offset: 0x3ac, Size: 0x4]
	float ReducedHealth;//[Offset: 0x3b0, Size: 0x4]
	float CurrentHealth;//[Offset: 0x3b4, Size: 0x4]
	float TweenTimeSpeed;//[Offset: 0x3b8, Size: 0x4]
	float RestTweenTime;//[Offset: 0x3bc, Size: 0x4]
	float TargetOpacity;//[Offset: 0x3c0, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x3c4, Size: 0x4]
	float OpacityTweenTime;//[Offset: 0x3c8, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3d0, Size: 0x8]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3e0, Size: 0x130]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x510, Size: 0x8]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x518, Size: 0x8]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x4aaa058
	void SetIsActivated(bool bActivated);// 0x505573c
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x4aa9b0c
	void RemoveAllEffects();// 0x4aa9af8
	void ReceivePileExpired();// 0x505573c
	void ReceiveEnergyChanged();// 0x505573c
	void ReceiveChargingPileInitialize();// 0x505573c
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x505573c
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x505573c
	void PlaySkillStartSound();// 0x4aa9ae4
	void PlaySkillEndSound();// 0x4aa9ad0
	void PlayRecoveryAnim(bool bStart);// 0x505573c
	void PlayChargingAnimation(bool Reverse);// 0x505573c
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4aaa150
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4aaa2bc
	void OnRep_IsLosingEnergyChanged();// 0x4aa9a58
	void OnRep_Energy();// 0x4aa9a94
	void OnRep_Enable();// 0x4aa9aa8
	void OnRep_CurrentHealth();// 0x4aa9a6c
	void OnRep_ChargingInfoListChanged();// 0x4aa9a80
	void OnRep_CanRecover();// 0x4aa9a44
	void OnRep_Broken();// 0x4aa9abc
	void OnRefreshRangeRing();// 0x4aa9984
	void OnRefreshChargeCircle(const bool InCharging);// 0x4aa9998
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x4aa9e80
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x4aa9fa8
	bool IsAnyCharacterInRange();// 0x4aaa12c
	ChargingInfo GetChargingInfoByCharacter(SolarCharacter* Character);// 0x4aa9c54
	void GameStatisticsChargingPile(out ChargingInfo ChargingInfo, int pileLevel, Vector Location, float energyUse);// 0x4aa9d04
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x4aa9bb0
	bool CanWork();// 0x4aaa104

--------------------------------
Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x238, Size: 0x10]
	FString Job;//[Offset: 0x248, Size: 0x10]
	FString ElementID;//[Offset: 0x258, Size: 0x10]
	enum Type;//[Offset: 0x268, Size: 0x1]
	enum State;//[Offset: 0x269, Size: 0x1]
	enum Visibility;//[Offset: 0x26a, Size: 0x1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x270, Size: 0x8]
	FName ElementTypeName;//[Offset: 0x278, Size: 0x8]
	FString GroupKey;//[Offset: 0x280, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0x290, Size: 0x1]
	void SetElementVisibility(const enum NewType);// 0x4a8bdec
	enum SetElementState(const enum NewState);// 0x4a8be98
	void OnRep_ElementVisibility();// 0x4a8bdc4
	void OnRep_ElementState();// 0x4a8bdd8
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x505573c
	void OnElementStateChanged(const enum CurrentState);// 0x505573c

--------------------------------
Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb0, Size: 0x8]
	void OnRep_ComponentName();// 0x49eea74

--------------------------------
Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float LastChargeTime;//[Offset: 0xc, Size: 0x4]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Quantity;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	float TotalChargeEnergy;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ChargingPilePreset
	SoftObjectPath NormalMeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath BrokenMeshPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath BrokenMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath RangeRingPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0xa8, Size: 0x18]
	Transform RangeRingTrans;//[Offset: 0xc0, Size: 0x30]
	Transform ChargeCircleTrans;//[Offset: 0xf0, Size: 0x30]
	Vector BeamStartPos;//[Offset: 0x120, Size: 0xc]

--------------------------------
Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb0, Size: 0x50]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x100, Size: 0x10]
	<int,float> ClientAttributeSubValues;//[Offset: 0x110, Size: 0x50]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x4954400
	void OnRep_AttributeSubRepDatas();// 0x49543a4
	void OnAttributeSubChanged();// 0x49543b8
	float GetValue(int AttributeSubID);// 0x4954688
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x49543cc
	static SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x4954300
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x49544fc

--------------------------------
Class: SolarAttributeSubSystem.SolarGameManager.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 0x50]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 0x50]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, out const float Damage);// 0x3aa89b4
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0x3aa89b4

--------------------------------
Class: SolarGameManager.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveManagerPostIntialized();// 0x505573c
	void ReceiveManagerIntialized();// 0x505573c
	static SolarGameManager* K2_CreateGameManager(SolarGameInstanceBase* Owner, class SolarGameManager Class);// 0x49e9cc4

--------------------------------
Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
	float BaseValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarAttributeSubModifierGroup.Object

--------------------------------
Class: SolarGameInstanceBase.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x1a0, Size: 0x18]
	SoftObjectPath LobbyMap;//[Offset: 0x1b8, Size: 0x18]
	SoftObjectPath EntryMap;//[Offset: 0x1d0, Size: 0x18]
	SoftObjectPath GameMap;//[Offset: 0x1e8, Size: 0x18]
	SoftObjectPath SettlementMap;//[Offset: 0x200, Size: 0x18]
	SoftObjectPath ConfigServerMap;//[Offset: 0x218, Size: 0x18]
	FString ConfigBattleAddr;//[Offset: 0x230, Size: 0x10]
	int ConfigBattlePort;//[Offset: 0x240, Size: 0x4]
	FString ConfigBackendAddr;//[Offset: 0x248, Size: 0x10]
	int ConfigBackendPort;//[Offset: 0x258, Size: 0x4]
	int BuildNumber;//[Offset: 0x25c, Size: 0x4]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x260, Size: 0x8]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x268, Size: 0x18]
	SoftClassPath DefaultLockSettings;//[Offset: 0x280, Size: 0x18]
	class SolarReplayManager* ReplayManagerClass;//[Offset: 0x298, Size: 0x8]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x2a0, Size: 0x18]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	delegate OnBaseManagersInit;//[Offset: 0x2c0, Size: 0x10]
	delegate OnGameManagersInit;//[Offset: 0x2d0, Size: 0x10]
	delegate OnLuaManagersInit;//[Offset: 0x2e0, Size: 0x10]
	GameArgs* GameArgsManager;//[Offset: 0x308, Size: 0x8]
	UIManager* UIManager;//[Offset: 0x310, Size: 0x8]
	UINavigationManager* UINavigationManager;//[Offset: 0x318, Size: 0x8]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x320, Size: 0x8]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x328, Size: 0x8]
	SolarViewModelManager* ViewModelManager;//[Offset: 0x330, Size: 0x8]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x338, Size: 0x8]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x340, Size: 0x8]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x348, Size: 0x8]
	SolarTableManager* SolarTableManager;//[Offset: 0x350, Size: 0x8]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x358, Size: 0x8]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x360, Size: 0x8]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x368, Size: 0x8]
	SolarItemManager* SolarItemManager;//[Offset: 0x370, Size: 0x8]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x378, Size: 0x8]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x380, Size: 0x8]
	SolarMapManager* SolarMapManager;//[Offset: 0x388, Size: 0x8]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x390, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x398, Size: 0x8]
	IMChatObject* SolarIMChatObject;//[Offset: 0x3a0, Size: 0x8]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x3a8, Size: 0x8]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x3b0, Size: 0x8]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x3b8, Size: 0x8]
	CrashReportManager* CrashReportManager;//[Offset: 0x3c0, Size: 0x8]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x3c8, Size: 0x8]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x3d0, Size: 0x8]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x3d8, Size: 0x8]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x3e0, Size: 0x8]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x3e8, Size: 0x8]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x3f0, Size: 0x8]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x3f8, Size: 0x8]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x400, Size: 0x8]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x408, Size: 0x8]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x410, Size: 0x8]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x418, Size: 0x8]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x420, Size: 0x8]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x428, Size: 0x8]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x430, Size: 0x8]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x438, Size: 0x8]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x440, Size: 0x8]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x448, Size: 0x8]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x450, Size: 0x8]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x458, Size: 0x8]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x460, Size: 0x28]
	SettlementStageManager* SettlementManager;//[Offset: 0x488, Size: 0x8]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x490, Size: 0x8]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x4b0, Size: 0x28]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x4d8, Size: 0x8]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x4e0, Size: 0x8]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x4f0, Size: 0x8]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x4f8, Size: 0x8]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x500, Size: 0x8]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x508, Size: 0x8]
	delegate OnTouchInputDelegate;//[Offset: 0x520, Size: 0x10]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x530, Size: 0x50]
	bool IsHotPatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	void SolarGm_UploadLogFile();// 0x49e3ac4
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x505573c
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x49e4134
	void SolarGm_TestTutorialInLobby(int ID);// 0x49e3b84
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x49e3a18
	void SolarGm_StopRecordingRePlay();// 0x49e4070
	void SolarGm_StopPlayingReplay();// 0x49e3c28
	void SolarGm_StartRecordingLocalReplay(FString Filename);// 0x49e4084
	void SolarGM_SetQuality(int InQuality);// 0x49e4694
	void SolarGm_RequestReplayList(int PageIndex, int PageSize);// 0x49e3edc
	void SolarGm_RequestPlayReplayByIdx(uint32 Index);// 0x49e3d38
	void SolarGm_RequestPlayReplayByBattleID(FString BattleID, bool IsLive);// 0x49e3c3c
	void SolarGm_RequestPlayReplay(FString BattleID, FString DownloadUrl);// 0x49e3ddc
	void SolarGm_PlayLocalReplay(FString Filename);// 0x49e3fc0
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x505573c
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x49e454c
	void SolarGM_GoTutorialLevel(FString LevelName, int Proficiency);// 0x49e4360
	void SolarGM_GoHome();// 0x49e4454
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x49e3ad8
	void SolarGM_AddWeaponExpLua(int weaponid, int Count);// 0x505573c
	void SolarGM_AddWeaponExp(int weaponid, int Count);// 0x49e427c
	void SolarGM_AddItemLua(int ItemID, int Count);// 0x505573c
	void SolarGM_AddItem(int ItemID, int Count);// 0x49e4468
	void ShutdownAnoSDK();// 0x505573c
	void SetIsFirstLaunch(bool bIsFirst);// 0x49e355c
	void SetCleanUpfile(bool bCleanCache);// 0x49e34b0
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x49e5860
	void SaveGame();// 0x49e39d0
	void RequestShutDown(FString Reason);// 0x49e4738
	void RegisterNetworkManager();// 0x505573c
	void OnManagersInitialized__DelegateSignature();// 0x505573c
	void OnDisconnect();// 0x505573c
	void LuaStartGameFrameWork();// 0x505573c
	void LuaInitGameFrameWork();// 0x505573c
	bool IsStandalone();// 0x49e547c
	static bool IsSolarServer(const Object* WorldContextObject);// 0x49e539c
	bool IsSkipLogin();// 0x49e377c
	bool IsServerOrStandalone();// 0x49e52f4
	bool IsListenServer();// 0x49e5364
	bool IsGIsEditor();// 0x49e54b4
	bool IsFirstLaunchAfterVersionUpdate();// 0x49e3608
	bool IsEditor();// 0x49e54ec
	bool IsDedicatedServerStressTest();// 0x49e3624
	bool IsDedicatedServer();// 0x49e5444
	bool IsClientOrStandalone();// 0x49e52bc
	bool IsClient();// 0x49e532c
	void InitLuaClasses();// 0x505573c
	void InitGameManagers();// 0x49e37c8
	void GoHomeLuaCall();// 0x505573c
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x49e4b70
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x49e4d44
	SolarAbstractViewModel* GetViewModel(class SolarAbstractViewModel Class);// 0x49e4ee4
	UINavigationManager* GetUINavigationManager();// 0x49e5138
	SolarTutorialManager* GetSolarTutorialManager();// 0x49e4884
	SolarTimerManager* GetSolarTimerManager();// 0x49e5104
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x49e4e7c
	SolarTableManager* GetSolarTableManager();// 0x49e4eb0
	SolarSaveGame* GetSolarSaveGame();// 0x49e39e4
	SolarReplayManager* GetSolarReplayManager();// 0x49e4850
	SolarRedHintManager* GetSolarRedHintManager();// 0x49e4ca8
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x49e4c40
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x49e4dac
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x49e4c0c
	SolarMapManager* GetSolarMapManager();// 0x49e4d78
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x49e50d0
	SolarLuaManager* GetSolarLuaManager();// 0x49e4bd8
	SolarLuaHelper* GetSolarLuaHelper();// 0x49e5068
	SolarLoginManager* GetSolarLoginManager();// 0x49e4958
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x49e4ad4
	SolarItemManager* GetSolarItemManager();// 0x49e4e14
	SolarInteractableManager* GetSolarInteractableManager();// 0x49e4de0
	IMChatObject* GetSolarIMChatObject();// 0x49e4cdc
	SolarHttpManager* GetSolarHttpManager();// 0x49e4990
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x49e4a6c
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x49e4b08
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x49e48f0
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x49e4c74
	static SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x49e49c8
	static SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x49e4f90
	SolarAnoHelper* GetSolarAnoHelper();// 0x49e5034
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x49e3980
	SolarAkGameObject* GetSolarAkGameObject();// 0x49e4d10
	SolarActivityManager* GetSolarActivityManager();// 0x49e4974
	SolarABTestManager* GetSolarABTestManager();// 0x49e49ac
	SettlementStageManager* GetSettlementStageManager();// 0x49e48d4
	SolarCharacter* GetPlayerCharacter();// 0x49e4924
	FString GetPIEServerURL();// 0x49e51a0
	int GetPIEInstance();// 0x49e516c
	FString GetNetModeString();// 0x49e5524
	byte GetNetMode();// 0x49e55d4
	KeyMappingManager* GetKeyMappingManager();// 0x49e481c
	bool GetIsMutiPlayer();// 0x49e5284
	SolarGameStatistics* GetGameStatistics();// 0x49e4ba4
	SolarGameConfigManager* GetGameConfigManager();// 0x49e509c
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x49e399c
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x49e4aa0
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x49e48b8
	CrashReportManager* GetCrashReportManager();// 0x49e4b3c
	int GetClientNumber();// 0x49e5250
	static void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x49e3640
	SolarAssetManager* GetAssetManager();// 0x49e4e48
	int64 GetAppActiveTimestampInterval();// 0x49e47e8
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x49e37dc
	void ExecuteCommand(FString Cmd);// 0x49e38d0
	void ExecuteBackKeyLuaCall();// 0x505573c
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x49e5608
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x49e5a58
	void ClearGameManagers();// 0x49e37b4
	void CheckSavedDirFiles(out FString[] Files);// 0x505573c
	void Browse(FString URL, byte TravelType);// 0x49e576c

--------------------------------
Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 0x4]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 0x10]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	byte MatchTimes;//[Offset: 0x43, Size: 0x1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bClickSocialEntranceBtnDiscord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bClickSocialEntranceBtnFacebook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bClickSocialEntranceBtnYouTube;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bClickSocialEntranceBtnTikTok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bClickSocialEntranceBtnInstagram;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bClickSocialTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 0x8]
	bool bHasReportedOnline15min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bHasReportedOnline30min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bHasPlayedPackEnterAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	int[] DisplayedProductIDs;//[Offset: 0x60, Size: 0x10]
	uint32[] ReadMailIds;//[Offset: 0x78, Size: 0x10]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x4af59b8
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x4af58d4
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x4af5750
	void PrintTwiceConfirmCheckWindowList();// 0x4af5810
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x4af5824
	void ClearDisplayIDs();// 0x4af573c

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 0x4]
	DateTime Timestamp;//[Offset: 0x8, Size: 0x8]
	enum Duration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DateTime

--------------------------------
Class: SolarReplayManager.Object
	bool bMeshWidgetOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	SoftObjectPath WaitingOBMap;//[Offset: 0x40, Size: 0x18]
	class UserWidget* WaitingReplayStartUIClass;//[Offset: 0x58, Size: 0x8]
	class SolarSpectatorPawn* OBModeSpectatorPawnClass;//[Offset: 0x60, Size: 0x8]
	class HUD* OBModeHUDClass;//[Offset: 0x68, Size: 0x8]
	class UserWidget* OBHeadInfoWidgetClass;//[Offset: 0x70, Size: 0x8]
	MaterialInterface* PerspectiveMaterial;//[Offset: 0x78, Size: 0x8]
	class SolarSpectatorPawn* DirectorModeSpectatorPawnClass;//[Offset: 0x80, Size: 0x8]
	float UpdateDistanceInterval;//[Offset: 0x88, Size: 0x4]
	float OBTeamListNearbyDistance;//[Offset: 0x8c, Size: 0x4]
	float OBHUDNearDistance;//[Offset: 0x90, Size: 0x4]
	float OBHUDFarDistance;//[Offset: 0x94, Size: 0x4]
	float OBDamageTextHideDistance;//[Offset: 0x98, Size: 0x4]
	float OBDelayTimeForTournament;//[Offset: 0x9c, Size: 0x4]
	float OBLivePreDownloadTime;//[Offset: 0xa0, Size: 0x4]
	float OBSkipBeginningTime;//[Offset: 0xa4, Size: 0x4]
	float OBSkipEndingTime;//[Offset: 0xa8, Size: 0x4]
	delegate FOnPlayingTryToStartDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate OnPlayingStartedDelegate;//[Offset: 0xc8, Size: 0x10]
	delegate OnPlayingLoadLevelsStartedDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate OnPlayingLevelLoadedDelegate;//[Offset: 0xe8, Size: 0x10]
	delegate OnPlayingStreamReadiedDelegate;//[Offset: 0xf8, Size: 0x10]
	delegate OnPlayingStartFailedDelegate;//[Offset: 0x108, Size: 0x10]
	delegate OnPlayingAtEndDelegate;//[Offset: 0x118, Size: 0x10]
	delegate OnPlayingFinishedDelegate;//[Offset: 0x128, Size: 0x10]
	delegate OnRecordingStartedDelegate;//[Offset: 0x138, Size: 0x10]
	delegate OnRecordingStartFailedDelegate;//[Offset: 0x148, Size: 0x10]
	delegate OnRecordingFinishedDelegate;//[Offset: 0x158, Size: 0x10]
	delegate OnPlayingScrubStartDelegate;//[Offset: 0x168, Size: 0x10]
	delegate OnPlayingPreScrubDelegate;//[Offset: 0x178, Size: 0x10]
	delegate OnPlayingScrubFinishedDelegate;//[Offset: 0x188, Size: 0x10]
	delegate OnPlayingScrubFailedDelegate;//[Offset: 0x198, Size: 0x10]
	delegate OnPlayingScrubCharactersCreatedDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate OnPlayingPauseDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate OnPlayingContinueDelegate;//[Offset: 0x1c8, Size: 0x10]
	UserWidget* m_WaitingReplayStartUI;//[Offset: 0x220, Size: 0x8]
	void StopRecording();// 0x4ae8954
	void StopPlayReplay();// 0x4ae8748
	void StartRecording(FString SessionName, FString UploadUrl, bool bIsToLocal);// 0x4ae8968
	void SetTimeDilation(float Dilation);// 0x4ae8308
	void SetStartSpectateTournamentTime();// 0x4ae82e0
	void SetRequestTryStrategy(float Interval, int Times);// 0x505573c
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x505573c
	void RequestPlayReplayOfCurrentBattle();// 0x505573c
	void RequestPlayReplay(FString BattleID, bool IsLive);// 0x505573c
	void RequestBattleList(int PageIndex, int PageSize);// 0x505573c
	void ReplayManagerNoParamDelegate__DelegateSignature();// 0x505573c
	void RecordReplayInfosOnRecordingStarted();// 0x4ae800c
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x4ae8854
	void PlayReplayFromLocal(FString ReplayFileName);// 0x4ae875c
	void PausePlayReplay();// 0x4ae8734
	void OnTryToGetDownloadAddrFailed();// 0x4ae8034
	void OnPlayingFinished(World* World);// 0x4ae80ec
	void OnPlayingAtEnd(World* World);// 0x4ae8190
	void OnGameStateSetted(GameStateBase* GameState);// 0x4ae8048
	void NotifyTournamentSpectate(bool bIsLive);// 0x4ae8234
	bool NotifyBackendPlayReplayFinished();// 0x505573c
	void LuaOnStartFailed();// 0x505573c
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x505573c
	void LuaBindDelegates();// 0x505573c
	bool IsWaitingCharacterCreateAfterScrub();// 0x4ae85a4
	bool IsReplayLive();// 0x4ae85c8
	bool IsRecording();// 0x4ae86b0
	bool IsReady();// 0x505573c
	bool IsPlaying();// 0x4ae86e8
	bool IsInState(enum CheckState);// 0x4ae8600
	void GotoTimeInSecond(float Second);// 0x4ae83ac
	float GetTotalSessionTimeInSecond();// 0x4ae8484
	float GetCurrentSessonTimeInSecond();// 0x4ae8450
	FString GetCurrentSessionName();// 0x4ae84b8
	FString GetBattleIDByIndex(int Index);// 0x505573c
	void EnterSettlementStage();// 0x4ae82f4
	void DestroyWaitingOBStartUI();// 0x4ae7fe4
	void CreateWaitingOBStartUI();// 0x4ae7ff8
	void ContinuePlayReplay();// 0x4ae8720
	void BindPostLoadMapWithWorldDelegate();// 0x4ae8020

--------------------------------
Class: SolarSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 0x10]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0x3aa89b4

--------------------------------
Class: UIManager.SolarGameManager.Object
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x60, Size: 0x10]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x70, Size: 0x10]
	DataTable* BattleWidgetSettings;//[Offset: 0x80, Size: 0x8]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x88, Size: 0x8]
	DestroyObjectStruct[] NeedToDestroyObjects;//[Offset: 0x90, Size: 0x10]
	static void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x4c7138c
	void TriggerDelegate();// 0x4c6fdc0
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0x3aa89b4
	static void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY);// 0x4c6ff78
	static void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName WidgetName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide);// 0x4c70114
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x505573c
	static void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x4c708fc
	static void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x4c707c8
	void SetLoadingUIByLevelAndDisplay(int InModelID, int InLevel, int InMapIndex);// 0x3aa89b4
	static void SetImageTintColor(Image* IMG, out const LinearColor InColor);// 0x4c70af8
	static void SetImageTexture(Image* IMG, Texture2D* Texture);// 0x4c7108c
	static void SetImageColor(Image* IMG, float R, float G, float B, float A);// 0x4c70ef0
	static void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x4c70d48
	static void SetCheckedState(CheckBox* Box, const enum State);// 0x4c70bdc
	static void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x4c70a24
	static void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x4c71208
	static void SetButtonStyle(Button* Btn, const SlateWidgetStyleAsset* Style);// 0x4c70e1c
	void RemoveAllWidgets();// 0x3aa89b4
	void OpenUIGM(FString UIID, int RootID);// 0x3aa89b4
	void OpenConfirmUIInLua(int ConfirmID);// 0x3aa89b4
	void OnLuaHotReloadFileChanged(FString LuaSysPath, FString LuaPathName);// 0x3aa89b4
	void OnInitLuaHotReload();// 0x3aa89b4
	void OnGameManagersInitialized();// 0x4c6faa8
	void OnClientStartGame();// 0x4c6fa94
	void LuaCloseUI(FString MapName);// 0x3aa89b4
	static Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x4c717dc
	static Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x4c718a0
	static Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x4c71994
	static Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x4c716f4
	static PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x4c71ad8
	static MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x4c715b0
	static void InvalidateWidgetPrepass(Widget* InWidget);// 0x4c70cb4
	static void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x4c703a8
	static FString GetWeaponTextureFullPath(out FString IconPath);// 0x4c706c8
	UserWidget* GetUIPanel(FString MapName);// 0x3aa89b4
	static FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x4c7056c
	static FString GetQualityBGFullPath(const int InQuality);// 0x4c7047c
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0x3aa89b4
	int GetLobbyID();// 0x3aa89b4
	static bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x4c71160
	static CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x4c712e8
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x4c6fabc
	UserWidget* GetBattleBackpackWidget();// 0x3aa89b4
	void ExitSpectateMode();// 0x3aa89b4
	void EnterSpectateMode();// 0x3aa89b4
	void CloseUIGM(FString UIID);// 0x3aa89b4
	void CloseLoadingUI();// 0x3aa89b4
	static Margin ClampInScreenOffsets(Widget* WorldContextObject, out const Margin Offsets, out const Anchors Anchors, out const Vector2D Alignment);// 0x4c6fdd4

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x148, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x150, Size: 0x2b8]
	LinearColor ColorAndOpacity;//[Offset: 0x408, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x418, Size: 0x10]
	byte ClickMethod;//[Offset: 0x428, Size: 0x1]
	byte TouchMethod;//[Offset: 0x429, Size: 0x1]
	byte PressMethod;//[Offset: 0x42a, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 0x1]
	delegate OnClicked;//[Offset: 0x430, Size: 0x10]
	delegate OnPressed;//[Offset: 0x440, Size: 0x10]
	delegate OnReleased;//[Offset: 0x450, Size: 0x10]
	delegate OnHovered;//[Offset: 0x460, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x470, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x6053410
	void SetStyle(out const ButtonStyle InStyle);// 0x60536d8
	void SetPressMethod(byte InPressMethod);// 0x605336c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x6053634
	void SetClickMethod(byte InClickMethod);// 0x60534b4
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x6053590
	bool IsPressed();// 0x6053558

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x6059270
	PanelSlot* GetContentSlot();// 0x605931c
	Widget* GetContent();// 0x605923c

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x98]
	SlateBrush Hovered;//[Offset: 0xa0, Size: 0x98]
	SlateBrush Pressed;//[Offset: 0x138, Size: 0x98]
	SlateBrush Disabled;//[Offset: 0x1d0, Size: 0x98]
	Margin NormalPadding;//[Offset: 0x268, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x278, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x288, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x2a0, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x258, Size: 0x1]
	enum WidgetScope;//[Offset: 0x259, Size: 0x1]
	enum CaptureInput;//[Offset: 0x25a, Size: 0x1]
	int MyRoot;//[Offset: 0x25c, Size: 0x4]
	FString widgetkey;//[Offset: 0x260, Size: 0x10]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bReceiveKeyMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x278, Size: 0x8]
	WidgetInputManager* InputManager;//[Offset: 0x280, Size: 0x8]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x288, Size: 0x50]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2d8, Size: 0x8]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x2f8, Size: 0x10]
	bool WidgetTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x310, Size: 0x10]
	void ShowSelfPanelUI();// 0x4bf7a14
	void SetZOrder(int ZOrder);// 0x4bf8048
	void SetWidgetVisible(Widget* Widget, bool bVisible, bool bHitTest);// 0x4bf7ebc
	void SetWidgetTickEnabled(bool bEnabled);// 0x4bf8108
	void SetDisabledForOneTick();// 0x4bf8034
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x505573c
	void ReceiveShow();// 0x505573c
	void ReceiveHide();// 0x505573c
	void PostMessage(FString HandleName);// 0x4bf7950
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x4bf8418
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x4bf8218
	void OnTouchManagerInitialized();// 0x505573c
	void OnSynchronizeProperties();// 0x505573c
	void OnSolarUIOpened();// 0x4bf7b8c
	void OnSolarUIClosed();// 0x4bf7b70
	void OnShow();// 0x4bf7b54
	void OnHide();// 0x4bf7b38
	void OnExclusivelyAnimationFinished();// 0x4bf7d08
	void OnDeinitialize();// 0x505573c
	void OnBackKey(enum BackKeyType);// 0x4bf7a8c
	bool IsWidgetTickEnabled();// 0x4bf80ec
	static bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x4bf77ec
	bool IsPlatformDesktop();// 0x4bf7ffc
	static FString GetWidgetKeyByPanelName(enum PanelName);// 0x4bf7d1c
	FString GetWidgetKey();// 0x4bf7e0c
	Vector2D[] GetTouchedLocation();// 0x4bf7c58
	Vector2D[] GetPointerLocation();// 0x4bf7ba8
	SolarPlayerState* GetOwningSolarPlayerState();// 0x4bf81b0
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x4bf81e4
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x4bf85ec
	Widget* FindWidgetFromName(out const FName Name);// 0x4bf7894
	void ExecuteSolarUIShow();// 0x4bf7a64
	void ExecuteSolarUIOpened();// 0x4bf7a78
	void ExecuteSolarUIHide();// 0x4bf7a50
	void ExecuteSolarUIClosed();// 0x4bf7a3c
	void ExecuteSolarUIClean();// 0x4bf7a28
	void CloseSelfPanelUI();// 0x4bf7a00

--------------------------------
Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 0x10]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 0x10]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 0x10]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 0x10]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 0x50]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 0x50]
	Widget* K2_GetManagedWidget();// 0x4cbe2c4
	static bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x4cbe414
	static bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x4cbe2f8

--------------------------------
Class: PlayAnimationParams

--------------------------------
Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: DestroyObjectStruct
	UserWidget* RootWidget;//[Offset: 0x0, Size: 0x8]
	Object*[] Objects;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x130, Size: 0x98]
	delegate BrushDelegate;//[Offset: 0x1c8, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1d8, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1e8, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1fc, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x6060d20
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x6060dc4
	void SetBrushTintColor(SlateColor TintColor);// 0x6060aec
	void SetBrushSize(Vector2D DesiredSize);// 0x6060c80
	void SetBrushResourceObject(Object* ResourceObject);// 0x6060a48
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x60604b8
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x60606c8
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x6060290
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x6060168
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x606040c
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x60605b0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x60607c0
	void SetBrush(out const SlateBrush InBrush);// 0x606086c
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x6060134

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x98]

--------------------------------
Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x130, Size: 0x98]
	SlateBrush JoyStickThumbPress;//[Offset: 0x1c8, Size: 0x98]
	SlateBrush JoyStickIcon;//[Offset: 0x260, Size: 0x98]
	Vector2D VisualSize;//[Offset: 0x2f8, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x300, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x308, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x310, Size: 0x8]
	float ActiveOpacity;//[Offset: 0x318, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x31c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x320, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	delegate OnJoystickPressed;//[Offset: 0x338, Size: 0x10]
	delegate OnJoystickRelease;//[Offset: 0x348, Size: 0x10]
	delegate OnInputYawAndPitch;//[Offset: 0x358, Size: 0x10]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x4891a3c
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x4891868
	void SetInputScale(Vector2D Scale);// 0x4891afc
	void ResetControlInput();// 0x4891854

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x141, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x144, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x158, Size: 0x610]
	SlateWidgetStyleAsset* Style;//[Offset: 0x768, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x770, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x778, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x780, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x788, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x790, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x798, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x7a0, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x7a8, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x7b0, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x7b8, Size: 0x1]
	Margin Padding;//[Offset: 0x7bc, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x7d0, Size: 0x28]
	byte ClickMethod;//[Offset: 0x7f8, Size: 0x1]
	byte TouchMethod;//[Offset: 0x7f9, Size: 0x1]
	byte PressMethod;//[Offset: 0x7fa, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fb, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x800, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x605584c
	void SetPressMethod(byte InPressMethod);// 0x60557a8
	void SetIsChecked(bool InIsChecked);// 0x6055a38
	void SetClickMethod(byte InClickMethod);// 0x60558f0
	void SetCheckedState(enum InCheckedState);// 0x6055994
	bool IsPressed();// 0x6055b50
	bool IsChecked();// 0x6055b18
	enum GetCheckedState();// 0x6055ae4

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x98]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xa8, Size: 0x98]
	SlateBrush UncheckedPressedImage;//[Offset: 0x140, Size: 0x98]
	SlateBrush CheckedImage;//[Offset: 0x1d8, Size: 0x98]
	SlateBrush CheckedHoveredImage;//[Offset: 0x270, Size: 0x98]
	SlateBrush CheckedPressedImage;//[Offset: 0x308, Size: 0x98]
	SlateBrush UndeterminedImage;//[Offset: 0x3a0, Size: 0x98]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x438, Size: 0x98]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x4d0, Size: 0x98]
	Margin Padding;//[Offset: 0x568, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x578, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x5a0, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x5c8, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x5e0, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x5f8, Size: 0x18]

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x150, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x168, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x178, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1a0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1b0, Size: 0x50]
	SlateBrush StrikeBrush;//[Offset: 0x200, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x298, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2a0, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2b0, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2c0, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6, Size: 0x1]
	void SetText(FText InText);// 0x607c7f8
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x607cc08
	void SetShadowOffset(Vector2D InShadowOffset);// 0x607d0b4
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x607d154
	void SetOpacity(float InOpacity);// 0x607d1f8
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x607cb64
	void SetFont(SlateFontInfo InFontInfo);// 0x607cf18
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x607d29c
	void SetAutoWrapText(bool InAutoTextWrap);// 0x607cab8
	FText GetText();// 0x607c980
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x607ca50
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x607ca84

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x130, Size: 0x3]
	byte Justification;//[Offset: 0x133, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x134, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x135, Size: 0x1]
	float WrapTextAt;//[Offset: 0x138, Size: 0x4]
	Margin Margin;//[Offset: 0x13c, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x14c, Size: 0x4]
	void SetJustification(byte InJustification);// 0x607dc80

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x2c]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int ZOrder;//[Offset: 0x68, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x6054858
	void SetSize(Vector2D InSize);// 0x6054ca8
	void SetPosition(Vector2D InPosition);// 0x6054d7c
	void SetOffsets(Margin InOffset);// 0x6054bcc
	void SetMinimum(Vector2D InMinimumAnchors);// 0x6054784
	void SetMaximum(Vector2D InMaximumAnchors);// 0x60546e4
	void SetLayout(out const AnchorData InLayoutData);// 0x6054e8c
	void SetAutoSize(bool InbAutoSize);// 0x6054934
	void SetAnchors(Anchors InAnchors);// 0x6054aec
	void SetAlignment(Vector2D InAlignment);// 0x6054a14
	int GetZOrder();// 0x6054824
	Vector2D GetSize();// 0x6054c74
	Vector2D GetPosition();// 0x6054d48
	Margin GetOffsets();// 0x6054b94
	AnchorData GetLayout();// 0x6054e1c
	bool GetAutoSize();// 0x60548fc
	Anchors GetAnchors();// 0x6054ab4
	Vector2D GetAlignment();// 0x60549e0

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Vector2D Alignment;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath JobEffectListPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath JobEffectSelectPanelPath;//[Offset: 0x80, Size: 0x18]

--------------------------------
Class: TableRowBase

--------------------------------
Class: UINavigationManager.SolarGameManager.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 0x50]
	SolarUserWidget*[] TmpRemovedWidgets;//[Offset: 0x88, Size: 0x10]
	<FName,KeyMapInputBinding*> KeyMapBindingDictPressed;//[Offset: 0x98, Size: 0x50]
	<FName,KeyMapInputBinding*> KeyMapBindingDictReleased;//[Offset: 0xe8, Size: 0x50]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x148, Size: 0x8]
	void UnbindCustomControlDefine(SolarUserWidget* UserWidget);// 0x3aa89b4
	SolarUserWidget* ShowUIBySubClass(const class SolarUserWidget SubClass, enum RootID);// 0x4c77334
	void ShowPanelUI(SolarUserWidget* createWidget, FString UIName);// 0x3aa89b4
	void RemoveUIFromOpenedMap(FString UIName);// 0x4c77588
	void RemoveAllSolarWidgets();// 0x3aa89b4
	void PrePooledWidgetReset(UserWidget* UserWidget);// 0x3aa89b4
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x4c76e1c
	void OnKeyMapBindActionCallBack(const FName ActionName, const byte KeyEvent);// 0x4c76ec0
	void KeyMapUnBindAction(SolarUserWidget* UserWidget, const FName ActionName, const byte KeyEvent, delegate Delegate);// 0x4c76fa8
	void KeyMapBindAction(SolarUserWidget* UserWidget, const FName ActionName, const byte KeyEvent, delegate Delegate);// 0x4c7711c
	void InitUIRoot();// 0x3aa89b4
	UserWidget* GetOpenedWidget(FString UIName);// 0x3aa89b4
	void CloseUIBySubClass(const class SolarUserWidget SubClass);// 0x4c77290
	void ClosePanelUI(SolarUserWidget* closeWidget, FString UIName);// 0x3aa89b4
	void ClearAllOpenedWidget();// 0x4c77574
	void BubbleEventPostMessage(SolarUserWidget* UserWidget, FString HandleName);// 0x3aa89b4
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x4c76d4c
	void BindCustomControlDefine(SolarUserWidget* UserWidget, FString FullPath);// 0x3aa89b4
	void BatchRemovedWidgets(bool bRemoveAll);// 0x4c77424
	void AddUIToOpenedMap(FString UIName, SolarUserWidget* Widget);// 0x4c77638
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x4c774d0

--------------------------------
Class: KeyMapInputBinding.Object

--------------------------------
Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x4be2bec
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0x3aa89b4
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x4be2dd8
	void PauseTimerInternal(TimerHandle Handle);// 0x4be2c90
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0x3aa89b4
	bool IsValidTimerInternal(TimerHandle Handle);// 0x4be2a8c
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x4be2b3c
	void ClearTimerInternal(TimerHandle Handle);// 0x4be2d34
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x4be2e90

--------------------------------
Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x4a8b60c
	bool IsAccountFlagOn();// 0x4a8b5d4

--------------------------------
Class: SolarViewModelManager.SolarGameManager.Object
	<class Object,Object*> InstanceDict;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 0x8]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 0x8]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 0x8]
	DataTable* BackpackTrailAssembingDTInstance;//[Offset: 0x48, Size: 0x8]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 0x8]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x60, Size: 0x8]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x68, Size: 0x8]
	SolarRoleSkillDataConfig* RoleConfigAsset;//[Offset: 0x70, Size: 0x8]
	float HeadHitValue;//[Offset: 0x78, Size: 0x4]
	float ShieldReducePhy;//[Offset: 0x7c, Size: 0x4]
	float ShieldReduceEn;//[Offset: 0x80, Size: 0x4]
	float ArmorReducePhy;//[Offset: 0x84, Size: 0x4]
	float ArmorReduceEn;//[Offset: 0x88, Size: 0x4]
	float BaseHeadShotAddit;//[Offset: 0x8c, Size: 0x4]
	int BackpackEnergyID;//[Offset: 0x90, Size: 0x4]
	int BackpackExtraEnergyID;//[Offset: 0x94, Size: 0x4]
	int MedicineItemId;//[Offset: 0x98, Size: 0x4]
	int RadarItemId;//[Offset: 0x9c, Size: 0x4]
	int ShieldRechargerItemId;//[Offset: 0xa0, Size: 0x4]
	int ShieldBigRechargerItemId;//[Offset: 0xa4, Size: 0x4]
	float UnPickupItemTime;//[Offset: 0xa8, Size: 0x4]
	float UnAutoPickupItemTime;//[Offset: 0xac, Size: 0x4]
	float AutoPickupTime;//[Offset: 0xb0, Size: 0x4]
	float AutoMarkCDTime;//[Offset: 0xb4, Size: 0x4]
	int[] AutoMarkItemTypeList;//[Offset: 0xb8, Size: 0x10]
	float AutoMarkTeammateDistance;//[Offset: 0xc8, Size: 0x4]
	float PickupCapsuleRadius;//[Offset: 0xcc, Size: 0x4]
	float PickupCapsuleHalfHeight;//[Offset: 0xd0, Size: 0x4]
	float MapVoiceSurviveTime;//[Offset: 0xd4, Size: 0x4]
	float MapVoiceDataRefreshTime;//[Offset: 0xd8, Size: 0x4]
	void OnInitialized();// 0x3aa89b4
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x49e2c08
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x49e2898
	LinearColor GetHUDColorByQuality(int Quality);// 0x49e29f8
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x49e2948
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x49e2aa8
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x49e2cec
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x49e2cb8
	LinearColor GetColorByQuality(int Quality);// 0x49e2b58

--------------------------------
Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	Vector2D StandardViewportSize;//[Offset: 0x38, Size: 0x8]
	float StandardDPIScale;//[Offset: 0x40, Size: 0x4]
	DataTable* WeaponNoticeTable;//[Offset: 0x48, Size: 0x8]
	DataTable* WeaponSkillTable;//[Offset: 0x50, Size: 0x8]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x58, Size: 0x8]
	bool bSecondLimitFullForGameDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float QuitBattleUpgradeTriggerTime;//[Offset: 0x64, Size: 0x4]
	float BattleUpgradeCD;//[Offset: 0x68, Size: 0x4]
	float OpenScopeWaitTimeForPC;//[Offset: 0x6c, Size: 0x4]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* WeaponCrosshairSpreadSpeedCurve;//[Offset: 0x78, Size: 0x8]
	CurveFloat* WeaponCrosshairBackSpeedCurve;//[Offset: 0x80, Size: 0x8]
	float WeaponSkillDataUIDisplayDistance;//[Offset: 0x88, Size: 0x4]
	float PriamayFireIgnoreInterval;//[Offset: 0x8c, Size: 0x4]
	float AssistAimAutoFireRadius;//[Offset: 0x90, Size: 0x4]
	byte[] AssistAimAutoFireBlockTypes;//[Offset: 0x98, Size: 0x10]
	Vector2D AssistAimRangeMaxRate;//[Offset: 0xa8, Size: 0x8]
	Vector2D AssistAimRangeMinRate;//[Offset: 0xb0, Size: 0x8]
	float EnableAssistAimDistanceMin;//[Offset: 0xb8, Size: 0x4]
	float WeaponRecoilWithFireAdsorbRate;//[Offset: 0xbc, Size: 0x4]
	FName[] AssistAimApproachSockets;//[Offset: 0xc0, Size: 0x10]
	float AssistAimApproachSpeedRate;//[Offset: 0xd0, Size: 0x4]
	bool bAssistAimFireAdsorbEnablePitchOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bAssistAimFireAdsorbEnableYawOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	Vector2D AssistAimAdsorbRange;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* AssistAimAdsorbEnterRate;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* AssistAimAdsorbExitRate;//[Offset: 0xe8, Size: 0x8]
	FName[] AssistAimAdsorbSockets;//[Offset: 0xf0, Size: 0x10]
	bool bEnableAssistAimAdsorbSlowDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bAssistAimTouchAdsorbEnablePitchOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bAssistAimTouchAdsorbEnableYawOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	enum[] AssistAimCanActiveAutoAdsorbCharacterStates;//[Offset: 0x108, Size: 0x10]
	Vector2D AssistAimAutoAdsorbRange;//[Offset: 0x118, Size: 0x8]
	Vector AssistAimAutoAdsorbSpeed;//[Offset: 0x120, Size: 0xc]
	float AssistAimAutoAdsorbSpeedRatioWithScope;//[Offset: 0x12c, Size: 0x4]
	FName[] AssistAimAutoAdsorbSockets;//[Offset: 0x130, Size: 0x10]
	float AssistAimAutoAdsorbPitchOffsetMinimum;//[Offset: 0x140, Size: 0x4]
	float AssistAimAutoAdsorbYawOffsetMinimum;//[Offset: 0x144, Size: 0x4]
	bool bAssistAimAutoAdsorbEnablePitchOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool bAssistAimAutoAdsorbEnableYawOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	CurveFloat* AssistAimAutoAdsorbSpeedCurveForDistance;//[Offset: 0x150, Size: 0x8]
	CurveFloat* AssistAimAutoAdsorbSpeedCurveForPitch;//[Offset: 0x158, Size: 0x8]
	CurveFloat* AssistAimAutoAdsorbSpeedCurveForYaw;//[Offset: 0x160, Size: 0x8]
	SoftObjectPath PartUpgradeMaterial;//[Offset: 0x168, Size: 0x18]
	float PartUpgradeFadeInterval;//[Offset: 0x180, Size: 0x4]
	<enum,FString> CharaterPostureMap;//[Offset: 0x188, Size: 0x50]
	CurveFloat* HitEffectScaleCurve;//[Offset: 0x1d8, Size: 0x8]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x1e0, Size: 0x20]
	float[] WeaponLevelWithIncreaseDamageMap;//[Offset: 0x200, Size: 0x10]
	FString GetStateByPosture(enum posture);// 0x48a9888
	FString GetStateByAnimState(enum CharacterState);// 0x48a9a30
	bool GetIsGroundByAnimState(enum CharacterState);// 0x48a9980

--------------------------------
Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x505573c

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 0x10]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 0x10]
	float CoefficientHUD;//[Offset: 0x58, Size: 0x4]
	float CoefficientWorld;//[Offset: 0x5c, Size: 0x4]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 0x4]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 0x4]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 0x4]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 0x88]

--------------------------------
Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneWeight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarRoleSkillDataConfig.DataAsset.Object
	DataTable* RoleSkillDataTable;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath RoleSkillForbiddenGameplayEffect;//[Offset: 0x38, Size: 0x18]
	int RoleSkillCannotActiveNoticeID;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SolarLuaHelper.Object
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x30, Size: 0x8]
	DataTable* KeyMappingDisplayInfoDataTable;//[Offset: 0x38, Size: 0x8]
	static bool WriteFile(FString FilePath, FString Content);// 0x4a83c90
	static void UELogWarning(FString str);// 0x4a87220
	static void UELogNetwork(FString str);// 0x4a870e0
	static void UELogError(FString str);// 0x4a87180
	static void UELog(FString str);// 0x4a872c0
	static Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4a85da4
	static bool TryConvertFilenameToLongPackageName(FString InFilename, out FString OutPackageName);// 0x4a85fdc
	static void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4a85158
	static int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x4a84f60
	static int StaticPostAkEventByName(FString InEventName);// 0x4a850a8
	static void SolarSetShadowQuality(int InQuality);// 0x4a84c10
	static void SolarSetMSAAEnabled(bool bEnable);// 0x4a84ae0
	static void SolarSetGraphicsQuality(enum InLevel);// 0x4a84a4c
	static void SolarSetFrameRate(enum FrameRateLevel);// 0x4a84ca4
	static void SolarSetColorGrading(enum InTheme);// 0x4a84b7c
	static bool SolarGetTextureStreamingEnable();// 0x4a84978
	static void SolarEnableTextureStreaming(bool bEnable);// 0x4a849b0
	static int ShouldEnterLobby();// 0x4a844bc
	static void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x4a84d38
	static void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x4a85720
	static void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x4a85b98
	static void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x4a85858
	static void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x4a85cc0
	static void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x4a85630
	static void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x4a85a20
	void SetRenderBatch(int Mode);// 0x4a844f0
	void SetPlayerSettlementReport(out const SolarPlayerReport[] Reports, out const SolarGameModeInfo GameInfo);// 0x3aa89b4
	static void SetPatchBuildVersion(FString Version);// 0x4a86b54
	static void SetChangeListNumber(FString ChangeListNum);// 0x4a86954
	static void SetActorYawByDelta(Actor* InActor, float InDeltaYaw);// 0x4a85948
	static Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4a85e68
	static FString ReadFileContent(FString FilePath);// 0x4a83d94
	static int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x4a84e6c
	void PlayVoiceLocaly(int CharacterId, int SkinId, enum Type);// 0x4a87360
	static bool MoveFile(FString DestFilePath, FString SrcFilePath);// 0x4a83998
	static Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x4a86fec
	bool IsWorldTearingDown();// 0x4a87488
	static bool IsLocalBuild();// 0x4a84484
	static bool HasReviveItemManager(Object* InWorldContext);// 0x4a843dc
	static FString HashMd5(FString InputText);// 0x4a86c28
	static int64 GetUtcNowTimestamp();// 0x4a83384
	static FString GetSourceCommitHash();// 0x4a86534
	static FString GetSourceBuildVersion();// 0x4a86694
	SolarGameState* GetSolarGameState();// 0x4a876ec
	static FString GetShortName(FString LongName);// 0x4a84794
	static FString[] GetServersUrlList();// 0x4a8620c
	static FString GetServerEnvTag();// 0x4a86484
	static Vector2D GetScreenSizeXY();// 0x4a86bf4
	static SkillConfig* GetRoleSkillConfig(Object* WorldContextObject, int CharacterId, byte RoleAbilityIdx);// 0x4a853d8
	static FString GetPatchBuildVersion();// 0x4a86aa4
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x3aa89b4
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x3aa89b4
	static FString GetMainBuildVersion();// 0x4a869f4
	FString GetLocalText(int InLocalizationID, out const <FString,FString> FormatContext);// 0x3aa89b4
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x4a87754
	SolarPlayerState* GetLocalSolarPlayerState();// 0x4a876b8
	SolarPlayerController* GetLocalSolarPlayerController();// 0x4a87788
	PlayerController* GetLocalPlayerController();// 0x4a87720
	static Key GetLeftMouseKeyDown();// 0x4a86d18
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x4a841d0
	FString GetGameModeParam(int GameModeID, FString Key);// 0x3aa89b4
	static FString GetExtBackdoorUrl();// 0x4a86324
	static FString GetClipboardPasteText();// 0x4a84634
	static FString GetChangeListNumber();// 0x4a868a4
	static FString GetBuildVariation();// 0x4a86744
	static FString GetBuildMode();// 0x4a867f4
	static Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x4a85504
	static FString GetBackdoorUrl();// 0x4a863d4
	static FString GetAndroidPkgName();// 0x4a846e4
	static FString[] GetAllLoadedPackagesPath();// 0x4a860f4
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x4a842f8
	static FString GetActualBuildVersion();// 0x4a865e4
	static FString GetAbsolutePathForWrite(FString FilePath);// 0x4a83e84
	static FString GetAbsolutePathForRead(FString FilePath);// 0x4a83f74
	static Color FromHex(FString HexString);// 0x4a85f2c
	static FString[] FindFiles(FString Directory, FString FileExtension);// 0x4a8373c
	static void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x4a86e60
	void DoLuaDebug(out const FString[] cmdArray);// 0x3aa89b4
	static bool DirectoryExist(FString TargetDirectory);// 0x4a833b8
	static bool DeleteFile(FString FilePath);// 0x4a838e4
	static bool DeleteDirectoryRecursively(FString Path);// 0x4a83520
	static bool DeleteDirectory(FString Path);// 0x4a8346c
	static FString DecodeFile(FString InFilePath);// 0x4a83ba0
	static LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x4a84884
	Actor* CreateEmptySkeletalMeshActor();// 0x4a874c0
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x4a874f4
	static bool CreateDirectoryTree(FString Path);// 0x4a83688
	static bool CreateDirectory(FString Path);// 0x4a835d4
	static bool CopyFile(FString DestFilePath, FString SrcFilePath);// 0x4a83a9c
	void ConvertKeyMappingName(out const Key Key, out FString OutDisplayName);// 0x4a84064
	static void ClipboardCopyText(FString Content);// 0x4a84594
	static void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x4a85b04
	static void ApplyVehicleSkinPreview(Object* PreviewVehicleObj, int SkinId, int PageType, Vector DefaultLoc);// 0x4a85280

--------------------------------
Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	uint64 UserId;//[Offset: 0x10, Size: 0x8]
	FString NickName;//[Offset: 0x18, Size: 0x10]
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int PlayerRank;//[Offset: 0x30, Size: 0x4]
	int Gender;//[Offset: 0x34, Size: 0x4]
	int AccountFlag;//[Offset: 0x38, Size: 0x4]
	int TeamRank;//[Offset: 0x3c, Size: 0x4]
	int TeamID;//[Offset: 0x40, Size: 0x4]
	int PosInTeam;//[Offset: 0x44, Size: 0x4]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int KillNum;//[Offset: 0x4c, Size: 0x4]
	int[] VehicleKillNum_ID;//[Offset: 0x50, Size: 0x10]
	int[] VehicleKillNum_Value;//[Offset: 0x60, Size: 0x10]
	int KillTeammate;//[Offset: 0x70, Size: 0x4]
	int KillInAirNum;//[Offset: 0x74, Size: 0x4]
	int KillDownInAirNum;//[Offset: 0x78, Size: 0x4]
	int WeaponSkillKillNum;//[Offset: 0x7c, Size: 0x4]
	int P_KillStreak;//[Offset: 0x80, Size: 0x4]
	int[] KillStreakHistory;//[Offset: 0x88, Size: 0x10]
	int RevengeNum;//[Offset: 0x98, Size: 0x4]
	int DeathNum;//[Offset: 0x9c, Size: 0x4]
	int KillDownNum;//[Offset: 0xa0, Size: 0x4]
	int KillDownTeammate;//[Offset: 0xa4, Size: 0x4]
	float AccurateDamage;//[Offset: 0xa8, Size: 0x4]
	int AccurateDameageTimes;//[Offset: 0xac, Size: 0x4]
	int AccurateKillTimes;//[Offset: 0xb0, Size: 0x4]
	int AccurateKillDownTimes;//[Offset: 0xb4, Size: 0x4]
	float CauseDamage;//[Offset: 0xb8, Size: 0x4]
	float ReceivedDamage;//[Offset: 0xbc, Size: 0x4]
	int AssistNum;//[Offset: 0xc0, Size: 0x4]
	float CollectEnergy;//[Offset: 0xc4, Size: 0x4]
	int BuyESElectricNum;//[Offset: 0xc8, Size: 0x4]
	int ResurrectionCapsule;//[Offset: 0xcc, Size: 0x4]
	int TeamFriendRevive;//[Offset: 0xd0, Size: 0x4]
	float ReceivedHeal;//[Offset: 0xd4, Size: 0x4]
	float HealSelf;//[Offset: 0xd8, Size: 0x4]
	float TeammateHeal;//[Offset: 0xdc, Size: 0x4]
	int OpenAirBoxNum;//[Offset: 0xe0, Size: 0x4]
	float Lifetime;//[Offset: 0xe4, Size: 0x4]
	int SaveCount;//[Offset: 0xe8, Size: 0x4]
	int FlyCount;//[Offset: 0xec, Size: 0x4]
	int VehicleTime;//[Offset: 0xf0, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0xf4, Size: 0x4]
	int CurCharacterExp;//[Offset: 0xf8, Size: 0x4]
	int CharacterExp;//[Offset: 0xfc, Size: 0x4]
	int AccountExp;//[Offset: 0x100, Size: 0x4]
	int TotalAccountExp;//[Offset: 0x104, Size: 0x4]
	int AccountLevel;//[Offset: 0x108, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	int RankID;//[Offset: 0x110, Size: 0x4]
	int RankBeforeScore;//[Offset: 0x114, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x118, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x11c, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x120, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x124, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x128, Size: 0x4]
	int RankAfterScore;//[Offset: 0x12c, Size: 0x4]
	int RankLegend;//[Offset: 0x130, Size: 0x4]
	byte RankProtectType;//[Offset: 0x134, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1]
	int Zomborg;//[Offset: 0x138, Size: 0x4]
	float MvpScore;//[Offset: 0x13c, Size: 0x4]
	float KDA;//[Offset: 0x140, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	int[] SettlementItems;//[Offset: 0x148, Size: 0x10]
	FString[] StringExtraRewards;//[Offset: 0x158, Size: 0x10]
	int[] SendGiftGold;//[Offset: 0x168, Size: 0x10]
	int[] SendGiftDiamond;//[Offset: 0x178, Size: 0x10]
	FString[] SendGiftPlayerName;//[Offset: 0x188, Size: 0x10]
	FString[] SendGiftPlayerID;//[Offset: 0x198, Size: 0x10]
	int[] WeaponExpIds;//[Offset: 0x1a8, Size: 0x10]
	int[] WeaponLevel;//[Offset: 0x1b8, Size: 0x10]
	int[] CurWeaponExp;//[Offset: 0x1c8, Size: 0x10]
	int[] WeaponExps;//[Offset: 0x1d8, Size: 0x10]
	int[] WeaponKillNum_ID;//[Offset: 0x1e8, Size: 0x10]
	float[] WeaponKillNum_Value;//[Offset: 0x1f8, Size: 0x10]
	int[] WeaponDamage_ID;//[Offset: 0x208, Size: 0x10]
	float[] WeaponDamage_Value;//[Offset: 0x218, Size: 0x10]
	int[] VehicleDamage_ID;//[Offset: 0x228, Size: 0x10]
	float[] VehicleDamage_Value;//[Offset: 0x238, Size: 0x10]
	int[] VehicleDistance_ID;//[Offset: 0x248, Size: 0x10]
	int[] VehicleDistance_Value;//[Offset: 0x258, Size: 0x10]
	int SettlementConfigID;//[Offset: 0x268, Size: 0x4]
	int GameModeSubID;//[Offset: 0x26c, Size: 0x4]
	FString KillerPlayerID;//[Offset: 0x270, Size: 0x10]
	uint64 KillerUserId;//[Offset: 0x280, Size: 0x8]
	FString KillerNickName;//[Offset: 0x288, Size: 0x10]
	FString KillerOS;//[Offset: 0x298, Size: 0x10]
	FString OS;//[Offset: 0x2a8, Size: 0x10]
	int[] CharacterKillNumIDs;//[Offset: 0x2b8, Size: 0x10]
	int[] CharacterKillNumValues;//[Offset: 0x2c8, Size: 0x10]
	int WarmType;//[Offset: 0x2d8, Size: 0x4]
	int[] AchievementIDs;//[Offset: 0x2e0, Size: 0x10]
	int[] AchievementValues;//[Offset: 0x2f0, Size: 0x10]
	int LikeValue;//[Offset: 0x300, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x308, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x318, Size: 0x4]
	int LastUseVehicleID;//[Offset: 0x31c, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x320, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x330, Size: 0x10]
	byte[] SettlementRewards;//[Offset: 0x340, Size: 0x10]
	byte[] CrateRewardData;//[Offset: 0x350, Size: 0x10]

--------------------------------
Class: SolarGameModeInfo
	int GameModeID;//[Offset: 0x0, Size: 0x4]
	FString MapName;//[Offset: 0x8, Size: 0x10]
	int NumMode;//[Offset: 0x18, Size: 0x4]
	int PlayerCount;//[Offset: 0x1c, Size: 0x4]
	int TeamCount;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x298, Size: 0x10]
	SolarPlayerState*[] RealPlayerStateArray;//[Offset: 0x2a8, Size: 0x10]
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	PlayerState*[] PlayerArray_SameTeam;//[Offset: 0x2c0, Size: 0x10]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x2f0, Size: 0x10]
	int RemainingPlayersCount;//[Offset: 0x300, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x304, Size: 0x4]
	int PlayersCount;//[Offset: 0x308, Size: 0x4]
	int TeamCount;//[Offset: 0x30c, Size: 0x4]
	int TotalBoardingNum;//[Offset: 0x310, Size: 0x4]
	int CapsulePlayerNum;//[Offset: 0x314, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x318, Size: 0x4]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x320, Size: 0x50]
	float BattleTime;//[Offset: 0x374, Size: 0x4]
	int GameWarmID;//[Offset: 0x3c8, Size: 0x4]
	bool bLuaReportBattleEndServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	GameStartConditionList GameStartConditions;//[Offset: 0x3e8, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x440, Size: 0x8]
	void UpdateTeammateRelationship();// 0x4a2503c
	void SetTeamLastVehicleLocation(byte InTeamID, out const Vector InVehiclePosition);// 0x4a24ab8
	void SetSettlementStageConfigID(const int InConfigID);// 0x4a24d24
	SolarSafeArea* RecacheSafeArea();// 0x505573c
	void PlayTeamVictoryVoice();// 0x4a24cf4
	void OnRep_SettlementStageConfigID();// 0x4a24ccc
	void OnRep_CapsulePlayerNum();// 0x4a24ce0
	void OnPlayersNumberChange();// 0x4a24cb8
	void NotifyBombingEnd(int BombId);// 0x4a254e8
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x4a25594
	bool IsSupportWeaponUpgrade();// 0x4a25b70
	bool IsSupportCharacterUniqueAbility();// 0x4a25c84
	bool IsSupportCharacterRole();// 0x4a25cbc
	bool IsSupportCharacterInGameLeveling();// 0x4a25ba8
	bool IsSameTeamWithReferToPlayer(const SolarPlayerState* Other);// 0x4a24dc8
	float GetWorldStartTimeSeconds();// 0x4a257f0
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x4a25918
	enum GetUltimateSkillStateOnEnterPrepare();// 0x4a25c50
	enum GetUltimateSkillStateOnEnterBattle();// 0x4a25c1c
	enum GetUltimateSkillStateOnBeginSkyDiving();// 0x4a25be8
	SolarPlayerState* GetTeamPlayerState(const byte InTeamID, const byte InPosInTeam);// 0x4a253f8
	int GetTeamNumCount();// 0x4a25af8
	byte GetTeammateNum(const byte InTeamID);// 0x4a25344
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x4a25008
	SolarSafeArea* GetSolarSafeArea();// 0x4a25764
	int GetSettlementStageConfigID();// 0x4a24d08
	int GetRemainingTeamCount();// 0x4a25a80
	int GetRemainingPlayersCount();// 0x4a25abc
	SolarPlayerState* GetReferToPlayerTeamEntry(byte InPosInTeam);// 0x4a24e78
	SolarPlayerState*[] GetReferToPlayerTeamArray();// 0x4a24f24
	SolarPlayerState* GetReferToPlayerState();// 0x4a24fd4
	SolarPlayerState*[] GetPlayerStatesInTeam(out const byte InTeamID);// 0x4a25144
	int GetPlayersCount();// 0x4a25b34
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x4a2508c
	SolarPlayerState* GetLocalSolarPlayerState();// 0x4a2525c
	float GetBattleTime();// 0x4a25798
	float GetBattleStartTimeSeconds();// 0x4a257b4
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x4a25cf4
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x4a259cc
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamID);// 0x4a25290
	void ClientNotifyShowVictory(byte WinTeamID, float TargetEndTime);// 0x4a24bac
	void ClientNotifyMonsterSpawn();// 0x4a24c9c
	byte CalculateTeamNum();// 0x4a25058
	void CacheSafeArea(SolarSafeArea* SafeArea);// 0x4a256c0
	void BroadcastDeath(const KillInfo KillInfo);// 0x4a25824

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x274, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x27c, Size: 0x8]
	int ElapsedTime;//[Offset: 0x284, Size: 0x4]
	void OnRep_MatchState();// 0x6bf7d9c
	void OnRep_ElapsedTime();// 0x6bf7d80

--------------------------------
Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 0x8]
	int Number;//[Offset: 0x8, Size: 0x4]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: SolarSafeArea.SolarMapElementBase.Actor.Object
	SolarSafeAreaConfig* Config;//[Offset: 0x298, Size: 0x8]
	int CurrentIndex;//[Offset: 0x2a0, Size: 0x4]
	float TargetTime;//[Offset: 0x2a4, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x2a8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0x2ac, Size: 0xc]
	Vector BeginLocation;//[Offset: 0x2b8, Size: 0xc]
	enum AreaStatus;//[Offset: 0x2c4, Size: 0x1]
	Vector[] AreaPosArray;//[Offset: 0x308, Size: 0x10]
	bool GMShowAllArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	SafeAreaDrone*[] DroneArray;//[Offset: 0x348, Size: 0x10]
	void updateNextSafeArea();// 0x505573c
	void StartShrink();// 0x4af4794
	void ShowEffectInside(bool bInside);// 0x505573c
	void ShowAllSafeArea(bool IsShow);// 0x4af4450
	void ShowAllDrone(bool IsShow);// 0x4af43a4
	void SetAreaStatus(enum InStatus);// 0x4af46f0
	void Resume();// 0x4af46c0
	void RefreshSafeArea();// 0x4af44fc
	void Pause();// 0x4af46d4
	void NotifySafeAreaStartShrink();// 0x505573c
	bool IsInSafeArea(Actor* Actor);// 0x4af4510
	void GMStartShrinkArea();// 0x4af4390
	SafeAreaConfig GetSafeAreaConfig();// 0x4af4640
	float GetNextSafeAreaRadius();// 0x4af4604
	Vector GetNextAreaLocation();// 0x4af4680
	float GetCurrentSafeAreaRadius();// 0x4af45c8

--------------------------------
Class: SolarSafeAreaConfig.DataAsset.Object
	int StableTime;//[Offset: 0x30, Size: 0x4]
	Vector StartLocation;//[Offset: 0x34, Size: 0xc]
	Vector2D SafeAreaLimitSize;//[Offset: 0x40, Size: 0x8]
	Texture2D* AreaMask;//[Offset: 0x48, Size: 0x8]
	class SafeAreaDrone* DroneClass;//[Offset: 0x50, Size: 0x8]
	float MinSpace;//[Offset: 0x58, Size: 0x4]
	float MaxSpace;//[Offset: 0x5c, Size: 0x4]
	float DroneHeight;//[Offset: 0x60, Size: 0x4]
	float DroneDistance;//[Offset: 0x64, Size: 0x4]
	SafeAreaConfig[] SafeAreaArray;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SafeAreaDrone.Actor.Object
	SolarSafeArea* SafeArea;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* DroneMeshComponent;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: SafeAreaConfig
	float Radius;//[Offset: 0x0, Size: 0x4]
	float PreShrinkTime;//[Offset: 0x4, Size: 0x4]
	float ShrinkTime;//[Offset: 0x8, Size: 0x4]
	float DamageValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KillInfo
	FString KillerPlayerID;//[Offset: 0x0, Size: 0x10]
	FString KillerName;//[Offset: 0x10, Size: 0x10]
	FString KillIcon;//[Offset: 0x20, Size: 0x10]
	FString KilledPlayerID;//[Offset: 0x30, Size: 0x10]
	FString KilledName;//[Offset: 0x40, Size: 0x10]
	int WeaponSkinID;//[Offset: 0x50, Size: 0x4]
	int KillerFlag;//[Offset: 0x54, Size: 0x4]
	int KillerSkinId;//[Offset: 0x58, Size: 0x4]
	int VictimSkinId;//[Offset: 0x5c, Size: 0x4]
	int KilledFlag;//[Offset: 0x60, Size: 0x4]
	byte KillerTeamId;//[Offset: 0x64, Size: 0x1]
	byte KilledTeamId;//[Offset: 0x65, Size: 0x1]
	bool bDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bHeadHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	bool bRevenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarGameplayConfigComponent.ActorComponent.Object
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	class GameplayConfigBase* CGMConfig;//[Offset: 0xb8, Size: 0x8]
	class GameplayConfigBase* TestCGMConfig;//[Offset: 0xc0, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x4a1eecc

--------------------------------
Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	bool bShowMapVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1]
	bool bShowMapVoiceFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int KillStreakEndNoticeNumber;//[Offset: 0x5c, Size: 0x4]
	bool bShowRevengeNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bShowKillStreakEndNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x62, Size: 0x1]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bEnableBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int ConfigGameModeId;//[Offset: 0x6c, Size: 0x4]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x489e15c
	void SetTeamDamageEnabled(bool bNewValue);// 0x489e718
	void SetShowVehicleOnMap(bool bNewValue);// 0x489e400
	void SetShowRevengeNotice(bool InShowRevengeNotice);// 0x489ee40
	void SetShowMapVoiceStep(bool bNewValue);// 0x489e338
	void SetShowMapVoiceFight(bool bNewValue);// 0x489e270
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice);// 0x489ed7c
	void SetMinHPToLock(float NewValue);// 0x489e590
	void SetMinHPLockEnabled(bool bNewValue);// 0x489e650
	void SetKillStreakEndNoticeNumber(int InKillStreakEndNoticeNumber);// 0x489ef04
	void SetKillPlayerWhenOut(bool bNewValue);// 0x489eaf8
	void SetJetCostEnabled(bool bNewValue);// 0x489ea30
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x489e970
	void SetGameCanRebirth(bool bNewValue);// 0x489ec80
	void SetEnergyCostEnabled(bool bNewValue);// 0x489e8a8
	void SetDamageEnabled(bool bNewValue);// 0x489e7e0
	void SetCanVJetInWater(bool bNewValue);// 0x489f0c0
	void SetCanLoginBattle(bool bNewValue);// 0x489ebbc
	void SetCanHJetInWater(bool bNewValue);// 0x489eff8
	void SetBigMapEnabled(bool bNewValue);// 0x489e4c8
	void ReceiveSettingChanged();// 0x489e110
	bool IsVJetCDOverriden();// 0x489efc0
	bool IsTeamDamageEnabled();// 0x489e6fc
	bool IsSkydiveFollowMovementEnabled();// 0x489e238
	bool IsShowVehicleOnMap();// 0x489e3e4
	bool IsShowRevengeNotice();// 0x489ee24
	bool IsShowMapVoiceStep();// 0x489e31c
	bool IsShowMapVoiceFight();// 0x489e254
	bool IsShowKillStreakEndNotice();// 0x489ed60
	bool IsMinHPLockEnabled();// 0x489e634
	bool IsKillPlayerWhenOut();// 0x489eadc
	bool IsJetCostEnabledEnabled();// 0x489ea14
	bool IsHJetCDOverriden();// 0x489ed44
	bool IsGameCanRebirth();// 0x489ec64
	bool IsGameCanLoginBattle();// 0x489eba0
	bool IsEnergyCostEnabled();// 0x489e88c
	bool IsDestroyWeaponOnDiscard();// 0x489e200
	bool IsDestroyItemOnDiscard();// 0x489e21c
	bool IsDamageEnabled();// 0x489e7c4
	bool IsBigMapEnabled();// 0x489e4ac
	enum GetWeaponInfiniteAmmoMode();// 0x489e140
	float GetOverridenVJetCD();// 0x489efa4
	float GetOverridenHJetCD();// 0x489ed28
	float GetMinHPToLock();// 0x489e574
	int GetKillStreakEndNoticeNumber();// 0x489eee8
	enum GetJetAltitudeLimitationMode();// 0x489e954
	int GetConfigGameModeId();// 0x489e124
	bool CanVJetInWater();// 0x489f0a4
	bool CanHJetInWater();// 0x489efdc

--------------------------------
Class: SkillConfig.DataAsset.Object
	int SkillName;//[Offset: 0x30, Size: 0x4]
	int SkillType;//[Offset: 0x34, Size: 0x4]
	int SkillDescription;//[Offset: 0x38, Size: 0x4]
	SoftObjectPath SkillIcon;//[Offset: 0x40, Size: 0x18]
	<int,SkillBPAndExtraConfig*> SkillExtraConfigByPlayerLevel;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: SkillBPAndExtraConfig.DataAsset.Object
	SoftObjectPath SkillBlueprint;//[Offset: 0x30, Size: 0x18]
	int SkillLevel;//[Offset: 0x48, Size: 0x4]
	int SkillItemQuality;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: SolarReplayPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	float WaitFirstTeamNumberInputTime;//[Offset: 0x9fc, Size: 0x4]
	float WaitTeamNumberInputTime;//[Offset: 0xa00, Size: 0x4]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xa08, Size: 0x8]
	<Actor*,MaterialChangeHandle> CharacterMaterialInfo;//[Offset: 0xa10, Size: 0x50]
	<Actor*,MaterialInterface*> VehicleOriginMaterial;//[Offset: 0xa60, Size: 0x50]
	<FString,float> HorizontalDistanceBetweenPlayerAndOBCamera;//[Offset: 0xab0, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0xb00, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xb08, Size: 0x8]
	void StopSpectatePlayer();// 0x4af08a4
	void StopPlayReplay();// 0x4af07e0
	void SpectatePlayerByPlayerID(FString SolarPlayerId);// 0x4af08b8
	void SolarGM_ToggleProgressControlButton();// 0x4af0428
	bool ShowDamageText(out SolarDamageText InDamageText);// 0x4af0584
	void SetPlayerInfoHUDVisible(bool bIsVisible);// 0x4af0734
	void SetDamageTextVisible(bool bIsVisible);// 0x4af0688
	void SetBattleOBHUDType(out const enum Type);// 0x4af0464
	void PauseReplay();// 0x4af0450
	void OnReplayPlayingLevelLoaded();// 0x4af02bc
	void OnPlayingFinished();// 0x4af02d0
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x4af02e4
	bool IsSpectatingPlayer();// 0x4af054c
	<FString,float> GetHorizontalDistanceBetweenPlayerAndOBCamera();// 0x4af0398
	FString GetCurrentSpectatePlayerID();// 0x4af07f4
	enum GetBattleOBHUDType();// 0x4af0518
	void ContinueReplay();// 0x4af043c

--------------------------------
Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SolarReplayCameraControlComp.ActorComponent.Object
	delegate OnReplayCameraModeChanged;//[Offset: 0xb0, Size: 0x10]
	float DefaultSpeed;//[Offset: 0xc0, Size: 0x4]
	float MoveSpeedChangeStep;//[Offset: 0xc4, Size: 0x4]
	float MoveSpeedMin;//[Offset: 0xc8, Size: 0x4]
	float MoveSpeedMax;//[Offset: 0xcc, Size: 0x4]
	float SpeedUpScale;//[Offset: 0xd0, Size: 0x4]
	float DefaultTurnRate;//[Offset: 0xd4, Size: 0x4]
	float TurnRateChangeStep;//[Offset: 0xd8, Size: 0x4]
	float TurnSpeedMin;//[Offset: 0xdc, Size: 0x4]
	float TurnSpeedMax;//[Offset: 0xe0, Size: 0x4]
	float DistanceChangeStep;//[Offset: 0xe4, Size: 0x4]
	SolarPlayerState* CurrentTarget;//[Offset: 0xe8, Size: 0x8]
	SolarGameState* SolarGameState;//[Offset: 0x100, Size: 0x8]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0x108, Size: 0x8]
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x4ae7a30
	void OnReplayCameraModeChanged__DelegateSignature(enum OldMode, enum CurMode);// 0x505573c
	enum GetReplayCameraMode();// 0x4ae7ad4

--------------------------------
Class: MaterialChangeHandle

--------------------------------
Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 0x10]
	FString ActionDisplayName;//[Offset: 0x18, Size: 0x10]
	FString ActionName;//[Offset: 0x28, Size: 0x10]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Scale;//[Offset: 0x3c, Size: 0x4]
	FString RealAction;//[Offset: 0x40, Size: 0x10]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 0x10]
	FString Description;//[Offset: 0x70, Size: 0x10]
	FString[] RelatedActions;//[Offset: 0x80, Size: 0x10]
	bool Stationary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6c93470
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6c936b4

--------------------------------
Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0x3aa89b4
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x4951c14
	void SendAntiDataToSsmOnClient(FString Param, const byte AntiType);// 0x3aa89b4
	void InitializeBind();// 0x4951f40
	FString GetAntiLogOnClient(const byte Type);// 0x3aa89b4
	void AnoUnRegisterCallBack();// 0x3aa89b4
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0x3aa89b4
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x4951d08
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x4951e10
	void AnoSDKResume();// 0x4951f2c
	void AnoSDKPause();// 0x4951f18
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0x3aa89b4

--------------------------------
Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarTableManager.Object
	static void SetIMInitFlag(bool Flag);// 0x4b17fb8
	static void SetCurrentLangEnum(enum InLang);// 0x4b18358
	static void SetCurrentLang(FString InLang);// 0x4b183ec
	void ReceiveInit();// 0x3aa89b4
	static bool IsLocalTextIDValid(int ID);// 0x4b1808c
	static FString GetLocalTextWithLang(int ID, enum InLang);// 0x4b18134
	static FString GetLocalText(int ID);// 0x4b18268
	static bool GetIMInitFlag();// 0x4b18054
	static enum GetCurrentLangEnum();// 0x4b1848c
	static FString GetCurrentLang();// 0x4b184c0

--------------------------------
Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x50, Size: 0x8]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x58, Size: 0x8]
	bool IsSsm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x68, Size: 0x10]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	delegate DisconnectedDelegate;//[Offset: 0x7c, Size: 0x10]
	delegate ConnectedDelegate;//[Offset: 0x8c, Size: 0x10]
	delegate MessageReceivedDelegate;//[Offset: 0x9c, Size: 0x10]
	SolarPlayerReport MyReport;//[Offset: 0xb0, Size: 0x360]
	int KillNumToRealPlayer;//[Offset: 0x440, Size: 0x4]
	float CauseDamageToRealPlayer;//[Offset: 0x444, Size: 0x4]
	void UpdateTeamRank(byte TeamID, int Rank);// 0x3aa89b4
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0x3aa89b4
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0x3aa89b4
	bool UpdateBotAIData(int AIIndex, SolarPlayerState* PlayerState);// 0x3aa89b4
	void TryEndBattle();// 0x3aa89b4
	void SyncSsmDataToGameState();// 0x3aa89b4
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0x3aa89b4
	void SsmDSChangeRoleIDRequest(FString InPlayerId, int InRoleID);// 0x3aa89b4
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0x3aa89b4
	void ReportTournamentSpectate(out <FString,FString> TournamentSpectateData);// 0x3aa89b4
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0x3aa89b4
	void RecordLastUsedVehicle();// 0x3aa89b4
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerId, SolarPlayerState* InPlayer);// 0x3aa89b4
	void PlayerCancelJoin(FString PlayerId);// 0x3aa89b4
	void OpenSupplement(int MaxSecond);// 0x505573c
	void OnStartBattleResponse();// 0x4bd8b60
	void OnRecvData(out const byte[] Data);// 0x3aa89b4
	bool OnReceivedTeamPreJoinRequest(out const FString[] PlayerIDs, int TeamID);// 0x4bd8d94
	void OnReceivedPlayerJoinData(FString PlayerId);// 0x4bd8ce4
	void OnReceivedPlayerCancelJoin(FString PlayerId);// 0x4bd8c34
	void OnPostLoadMapWithWorld(World* World);// 0x3aa89b4
	void OnPlayerLogin(FString PlayerId);// 0x3aa89b4
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x4bd8a58
	void OnDisconnected(int ConnId);// 0x3aa89b4
	void OnConnected(int ConnId);// 0x3aa89b4
	void NotifyTournamentSpectateState(bool bIsEnterReplay, out FString BattleID);// 0x3aa89b4
	void NotifyRoomDataChanged(bool bEnableInvite);// 0x3aa89b4
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0x3aa89b4
	void NotifyPlayerReward();// 0x3aa89b4
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0x3aa89b4
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0x3aa89b4
	void NotifyOBPlayersChanged(out FString[] PlayerIDs);// 0x3aa89b4
	void NotifyClientBattleStateFish();// 0x3aa89b4
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0x3aa89b4
	bool IsEnableAITeamManager();// 0x3aa89b4
	bool IsAllowReconnectGame();// 0x3aa89b4
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0x3aa89b4
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0x3aa89b4
	void GetWeaponUpgradeSlotByWeaponID(out UpgradeSlotStruct[] outData, FString PlayerId, const int weaponid);// 0x3aa89b4
	int GetWeaponSkinIDByWeaponID(FString PlayerId, const int weaponid);// 0x3aa89b4
	int GetWarmGameType();// 0x3aa89b4
	int GetTournamentID();// 0x3aa89b4
	void GetStartBattleRequestInfo(out StartBattleRequestInfo OutResult);// 0x3aa89b4
	SolarGameModeInfo GetSolarGameModeInfo();// 0x3aa89b4
	int GetRuleID();// 0x3aa89b4
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x4bd8b74
	byte[] GetPlayerTeamIDs();// 0x3aa89b4
	FString[] GetPlayerRoleAndOpenIDs();// 0x3aa89b4
	int GetPlayerCount();// 0x3aa89b4
	int GetPlayerClanID(FString PlayerId);// 0x3aa89b4
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0x3aa89b4
	int[] GetMLRelatedAIDataMLRatio();// 0x3aa89b4
	int[] GetMLRelatedAIDataMLFeature();// 0x3aa89b4
	bool GetMLRelatedAIDataMLClosed();// 0x3aa89b4
	int GetMaxPlayerNum();// 0x3aa89b4
	FString GetLocalIPAddress();// 0x4bd8edc
	bool GetIsCloseMatch();// 0x3aa89b4
	bool GetHasMonster();// 0x3aa89b4
	bool GetHasMachineLearning();// 0x3aa89b4
	int GetEntryID();// 0x3aa89b4
	FString GetBattleID();// 0x3aa89b4
	<int,int> GetAILevelConfig();// 0x3aa89b4
	int GetAboutToEnterPlayerCount();// 0x3aa89b4
	bool FillTeamReport(out SolarPlayerReport[] Reports);// 0x3aa89b4
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0x3aa89b4
	void CloseSupplement();// 0x3aa89b4
	bool CheckPlayerLeave(FString PlayerId);// 0x3aa89b4
	bool CheckJoinToken(FString Token, FString PlayerId);// 0x3aa89b4
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0x3aa89b4
	void CheckBattleOver();// 0x3aa89b4

--------------------------------
Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x228, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x22c, Size: 0x4]
	float TimeBetweenTicks;//[Offset: 0x230, Size: 0x4]
	bool SendData(int ConnectionId, byte[] Data);// 0x3d21bc0
	void Disconnect(int ConnectionId);// 0x3d21d14
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x3d21db8

--------------------------------
Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x360, Size: 0x50]

--------------------------------
Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 0x4]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AccessoryType;//[Offset: 0x5, Size: 0x1]
	int AccessoryID;//[Offset: 0x8, Size: 0x4]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 0x98]
	LinearColor IconColorOverride;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: StartBattleRequestInfo
	int aiNum;//[Offset: 0x0, Size: 0x4]
	int AILevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 0x10]
	int AccountLevel;//[Offset: 0x10, Size: 0x4]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 0x8]
	FString OpenId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 0x8]
	delegate OnMatchChannelChange;//[Offset: 0x50, Size: 0x10]
	static SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x48ff8c4
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x48ff7d0

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x6b7a5e4

--------------------------------
Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 0x4]
	void OnMessageReceived(out const byte[] Data);// 0x3aa89b4

--------------------------------
Class: SolarAssetManager.AssetManager.Object
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x440, Size: 0x8]
	<FString,Object*> CachedObjMap;//[Offset: 0x448, Size: 0x50]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x4952d04
	void OnBindingActorDestory(Actor* Actor);// 0x4952c60

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: SolarChunkAssignData.DataAsset.Object
	<FString,ChunkAssignRule> Rules;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 0x10]
	int ChunkID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 0x8]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0x88, Size: 0x10]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0x98, Size: 0x10]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0xa8, Size: 0x50]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0xf8, Size: 0x50]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x148, Size: 0x50]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x198, Size: 0x50]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x1e8, Size: 0x50]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x238, Size: 0x50]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x288, Size: 0x50]
	<int,int> AirDropChestIndexMap;//[Offset: 0x2d8, Size: 0x50]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x328, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0x378, Size: 0x50]
	RandomStream ItemStream;//[Offset: 0x3c8, Size: 0x8]
	float DelaySpawnTime;//[Offset: 0x3d0, Size: 0x4]
	FString[] SubLevelNames;//[Offset: 0x3d8, Size: 0x10]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x3f0, Size: 0x8]
	float DelayInitSpawnerTime;//[Offset: 0x3f8, Size: 0x4]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x400, Size: 0x8]
	float SpawnLoopInterval;//[Offset: 0x408, Size: 0x4]
	float SpawnMinDisSquared;//[Offset: 0x40c, Size: 0x4]
	float VehicleSpawnMinDisSquared;//[Offset: 0x410, Size: 0x4]
	DataTable* ItemResReferenceTable;//[Offset: 0x418, Size: 0x8]
	FString ItemResReferenceTablePath;//[Offset: 0x420, Size: 0x10]
	bool bOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	int FirstSpawnerIndex;//[Offset: 0x46c, Size: 0x4]
	int FirstTBoxIndex;//[Offset: 0x470, Size: 0x4]
	int FirstAirDropIndex;//[Offset: 0x474, Size: 0x4]
	int FirstVehicleIndex;//[Offset: 0x478, Size: 0x4]
	int ChestKeyCode;//[Offset: 0x47c, Size: 0x4]
	int Level1OutcomeID;//[Offset: 0x480, Size: 0x4]
	int Level2OutcomeID;//[Offset: 0x484, Size: 0x4]
	int Level3OutcomeID;//[Offset: 0x488, Size: 0x4]
	<int,enum> ItemID2Types;//[Offset: 0x4a0, Size: 0x50]
	int64 ThisIdRefCount;//[Offset: 0x4f0, Size: 0x8]
	int64 ServerNowSeconds;//[Offset: 0x4f8, Size: 0x8]
	FString RootActorBpPath;//[Offset: 0x500, Size: 0x10]
	float CheckDropRadius;//[Offset: 0x510, Size: 0x4]
	float CheckDropHeight;//[Offset: 0x514, Size: 0x4]
	float DropLineTraceLength;//[Offset: 0x518, Size: 0x4]
	float DropUnitOffset;//[Offset: 0x51c, Size: 0x4]
	SolarMapManager* MapManager;//[Offset: 0x520, Size: 0x8]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x528, Size: 0x10]
	AirDropTreasureBox*[] AirDropsList;//[Offset: 0x5d8, Size: 0x10]
	void UpdateItemParams();// 0x4a6f500
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos);// 0x4a6af14
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn, SolarCharacter* SummonCharacter, int SpawnDelay);// 0x4a6d1b8
	void SpawnMutipleItems(SolarCharacter* InCharacter, const int InItemID, const int InPerCount, const int InTotalCount);// 0x4a6b114
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x4a6d408
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x4a6e574
	SolarItemData SpawnItemData(int ItemID);// 0x4a6f2fc
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x4a6b4e0
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x4a6d00c
	void ResetThisID();// 0x4a6f154
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x4a6d630
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x4a6b818
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans, SolarCharacter* InCharacter, int SpawnDelay);// 0x4a6c7a4
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x4a6cb18
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x4a6be48
	void OnAsyncLoadDeathBoxComplete(SoftClassPath SClassPath, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x4a6c068
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x4a6c4ec
	void NotifySpawnerDestroy();// 0x4a6cd64
	void NotifyAvailableAirDropsNumChanged();// 0x4a6ab30
	void NotifyAirDropOpened();// 0x4a6ab44
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x4a6e47c
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x4a6d520
	void NetRunGlobalDrop();// 0x4a6ef7c
	void NetRunDrop();// 0x4a6ef90
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x4a6e988
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x4a6ec9c
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x4a6e894
	void LoadSpawnerLevelComplete();// 0x4a6efa4
	void LoadItemSpawnerLevels();// 0x4a6efb8
	bool IsPosBlocked(out const Vector CheckPos);// 0x4a6ae58
	bool IsInSafeArea(out const Vector Location);// 0x4a6ad68
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x4a6ba5c
	void InitWeaponLevel(out SolarItemData InItemData);// 0x4a6b968
	void InitVehicleSpawnGroupData(out <int,int> VehicleGroupIdToNum);// 0x4a6de18
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x4a6bb50
	int64 IncreaseThisID();// 0x4a6f120
	int GetVehicleIDBySingleSpawnId(const int SpawnID);// 0x4a6def4
	int GetVehicleIDByGroupIDAndIndex(int GroupID, int GroupIndex);// 0x4a6dc24
	static int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x4a6dfa0
	static SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x4a6e044
	int GetServerNowSeconds();// 0x4a6b7e4
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x4a6ee5c
	int GetRandomAirDropIDInMap();// 0x4a6ae24
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x4a6ceb4
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x4a6e28c
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x4a6e354
	bool GetItemResReference(int InItemID, out ItemResReference outData);// 0x4a6f168
	int GetItemPrize(const int InItemID);// 0x4a6b8bc
	int GetItemMaxPileByID(const int InItemID);// 0x4a6cf60
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x4a6e13c
	int GetEntryID();// 0x3aa89b4
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x4a6efcc
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x4a6d7a0
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x4a6db10
	int GetAvailableAirDropsNum();// 0x4a6ab58
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x4a6cda0
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x4a6ab8c
	void FindTransformForBoxItem(Actor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x4a6b280
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x4a6b3e0
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos);// 0x4a6b014
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x4a6bc44
	void ConvertOriginDatasToItemDatas();// 0x4a6e560
	void ClearSpawnLoopTimer();// 0x4a6cd78
	void CheckSpawnItemByDis();// 0x4a6cd8c
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x4a6ac3c
	void AddVehicleGroupDataSingle(int GroupID, out int[] SingleData);// 0x4a6dd10
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x4a6e6cc
	void AddAirDropToList(AirDropTreasureBox* AirDrop);// 0x4a6aa8c

--------------------------------
Class: SolarItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int64 ThisID;//[Offset: 0x8, Size: 0x8]
	FString Name;//[Offset: 0x10, Size: 0x10]
	FString Icon;//[Offset: 0x20, Size: 0x10]
	FString Info;//[Offset: 0x30, Size: 0x10]
	int Count;//[Offset: 0x40, Size: 0x4]
	enum ItemType;//[Offset: 0x44, Size: 0x4]
	int Quality;//[Offset: 0x48, Size: 0x4]
	int MaxPile;//[Offset: 0x4c, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FString AbilityBP;//[Offset: 0x58, Size: 0x10]
	FString ItemBP;//[Offset: 0x68, Size: 0x10]
	int DropTime;//[Offset: 0x78, Size: 0x4]
	int UnPickupTime;//[Offset: 0x7c, Size: 0x4]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	int64 UserId;//[Offset: 0x88, Size: 0x8]
	int Level;//[Offset: 0x90, Size: 0x4]
	int Prize;//[Offset: 0x94, Size: 0x4]
	float CurValue;//[Offset: 0x98, Size: 0x4]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	enum AppearanceType;//[Offset: 0x9d, Size: 0x1]

--------------------------------
Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x228, Size: 0x4]
	int MAX_SPAWN_NUM;//[Offset: 0x22c, Size: 0x4]
	int CurrLoadNum;//[Offset: 0x230, Size: 0x4]
	int CurrSpawnNum;//[Offset: 0x234, Size: 0x4]
	int TempFrame;//[Offset: 0x238, Size: 0x4]
	int FrameInterval;//[Offset: 0x23c, Size: 0x4]

--------------------------------
Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x294, Size: 0x4]
	enum SpawnerType;//[Offset: 0x2c8, Size: 0x1]
	enum SpawnerLevel;//[Offset: 0x2c9, Size: 0x1]
	int OutcomeID;//[Offset: 0x2cc, Size: 0x4]
	Vector OriginPos;//[Offset: 0x2d0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 0xc]
	Color BoxLineColor;//[Offset: 0x2e8, Size: 0x4]
	bool bNotDrawBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	Box SpawnerBox;//[Offset: 0x2f0, Size: 0x1c]
	float RotateAngleRange;//[Offset: 0x30c, Size: 0x4]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	FString SyncItemId;//[Offset: 0x318, Size: 0x10]
	bool bOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float RefreshTime;//[Offset: 0x32c, Size: 0x4]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	int NumberOfPoints;//[Offset: 0x334, Size: 0x4]
	float fScalarParams;//[Offset: 0x338, Size: 0x4]
	enum AppearanceType;//[Offset: 0x33c, Size: 0x1]
	TimerHandle ItemLoadHandle;//[Offset: 0x360, Size: 0x8]
	TimerHandle ItemSpawnHandle;//[Offset: 0x368, Size: 0x8]
	TimerHandle ItemRefreshHandle;//[Offset: 0x370, Size: 0x8]
	void SpawnSingleItem();// 0x4a7599c
	void SpawnInNextTick();// 0x4a75858
	void SaveSpawnerRange();// 0x4a759b0
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x4a75b34
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x4a75cd8
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x4a75a84
	void OnItemSpawned(Actor* Item);// 0x4a759cc
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x4a75678
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x4a75d88
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x4a75894
	void LoadSingleItemAsset();// 0x4a75988
	void LoadInNextTick();// 0x4a7586c
	void InitSpawnerBound();// 0x4a75a70
	void GetSuitableDropPos(out Vector TargetPos);// 0x4a75c28
	void GenerateDropPosition();// 0x4a75664
	void ClearUnpickedItems();// 0x4a75650
	void ClearLoopTimer();// 0x4a75880

--------------------------------
Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	float SpawnDelay;//[Offset: 0x39c, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x3a0, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x3a4, Size: 0x4]
	SoftClassPath PillarMeshBPClassPathName;//[Offset: 0x3a8, Size: 0x18]
	int ChestID;//[Offset: 0x3c8, Size: 0x4]

--------------------------------
Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] Contents;//[Offset: 0x8, Size: 0x10]
	enum OutcomeType;//[Offset: 0x18, Size: 0x1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 0x50]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 0x50]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 0x50]
	int PoolTotalWeight;//[Offset: 0x110, Size: 0x4]
	int PoolOutcomeID;//[Offset: 0x114, Size: 0x4]
	int MaxTimes;//[Offset: 0x118, Size: 0x4]
	int MinTimes;//[Offset: 0x11c, Size: 0x4]
	int SpawnerID;//[Offset: 0x120, Size: 0x4]
	int NetSetTimes;//[Offset: 0x124, Size: 0x4]
	int DropedTimes;//[Offset: 0x128, Size: 0x4]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 0x50]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 0x4]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 0x10]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int Weight;//[Offset: 0x8, Size: 0x4]
	int[] RandomNums;//[Offset: 0x10, Size: 0x10]
	int MaxTimes;//[Offset: 0x20, Size: 0x4]
	int MinTimes;//[Offset: 0x24, Size: 0x4]
	int RelatedContentID;//[Offset: 0x28, Size: 0x4]
	enum ItemType;//[Offset: 0x2c, Size: 0x4]
	int DropedTimes;//[Offset: 0x30, Size: 0x4]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x4]
	int MinTimes;//[Offset: 0x4, Size: 0x4]
	int MaxTimes;//[Offset: 0x8, Size: 0x4]
	int CurrDropTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 0x10]
	int MinTimes;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int CurrDropTimes;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarMapManager.SolarGameManager.Object
	MapData MapData;//[Offset: 0x38, Size: 0x3c]
	VehicleData VehicleData;//[Offset: 0x74, Size: 0x10]
	int CurrentMapID;//[Offset: 0x84, Size: 0x4]
	FString CurrentMapName;//[Offset: 0x88, Size: 0x10]
	float RespawnMinLength;//[Offset: 0x98, Size: 0x4]
	float RespawnMaxLength;//[Offset: 0x9c, Size: 0x4]
	float FootMinLength;//[Offset: 0xa0, Size: 0x4]
	float FootMaxLength;//[Offset: 0xa4, Size: 0x4]
	float GunMinLength;//[Offset: 0xa8, Size: 0x4]
	float GunMaxLength;//[Offset: 0xac, Size: 0x4]
	float VehicleMinLength;//[Offset: 0xb0, Size: 0x4]
	float VehicleMaxLength;//[Offset: 0xb4, Size: 0x4]
	<enum,Vector2D> MapVoiceRangeMap;//[Offset: 0xb8, Size: 0x50]
	VisualSoundConfig* BattlePromptConfig;//[Offset: 0x178, Size: 0x8]
	GameModeGlobalSetting* GameModeGlobalSetting;//[Offset: 0x180, Size: 0x8]
	bool bCanCheckBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	MapVoiceData WorldLocationToVoiceData(out const enum Type, out const Vector PlayerPos, out const Vector EnemyPos);// 0x4a8df38
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x4a8e184
	float WorldLengthToMiniMap(float WorldLength);// 0x4a8de8c
	void UnInitMapData();// 0x4a8e620
	void ReceiveInitMapData(int MapID);// 0x3aa89b4
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x4a8d824
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x4a8e094
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x4a8dd38
	static bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x4a8d53c
	bool IsCharacterInRange(Vector Pos, enum VoiceType);// 0x4a8e264
	void InitMapData(int MapID);// 0x4a8e634
	SolarCharacter* GetViewportFocusedCharacter();// 0x4a8e230
	bool GetSafeAreaSimpleInfoArray(out SafeAreaSimpleInfo[] OutArray);// 0x4a8dbb0
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x4a8dc7c
	bool GetSafeAreaDroneArray(out SafeAreaDrone*[] OutArray);// 0x4a8dae4
	Vector GetRandomVectorFromMapDarkData(Object* WorldContextObject, enum InType, bool GetWhiteArea);// 0x4a8d3fc
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x4a8e500
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x4a8d610
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x4a8d9d8
	int GetCurrentMapID();// 0x4a8e5ec
	VisualSoundConfig* GetBattlePromptConfig();// 0x4a8d288
	void GetAllEnemyActions(out MapVoiceDataListMap VoiceDataMap);// 0x4a8e358
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x4a8dde4
	bool CheckMapDarkDataWithVector(Vector InVector, enum InType, bool GetWhiteArea);// 0x4a8d2bc
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x4a8e444
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x4a8d8cc

--------------------------------
Class: MapVoiceData
	int Direction;//[Offset: 0x0, Size: 0x4]
	float TransparencyPercent;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MiniMapAirlineData
	Vector2D StartPoint;//[Offset: 0x0, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0x8, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x10, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x18, Size: 0x8]
	Vector2D AirlineDir;//[Offset: 0x20, Size: 0x8]
	float AirlineLength;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 0x8]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 0x8]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 0x8]
	int MapImage;//[Offset: 0x18, Size: 0x4]
	float AirlineZ;//[Offset: 0x1c, Size: 0x4]
	float HorizonLineZ;//[Offset: 0x20, Size: 0x4]
	float TopZ;//[Offset: 0x24, Size: 0x4]
	float BottomZ;//[Offset: 0x28, Size: 0x4]
	float AverageZ;//[Offset: 0x2c, Size: 0x4]
	float InitFogZ;//[Offset: 0x30, Size: 0x4]
	float TargetFogZ;//[Offset: 0x34, Size: 0x4]
	float MapFOV;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: VehicleData
	float Speed1;//[Offset: 0x0, Size: 0x4]
	float Fov1;//[Offset: 0x4, Size: 0x4]
	float Speed2;//[Offset: 0x8, Size: 0x4]
	float Fov2;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SafeAreaSimpleInfo

--------------------------------
Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentRadius;//[Offset: 0xc, Size: 0x4]
	Vector NextLocation;//[Offset: 0x10, Size: 0xc]
	float NextRadius;//[Offset: 0x1c, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x20, Size: 0x4]
	float TargetShrinkTime;//[Offset: 0x24, Size: 0x4]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 0x4]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: VisualSoundConfig.DataAsset.Object
	byte ElemMaxCount;//[Offset: 0x30, Size: 0x1]
	<enum,float> DetectionDisMap;//[Offset: 0x38, Size: 0x50]
	<enum,float> AliveTimeMap;//[Offset: 0x88, Size: 0x50]
	<enum,float> BreakTimeMap;//[Offset: 0xd8, Size: 0x50]

--------------------------------
Class: MapVoiceDataListMap
	<enum,MapVoiceDataList> VoiceMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MapVoiceDataList
	MapVoiceData[] VoiceList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bIsOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	float openProgress;//[Offset: 0x444, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0x448, Size: 0x8]
	float OpenTime;//[Offset: 0x450, Size: 0x4]
	float ProtectionTime;//[Offset: 0x454, Size: 0x4]
	bool bBoxLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 0x1]
	FString SummonPlayerID;//[Offset: 0x498, Size: 0x10]
	Rotator TargetRotation;//[Offset: 0x4a8, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x4b4, Size: 0xc]
	ParticleSystem* LandHitEffect;//[Offset: 0x4c0, Size: 0x8]
	class Actor* WarningEffect;//[Offset: 0x4c8, Size: 0x8]
	class SolarAbility* RangeAbility;//[Offset: 0x4d0, Size: 0x8]
	float dropGravity;//[Offset: 0x4d8, Size: 0x4]
	float maxDropSpeed;//[Offset: 0x4dc, Size: 0x4]
	float originHeight;//[Offset: 0x4e0, Size: 0x4]
	float dropOffset;//[Offset: 0x4e4, Size: 0x4]
	float AirDropSpawnDelay;//[Offset: 0x4e8, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x4ec, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x4f0, Size: 0x4]
	SoftClassPath AirDropGuideMeshBPClassPath;//[Offset: 0x4f8, Size: 0x18]
	float DropApprochDuration;//[Offset: 0x510, Size: 0x4]
	enum MovementState;//[Offset: 0x514, Size: 0x1]
	enum OpenState;//[Offset: 0x515, Size: 0x1]
	bool bIsDroping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x517, Size: 0x1]
	bool bIsSeating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	FString SNameAirDropOpen;//[Offset: 0x560, Size: 0x10]
	FString SNameLandHit;//[Offset: 0x570, Size: 0x10]
	FString SNameAirDropSpawn;//[Offset: 0x580, Size: 0x10]
	FString SNameStartDrop;//[Offset: 0x590, Size: 0x10]
	FString SNameStopDrop;//[Offset: 0x5a0, Size: 0x10]
	FString SNamePlayLandedLoopAudio;//[Offset: 0x5b0, Size: 0x10]
	FString SNameStopLandedLoopAudio;//[Offset: 0x5c0, Size: 0x10]
	FString SNamePlayOnGroundBroadcastLoopAudio;//[Offset: 0x5d0, Size: 0x10]
	FString SNameStopOnGroundBroadcastLoopAudio;//[Offset: 0x5e0, Size: 0x10]
	FString SNamePlayStartHackAudio;//[Offset: 0x5f0, Size: 0x10]
	FString SNameStopStartHackAudio;//[Offset: 0x600, Size: 0x10]
	FString SNamePlayHackingLoopAudio;//[Offset: 0x610, Size: 0x10]
	FString SNameStopHackingLoopAudio;//[Offset: 0x620, Size: 0x10]
	FString SNameStopHackingLoopAudioAux;//[Offset: 0x630, Size: 0x10]
	void PlayLandingAnimation();// 0x505573c
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x483c2dc
	void OnStateChanged();// 0x483c210
	void OnRep_TargetLocation();// 0x483c1e8
	void OnRep_OpenState(enum OpenState);// 0x483c0a0
	void OnRep_OpenProgressChange();// 0x483c3a0
	void OnRep_OpenCharacterChange();// 0x483c38c
	void OnRep_MovementState(enum MovementState);// 0x483c144
	void OnRep_IsOpening();// 0x483c3b4
	void OnRep_bBoxLanded();// 0x483c1fc
	void OnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0x505573c
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0x505573c
	bool IsSummonedByCharacter();// 0x483c068
	bool IsOpenningCharacterOffline();// 0x483bff8
	bool IsOpeningCharacterInRange();// 0x483c030
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x483c22c

--------------------------------
Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x3a0, Size: 0x1]
	SolarItemData[] ItemDataList;//[Offset: 0x3a8, Size: 0x10]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x3b8, Size: 0x10]
	int DataLeng;//[Offset: 0x3d8, Size: 0x4]
	int CostNum;//[Offset: 0x3dc, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x430, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x438, Size: 0x8]
	void UpdateTreasureBoxInternal();// 0x4be5dd8
	void UpdateOpenBoxUIByState(const enum NewState);// 0x505573c
	void UpdateItemDataListInternal();// 0x4be5df4
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x4be5cdc
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum StatisticsType);// 0x4be5bf4
	void PlayOpenAnimation();// 0x505573c
	void OpenTreasureBoxRequire();// 0x4be5f94
	void OnRep_ItemDataList();// 0x4be5e08
	void OnRep_CurrentState();// 0x4be5dc4
	bool IsEmpty();// 0x4be5f70
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4be5ac4
	int GetNumCost();// 0x4be5f54
	SolarItemData[] GetItemList();// 0x4be5e1c
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0x4be5fa8
	void ConstructTreasureBox(int dropId);// 0x4be6068
	bool BOpened();// 0x4be5bb4

--------------------------------
Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x268, Size: 0xa8]
	float SpawnOffset;//[Offset: 0x310, Size: 0x4]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x318, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x328, Size: 0x18]
	SphereComponent* SphereComponent;//[Offset: 0x340, Size: 0x8]
	byte ItemCurrentState;//[Offset: 0x34b, Size: 0x1]
	byte[] MarkedTeamIdList;//[Offset: 0x358, Size: 0x10]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x370, Size: 0x8]
	StaticMeshComponent* OutlineMeshComp;//[Offset: 0x378, Size: 0x8]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x380, Size: 0x10]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x390, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x4a632ac
	void SwitchDiscardMaterials();// 0x4a6352c
	void SetOutlineMeshVisible(bool Visible);// 0x4a63404
	void SetItemData(out const SolarItemData _ItemData);// 0x4a63578
	void OnServerPawned();// 0x4a6355c
	void OnRep_ItemDataChange();// 0x4a63674
	void OnRep_ItemCurrentStateChanged();// 0x4a63540
	void NotifyThisItemWasPickedUp();// 0x4a63298
	void MarkThisItem(byte TeamID);// 0x4a63358
	StaticMeshComponent* GetStaticMeshComp();// 0x4a634d4
	int GetQuality();// 0x4a634f0
	StaticMeshComponent* GetBackgroundFXMeshComp();// 0x4a634b8

--------------------------------
Class: SolarDormantActor.Actor.Object

--------------------------------
Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0xc70, Size: 0x4]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 0x1]
	SolarItemData ItemData;//[Offset: 0xc98, Size: 0xa8]
	byte[] MarkedTeamIdList;//[Offset: 0xd40, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0xd50, Size: 0x1]
	SphereComponent* SphereComponent;//[Offset: 0xd58, Size: 0x8]
	Vector DroppedLocation;//[Offset: 0xd60, Size: 0xc]
	SolarCharacterBase* WeaponOwner;//[Offset: 0xd70, Size: 0x8]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xd78, Size: 0x8]
	SkeletalMeshComponent*[] WeaponOutlineComponents;//[Offset: 0xd80, Size: 0x10]
	byte WeaponCurrentDiscardState;//[Offset: 0xd91, Size: 0x1]
	byte WeaponCurrentState;//[Offset: 0xd92, Size: 0x1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xd98, Size: 0x10]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xda8, Size: 0x18]
	MaterialInterface* OutlineBaseMat;//[Offset: 0xdc0, Size: 0x8]
	bool bNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 0x1]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xdd0, Size: 0x10]
	ParticleSystemComponent* SkinSpecialEffect;//[Offset: 0xde0, Size: 0x8]
	<enum,SoftObjectPath> CharacterMontagePathMap;//[Offset: 0xdf8, Size: 0x50]
	int AutoFireAnimCountFPP;//[Offset: 0xe48, Size: 0x4]
	int StandardLoopShotSectionFPP;//[Offset: 0xe4c, Size: 0x4]
	int AutoFireAnimCountTPP;//[Offset: 0xe50, Size: 0x4]
	int StandardLoopShotSectionTPP;//[Offset: 0xe54, Size: 0x4]
	<enum,AnimMontage*> CharacterMontageMap;//[Offset: 0xe58, Size: 0x50]
	<enum,AnimMontage*> OverrideCharacterMontageMap;//[Offset: 0xea8, Size: 0x50]
	ParticleSystem* SkinDedicatedKillEffect;//[Offset: 0xef8, Size: 0x8]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xf00, Size: 0x8]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 0x1]
	void YieldCmdExec();// 0x4ada7d8
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x4adbbcc
	void UpdateCharacterPosture(bool IsCrouch);// 0x4adbb20
	void UpdateAppearanceCmdExec();// 0x4ada7ec
	void SwitchPossessMaterial();// 0x4adb648
	void SwitchDiscardMaterial();// 0x4adb65c
	void SetWeaponSkin(const WeaponSkinData* SkinData);// 0x4adb698
	void SetWeaponOutlineVisibility(const bool InVisibile);// 0x4adb23c
	void SetSkin(int SkinId);// 0x4adac10
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x4adb758
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x4ada578
	void ResumeCmdExec();// 0x4ada7c4
	void ResetSkin();// 0x4adabf4
	void ResetMaterial();// 0x4ada8f4
	void RequestUnlimitedAmmo(const bool InEnable);// 0x4ada61c
	void RefreshSkin();// 0x4adabe0
	void PostUpdateAppearance();// 0x505573c
	void OnWeaponSkinRefresh(bool bValid, int SkinId);// 0x4ada908
	void OnWeaponAppreanceChanged(const bool bPart, const enum PartType);// 0x4ada6c8
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x4adaafc
	void OnRep_WeaponCurrentStateChanged();// 0x4adb684
	void OnRep_WeaponCurrentDiscardStateChanged();// 0x4adb670
	void OnClientMeshLodChanged(int LOD);// 0x4adb588
	void NotifyThisItemWasPickedUp();// 0x4adb634
	void MarkDirty();// 0x4adb800
	void K2_SwitchDrawDistance(bool Hold);// 0x4adb2e8
	void K2_OnHold(bool bLocal);// 0x4adb498
	void K2_OnDrop();// 0x4adb47c
	bool IsOpenedScopeOnVehicle();// 0x4adb73c
	bool IsItemWeapon();// 0x4adbd0c
	bool IsExistPart(out const enum PartType);// 0x4adb8d0
	void Hold(bool bo);// 0x4adba6c
	bool HasScope();// 0x4adba10
	float GetWeaponSilencerMagnitude();// 0x4ada368
	SoftObjectPath[] GetSkinNeedLoadAssets(WeaponSkinData* SkinData);// 0x4ada3ec
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x4adb39c
	int GetQualityByLevel(int Level);// 0x4adb3d0
	int GetQuality();// 0x4adb54c
	byte GetItemCurrentState();// 0x4adb814
	bool GetIsHolded();// 0x4adba50
	Vector GetFPPLocation();// 0x4adb850
	float GetFire2AnimPlayRate();// 0x4adacbc
	float GetDistanceToEyeWhenScope();// 0x4adb9d4
	float GetDelayDestroyTime();// 0x4ada3b0
	Vector GetCurrentScopeAimCenterPoint();// 0x4adb890
	WeaponPartClipComp* GetCurrentClip();// 0x4adb998
	AnimMontage* GetCharacterAnimMontage(enum InMontageType);// 0x4adb09c
	enum FindMontageKey(AnimMontage* Montage);// 0x4adacf0
	void EnqueueUpdateAppearanceCmd(const byte Cmd, FString Params);// 0x4ada800
	void CRecieveProto_RefreshSkinAction(bool bAutonomous, FString paramters);// 0x4ada9fc
	void ClearSkinExtraPSC();// 0x4ada39c
	void ClearDedicatedSkinEffect();// 0x4ada564

--------------------------------
Class: SolarWeapon.Actor.Object
	delegate OnWeaponUnhold;//[Offset: 0x390, Size: 0x10]
	class SolarWeaponFireStateMachine* WeaponFireStateMachineClass;//[Offset: 0x3a0, Size: 0x8]
	SolarWeaponFireStateMachine* WeaponFireStateMachine;//[Offset: 0x3a8, Size: 0x8]
	class SolarWeaponSkillStateMachine* WeaponSkillStateMachineClass;//[Offset: 0x3b0, Size: 0x8]
	SolarWeaponSkillStateMachine* WeaponSkillStateMachine;//[Offset: 0x3b8, Size: 0x8]
	float HitHeadValue;//[Offset: 0x3c0, Size: 0x4]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 0x1]
	bool bBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c6, Size: 0x1]
	bool bAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c7, Size: 0x1]
	bool bNeedBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	enum PrimaryShootingOption;//[Offset: 0x3ca, Size: 0x1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x3cc, Size: 0x10]
	bool bSkillCostSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x3f0, Size: 0x8]
	WeaponFireLaserCollector* LaserCollector;//[Offset: 0x3f8, Size: 0x8]
	int ExtraPoints;//[Offset: 0x400, Size: 0x4]
	int ExtraPointsForInit;//[Offset: 0x404, Size: 0x4]
	int ExtraPointsLimit;//[Offset: 0x408, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x40c, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x410, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x420, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x424, Size: 0x4]
	float RestoreProgressAccumulation;//[Offset: 0x428, Size: 0x4]
	float RestoreProgressAccumulationForInit;//[Offset: 0x42c, Size: 0x4]
	byte FireModeIndex;//[Offset: 0x439, Size: 0x1]
	int BurstMaxCount;//[Offset: 0x448, Size: 0x4]
	enum OverloadState;//[Offset: 0x458, Size: 0x1]
	float OverloadAccum;//[Offset: 0x45c, Size: 0x4]
	WeaponDebugFlag DebugFlag;//[Offset: 0x47c, Size: 0x6]
	float GatlingRollSpeed;//[Offset: 0x484, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x488, Size: 0x4]
	float GatlingRollSpeedInterp;//[Offset: 0x48c, Size: 0x4]
	int GatlingRepState;//[Offset: 0x490, Size: 0x4]
	bool bUseBlendSpaceForFPPRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1]
	float FireChargingTime;//[Offset: 0x4c8, Size: 0x4]
	int FireChargingPhase;//[Offset: 0x4cc, Size: 0x4]
	float ChargeAnimationRate;//[Offset: 0x4d4, Size: 0x4]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x4d8, Size: 0x8]
	int CurrentMode;//[Offset: 0x4f0, Size: 0x4]
	FireMode[] FireModes;//[Offset: 0x500, Size: 0x10]
	Actor* WeaponHolder;//[Offset: 0x518, Size: 0x8]
	SolarCharacterBase* ControllWeaponCharacter;//[Offset: 0x520, Size: 0x8]
	GameplayAbilitySpecHandle[] EquipedAbilityHandles;//[Offset: 0x528, Size: 0x10]
	bool bControllWeaponCharacterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	Actor* AimTarget;//[Offset: 0x540, Size: 0x8]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x548, Size: 0x8]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x550, Size: 0x8]
	enum[] ShootingOptArray;//[Offset: 0x558, Size: 0x10]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	int SecondaryModeBurstMaxCount;//[Offset: 0x56c, Size: 0x4]
	SingleWeaponConfig* Config;//[Offset: 0x570, Size: 0x8]
	Texture2D* WeaponIcon;//[Offset: 0x578, Size: 0x8]
	SlateWidgetStyleAsset* PrimaryFireBtnStyle;//[Offset: 0x580, Size: 0x8]
	SlateWidgetStyleAsset* SecondaryFireBtnStyle;//[Offset: 0x588, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x590, Size: 0x8]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x598, Size: 0x8]
	int weaponid;//[Offset: 0x5a0, Size: 0x4]
	bool bInitCfgFromTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a7, Size: 0x1]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 0x1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5aa, Size: 0x1]
	int ExtraAmmo;//[Offset: 0x5ac, Size: 0x4]
	int CurrentClipAmmo;//[Offset: 0x5e0, Size: 0x4]
	<enum,SoftObjectPath> WeaponAnimSequencePathMap;//[Offset: 0x6f0, Size: 0x50]
	<enum,AnimSequence*> WeaponAnimSequenceMap;//[Offset: 0x740, Size: 0x50]
	<enum,AnimSequence*> OverrideWeaponAnimSequenceMap;//[Offset: 0x790, Size: 0x50]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x7e0, Size: 0x10]
	CameraShakeData[] WeaponScopeFireCameraShakes;//[Offset: 0x7f0, Size: 0x10]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x800, Size: 0x10]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x810, Size: 0x10]
	enum WeaponChargePhase;//[Offset: 0x820, Size: 0x1]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x821, Size: 0x1]
	SoftObjectPath FightMeshPath;//[Offset: 0x828, Size: 0x18]
	SkeletalMeshComponent* Mesh;//[Offset: 0x840, Size: 0x8]
	SkeletalMesh* OriginalMesh;//[Offset: 0x848, Size: 0x8]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x850, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x858, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x860, Size: 0x8]
	int SoundFireAutoCount;//[Offset: 0x868, Size: 0x4]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 0x1]
	int OldSoundFireAutoCount;//[Offset: 0x870, Size: 0x4]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 0x1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x875, Size: 0x1]
	int SkillFireCount;//[Offset: 0x878, Size: 0x4]
	int SingleFireCount;//[Offset: 0x87c, Size: 0x4]
	int FireOverloadCount;//[Offset: 0x880, Size: 0x4]
	int FireLastCount;//[Offset: 0x884, Size: 0x4]
	FName SkillReleaseResult;//[Offset: 0x8d8, Size: 0x8]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x908, Size: 0x10]
	bool bInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]
	bool bClientInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x919, Size: 0x1]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91a, Size: 0x1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91b, Size: 0x1]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x920, Size: 0x8]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x928, Size: 0x50]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 0x1]
	ParticleSystemComponent* MuzzlePSC;//[Offset: 0x988, Size: 0x8]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x990, Size: 0x10]
	int RandomSkillIndex;//[Offset: 0x9a0, Size: 0x4]
	SolarEnergyShield*[] IgnoreEnergyShieldArray;//[Offset: 0xae8, Size: 0x10]
	bool bEnterReloadState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafa, Size: 0x1]
	bool bDisplayPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafb, Size: 0x1]
	enum CurrentSpreadState;//[Offset: 0xb10, Size: 0x1]
	int ContinuousAddSpreadByFireCount;//[Offset: 0xb14, Size: 0x4]
	bool bLastAddSpreadByFireIsHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 0x1]
	int8 LastAddSpreadByFireFireMode;//[Offset: 0xb19, Size: 0x1]
	float LastAddSpreadByFireTime;//[Offset: 0xb1c, Size: 0x4]
	float SpreadPrepareTimer;//[Offset: 0xb20, Size: 0x4]
	float PendingBaseSpread;//[Offset: 0xb24, Size: 0x4]
	float TargetBaseSpread;//[Offset: 0xb28, Size: 0x4]
	float PendingAddSpread;//[Offset: 0xb2c, Size: 0x4]
	float TargetAddSpread;//[Offset: 0xb30, Size: 0x4]
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x4c1b5ac
	bool UseEnergy(int Mode);// 0x4c1fa74
	bool UseBagResource(int Mode);// 0x4c1fb24
	bool TryHitOperation(out const FireUniqueID FireUniqueID, out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x4c1b83c
	void StopSoundDelay(const float DelayTime);// 0x4c1d5c8
	void StopSound(enum Opt, int idx);// 0x4c1d380
	void StopLastValidFire();// 0x4c23fd0
	void StartSound(enum Opt, int idx);// 0x4c1d468
	void StartAsyncLoading();// 0x4c1c87c
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, const bool Local);// 0x4c1c244
	bool SkillCost();// 0x4c235dc
	void ShowSpecialEffect(bool bShow);// 0x4c1e1c4
	void SetWeaponSkill(const int InWeaponID, out SingleWeaponConfig* InWeaponConfig);// 0x4c1ae24
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x4c1c7d8
	void SetPrimaryShootingOption(enum Opt);// 0x4c205d0
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x4c1f60c
	void SetHolder(Actor* holder);// 0x4c211b8
	void ServerWeaponSound(const enum Opt, const bool TriggerSound);// 0x4c1d680
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams);// 0x4c22a14
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, const bool bMuzzleBlocked);// 0x4c22c4c
	void ServerUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x4c22750
	void ServerUpdateGatlingRepState(int InState);// 0x4c214c0
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x4c23780
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x4c1c3d4
	void ServerSkillCost();// 0x4c235c0
	void ServerShowParts(const bool Show);// 0x4c1b1e0
	void ServerSetTarget(Actor* Target);// 0x4c23628
	void ServerSetPrimaryOption(const enum Opt);// 0x4c23a04
	void ServerSetImpactInfo(const Vector_NetQuantize Postion, const float Scale);// 0x4c23ab8
	void ServerSetHipFire(const bool InbHipFire);// 0x4c20f8c
	void ServerSetDisplayPreview(const bool InbDisplay);// 0x4c1ac0c
	void ServerResetFireCount();// 0x4c22290
	void ServerRequestSummonItem(const byte fireModeType, const bool InIsQuickSummon, const SolarSummonData InSummonData);// 0x4c1cf50
	void ServerRequestDropWeapon();// 0x4c1cf34
	void ServerRecieveHitDataFromClient(const BulletHitData HitData, const bool IsNotDelay);// 0x4c1c4f4
	void ServerPostReloadState(const bool InbEnterReload);// 0x4c1acc0
	void ServerPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x4c1eb90
	void ServerModeState(const byte ModeIndex);// 0x4c236d4
	void ServerLaserHit(const HitResult[] Hits, float InActivateTime);// 0x4c22568
	void ServerInterruptLaser();// 0x4c22450
	void ServerInstantLineShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float DamageScale, const MutiBulletHitData HitData, const bool bMuzzleBlocked);// 0x4c23390
	void ServerHit(const HitResult Impact, const byte ModeIndex, bool TriggerAnim, float Scale);// 0x4c23860
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x4c21a10
	void ServerFireChargePhaseChange(const int8 InFireChargingPhase);// 0x4c21b44
	void ServerFire_JustAbilitiesAmmo(const byte ModeIndex);// 0x4c1b790
	void ServerChangeWeaponChargePhase(const enum InChargeState);// 0x4c1dd3c
	void ServerChangeOverloadState(const enum InState);// 0x4c22138
	void ServerCanisterShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float RandomA, const float RandomB, const MutiBulletHitData HitData, const bool bMuzzleBlocked);// 0x4c22f54
	void ServerAddOrRemoveGameplayTagsToCharacter(bool bInAddTag, const GameplayTagContainer InTags);// 0x4c2172c
	void ServerAddExpWithReason(int InExp, int InReasonID);// 0x4c1aaf8
	void ServerActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x4c22928
	void RuntimeUpdateData(int Cmd, FString Params);// 0x4c1d778
	void ResetRecoilComponent();// 0x4c1ee04
	AmmoConfig* ReLoadAmmoData(const AmmoConfig* BaseConfig, int AmmoID);// 0x4c23ba4
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x505573c
	void ReceiveChargingState(const int Index, const enum State);// 0x4c213d0
	void PrimaryCost();// 0x4c23614
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser);// 0x4c1db90
	void PlayAutoSingleSound();// 0x4c1d36c
	void PlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int AnimCount);// 0x4c1ec80
	void OverrideFireMode(int InFireModeType, const AmmoConfig* InNewAmmoConfig);// 0x4c21264
	void OnShow(const bool Toggle);// 0x4c210a8
	void OnRep_WeaponChargePhase();// 0x4c1dde8
	void OnRep_SoundFireSkillCast();// 0x4c1d58c
	void OnRep_SoundFireSingle();// 0x4c1d578
	void OnRep_SoundFireOverload();// 0x4c1d564
	void OnRep_SoundFireLast();// 0x4c1d550
	void OnRep_SoundFireBurst();// 0x4c1d5a0
	void OnRep_SoundFireAutoCount();// 0x4c1d66c
	void OnRep_SoundB9A04Skill();// 0x4c1d5b4
	void OnRep_OverloadStateChange(enum PreviousState);// 0x4c22094
	void OnRep_ImpactPosition();// 0x4c22420
	void OnRep_FireModes();// 0x4c213a8
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x4c21838
	void OnRep_ExtraAmmo();// 0x4c20e8c
	void OnRep_EnterReloadState();// 0x4c1abf8
	void OnRep_DisplayPreview();// 0x4c1abe4
	void OnRep_CurrentMode();// 0x4c213bc
	void OnRep_ControllWeaponCharacterChanged();// 0x4c21394
	void OnRep_bInitFinishChanged();// 0x4c1cd40
	void OnPlayMuzzleEffect(int ModeIdx, bool bMuzzleBlocked);// 0x4c1e460
	void OnOverrideWeaponConfigByTable(int PrimaryAmmoSoundID, int SecondaryAmmoSoundID);// 0x4c23c94
	void OnLoadInitAssetComplete();// 0x4c1cb68
	void OnLoadCfgAssetsComplete();// 0x4c1ca3c
	void OnInternalUnControlled();// 0x4c20ea0
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x4c20ebc
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x505573c
	void OnInitFlowComplete(SolarWeaponState* Last);// 0x4c1cc94
	void OnGatlingRollChange(bool bIncrease);// 0x505573c
	void OnFireChargeBurstCountChange(int BurstSum);// 0x4c221e4
	void OnBeamFinished(ParticleSystemComponent* PS);// 0x4c2237c
	enum NextShootingPrimaryOption();// 0x4c23e90
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4c1d0fc
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4c1d234
	void LoadInitAsset();// 0x4c1c9f0
	void LoadAllCfgAssets();// 0x4c1c964
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x4c1f2c4
	bool IsVisiable();// 0x4c1eecc
	bool IsSummonWeapon();// 0x4c1f7a0
	bool IsShowCoolDownWidget();// 0x4c1f884
	bool IsShotAimEnemy();// 0x4c1af68
	bool IsShootingOptionSupport(int idx);// 0x4c204ec
	bool IsScopeOpen();// 0x4c1ee4c
	bool IsOpenedScope();// 0x4c2115c
	bool IsMultipleShootingPrimaryShooting();// 0x4c203bc
	bool IsHipFire();// 0x4c20674
	bool IsFireStreakBreak(int InFireModeType);// 0x4c1f55c
	bool IsEnergyID(const int BulletItemID);// 0x4c1f9c4
	bool IsControlled();// 0x4c20f68
	bool IsCanFire();// 0x4c1b574
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x4c1e010
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x4c1ddfc
	void InternalClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x4c1e278
	bool InSameTeam();// 0x4c1d088
	void InitSkin();// 0x4c1c8d0
	void InitLevel();// 0x4c1c92c
	void InitConfigs();// 0x4c1c9b8
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x4c23ec4
	bool HasLoadInitAsset();// 0x4c1c9d4
	bool HasLoadAllCfgAssets();// 0x4c1c948
	bool HasInitSkin();// 0x4c1c890
	bool HasInitLevel();// 0x4c1c8ec
	bool HasInitFinish();// 0x4c1ca04
	bool HasInitConfigs();// 0x4c1c978
	void HandFireModeInput(byte WeaponFireModeType, bool Press);// 0x4c23fe4
	enum GetWeaponType();// 0x4c1b450
	FString GetWeaponTextType();// 0x4c1f13c
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x4c1b4b8
	WeaponNetComponent* GetWeaponNetComp();// 0x4c1c7bc
	int GetWeaponLevel();// 0x4c2117c
	int GetWeaponID();// 0x4c1f044
	Texture2D* GetWeaponIcon();// 0x4c1f1ec
	enum GetWeaponBrand();// 0x4c1b484
	AnimSequence* GetWeaponAnimMontage(enum InMontageType);// 0x4c1e900
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x4c1b2d0
	int GetSpareAmmo(int InFireModeType);// 0x4c206ac
	float GetSoundRTPCValue();// 0x4c1d0c8
	int GetSkinID();// 0x4c1c648
	float GetShotGunSpreadSeed();// 0x4c20b78
	Vector GetShotDir(bool NeedSpread);// 0x4c20dcc
	Vector GetShootingTraceStartLocation(int FireModeIdx);// 0x4c1fbd4
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x4c203f4
	float GetSecondModeValue();// 0x4c1f8a8
	int GetReservedAmmo(int idx);// 0x4c202dc
	float GetReloadPreogress();// 0x4c1f0d0
	WeaponRecoilComponent* GetRecoilComponent();// 0x4c1ee18
	int GetPrimaryShootingOptionIndex();// 0x4c2059c
	WeaponPartsComponent* GetPartsComponent();// 0x4c1b294
	float GetOverloadPercent();// 0x4c201ac
	float GetOverloadMaxValue();// 0x4c1f370
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x4c21360
	float GetNpcDamageFactor();// 0x4c21074
	int GetMaxAmmo(int idx, bool bWithExtraAmmoByChaAbility);// 0x4c201e0
	float GetLastFireTime(int InFireModeType);// 0x4c1f6f4
	bool GetIsVehicleMounted();// 0x4c1ef0c
	bool GetIsSupportSecondaryFire();// 0x4c1f104
	bool GetIsSupportAutoFire();// 0x4c1f098
	bool GetIsSupportAssistAim();// 0x4c1f060
	bool GetIsReloading();// 0x4c20108
	bool GetIsQuickScope();// 0x4c1ee8c
	bool GetIsOverloading();// 0x4c20140
	bool GetIsIntialized();// 0x4c1f028
	bool GetIsIdle();// 0x4c200d0
	bool GetIsGatlingRoll();// 0x4c1fff0
	bool GetIsFiring();// 0x4c20098
	bool GetIsCoolDown(int Mode);// 0x4c1f914
	bool GetIsBurst();// 0x4c20060
	bool GetIsBolt();// 0x4c20028
	float GetGunHandPoseAimOffset();// 0x4c1af20
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x4c1f290
	void GetFPPFireBlendParam(out float OutHorizontal, out float OutVertical);// 0x4c1f458
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x4c1afa0
	float GetFireIntervalProgress(int idx);// 0x4c1fde4
	float GetFireInterval(int idx);// 0x4c1fe90
	void GetFireChargeInfo(out int OutChargingPhase, out float OutChargingTime, out float OutRate, out FireChargeData OutChargeData);// 0x4c21e68
	float GetFireCD(int idx);// 0x4c1ef7c
	float GetExtraPointsPercent();// 0x4c1f8f8
	int GetExtraPoints();// 0x4c1f8dc
	ParticleSystem* GetDedicatedKillEffect();// 0x4c1c780
	SoftObjectPath GetDedicatedDissolvedDeathFXPath();// 0x4c1c684
	class ActorEffect GetDedicatedDissolvedDeathActorEffectClass();// 0x4c1c744
	int GetCurScopeType();// 0x4c1f220
	enum GetCurrentShootingPrimaryOption();// 0x4c20388
	FireChargeData GetCurrentFireChargeData(const AmmoConfig* InAmmo);// 0x4c21c9c
	AmmoConfig* GetCurrentFireChargeAmmoData(const AmmoConfig* InAmmo);// 0x4c21bf0
	SingleWeaponConfig* GetCurrentConfig();// 0x4c1f25c
	int GetCurrentClipAmmo(int InFireModeType);// 0x4c20758
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x4c1b04c
	int GetCostPreAttack(int idx);// 0x4c1f3ac
	float GetCoolDownPercent();// 0x4c20178
	SolarCharacterBase* GetControlWeaponCharacter();// 0x4c1b1ac
	float GetChargingPercent(int idx);// 0x4c1ff44
	float GetBurstInterval(int idx);// 0x4c1fd38
	float GetBurstInternalInterval(int idx);// 0x4c1fc8c
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x4c1d9d8
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x4c1d86c
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x4c1cd54
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x4c1ce44
	float GetBotAIDamageFactor();// 0x4c21040
	enum GetAmmoTriggerType(const int fireModeType);// 0x4c1f7d8
	int GetAmmoItemID(int idx);// 0x4c208ec
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x4c1cb84
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x4c1ca58
	void GetAimStartEnd(const AmmoConfig* InAmmo, out Vector OutStart, out Vector OutEnd, out Actor* OutTargetActor, bool NeedSpread);// 0x4c20998
	bool FireVerify_Location(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4c1bdb0
	bool FireVerify_EffectRange(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4c1bff0
	bool FireVerify_Block(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4c1bb70
	bool FireValidate(const int idx, const float InLastShootTime);// 0x4c1b69c
	enum FindMontageKeyFromWeaponAnim(AnimSequence* Montage);// 0x4c1e554
	void ExitBoltState();// 0x4c23fbc
	void EnterOverloadState();// 0x505573c
	void DestroyWeaponProjectileSpline();// 0x4c2134c
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, const bool bMuzzleBlocked);// 0x4c22b08
	void ClientUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x4c22664
	void ClientSkillRelease(bool InbSuccess, uint32 InResultID);// 0x4c23d78
	void ClientPlayHitEffect(const MultiHitResult InMultiHitResult);// 0x4c222ac
	void ClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x4c1e36c
	void ClientPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x4c1eaa0
	void ClientLaserHit(const HitResult[] Hits, float InActivateTime);// 0x4c2246c
	void ClientInterruptLaser();// 0x4c22434
	void ClientInstantLineShot(const byte ModeIndex, const HitResult[] HitResults, const Vector_NetQuantize End, const float DamageScale, const bool bMuzzleBlocked);// 0x4c231c8
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x4c218dc
	void ClientCanisterShot(const byte ModeIndex, const Vector_NetQuantize Start, const HitResult[] ValidHits, const bool bMuzzleBlocked, const Vector_NetQuantize Target);// 0x4c22d90
	void ClientActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x4c2283c
	void ClearFireHitVerify();// 0x4c1c230
	bool CheckOpenParticleOptimization(int Bias);// 0x4c1ad74
	bool CanOverload();// 0x4c23e74
	bool CanCauseTeamDamage();// 0x4c1ef44
	float CalcScale(out const FireMode Mode);// 0x4c20bb4
	int CalcCost(out const FireMode Mode);// 0x4c20cc0
	void AsyncCheckShotAimHitResult();// 0x4c1af54
	void AddOrRemoveGameplayTagsToCharacter(bool InbAdd, out const GameplayTagContainer InTags);// 0x4c21618
	void AddOrRemoveBlockChracterSprintTag(bool InbAdd);// 0x4c2156c
	void AddExtraPoints(const enum InHitType, const int InDamage);// 0x4c20804

--------------------------------
Class: FireUniqueID
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BulletHitDetailData
	Actor* HitActor;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x8, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x10, Size: 0xc]
	Vector HitLocation;//[Offset: 0x1c, Size: 0xc]
	Vector HitNormal;//[Offset: 0x28, Size: 0xc]
	FName HitBone;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	int Mode;//[Offset: 0x1c, Size: 0x4]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float Scale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SolarProjBullet.SolarBullet.Actor.Object
	Vector SpawnedLocation;//[Offset: 0x350, Size: 0xc]
	float EffRange;//[Offset: 0x35c, Size: 0x4]
	float MaxRange;//[Offset: 0x360, Size: 0x4]
	int RocketNum;//[Offset: 0x364, Size: 0x4]
	Vector SecondVelocity;//[Offset: 0x368, Size: 0xc]
	Vector FirstBulletSpeed;//[Offset: 0x37c, Size: 0xc]
	bool bNoRTImpactEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	HitResult RocketHitResult;//[Offset: 0x39c, Size: 0x88]
	AmmoConfig* AmmoConfig;//[Offset: 0x428, Size: 0x8]
	bool bScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	bool bHiddenWhenExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1]
	Actor* ParentWeaponPtr;//[Offset: 0x434, Size: 0x8]
	SolarPlayerController* BulletOwnerController;//[Offset: 0x440, Size: 0x8]
	int ModeIdx;//[Offset: 0x44c, Size: 0x4]
	ShapeComponent* CollisionComp;//[Offset: 0x450, Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x458, Size: 0x8]
	SolarSplineMovementComponent* SplineMovementComp;//[Offset: 0x460, Size: 0x8]
	float GravityScaleRate;//[Offset: 0x468, Size: 0x4]
	CurveFloat* BounceCurve;//[Offset: 0x470, Size: 0x8]
	bool bHitSpecificActorsExplodeWithBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bForcePenetrateEnergyShiled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	Vector InitialVelocity;//[Offset: 0x47c, Size: 0xc]
	Vector OwnerDirection;//[Offset: 0x488, Size: 0xc]
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	bool bTriggerEffRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 0x1]
	bool bTriggerMaxRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496, Size: 0x1]
	bool bWaitToBeDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x497, Size: 0x1]
	bool bDontAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x4a0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x4b0, Size: 0x8]
	ParticleSystemComponent* ParticleComp;//[Offset: 0x4c0, Size: 0x8]
	ParticleSystemComponent* TrajPSC;//[Offset: 0x4c8, Size: 0x8]
	int PoolLimit;//[Offset: 0x4e0, Size: 0x4]
	bool bVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	bool bSpecialVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 0x1]
	FireUniqueID FireUniqueID;//[Offset: 0x674, Size: 0x4]
	bool bBulletActiveAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	void StopSound(enum Opt);// 0x4adfd98
	void StartSound(enum Opt);// 0x4adfe3c
	void SpawnSoundPlayerAndPlayFlySound();// 0x4adfd84
	void SetLocationByEnergyShield();// 0x4ae0340
	void OnStop(out const HitResult HitResult);// 0x4ae0470
	void OnSplineMovementCompStop(out const HitResult HitResult, bool bBlocking);// 0x4ae0354
	void OnRep_RocketHitResult();// 0x4ae0540
	void OnRep_bExploded();// 0x4ae00c8
	void OnOutRange();// 0x505573c
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x4ae0224
	void OnAttachedActorDestroyed(Actor* Other);// 0x4adfce0
	void OnActorDestroyed(Actor* DestroyedActor);// 0x4ae0180
	bool IsAllowPlayEffect();// 0x4adffd0
	void InitSplineMovementComp(SolarSplineMovementComponent* Comp);// 0x4ae0008
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4adfee0
	void ExplodeBegin();// 0x4ae00ac
	void DelayDestroy(float DelayTime);// 0x4ae00dc
	SolarSplineMovementComponent* BlueprintGetSplineMovementComp();// 0x505573c

--------------------------------
Class: SolarBullet.Actor.Object
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1]
	ParticleSystem* BulletEffect;//[Offset: 0x230, Size: 0x8]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x240, Size: 0x8]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x248, Size: 0x18]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x260, Size: 0x8]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* MuzzleEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x280, Size: 0x8]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x288, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* SpecialEffect;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* DecalEffect;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* DecalEffect2;//[Offset: 0x2b8, Size: 0x8]
	SoftObjectPath ShieldEffect;//[Offset: 0x2c0, Size: 0x18]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2d8, Size: 0x50]
	float DecalLifeSpan;//[Offset: 0x328, Size: 0x4]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x330, Size: 0x8]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x338, Size: 0x8]
	float ProjectTileSummonDistance;//[Offset: 0x340, Size: 0x4]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	byte BulletCollisionType;//[Offset: 0x345, Size: 0x1]
	void OnPlayImpactEffect(ParticleSystemComponent* PSC);// 0x505573c
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x497d6f0

--------------------------------
Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 0x1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 0x10]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 0x10]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 0x4]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 0x4]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 0x4]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 0x4]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 0x4]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 0x4]
	bool bIsTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	TracerBulletData TracerData;//[Offset: 0x7c, Size: 0xc]
	float DeltaAngle;//[Offset: 0x88, Size: 0x4]
	FString Name;//[Offset: 0x90, Size: 0x10]
	FString Des;//[Offset: 0xa0, Size: 0x10]
	bool bEnableRichtap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	int PropID;//[Offset: 0xb4, Size: 0x4]
	float Lifetime;//[Offset: 0xb8, Size: 0x4]
	enum FireMethodType;//[Offset: 0xbc, Size: 0x1]
	enum TrajectoryType;//[Offset: 0xbd, Size: 0x1]
	float CustomValue;//[Offset: 0xc0, Size: 0x4]
	class SolarBullet* BulletClass;//[Offset: 0xc8, Size: 0x8]
	enum BulletBounce;//[Offset: 0xd0, Size: 0x1]
	int BounceTimes;//[Offset: 0xd4, Size: 0x4]
	enum TriggerType;//[Offset: 0xd8, Size: 0x1]
	float MaxRange;//[Offset: 0xdc, Size: 0x4]
	float EffRange;//[Offset: 0xe0, Size: 0x4]
	float Radius;//[Offset: 0xe4, Size: 0x4]
	float InitSpeed;//[Offset: 0xe8, Size: 0x4]
	enum FireCostType;//[Offset: 0xec, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0xf0, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0xf4, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0xf8, Size: 0x4]
	float FastestFireInterval;//[Offset: 0xfc, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0x100, Size: 0x4]
	float BaseFireInterval;//[Offset: 0x104, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x108, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x10c, Size: 0x4]
	float BoltActionTime;//[Offset: 0x110, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x114, Size: 0x4]
	float AutoFireBreakTime;//[Offset: 0x118, Size: 0x4]
	float FirePrepareTime;//[Offset: 0x11c, Size: 0x4]
	float FireStateBreakTime;//[Offset: 0x120, Size: 0x4]
	bool bUseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float FireStreakBreakTime;//[Offset: 0x128, Size: 0x4]
	int FireIdx;//[Offset: 0x12c, Size: 0x4]
	bool bTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	float BaseReloadTime;//[Offset: 0x134, Size: 0x4]
	float PostFireOverload;//[Offset: 0x138, Size: 0x4]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 0x1]
	int SingleSoundCount;//[Offset: 0x140, Size: 0x4]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x148, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x158, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x168, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x178, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x188, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x198, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x1a8, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1b8, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1c8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1d8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1e8, Size: 0x10]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x1f8, Size: 0x8]
	float ADSSpreadCOP;//[Offset: 0x200, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0x204, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0x208, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0x20c, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0x210, Size: 0x4]
	float[] SkillCDDiscountArray;//[Offset: 0x218, Size: 0x10]
	WeaponFireTPPAnimConfig TPPRecoilConfig;//[Offset: 0x228, Size: 0x28]
	WeaponFireFPPAnimConfig FPPRecoilConfigNoScope;//[Offset: 0x250, Size: 0x70]
	WeaponFireFPPAnimConfig FPPRecoilConfigWithScope;//[Offset: 0x2c0, Size: 0x70]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x330, Size: 0x30]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x360, Size: 0x30]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x390, Size: 0x40]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x3d0, Size: 0xb8]
	float ADSRecoilCOP;//[Offset: 0x488, Size: 0x4]
	<FString,float> RecoilCOPMap;//[Offset: 0x490, Size: 0x50]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x4e0, Size: 0x10]
	SoftObjectPath SummonConfigPath;//[Offset: 0x4f0, Size: 0x18]
	bool bAutoBurstFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	float BurstFireInterval;//[Offset: 0x50c, Size: 0x4]
	float BurstFireInternalInterval;//[Offset: 0x510, Size: 0x4]
	float FireAnimationPlayRate;//[Offset: 0x514, Size: 0x4]
	int AmmoSoundType;//[Offset: 0x518, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x51c, Size: 0x4]
	float ParticleStartDistance;//[Offset: 0x520, Size: 0x4]
	float TrajectoryStartDistance;//[Offset: 0x524, Size: 0x4]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	float PenetrationRadius;//[Offset: 0x52c, Size: 0x4]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x530, Size: 0x8]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x538, Size: 0x8]
	SlateBrush TriggerIcon;//[Offset: 0x540, Size: 0x98]
	CurveFloat* BulletDamageCurve;//[Offset: 0x5d8, Size: 0x8]
	CurveFloat* BulletScaleCurve;//[Offset: 0x5e0, Size: 0x8]
	CurveFloat* BulletSpeedCurve;//[Offset: 0x5e8, Size: 0x8]
	bool bThirdPesonViewXScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 0x1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x5f8, Size: 0x10]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x608, Size: 0x10]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x618, Size: 0x8]
	class GameplayAbility* GASAbilityClass;//[Offset: 0x620, Size: 0x8]
	int SkillType;//[Offset: 0x628, Size: 0x4]
	int NameLocalTextIDNumber;//[Offset: 0x62c, Size: 0x4]
	int DescriptionLocalTextIDNumber;//[Offset: 0x630, Size: 0x4]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x483fb84
	void InitSpreadData(float adscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x483fe68
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x483f460
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x483f004
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x483f6d8
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x4840014
	void InitPostFireSpreadCurveStruct(FString Path);// 0x483fdb8
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x483f950
	void InitBaseData(int Trigger);// 0x4840164

--------------------------------
Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ChargeTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 0x8]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 0x8]
	int OverrideAmmoID;//[Offset: 0x28, Size: 0x4]
	FString ChargeSoundName;//[Offset: 0x30, Size: 0x10]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 0x10]
	FString FireSoundName;//[Offset: 0x50, Size: 0x10]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 0x10]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 0x8]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x84, Size: 0x4]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 0x8]
	CurveFloat* AmmoEffectScaleCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* OverloadCurve;//[Offset: 0xa0, Size: 0x8]
	float ChargeAnimationRate;//[Offset: 0xa8, Size: 0x4]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 0x4]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 0x4]
	float HomingRange;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeaponFireTPPAnimConfig
	float SingleFirePulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float LoopFirePulse;//[Offset: 0x8, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0xc, Size: 0x4]
	float RecoverSpeed;//[Offset: 0x10, Size: 0x4]
	float BlendSpaceScale;//[Offset: 0x14, Size: 0x4]
	BlendSpace* BlendSpace;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WeaponFireFPPAnimConfig
	float SingleFireStraightPulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float SingleFireBackwardOffset;//[Offset: 0x8, Size: 0x4]
	float LoopFireStraightPulse;//[Offset: 0xc, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0x10, Size: 0x4]
	float LoopFireBackwardOffset;//[Offset: 0x14, Size: 0x4]
	CurveFloat* StraightStiffnessCurve;//[Offset: 0x18, Size: 0x8]
	float StraightRecoverSpeed;//[Offset: 0x20, Size: 0x4]
	Vector ShakePivotOffset;//[Offset: 0x24, Size: 0xc]
	Vector2D[] ShakeOffsets;//[Offset: 0x30, Size: 0x10]
	Rotator[] ShakeRotations;//[Offset: 0x40, Size: 0x10]
	bool bNeedEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x58, Size: 0x8]
	CurveVector* EndShakeRotateCurve;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 0x4]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 0x8]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 0x4]
	float APointMin;//[Offset: 0x14, Size: 0x4]
	float APointMax;//[Offset: 0x18, Size: 0x4]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 0x4]
	float BPointMin;//[Offset: 0x20, Size: 0x4]
	float BPointMax;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	float ADSRollCOP;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 0x8]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 0x4]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 0x8]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 0x4]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 0x8]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 0x8]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 0x24]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 0x4]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 0x4]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 0x4]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 0x4]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 0x4]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 0x4]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 0x4]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 0x4]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x34aa960
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x34aa898
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x34aa300
	void RemoveGrantedByEffect();// 0x34aa534
	void MontageStop(float OverrideBlendOutTime);// 0x34a87ac
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x34a8850
	void MontageJumpToSection(FName SectionName);// 0x34a8934
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x34a8654
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x34a8728
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x34aaa48
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x505573c
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x34a8cb4
	void K2_OnEndAbility(bool bWasCancelled);// 0x505573c
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x34a91a0
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x34a9374
	void K2_EndAbility();// 0x34aa2e4
	void K2_CommitExecute();// 0x505573c
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x34aa680
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x34aa740
	bool K2_CommitAbility();// 0x34aa858
	bool K2_CheckAbilityCost();// 0x34aa600
	bool K2_CheckAbilityCooldown();// 0x34aa640
	void K2_CancelAbility();// 0x34aa94c
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x505573c
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x34a9894
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x34aa024
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x34a8d60
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x34a8f84
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x505573c
	void K2_ActivateAbility();// 0x505573c
	void InvalidateClientPredictionKey();// 0x34aa550
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x34ab118
	Actor* GetOwningActorFromActorInfo();// 0x34ab180
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x34aaf98
	Object* GetCurrentSourceObject();// 0x34aa564
	AnimMontage* GetCurrentMontage();// 0x34aa5cc
	float GetCooldownTimeRemaining();// 0x34aaa14
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x34aac14
	Actor* GetAvatarActorFromActorInfo();// 0x34ab14c
	GameplayAbilityActorInfo GetActorInfo();// 0x34ab1b4
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x34ab0e4
	int GetAbilityLevel();// 0x34aa598
	void EndTaskByInstanceName(FName InstanceName);// 0x34a8b20
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x34a89d8
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x34a8bc4
	void CancelTaskByInstanceName(FName InstanceName);// 0x34a8a7c
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x34a9544
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x34a9634
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x34a9764
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x34a9c80
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x34aa1ac

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x40]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3d0, Size: 0x40]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x410, Size: 0x40]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x450, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4b0, Size: 0x40]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x4f0, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x648, Size: 0x150]
	enum StackingType;//[Offset: 0x799, Size: 0x1]
	int StackLimitCount;//[Offset: 0x79c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x7a0, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x7a1, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x7a2, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7a8, Size: 0x10]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x34cc430

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x40]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GameplayTagRequirements
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x34ca9d0

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x240, Size: 0x40]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x34ca1ec

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x2f8, Size: 0x4]
	float IncomingDuration;//[Offset: 0x2fc, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a8, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3e0, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3e8, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x400, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x550, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x730, Size: 0x38]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x770, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x840, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc0, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xde8, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1038, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1170, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e0, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x3488614
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x3488710
	void TargetConfirm();// 0x3487db8
	void TargetCancel();// 0x3487d9c
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x3487dd4
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x348af40
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x348b050
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x3486b54
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x3486f9c
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x348732c
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x34874e8
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x348792c
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x3487b80
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x348715c
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x3487244
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x348849c
	void ServerPrintDebug_Request();// 0x34885b8
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x34868e0
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x3485cc0
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x3485f10
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x3485dec
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x3486678
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x3487ec0
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x348b6d4
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x348b804
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x348a634
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x348a540
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x348a358
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x348a44c
	void OnRep_ServerDebugString();// 0x3488334
	void OnRep_ReplicatedAnimMontage();// 0x34860c4
	void OnRep_OwningActor();// 0x3487d88
	void OnRep_ClientDebugString();// 0x3488350
	void OnRep_ActivateAbilities();// 0x3487140
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x3489620
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x3489cf0
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x34888f4
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x34899c4
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x348a180
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x3489f5c
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x3488c98
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x3488fc4
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x34890d0
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x34893fc
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x348b3d4
	GameplayEffectContextHandle MakeEffectContext();// 0x348b280
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x348bb90
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x348883c
	bool GetUserAbilityActivationInhibited();// 0x3487e88
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x348adf4
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x348b148
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x348a728
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x348a860
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x3486aa4
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x34877e0
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x348836c
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x34867d0
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x3486568
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x34860e0
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x3486370
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x3486474
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x348ab90
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x348a96c
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x348ba28
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x348b908
	void AbilityConfirmOrCancel__DelegateSignature();// 0x505573c
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x505573c

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x6f2cbd8
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x6f2c94c

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x6f2a9ec
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x505573c
	void EndTask();// 0x6f2a9d8

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2c0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2c8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2d8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2e0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x2f0, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x2f8, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x320, Size: 0x8]
	void ConfirmTargeting();// 0x34af720
	void CancelTargeting();// 0x34af704

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x228, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x238, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x240, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x505573c
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x505573c
	void OnValidTargetChanged(bool bNewValue);// 0x505573c
	void OnTargetingAnActor(bool bNewValue);// 0x505573c
	void OnParametersInitialized();// 0x505573c
	void FaceTowardSource(bool bFaceIn2D);// 0x34b1980

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xb8]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4]
	float Buoyancy;//[Offset: 0x10c, Size: 0x4]
	float Bounciness;//[Offset: 0x110, Size: 0x4]
	float Friction;//[Offset: 0x114, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x6d31e98
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x6d31f70
	void SetInterpolatedComponent(SceneComponent* Component);// 0x6d31dec
	void ResetInterpolation();// 0x6d31ccc
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x505573c
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x505573c
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x6d31ce8
	Vector LimitVelocity(Vector NewVelocity);// 0x6d31bf0
	bool IsVelocityUnderSimulationThreshold();// 0x6d3201c
	bool IsInterpolationComplete();// 0x6d31ca0

--------------------------------
Class: SolarSplineMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnSolarSplineMovementComponentStop;//[Offset: 0xf0, Size: 0x10]
	SplineComponent* SplineComponent;//[Offset: 0x100, Size: 0x8]
	float SplineDistance;//[Offset: 0x108, Size: 0x4]
	SolarProjBullet* SolarProjBullet;//[Offset: 0x10c, Size: 0x8]
	Vector LastLocation;//[Offset: 0x114, Size: 0xc]
	Rotator VelocityRotator;//[Offset: 0x120, Size: 0xc]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x4b0, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x518, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x530, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x548, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x560, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x57c, Size: 0x4]
	float Duration;//[Offset: 0x580, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x586, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x587, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 0x1]
	float LoopPosition;//[Offset: 0x58c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x590, Size: 0xc]
	void UpdateSpline();// 0x6d7b750
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x6d79b04
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x6d79630
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6d7ac18
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6d797b0
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x6d79984
	void SetSplineWorldPoints(out const Vector[] Points);// 0x6d79e48
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x6d79450
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x6d79f10
	void SetSplineLocalPoints(out const Vector[] Points);// 0x6d79d80
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x6d7ab68
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x6d79c00
	void SetDrawDebug(bool bShow);// 0x6d7aabc
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x6d78228
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x6d7a880
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x6d7a9c0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x6d7a1cc
	bool IsClosedLoop();// 0x6d7a848
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x6d77bd4
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x6d76d58
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x6d77a2c
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x6d77318
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x6d79240
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x6d77f24
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x6d770d8
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x6d77d7c
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x6d7834c
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x6d7acc8
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6d76c18
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d78c88
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6d7b28c
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6d77938
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x6d76934
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x6d788a8
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x6d7b04c
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x6d77558
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6d76f98
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d79058
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6d7b568
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6d77c88
	byte GetSplinePointType(int PointIndex);// 0x6d79584
	float GetSplineLength();// 0x6d78318
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x6d766fc
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x6d789f4
	Vector GetScaleAtSplineInputKey(float InKey);// 0x6d7aeac
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x6d776a4
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6d76e58
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d78d7c
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6d7b380
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6d77ae0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6d767f8
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d78aa4
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6d7af5c
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6d77754
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6d76ad8
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d78b94
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6d7b198
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6d77844
	int GetNumberOfSplineSegments();// 0x6d793e8
	int GetNumberOfSplinePoints();// 0x6d7941c
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6d77418
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d792f4
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6d7b65c
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6d77fd8
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x6d78720
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x6d785dc
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d78e70
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x6d780cc
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x6d78440
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x6d7adbc
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x6d78530
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x6d771d8
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d7914c
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x6d7b474
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x6d77e30
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x6d78178
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x6d78f64
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6d76130
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x6d75d14
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6d76338
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x6d75e70
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6d76234
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6d75f2c
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6d7602c
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6d76540
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x6d76644
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x6d7643c
	void ClearSplinePoints(bool bUpdateSpline);// 0x6d7a79c
	void AddSplineWorldPoint(out const Vector Position);// 0x6d7a114
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x6d7a2b8
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x6d7a438
	void AddSplineLocalPoint(out const Vector Position);// 0x6d7a05c
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x6d7a574
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x6d7a67c

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SingleWeaponConfig.DataAsset.Object
	enum WeaponBrand;//[Offset: 0x30, Size: 0x1]
	enum WeaponType;//[Offset: 0x31, Size: 0x1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 0x50]
	float Weight;//[Offset: 0x88, Size: 0x4]
	float MoveSpeedScaleInHipFire;//[Offset: 0x8c, Size: 0x4]
	float MoveSpeedScaleInAdsHipFire;//[Offset: 0x90, Size: 0x4]
	FName[] MultiMuzzleSocketNames;//[Offset: 0x98, Size: 0x10]
	FName[] MultiBulletSocketNames;//[Offset: 0xa8, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0xb8, Size: 0x10]
	FName[] MultiCastShellOnScopeSocketNames;//[Offset: 0xc8, Size: 0x10]
	bool bIsSingleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bUseSpecialFireInputRespondConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	SolarWeaponFireInputRespondConfig FireInputRespondConfig;//[Offset: 0xda, Size: 0x6]
	float MaxSpread;//[Offset: 0xe0, Size: 0x4]
	float MinSpread;//[Offset: 0xe4, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0xe8, Size: 0x4]
	float ShoulderFireBaseSpread;//[Offset: 0xec, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0xf0, Size: 0x4]
	<FString,float> SpreadCOPMap;//[Offset: 0xf8, Size: 0x50]
	float SpreadStatuSpeed;//[Offset: 0x148, Size: 0x4]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x150, Size: 0x50]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x1a0, Size: 0x50]
	class SolarWeaponAbilityTask_FireBase* FireTaskClass;//[Offset: 0x1f0, Size: 0x8]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x1f8, Size: 0x8]
	int PrimaryAmmoIndex;//[Offset: 0x200, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x204, Size: 0x4]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x208, Size: 0x8]
	int SecondaryAmmoIndex;//[Offset: 0x210, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x214, Size: 0x4]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x218, Size: 0x8]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x220, Size: 0x10]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x234, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x238, Size: 0x4]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x240, Size: 0x8]
	float OverloadCoolingPeriod;//[Offset: 0x248, Size: 0x4]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x250, Size: 0x8]
	float OverloadWarningRate;//[Offset: 0x258, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x25c, Size: 0x4]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0x264, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0x268, Size: 0x4]
	float AutoFireCompensationRate;//[Offset: 0x26c, Size: 0x4]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bCanAimAssistOpenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	SolarAssistAimDesc HipAutoAimConfig;//[Offset: 0x278, Size: 0x28]
	SolarAssistAimDesc ShoulderAutoAimConfig;//[Offset: 0x2a0, Size: 0x28]
	SolarAssistAimDesc OpenScopeAssitAimConfig;//[Offset: 0x2c8, Size: 0x28]
	float AssistAimApproachVehicleRate;//[Offset: 0x2f0, Size: 0x4]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	float ScopeOpenTime;//[Offset: 0x2f8, Size: 0x4]
	float ScopeOpenFOVTimeScale;//[Offset: 0x2fc, Size: 0x4]
	enum[] SupportChangeTypeArray;//[Offset: 0x300, Size: 0x10]
	int[] DefaultPartsArray;//[Offset: 0x310, Size: 0x10]
	float RecoilFireTimeWithScope;//[Offset: 0x320, Size: 0x4]
	float RecoilRecoverTimeWithScope;//[Offset: 0x324, Size: 0x4]
	float RecoilMagnitudeWithScope;//[Offset: 0x328, Size: 0x4]
	CurveFloat* RecoilCurveWithScope;//[Offset: 0x330, Size: 0x8]
	int RecoilSkipSequenceSumWithScope;//[Offset: 0x338, Size: 0x4]
	Vector2D[] RecoilCurveSequenceWithScope;//[Offset: 0x340, Size: 0x10]
	float RecoilFireTimeNoScope;//[Offset: 0x350, Size: 0x4]
	float RecoilRecoverTimeNoScope;//[Offset: 0x354, Size: 0x4]
	float RecoilMagnitudeNoScope;//[Offset: 0x358, Size: 0x4]
	CurveFloat* RecoilCurveNoScope;//[Offset: 0x360, Size: 0x8]
	int RecoilSkipSequenceSumNoScope;//[Offset: 0x368, Size: 0x4]
	Vector2D[] RecoilCurveSequenceNoScope;//[Offset: 0x370, Size: 0x10]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	float GatlingRotaryAcceleration;//[Offset: 0x384, Size: 0x4]
	float GatlingFireRotarySpeed;//[Offset: 0x388, Size: 0x4]
	float GatlingMaxRotarySpeed;//[Offset: 0x38c, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x390, Size: 0x4]
	float GatlingRotaryAttenuation;//[Offset: 0x394, Size: 0x4]
	float GatlingScatteringMagnification;//[Offset: 0x398, Size: 0x4]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x3a0, Size: 0x8]
	class GameplayAbility[] GasAbilities;//[Offset: 0x3a8, Size: 0x10]
	FName Socket;//[Offset: 0x3b8, Size: 0x8]
	FName LeftHandIKTargetSocket;//[Offset: 0x3c0, Size: 0x8]
	Vector LeftHandIkEffectLocation;//[Offset: 0x3c8, Size: 0xc]
	Vector LeftHandIkJointLocation;//[Offset: 0x3d4, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdle;//[Offset: 0x3e0, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdleWhenCrouch;//[Offset: 0x3ec, Size: 0xc]
	Vector RightHandIkEffectLocation;//[Offset: 0x3f8, Size: 0xc]
	Vector RightHandIkJointLocation;//[Offset: 0x404, Size: 0xc]
	LeftHandGripConfig LeftHandGripRotationConfig;//[Offset: 0x410, Size: 0x84]
	LeftHandGripConfig LeftHandGripRotationConfigForGunIdle;//[Offset: 0x494, Size: 0x84]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	class CrossHairWidget* CrossHair;//[Offset: 0x520, Size: 0x8]
	class FeedbackWidget* FeedbackWidget;//[Offset: 0x528, Size: 0x8]
	SoftObjectPath WeaponIcon;//[Offset: 0x530, Size: 0x18]
	SlateBrush PrimaryFireBrush;//[Offset: 0x548, Size: 0x98]
	SlateBrush SecondaryFireBrush;//[Offset: 0x5e0, Size: 0x98]
	FString WeaponTextType;//[Offset: 0x678, Size: 0x10]
	SoftObjectPath ItemIcon;//[Offset: 0x688, Size: 0x18]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x6a0, Size: 0x18]
	void InitSupportChangeTypeArray(int[] Data);// 0x4931974
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x49315e0
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float statuspeed);// 0x4931434
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x4931824
	void InitScopeData(bool onekey, float scopetime);// 0x4931340
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x4931c38
	void InitBase(int WPType);// 0x4931df0
	void InitAutoAimConfig(int InAssistAimMode, out const float[] InApproachCheckRange, float InApproachRatio, float InApproachRatioMin, float InApproachSpeed);// 0x4931a6c
	bool GetIsSupportPart(enum Type);// 0x4931290

--------------------------------
Class: SolarWeaponFireInputRespondConfig
	bool bAutoCloseScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShootAtPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanAutoShootWhilePress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanShootWhileScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bCanManuallyCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: SolarWeaponAbilityTask_FireBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnTaskEnd;//[Offset: 0x78, Size: 0x10]
	GameplayAbility* OwnerAbility;//[Offset: 0x90, Size: 0x8]
	SolarCharacter* TaskCharacter;//[Offset: 0x98, Size: 0x8]
	SolarWeapon* TaskWeapon;//[Offset: 0xa0, Size: 0x8]
	WeaponSystemBase* TaskWeaponSysBase;//[Offset: 0xa8, Size: 0x8]
	void K2_RequireEndFireTask();// 0x505573c
	void K2_RealFireTick(float DeltaTime);// 0x505573c
	void K2_PrepareRealFire();// 0x505573c
	void K2_ActivateRealFire();// 0x505573c
	static SolarWeaponAbilityTask_FireBase* CreateTaskDynamically(class SolarWeaponAbilityTask_FireBase RealClass, GameplayAbility* OwningAbility, const FName TaskInstanceName, SolarCharacter* InCharacter);// 0x4c2fe74

--------------------------------
Class: SolarAbilityTask.AbilityTask.GameplayTask.Object

--------------------------------
Class: AbilityTask.GameplayTask.Object
	GameplayAbility* Ability;//[Offset: 0x60, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0x2a8, Size: 0x8]
	WeaponSystemAutoScope* WeaponSystemAutoScope;//[Offset: 0x2b0, Size: 0x8]
	SolarWeaponFireInputResolver* WeaponSystemFireInputResolver;//[Offset: 0x2b8, Size: 0x8]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x2c0, Size: 0x8]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x2c8, Size: 0x50]
	Actor* MyPossessPawn;//[Offset: 0x318, Size: 0x8]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	bool bPreparePrimaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1]
	bool bPrepareSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1]
	bool bWeaponFireByAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x4ca1fc4
	bool TryAssistAimApproach(SolarWeapon* InWeapon, const bool InbOpenScope);// 0x4ca2160
	void SwitchSingleWeaponPressMode();// 0x4ca2688
	void SwitchAutoScopeEnable();// 0x4ca269c
	void SwitchAutoFireEnable();// 0x4ca26b8
	void SwitchAutoFire(bool Open);// 0x4ca2704
	void SwitchAssistAim(bool opened);// 0x4ca27b0
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x4ca2354
	void SetCrosshairVisible(bool InVisible);// 0x4ca2068
	void SetAutoScope(bool bOpen);// 0x4ca25dc
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x4ca24c8
	void OnTouchScreen();// 0x4ca26f0
	void OnOtherPlayerSpectateMyOwner();// 0x4ca26d4
	bool IsPrepareFire();// 0x4ca211c
	SolarWeaponFireInputResolver* GetFireInputResolver();// 0x4ca24ac
	enum GetFireButtonInputState(bool bGetRightFireButton);// 0x4ca23f8
	WeaponSysStateStruct GetCurrentState();// 0x4ca285c
	Rotator GetCameraOffsetByAssistAim();// 0x4ca225c
	bool CheckAutoFire(out bool canfire);// 0x4ca2294
	void AssistAimAdsorb();// 0x4ca214c

--------------------------------
Class: BaseWeaponComponent.ActorComponent.Object
	Guid SpawnedGuid;//[Offset: 0xf0, Size: 0x10]
	ProtoBody[] ServerToClientReqArray;//[Offset: 0x200, Size: 0x10]
	uint32 ServerToClientReqArrayMinSize;//[Offset: 0x210, Size: 0x4]
	int TempProto;//[Offset: 0x214, Size: 0x4]
	FString[] ParamsArray;//[Offset: 0x218, Size: 0x10]
	bool bLastFrameClientLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	void TryRecordClientID();// 0x484dd80
	void StartSendServerProto(byte proto);// 0x484e0d8
	void StartSendClientProto(byte proto);// 0x484e020
	void SendServerProto(byte proto, FString Param);// 0x484e300
	void SendClientProto(byte Type, byte proto, FString Parameter, bool bVerify);// 0x484e17c
	FString ParseArrayParamsToString();// 0x484dcb4
	void OnClientRoleChanged(bool LocalPlayer);// 0x484dd94
	void OnClientIDHasRegisted();// 0x484dd64
	void EndSendServerProto();// 0x484e0c4
	void EndSendClientProto(byte Type, bool bVerify);// 0x484df30
	void BindServerEvents();// 0x484de64
	void BindClientEvents();// 0x484de48
	void AppendProtoParam(FString strValue);// 0x484de80

--------------------------------
Class: ProtoBody
	byte ProtoID;//[Offset: 0x0, Size: 0x1]
	uint32 ReplicationIndex;//[Offset: 0x4, Size: 0x4]
	FString Params;//[Offset: 0x8, Size: 0x10]
	bool bVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	byte ClientType;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDetail;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarWeaponFireInputResolver.Object
	enum GetRightFireButtonState();// 0x4c39144
	enum GetLeftFireButtonState();// 0x4c39160

--------------------------------
Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 0x4]
	FString Parameter;//[Offset: 0x8, Size: 0x10]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x4ca184c

--------------------------------
Class: WeaponSystemAutoScope.Object

--------------------------------
Class: WeaponSystemAssistAim.Object
	SolarWeapon* CurrentWeapon;//[Offset: 0x2c, Size: 0x8]
	SolarCharacter* WeaponHolder;//[Offset: 0x34, Size: 0x8]
	interface class None* HolderAAInterface;//[Offset: 0x40, Size: 0x10]
	SolarCameraComponent* SolarCamera;//[Offset: 0x50, Size: 0x8]
	SolarPlayerController* WeaponHolderController;//[Offset: 0x58, Size: 0x8]
	GlobalWeaponConfig* GlobalWeaponConfig;//[Offset: 0x60, Size: 0x8]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x68, Size: 0x8]
	SolarAssistAimDesc CurrentAssistAimDesc;//[Offset: 0x70, Size: 0x28]
	SolarCharacter* TargetActor;//[Offset: 0x98, Size: 0x8]
	SolarSignificanceManager* SignificanceManager;//[Offset: 0xa0, Size: 0x8]
	SolarAssistAimData CurrentAssistAimData;//[Offset: 0xb8, Size: 0x50]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	SolarAssistAimCameraData CameraOffsetData;//[Offset: 0x14c, Size: 0x28]
	bool bFireAdsorbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool bCurrentFireReduceWeaponRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	bool bTouchAdsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 0x1]
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x4ca1230
	bool Init(out const interface classNone AAInterface);// 0x4ca12d4
	bool GetDeltaData(out Rotator OutCameraOffsetRotator);// 0x4ca113c
	bool GetActive();// 0x4ca11f8

--------------------------------
Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float ConfigDistanceToTarget;//[Offset: 0x8d0, Size: 0x4]
	Vector ConfigCameraOffset;//[Offset: 0x8d4, Size: 0xc]
	Vector ConfigTargetOffset;//[Offset: 0x8e0, Size: 0xc]
	float ConfigFOV;//[Offset: 0x8ec, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x8f0, Size: 0x4]
	float ViewPitchMin;//[Offset: 0x8f4, Size: 0x4]
	float ViewYawMax;//[Offset: 0x8f8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x8fc, Size: 0x4]
	float CameraOccupiedRoom;//[Offset: 0x900, Size: 0x4]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x905, Size: 0x1]
	static SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x49832a8

--------------------------------
Class: SolarAssistAimDesc
	Vector2D AimAssistApproachRange;//[Offset: 0x0, Size: 0x8]
	float AimAssistStepRatio;//[Offset: 0x8, Size: 0x4]
	float MinAssistStepRatio;//[Offset: 0xc, Size: 0x4]
	float AimAssistStepSpeed;//[Offset: 0x10, Size: 0x4]
	CurveFloat* AimAssistAdsorbEnterRate;//[Offset: 0x18, Size: 0x8]
	CurveFloat* AimAssistAdsorbExitRate;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SolarSignificanceManager.SignificanceManager.SignificanceManagerBase.Object
	float CalculateSceneActorTickInterval;//[Offset: 0x160, Size: 0x4]
	Actor*[] ManagedSceneActors;//[Offset: 0x178, Size: 0x10]
	<Actor*> ManagedSceneActorSet;//[Offset: 0x188, Size: 0x50]

--------------------------------
Class: SignificanceManager.SignificanceManagerBase.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x148, Size: 0x18]

--------------------------------
Class: SignificanceManagerBase.Object

--------------------------------
Class: SolarAssistAimData
	Vector2D DetectionRange;//[Offset: 0x0, Size: 0x8]
	Vector2D DetectionRangeMinRate;//[Offset: 0x8, Size: 0x8]
	Vector2D DetectionRangeMaxRate;//[Offset: 0x10, Size: 0x8]
	bool bLimitMinDetectionRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName[] DetectionScokets;//[Offset: 0x20, Size: 0x10]
	Vector2D DetectionPoint;//[Offset: 0x30, Size: 0x8]
	Vector2D DetectionPointWeight;//[Offset: 0x38, Size: 0x8]
	Vector2D RealDetectionRange;//[Offset: 0x40, Size: 0x8]
	float DetectionDistanceMinSquared;//[Offset: 0x48, Size: 0x4]
	float ToTargetDistance;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: SolarAssistAimCameraData
	Vector AdsorbSpeed;//[Offset: 0x0, Size: 0xc]
	bool bActivePitchOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bActiveYawOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float LastPitchOffset;//[Offset: 0x10, Size: 0x4]
	float LastYawOffset;//[Offset: 0x14, Size: 0x4]
	float TotalPitchOffset;//[Offset: 0x18, Size: 0x4]
	float TotalYawOffset;//[Offset: 0x1c, Size: 0x4]
	float CurrentPitchOffset;//[Offset: 0x20, Size: 0x4]
	float CurrentYawOffset;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: WeaponSystemInteract

--------------------------------
Class: CrossHairWidget.UserWidget.Widget.Visual.Object
	enum CurrentCrosshairState;//[Offset: 0x25c, Size: 0x1]
	enum LastCrosshairState;//[Offset: 0x25d, Size: 0x1]
	CrosshairCanvasPanel* RootPanel;//[Offset: 0x260, Size: 0x8]
	int MinSpread;//[Offset: 0x268, Size: 0x4]
	void OnWeaponFired();// 0x505573c
	void OnUpdateReloadProgress(float InReloadProgress, int InMaxAmmo);// 0x505573c
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);// 0x505573c
	void OnUpdateCoolDownProgress(float InCoolDownProgress);// 0x505573c
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress, int InChargeBurstCount);// 0x505573c
	void OnUpdateAimState(bool InbLockEnemy);// 0x505573c
	void OnReloadStarted(float InReloadTime);// 0x505573c
	void OnReloadFinished(bool InbReloadSuccess, int InReloadAmmo, int InReservedAmmo, int InMaxAmmo);// 0x505573c
	void OnPlayWeaponSpecialFire(enum InState, float PlayRate);// 0x505573c
	void OnOverloadStateChanged(bool bEnter);// 0x505573c
	void OnAmmoChanged(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x505573c
	void HandleCrosshairState(enum InCrosshairState, bool InbQuitState);// 0x4884ccc
	Widget* GetSpreadCanvasWidget();// 0x505573c
	UserWidget* GetReloadWidget();// 0x505573c
	UserWidget* GetOverloadWidget();// 0x505573c
	UserWidget* GetCoolDownWidget();// 0x505573c
	UserWidget* GetChargeWidget();// 0x505573c
	UserWidget* GetAmmoWidget();// 0x505573c
	Vector2D CalcDeltaScaleBySpread(const float Spread);// 0x4884e70
	Vector2D CalcDeltaPosBySpread(const float Spread);// 0x4884f24
	float CalcDeltaAngleBySpread(const float Spread);// 0x4884dbc

--------------------------------
Class: CrosshairCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<enum,StateMapItemStruct> CrosshairStateConfigList;//[Offset: 0x158, Size: 0x50]
	Widget*[] IgonreWidgetToStateMap;//[Offset: 0x1a8, Size: 0x10]
	UICrossHairSpreadStruct[] SpreadItemList;//[Offset: 0x1b8, Size: 0x10]
	UICrossHairAimColorStruct[] AimColorItemList;//[Offset: 0x1c8, Size: 0x10]
	TweenImage* ReloadingTween;//[Offset: 0x1d8, Size: 0x8]
	GaugeImage* BulletGauge;//[Offset: 0x1e0, Size: 0x8]
	TweenImage* OverloadingTween;//[Offset: 0x1e8, Size: 0x8]
	ProgressBar* OverloadBar_Normal;//[Offset: 0x1f0, Size: 0x8]
	ProgressBar* OverloadBar_Warn;//[Offset: 0x1f8, Size: 0x8]
	TweenWidget* OverloadNormalPanelTween;//[Offset: 0x200, Size: 0x8]
	ProgressBar*[] CoolDownBars;//[Offset: 0x208, Size: 0x10]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x144, Size: 0x4]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x60541b8

--------------------------------
Class: StateMapItemStruct
	StateItemStruct[] ChildWidgetConfigList;//[Offset: 0x0, Size: 0x10]
	bool bLoadChildWidgetTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: StateItemStruct
	Widget* CrosshairChildWidget;//[Offset: 0x0, Size: 0x8]
	enum VisibilityType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: UICrossHairSpreadStruct
	Widget* TargetWidget;//[Offset: 0x0, Size: 0x8]
	enum SpreadType;//[Offset: 0x8, Size: 0x1]
	float Weight;//[Offset: 0xc, Size: 0x4]
	bool bPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Angle;//[Offset: 0x14, Size: 0x4]
	bool Pos_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	Vector2D ScaleFactor;//[Offset: 0x1c, Size: 0x8]
	bool Scale_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bRenderAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	float RenderAngleFactor;//[Offset: 0x28, Size: 0x4]
	bool Angle_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Vector2D OrginalVector;//[Offset: 0x30, Size: 0x8]
	Vector2D OrginalScale;//[Offset: 0x38, Size: 0x8]
	float OrginalAngle;//[Offset: 0x40, Size: 0x4]
	Vector2D Dir;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: UICrossHairAimColorStruct
	Image* TargetImg;//[Offset: 0x0, Size: 0x8]
	LinearColor TargetColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TweenImage.TweenBase.UserWidget.Widget.Visual.Object
	Image* TargetImg;//[Offset: 0x2d0, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2d8, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x318, Size: 0x40]
	ImageColorTween ColorTween;//[Offset: 0x358, Size: 0x48]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x3a0, Size: 0x28]
	void InitImageTween();// 0x4c67f94

--------------------------------
Class: TweenBase.UserWidget.Widget.Visual.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float Interval;//[Offset: 0x25c, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool bEndHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	delegate OnTweenStart;//[Offset: 0x288, Size: 0x10]
	delegate OnTweenStop;//[Offset: 0x298, Size: 0x10]
	Widget* LinkWidget;//[Offset: 0x2b8, Size: 0x8]
	float Progress;//[Offset: 0x2c4, Size: 0x4]
	void Stop();// 0x4c67b1c
	void Reset();// 0x4c67b08
	void Play();// 0x4c67b30
	void InitAndPlay();// 0x4c67af4
	void Init();// 0x4c67b44

--------------------------------
Class: UIScaleTween.UITweenBaseStruct
	Vector2D OriginalScale;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetScale;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: UITweenBaseStruct
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum InterpolationType;//[Offset: 0x9, Size: 0x1]
	byte EaseType;//[Offset: 0xa, Size: 0x1]
	CurveFloat* InterpolationCurve;//[Offset: 0x10, Size: 0x8]
	Widget* Widget;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: UIPositionTween.UITweenBaseStruct
	Vector2D OriginalPosition;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetPosition;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsRelativeChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ImageColorTween.UITweenBaseStruct
	LinearColor Original;//[Offset: 0x20, Size: 0x10]
	LinearColor TargetColor;//[Offset: 0x30, Size: 0x10]
	Image* Image;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: UIRenderOpacityTween.UITweenBaseStruct
	float OriginalOpacity;//[Offset: 0x20, Size: 0x4]
	float TargetOpacity;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x258, Size: 0x1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	Vector2D ImageSize;//[Offset: 0x25c, Size: 0x8]
	float InitialDegree;//[Offset: 0x264, Size: 0x4]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	Vector2D CenterOffset;//[Offset: 0x26c, Size: 0x8]
	Object* ResourceObject;//[Offset: 0x278, Size: 0x8]
	float Progress;//[Offset: 0x280, Size: 0x4]
	MaterialInterface* MaterialDegree360;//[Offset: 0x288, Size: 0x8]
	MaterialInterface* MaterialDegree180;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* MaterialDegree90;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x2a0, Size: 0x8]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2a8, Size: 0x8]
	Image* TargetImage;//[Offset: 0x2b0, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2b8, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x48a8c20
	void SetProgress(float InProgress);// 0x48a8cc4
	void SetImage(Object* RO);// 0x48a8b7c
	Image* GetInternalImage();// 0x48a8b60

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x130, Size: 0x1d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x300, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x308, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x310, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x318, Size: 0x8]
	float Percent;//[Offset: 0x320, Size: 0x4]
	byte BarFillType;//[Offset: 0x324, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x328, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x330, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x340, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x350, Size: 0x10]
	void SetPercent(float InPercent);// 0x606c388
	void SetIsMarquee(bool InbIsMarquee);// 0x606c238
	void SetFillColorAndOpacity(LinearColor InColor);// 0x606c2e4

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush FillImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush MarqueeImage;//[Offset: 0x138, Size: 0x98]

--------------------------------
Class: TweenWidget.TweenBase.UserWidget.Widget.Visual.Object
	Widget* TargetWidget;//[Offset: 0x2d0, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2d8, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x318, Size: 0x40]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x358, Size: 0x28]

--------------------------------
Class: FeedbackWidget.UserWidget.Widget.Visual.Object
	FeedbackCanvasPanel* FeedbackPanel;//[Offset: 0x258, Size: 0x8]
	float VisibilityTime;//[Offset: 0x260, Size: 0x4]
	float VisibilityTimer;//[Offset: 0x264, Size: 0x4]

--------------------------------
Class: FeedbackCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<FString,FeedbackSingleData> FeedbackMap;//[Offset: 0x158, Size: 0x50]

--------------------------------
Class: FeedbackSingleData
	UserWidget* AnimationWidget;//[Offset: 0x0, Size: 0x8]
	FName AnimationName;//[Offset: 0x8, Size: 0x8]
	float AnimationPlaySpeed;//[Offset: 0x10, Size: 0x4]
	float AnimationStartTime;//[Offset: 0x14, Size: 0x4]
	float AnimationAgainStartTime;//[Offset: 0x18, Size: 0x4]
	int AnimationLoopNumber;//[Offset: 0x1c, Size: 0x4]
	FName AudioName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SolarWeaponFireStateMachine.SolarWeaponStateMachine.Object
	bool bTryGotoOverloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bTryGotoIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	bool bTryGotoBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bTryGotoFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	bool bTryGotoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	bool bTryGotoBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 0x1]
	bool bTryGotoGatlingRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool ToReload(SolarWeaponState* CurState);// 0x4c3a658
	bool ToOverloading(SolarWeaponState* CurState);// 0x4c3a938
	bool ToIdle(SolarWeaponState* CurState);// 0x4c3a880
	bool ToGatlingRoll(SolarWeaponState* CurState);// 0x4c3a4e8
	bool ToFiring(SolarWeaponState* CurState);// 0x4c3a710
	bool ToBurst(SolarWeaponState* CurState);// 0x4c3a7c8
	bool ToBolt(SolarWeaponState* CurState);// 0x4c3a5a0

--------------------------------
Class: SolarWeaponStateMachine.Object
	SolarWeaponState* CurrentState;//[Offset: 0x60, Size: 0x8]
	class SolarWeaponState* StartStateSubClass;//[Offset: 0x68, Size: 0x8]
	class SolarWeaponState* CurStateSubClass;//[Offset: 0x70, Size: 0x8]
	WeaponStateFlowItem[] FlowData;//[Offset: 0x78, Size: 0x10]
	<class SolarWeaponState,SolarWeaponState*> StateMap;//[Offset: 0x88, Size: 0x50]
	WeaponStateMapItem[] StateFlowMap;//[Offset: 0xd8, Size: 0x10]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	void Update(float DeltaTime);// 0x4c49704
	void Start();// 0x4c497b0
	void Resume();// 0x4c49520
	void Reset(bool bAutoStart);// 0x4c49634
	void Pause();// 0x4c49534
	void LogStartMsg(SolarWeaponState* State);// 0x4c49168
	void LogEndMsg(SolarWeaponState* Last);// 0x4c48fe0
	void LogChangeMsg(SolarWeaponState* From, SolarWeaponState* To);// 0x4c49084
	bool IsRunning();// 0x4c49548
	bool IsPause();// 0x4c49504
	void GotoState(out const class SolarWeaponState InWeaponState);// 0x4c49450
	void GotoNext();// 0x4c496e8
	SolarWeaponState* GetStateInstance(out const class SolarWeaponState StateSubClass);// 0x4c492d4
	bool GetNextState(out class SolarWeaponState Next);// 0x4c49390
	bool CheckCurStateToNextState(out const WeaponStateFlowItem StateFlowItem);// 0x4c49570
	bool CheckConditionNative(out const FName ConditionFunc);// 0x4c4920c

--------------------------------
Class: SolarWeaponState.Object
	SolarWeaponState* NextState;//[Offset: 0x28, Size: 0x8]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SolarWeaponStateMachine* OwnerStateMachine;//[Offset: 0x38, Size: 0x8]
	void UpdateState(float DeltaTime);// 0x4c47ebc
	bool IsRunning();// 0x4c48014
	void GotoNext();// 0x4c47df4
	void EnterState(SolarWeaponState* InPrevState);// 0x4c47f68
	void EndState(SolarWeaponState* InNextState);// 0x4c47e10

--------------------------------
Class: WeaponStateFlowItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	class SolarWeaponState* Next;//[Offset: 0x8, Size: 0x8]
	byte Weight;//[Offset: 0x10, Size: 0x1]
	bool bBpFuncCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	FName ConditonFunc;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: WeaponStateMapItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	WeaponStateFlowItem[] NextList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarWeaponSkillStateMachine.SolarWeaponStateMachine.Object
	bool IsTriggerSkillSuccessed(SolarWeaponState* CurState);// 0x4c42390
	bool IsTriggerSkillFailed(SolarWeaponState* CurState);// 0x4c422d8

--------------------------------
Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 0xc]
	float Scale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb0, Size: 0x8]
	World* CacheWorld;//[Offset: 0xb8, Size: 0x8]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc0, Size: 0x10]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xd0, Size: 0x10]
	SolarBullet* EffectBulletCDO;//[Offset: 0x130, Size: 0x8]

--------------------------------
Class: SolarVirtualBullet
	ParticleSystemComponent* BulletEffect;//[Offset: 0x8, Size: 0x8]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x10, Size: 0x8]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x18, Size: 0x8]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponFireLaserCollector.ActorComponent.Object
	SolarWeapon* OwnerWeapon;//[Offset: 0xb8, Size: 0x8]
	AkComponent* FireAkComponent;//[Offset: 0xc0, Size: 0x8]
	AkComponent* ImpactAkComponent;//[Offset: 0xc8, Size: 0x8]
	ParticleSystem* ExplodeEffectParticle;//[Offset: 0x138, Size: 0x8]
	ParticleSystem* DecalsEffectParticle;//[Offset: 0x140, Size: 0x8]
	ParticleSystemComponent*[] CacheParticles;//[Offset: 0x148, Size: 0x10]

--------------------------------
Class: WeaponDebugFlag
	bool bIgnoreOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStateMachineDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShotGunDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bInstantShotDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bDisplayShootDirectionDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bRecoilDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb0, Size: 0x8]
	SolarWeapon* MyWeapon;//[Offset: 0xb8, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0xc0, Size: 0x8]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xc8, Size: 0x50]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x4c87b18
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x4c87cc8
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x4c879e4
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x4c878fc
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x4c87db0
	void GotoState(enum State, float Interval);// 0x4c87e5c
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x4c87bc8

--------------------------------
Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 0x1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f, Size: 0x1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 0x10]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 0x8]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 0x8]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 0x8]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 0x8]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 0x8]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 0x8]
	bool SwitchStateCheck(enum CheckState);// 0x4c88948
	void SetInterruptIsTrue();// 0x4c8863c
	bool RouterNodeJudge();// 0x4c888a0
	void OnQuitState(enum State);// 0x4c88664
	void OnEnterState(enum State);// 0x4c88708
	void Interrupt();// 0x4c88650
	bool HasMsg();// 0x4c888d8
	bool ConsumMsg();// 0x4c88910
	bool AddMsg(enum State, float Speed);// 0x4c887ac

--------------------------------
Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponNetComponent.BaseWeaponComponent.ActorComponent.Object
	WeaponSkinNetData SkinData;//[Offset: 0x230, Size: 0x4]
	WeaponUpgradeNetData UpgradeData;//[Offset: 0x238, Size: 0x20]
	WeaponPartsNetData PartsData;//[Offset: 0x258, Size: 0x58]
	bool bSkinModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bUpgradeModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool bPartsModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	WeaponLevelUpInfo LevelData;//[Offset: 0x2b3, Size: 0x3]
	int PartsInitCount;//[Offset: 0x2b8, Size: 0x4]
	void OnRep_UpgradeData();// 0x4c8ff1c
	void OnRep_SkinData();// 0x4c8ff30
	void OnRep_PartsInitCount();// 0x4c8fee0
	void OnRep_PartsData();// 0x4c8ff08
	void OnRep_Level();// 0x4c8fef4

--------------------------------
Class: WeaponSkinNetData
	int SkinId;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponUpgradeNetData
	int TotalScore;//[Offset: 0x0, Size: 0x4]
	int LevelScore;//[Offset: 0x4, Size: 0x4]
	UpgradeSlotStruct[] UpgradeSlots;//[Offset: 0x8, Size: 0x10]
	int UpgradeCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WeaponPartsNetData
	WeaponPartsData Data;//[Offset: 0x0, Size: 0x28]
	float[] EffectDataHipValues;//[Offset: 0x28, Size: 0x10]
	float[] EffectDataShoulderValues;//[Offset: 0x38, Size: 0x10]
	int ChangedPartType;//[Offset: 0x48, Size: 0x4]
	int ChangedPartID;//[Offset: 0x4c, Size: 0x4]
	int OriginalPartID;//[Offset: 0x50, Size: 0x4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: WeaponPartsData
	int ScopeID;//[Offset: 0x0, Size: 0x4]
	int GripID;//[Offset: 0x4, Size: 0x4]
	int GunStockID;//[Offset: 0x8, Size: 0x4]
	int MuzzleID;//[Offset: 0xc, Size: 0x4]
	int ClipID;//[Offset: 0x10, Size: 0x4]
	int[] Runes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WeaponLevelUpInfo
	byte Level;//[Offset: 0x0, Size: 0x1]
	byte LastLevel;//[Offset: 0x1, Size: 0x1]
	byte AllowPlayVFX;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 0x1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 0xf0]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0x128, Size: 0x10]
	bool WeaponBarLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x140, Size: 0x10]
	bool WeaponClipLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x158, Size: 0x10]
	bool WeaponGripLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x170, Size: 0x10]
	<int,Transform> ScopeOffsetMap;//[Offset: 0x180, Size: 0x50]
	bool WeaponScopeLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x1d8, Size: 0x10]
	bool WeaponStockLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x1f0, Size: 0x8]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x1f8, Size: 0x8]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x200, Size: 0x18]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x218, Size: 0x18]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x230, Size: 0x8]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x238, Size: 0x18]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x250, Size: 0x18]
	class ActorEffect* DedicatedDissolvedDeathActorEffect;//[Offset: 0x268, Size: 0x8]
	SoftObjectPath DedicatedDissolvedDeathFXPath;//[Offset: 0x270, Size: 0x18]
	void ModifyResPath();// 0x4c8b634
	bool IsMeshReplace();// 0x4c8b808
	bool GetPartLockedInfoByType(const enum PartType);// 0x4c8b648
	bool GetPartDataArrayByType(const enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x4c8b6f8

--------------------------------
Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	FString WeaponDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath WeaponMesh;//[Offset: 0x18, Size: 0x18]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x30, Size: 0x8]
	<enum,SoftObjectPath> OverrideCharacterMontagePathMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath LodpMesh;//[Offset: 0x88, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0xa0, Size: 0x10]
	Vector MeshExtraFPPLocation;//[Offset: 0xb0, Size: 0xc]
	Vector NoMeshExtraFPPLocation;//[Offset: 0xbc, Size: 0xc]
	Rotator MeshExtraFPPRotation;//[Offset: 0xc8, Size: 0xc]
	Rotator NoMeshExtraFPPRotation;//[Offset: 0xd4, Size: 0xc]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Socket;//[Offset: 0x4, Size: 0x8]
	ParticleSystem* PS;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 0x4]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 0x8]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ActorEffectController.Object

--------------------------------
Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x230, Size: 0x1]
	enum CurrentPostureType;//[Offset: 0x231, Size: 0x1]

--------------------------------
Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xb8, Size: 0x8]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xc8, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* YawCurve;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* ScopePitchCurve;//[Offset: 0xf8, Size: 0x8]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x100, Size: 0x10]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x110, Size: 0x8]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e0, Size: 0x10]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f0, Size: 0x10]
	CurveFloat* PitchEndCurve;//[Offset: 0x200, Size: 0x8]
	CurveFloat*[] RollCurveArray;//[Offset: 0x208, Size: 0x10]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x218, Size: 0x10]
	void SetRecoilVActive(bool bActive);// 0x4c99da8
	void SetRecoilRActive(bool bActive);// 0x4c99cfc
	void SetRecoilHActive(bool bActive);// 0x4c99e54
	void SetRecoilActive(bool bActive);// 0x4c99c50
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x4c9a034
	bool IsRunning();// 0x4c99f00
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4c99af0
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4c99910
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4c99a00
	Rotator GetCurrentRecoil();// 0x4c99c18
	Rotator GetAndClearCurrentRecoil();// 0x4c99be0
	void Fire(bool hipfire, bool primary);// 0x4c99f38

--------------------------------
Class: WeaponPartClipComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x4c90cac
	Rotator GetHandRotOffset();// 0x4c90ce4
	Vector GetHandLocOffset();// 0x4c90d1c
	float GetDropLifeSpan();// 0x4c90c78
	FName GetCharacterHandSocket();// 0x4c90c44
	FName GetCharacterHandInverseSocket();// 0x4c90c10

--------------------------------
Class: WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartID;//[Offset: 0x554, Size: 0x4]
	bool bDataAssetInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	bool bMeshAssetsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 0x1]
	WeaponPartDataAsset* OrginDataAsset;//[Offset: 0x560, Size: 0x8]
	WeaponPartDataAsset* SkinPartDataAsset;//[Offset: 0x568, Size: 0x8]
	StaticMesh* PartFightMesh;//[Offset: 0x570, Size: 0x8]
	WeaponSkinData* WeaponSkin;//[Offset: 0x578, Size: 0x8]
	WeaponSkinPartData SkinMatchedPartData;//[Offset: 0x580, Size: 0x40]
	enum WeaponPartType;//[Offset: 0x5c2, Size: 0x1]
	void SwitchLOD(int LOD);// 0x4c91dec
	void SetPartVisibility(bool bVisibility);// 0x4c91d38
	void SetPartIDAndPartData(int InPartID);// 0x4c91814
	void ResetSkin();// 0x4c91e90
	void PartInitializeServer();// 0x4c91fb0
	void PartInitializeClient();// 0x4c91f9c
	void PartInitialize(const int InPartID);// 0x4c91fc4
	void OnLoadSkinDataCompleted();// 0x4c917dc
	void OnLoadMeshDataCompleted();// 0x4c917f8
	void OnLoadCompletedInternal(bool bSuccess);// 0x4c91728
	void OnLoadCompleted(bool bSuccess);// 0x4c9167c
	bool IsValidPart();// 0x4c91ee0
	bool IsPartEnable();// 0x4c918cc
	bool IsOnlyData();// 0x4c91d00
	void InitializeMeshLOD();// 0x4c918b8
	bool HasInitialized();// 0x4c91f5c
	SoftObjectPath[] GetSkinNeedLoadAssets(WeaponSkinData* SkinData);// 0x4c91a68
	enum GetPartType();// 0x4c91eac
	int GetPartID();// 0x4c91f20
	WeaponPartDataAsset* GetPartData();// 0x4c91904
	SoftObjectPath[] GetClientNeedLoadMesh();// 0x4c91938
	SoftObjectPath[] GetClientNeedLoadAssets();// 0x4c91bd8

--------------------------------
Class: WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x38, Size: 0x18]
	Transform PreviewTransform;//[Offset: 0x50, Size: 0x30]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath PartIcon;//[Offset: 0x98, Size: 0x18]
	<int,Vector> SpecificScaleMap;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: SolarVirtualBulletHitParameter
	byte ModeIndex;//[Offset: 0x0, Size: 0x1]
	int8 FireChargePhase;//[Offset: 0x1, Size: 0x1]
	float FireChargeTime;//[Offset: 0x4, Size: 0x4]
	int HitStartIndex;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x18, Size: 0xc]
	AmmoConfig* Ammo;//[Offset: 0x28, Size: 0x8]
	HitResult[] Hits;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SolarVirtualBulletSpawnParameter
	byte ModeIndex;//[Offset: 0x0, Size: 0x1]
	int8 FireChargePhase;//[Offset: 0x1, Size: 0x1]
	float FireChargeTime;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x14, Size: 0xc]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x20, Size: 0x24]
	AmmoConfig* Ammo;//[Offset: 0x48, Size: 0x8]
	FString AntiData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 0x8]
	Vector_NetQuantize InitialLoc;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize CurrentLoc;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: SpawnProjParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	byte Mode;//[Offset: 0x18, Size: 0x1]
	byte CurRocketNum;//[Offset: 0x19, Size: 0x1]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1]
	float Scale;//[Offset: 0x1c, Size: 0x4]
	float SpeedScale;//[Offset: 0x20, Size: 0x4]
	Actor* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarSummonData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	Rotator Orientation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector WeaponLocation;//[Offset: 0x14, Size: 0xc]
	float ServerTimeSeconds;//[Offset: 0x20, Size: 0x4]
	float DamageScale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	BulletHitDetailData HitDetailData;//[Offset: 0x30, Size: 0x3c]

--------------------------------
Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector WeaponLocation;//[Offset: 0x14, Size: 0xc]
	float ServerTimeSeconds;//[Offset: 0x20, Size: 0x4]
	float DamageScale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 0x4]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FireMode
	enum HoldAction;//[Offset: 0x0, Size: 0x1]
	byte Index;//[Offset: 0x1, Size: 0x1]
	int AmmoReserve;//[Offset: 0x8, Size: 0x4]
	int AmmoCapacity;//[Offset: 0xc, Size: 0x4]
	float FireRateAccumulation;//[Offset: 0x10, Size: 0x4]
	float FireRateAccumulationBurstInterval;//[Offset: 0x14, Size: 0x4]
	ParticleSystemComponent* BeamEffect;//[Offset: 0x38, Size: 0x8]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x40, Size: 0x8]
	AmmoConfig* Ammo;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x228, Size: 0x8]
	SolarSummonPreviewComponent* PreviewComponent;//[Offset: 0x234, Size: 0x8]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x240, Size: 0x8]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x248, Size: 0x8]
	SkeletalMeshComponent* PreviewedSkeletalMesh;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* PreviewedRangeMesh;//[Offset: 0x258, Size: 0x8]
	SceneComponent* PreviewRoot;//[Offset: 0x260, Size: 0x8]
	void ShowHitPointAt(out const Vector Loc);// 0x505573c
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x4c3ff54
	void SetPoints(out const Vector[] Points);// 0x505573c
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x4c3fea8
	bool RequestDisplayPreview(SolarSummonDetectionComponent* InSummonDetectionComponent, out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x4c40180
	void HideHitPoint();// 0x505573c
	void HideAllSummonPreview();// 0x4c400a4
	void Hide();// 0x505573c
	SplineMeshComponent* GetSplineMeshComponent();// 0x505573c
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x4c400c0
	void ChangeSummonPreviewAttachParent();// 0x505573c

--------------------------------
Class: SolarSummonPreviewComponent.SolarPreviewComponent.ActorComponent.Object
	bool RequestDisplayPreviewDecalEffect(DecalComponent* InDecalComponent, out const SolarPreviewDecalEffectData InDecalEffectData, FString InDecalMaterialPath, out const Transform InDecalRelativeTransform);// 0x4b13420

--------------------------------
Class: SolarPreviewComponent.ActorComponent.Object
	bool RequestReplacePreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath);// 0x4ade62c
	bool RequestReplacePreviewMaterial(MeshComponent* InMeshComponent, FString InPreviewMaterialPath);// 0x4ade524
	bool RequestDisplayPreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath, FString InPreviewMaterialPath, out const Transform InPreviewRelativeTransform);// 0x4ade734

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x288, Size: 0x8]
	int SortOrder;//[Offset: 0x290, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x294, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x298, Size: 0x4]
	float FadeDuration;//[Offset: 0x29c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x2a0, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x2a4, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	Vector DecalSize;//[Offset: 0x2ac, Size: 0xc]
	void SetSortOrder(int Value);// 0x6bb7c24
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x6bb7cc8
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x6bb7e50
	void SetFadeIn(float StartDelay, float Duaration);// 0x6bb7d6c
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x6bb7b80
	float GetFadeStartDelay();// 0x6bb801c
	float GetFadeInStartDelay();// 0x6bb7fb4
	float GetFadeInDuration();// 0x6bb7f80
	float GetFadeDuration();// 0x6bb7fe8
	MaterialInterface* GetDecalMaterial();// 0x6bb7b4c
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x6bb7b10

--------------------------------
Class: SolarPreviewDecalEffectData
	SoftObjectPath ValidEffectPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath InvalidEffectPath;//[Offset: 0x18, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	int SortOrder;//[Offset: 0x60, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x64, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x68, Size: 0x4]
	float FadeDuration;//[Offset: 0x6c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x70, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x74, Size: 0x4]
	Vector DecalSize;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x558, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x5b0, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x5bc, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x5c0, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x5d0, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x5d8, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5dc, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5dc, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5dc, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x5dd, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x5e0, Size: 0x4]
	void UpdateMesh();// 0x6d82ccc
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x6d82a7c
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x6d8254c
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x6d82428
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x6d82ba4
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x6d82308
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x6d8266c
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x6d81d50
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x6d81e80
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x6d8282c
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x6d821e8
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x6d820c4
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x6d82954
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x6d81fa4
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x6d81c2c
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x6d81b08
	Vector GetStartTangent();// 0x6d82b6c
	Vector2D GetStartScale();// 0x6d82638
	float GetStartRoll();// 0x6d82518
	Vector GetStartPosition();// 0x6d82c94
	Vector2D GetStartOffset();// 0x6d823f4
	Vector GetSplineUpDir();// 0x6d81e48
	byte GetForwardAxis();// 0x6d81f70
	Vector GetEndTangent();// 0x6d8291c
	Vector2D GetEndScale();// 0x6d822d4
	float GetEndRoll();// 0x6d821b4
	Vector GetEndPosition();// 0x6d82a44
	Vector2D GetEndOffset();// 0x6d82090
	float GetBoundaryMin();// 0x6d81d1c
	float GetBoundaryMax();// 0x6d81bf8

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarSummonDetectionComponent.SolarPreviewDetectionComponent.ActorComponent.Object
	SolarQuickSummonProxy* QuickSummonProxy;//[Offset: 0x108, Size: 0x8]
	void ResetQucikSummonTimer();// 0x4b0cf10
	bool IsWithinQuickSummonTime(const float InDeltaTime);// 0x4b0cf24

--------------------------------
Class: SolarPreviewDetectionComponent.ActorComponent.Object
	SoftObjectPath DetectionConfigPath;//[Offset: 0xb0, Size: 0x18]
	bool IsAllowPreview(out const Vector InLocation, out const Vector InNormal);// 0x4adecb8
	bool CheckIsPreviewValid(out const SolarSummonData InSummonData, bool InbAccept);// 0x4adedd0

--------------------------------
Class: SolarQuickSummonProxy.Object
	SolarSummonDetectionComponent* SummonDetectionComponent;//[Offset: 0x28, Size: 0x8]
	bool TryGetSummonHitResult(out HitResult OutHitResult, SolarSummonDetectionConfig* InSummonConfig);// 0x4ae4154
	Vector RotateDirection(out const Vector InDirection, out const Vector InNormal);// 0x4ae3d40
	bool IsPlaceable(Actor* Summoner);// 0x4ae4280
	bool IsCheckedWorldStatic(Actor* InActor, out const Vector InDirection, out const Vector InCheckOffset, float InLength);// 0x4ae3bac
	bool GetImpactPoint(Actor* InSummoner, out const Vector InStart, out const Vector InEndPoint, out Vector OutLocation, out Vector OutNormal);// 0x4ae3e50
	bool FindPlaceableSpace(out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x4ae4044

--------------------------------
Class: SolarSummonDetectionConfig.SolarPreviewDetectionConfig.DataAsset.Object
	int ItemID;//[Offset: 0xb0, Size: 0x4]
	SolarPreviewStaticMeshData PreviewRangeData;//[Offset: 0xc0, Size: 0x80]
	SolarPreviewStaticMeshData PreviewMobileData;//[Offset: 0x140, Size: 0x80]
	SolarPreviewDecalEffectData PreviewDecalData;//[Offset: 0x1c0, Size: 0x90]
	bool EnableQuickSummon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool EnableQuickSummonInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	class SolarQuickSummonProxy* QuickSummonClass;//[Offset: 0x258, Size: 0x28]
	float QuickSummonTime;//[Offset: 0x280, Size: 0x4]
	bool EnableCheckCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	class SolarSummonPlaceholder* SummonPlaceholderClass;//[Offset: 0x288, Size: 0x28]
	SolarSummonCondition SummonCondition;//[Offset: 0x2b0, Size: 0x48]

--------------------------------
Class: SolarPreviewDetectionConfig.DataAsset.Object
	SolarPreviewMeshData PreviewMeshData;//[Offset: 0x30, Size: 0x80]

--------------------------------
Class: SolarPreviewStaticMeshData
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath ValidMaterialPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath InvalidMaterialPath;//[Offset: 0x30, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: SolarPreviewMeshData
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath ValidMaterialPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath InvalidMaterialPath;//[Offset: 0x30, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: SolarSummonPlaceholder.Actor.Object
	void SetCollisionSize(out const Vector InSize);// 0x505573c

--------------------------------
Class: SolarSummonCondition
	bool bUseChannelTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte TestCollisionChannel;//[Offset: 0x1, Size: 0x1]
	byte[] CollisionCheckTypes;//[Offset: 0x8, Size: 0x10]
	byte[] ForbiddenSurfaces;//[Offset: 0x18, Size: 0x10]
	float MaxPlaceableAngle;//[Offset: 0x28, Size: 0x4]
	bool bDisplayOverThanPlaceableAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Vector CheckSize;//[Offset: 0x30, Size: 0xc]
	float CollisionToGroundDistance;//[Offset: 0x3c, Size: 0x4]
	bool bEnableSummonInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Scale;//[Offset: 0x18, Size: 0xc]
	byte LocationType;//[Offset: 0x24, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x26, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x19, Size: 0x1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartRunesComp* RunesComp;//[Offset: 0xe0, Size: 0x8]
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xe8, Size: 0x8]
	WeaponPartClipComp* ClipComp;//[Offset: 0xf0, Size: 0x8]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xf8, Size: 0x8]
	WeaponPartGripComp* GripComp;//[Offset: 0x100, Size: 0x8]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0x108, Size: 0x8]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0x110, Size: 0x8]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0x118, Size: 0x8]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	FName ScopeSocket;//[Offset: 0x124, Size: 0x8]
	FName GripSocket;//[Offset: 0x12c, Size: 0x8]
	FName ClipSocket;//[Offset: 0x134, Size: 0x8]
	FName OldClipSocket;//[Offset: 0x13c, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x144, Size: 0x8]
	FName GunStockSocket;//[Offset: 0x14c, Size: 0x8]
	SolarWeapon* MyWeaponActor;//[Offset: 0x158, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x160, Size: 0x8]
	void UpdateSkin(WeaponSkinData* SkinData);// 0x4c94294
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x4c940b4
	void UpdateHoldView(bool bLocal);// 0x4c94338
	bool SinglePartHasInitilized(WeaponPartComp* Part);// 0x4c947dc
	void ShowParts(bool Show);// 0x4c95018
	void SetSinglePartSkin(WeaponPartComp* Part, WeaponSkinData* SkinData);// 0x4c94930
	void ResetSkin();// 0x4c94280
	void ResetPartSkin(WeaponPartComp* Part);// 0x4c9488c
	bool OverrideWeaponAmmoConfig(int InFireModeType, int InAmmoId);// 0x4c946ec
	bool IsPartExist(int ID);// 0x4c94e08
	bool IsDefaultPart(const int PartID);// 0x4c94f68
	bool IsAmmoExist(int ID);// 0x4c94a14
	void InitEffectData(out const float[] hipV, out const float[] shoulderV, out WeaponPartsNetData Data);// 0x4c94538
	void InitAllPartsEffectData(out WeaponPartsNetData Data);// 0x4c94ac4
	bool HasInitilizeFinish();// 0x4c94248
	WeaponPartComp*[] GetWeaponParts();// 0x4c94eb8
	int GetPartsTypeByID(int ID);// 0x4c94d5c
	FString GetPartsBpByID(int ID);// 0x4c94bb8
	int GetPartLevelByID(int ID);// 0x4c94cb0
	WeaponPartsNetData GetNetData();// 0x4c943e4
	void AttachToRightSocket(WeaponPartComp* PartComp);// 0x4c941a4

--------------------------------
Class: WeaponPartRunesComp.ActorComponent.Object
	int[] Runes;//[Offset: 0xb0, Size: 0x10]
	void UpdateData(out const int[] Data);// 0x4c93a30
	void OnInitilizeServer();// 0x4c93a1c
	void OnInitilizeClient();// 0x4c93a08
	bool IsValid();// 0x4c93b24
	enum GetPartType();// 0x4c93af0

--------------------------------
Class: WeaponPartScopeComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	bool bOpenProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 0x1]
	float OpenTime;//[Offset: 0x66c, Size: 0x4]
	float CostTime;//[Offset: 0x670, Size: 0x4]
	StaticMesh* LodXStaticMesh;//[Offset: 0x678, Size: 0x8]
	float FovValue;//[Offset: 0x680, Size: 0x4]
	float HipToAdsTime;//[Offset: 0x684, Size: 0x4]
	CurveFloat* FovChangeCurve;//[Offset: 0x688, Size: 0x8]
	float HitEffectScale;//[Offset: 0x690, Size: 0x4]
	void OpenScope(float Time);// 0x4c98984
	bool IsOpened();// 0x4c98938
	bool IsNeedThermalImage();// 0x4c98b04
	int GetScopeType();// 0x4c98904
	Vector GetScopeAimCenterPoint();// 0x4c98a28
	Rotator GetFPPRotation();// 0x4c98a60
	Vector GetFPPLocation();// 0x4c98a98
	float GetDistanceToEyeWhenScope();// 0x4c98ad0
	void CloseScope();// 0x4c98970

--------------------------------
Class: WeaponPartMuzzleComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x4c933d4
	bool HasFlameArrester();// 0x4c9339c

--------------------------------
Class: WeaponPartGripComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartGunStockComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MultiHitResult.HitResult
	byte Num;//[Offset: 0x88, Size: 0x1]
	byte Seed;//[Offset: 0x89, Size: 0x1]
	byte Mode;//[Offset: 0x8a, Size: 0x1]
	Vector_NetQuantize Start;//[Offset: 0x8c, Size: 0xc]
	Vector_NetQuantize End;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarEnergyShield.SummonItemBase.Pawn.Actor.Object
	ParticleSystem* HitEffect;//[Offset: 0x2d8, Size: 0x8]
	ParticleSystem* VehicleWholeShieldBrokenEffect;//[Offset: 0x2e0, Size: 0x28]
	Vector HitEffectScale;//[Offset: 0x308, Size: 0xc]
	byte OwnerTeam;//[Offset: 0x314, Size: 0x1]
	<Actor*,float> OverlapActorsTimeMap;//[Offset: 0x318, Size: 0x50]
	float OverlapActorIntervalTime;//[Offset: 0x368, Size: 0x4]
	float BounceForceToUniqueSkill;//[Offset: 0x36c, Size: 0x4]
	void PlaySkillStartSound();// 0x49dcc60
	void PlaySkillEndSound();// 0x49dcc4c
	void PlayHitEffectOnVehicleWholeShield(int IndexToPlayHitEffect, out const Vector HitLocation);// 0x505573c
	void PlayHitEffect(out const HitResult HitResult);// 0x49dd000
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x49dcc74
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x49dcde0
	void ChangeColor();// 0x505573c

--------------------------------
Class: SummonItemBase.Pawn.Actor.Object
	AkComponent* AkAudioComponent;//[Offset: 0x298, Size: 0x8]
	float MaxHealth;//[Offset: 0x2a0, Size: 0x4]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2a4, Size: 0x4]
	SolarCharacter* SourceSummoner;//[Offset: 0x2a8, Size: 0x8]
	float CurrentHealth;//[Offset: 0x2b0, Size: 0x4]
	float ReducedHealth;//[Offset: 0x2b4, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0x2b8, Size: 0x4]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	float TimerMaxTime;//[Offset: 0x2c0, Size: 0x4]
	float Timer;//[Offset: 0x2c4, Size: 0x4]
	bool bEnableTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	void SwitchTimer(bool InbEnable, float InMaxTime);// 0x4c53d30
	void Suicide();// 0x4c540e0
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x4c53e24
	bool RequestPlaySound(out const FString[] InSoundData);// 0x4c53f38
	void ReceiveUpdateTimerEvent(float InTimerRate);// 0x505573c
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x505573c
	void ReceiveDeathEvent();// 0x505573c
	void OnRep_CurrentHealth();// 0x4c54038
	bool IsDead();// 0x4c540a8
	SolarCharacter* GetSourceSummoner();// 0x4c5408c
	class Object GetClassType();// 0x4c53cf4
	Vector GetCenterLocation();// 0x4c5404c

--------------------------------
Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int SingleMaxTimes;//[Offset: 0x4, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x8, Size: 0x4]
	int TotalMinTimes;//[Offset: 0xc, Size: 0x4]
	int NetSetTimes;//[Offset: 0x10, Size: 0x4]
	int DropedTimes;//[Offset: 0x14, Size: 0x4]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 0x50]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 0x10]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	FString VehicleBP;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: SolarInteractableManager.SolarGameManager.Object
	int ZoneNum;//[Offset: 0x48, Size: 0x4]
	int TotalNum;//[Offset: 0x4c, Size: 0x4]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x50, Size: 0x10]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 0x4]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	int Zone;//[Offset: 0x244, Size: 0x4]
	float MaxTirggerDistance;//[Offset: 0x248, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x24c, Size: 0x4]
	GameplayTag CDTag;//[Offset: 0x250, Size: 0x8]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	float CoolDownTime;//[Offset: 0x25c, Size: 0x4]
	float CostEnergy;//[Offset: 0x260, Size: 0x4]
	float RemainCDTime;//[Offset: 0x264, Size: 0x4]
	SphereComponent* CollisionComp;//[Offset: 0x268, Size: 0x8]
	StaticMeshComponent* NormalMesh;//[Offset: 0x270, Size: 0x8]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x278, Size: 0x8]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x280, Size: 0x8]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x288, Size: 0x4]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x4ae6850
	void ServerInitailizeAbility();// 0x4ae67d0
	void OnResetCD();// 0x4ae6800
	void OnRep_Broken();// 0x4ae683c
	void OnRep_BInCD();// 0x4ae6828
	void OnRadarStationCDChanged();// 0x4ae6814
	void OnPlayStartScanEffect();// 0x505573c
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x4ae66cc
	void OnClientStartScan();// 0x4ae67e4
	void OnBrokenChanged(bool InBroken);// 0x505573c
	void InitailizeAbilityParams();// 0x4ae67bc
	float GetAbilityReaminingCD();// 0x4ae6630
	float GetAbilityCostEnergy();// 0x4ae6698
	float GetAbilityCooldown();// 0x4ae6664
	bool CanActivateNow();// 0x4ae6900

--------------------------------
Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x228, Size: 0x1]
	byte bUseSceneActorOptimization;//[Offset: 0x234, Size: 0x1]
	void SetUserActor(Actor* InUser);// 0x4a61cb8
	void InteractWithActor(Actor* InActor);// 0x505573c
	Actor* GetUserActor();// 0x4a61c84

--------------------------------
Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 0x20]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1328, Size: 0x20]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x4a9d944

--------------------------------
Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 0x8]
	float CostEnergy;//[Offset: 0x408, Size: 0x4]
	SolarInteractableActor* GetAbilityInstigator();// 0x4a9e8b8
	Actor* GetAbilityEffectUser();// 0x4a9e884

--------------------------------
Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x240, Size: 0x4]
	int MaxShieldLevel;//[Offset: 0x244, Size: 0x4]
	float[] UpgradeEnergyCosts;//[Offset: 0x248, Size: 0x10]
	StaticMeshComponent* ShopMesh;//[Offset: 0x258, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 0x8]
	int SpawnID;//[Offset: 0x268, Size: 0x4]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	DataTable* ShopMeshPathTable;//[Offset: 0x270, Size: 0x28]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	class MapMarkBase* MapIcon;//[Offset: 0x2a0, Size: 0x28]
	int MapIconID;//[Offset: 0x2c8, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x2cc, Size: 0x4]
	int ShopID;//[Offset: 0x2d0, Size: 0x4]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	float TirggerDistance;//[Offset: 0x2d8, Size: 0x4]
	enum CurrentModeAnimType;//[Offset: 0x2dc, Size: 0x1]
	enum WantedModeAnimType;//[Offset: 0x2dd, Size: 0x1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2e0, Size: 0x10]
	DataTable* ShopMeshDataTable;//[Offset: 0x2f0, Size: 0x8]
	ElectricShopSection[] ItemSections;//[Offset: 0x2f8, Size: 0x10]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x308, Size: 0x10]
	float[] PoolRefreshTimeList;//[Offset: 0x318, Size: 0x10]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x328, Size: 0x10]
	int CurPoolGroupID;//[Offset: 0x338, Size: 0x4]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x350, Size: 0x10]
	TimerHandle[] CachedHandles;//[Offset: 0x360, Size: 0x10]
	float DemoRotationSpeed;//[Offset: 0x370, Size: 0x4]
	float DemoSwtichTime;//[Offset: 0x374, Size: 0x4]
	float DemoOffsetFromZ;//[Offset: 0x378, Size: 0x4]
	DataTable* ItemDemoBPTable;//[Offset: 0x380, Size: 0x28]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3a8, Size: 0x8]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3b0, Size: 0x50]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x400, Size: 0x8]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x408, Size: 0x8]
	ElectricShopItemDemo*[] SpawnedDemoActorList;//[Offset: 0x410, Size: 0x10]
	Object*[] CachedDemoItemsClass;//[Offset: 0x448, Size: 0x10]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x49da574
	void UpgradeShieldResponse(SolarCharacter* InCharacter);// 0x49da418
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x49da660
	bool ServerUpgradeShield(SolarCharacter* InCharacter);// 0x49da4c4
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x49d9e18
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x49da954
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x49db3c4
	bool RefreshSellingItem(const int InProductID);// 0x49d9b8c
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerId);// 0x49d9c3c
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x49da814
	void OnShopIDReplicatedBP();// 0x505573c
	void OnRep_ShopID();// 0x49daf74
	void OnRep_ItemSections();// 0x49daf60
	void OnRep_ItemCDRecords();// 0x49daf4c
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x49d9d74
	void OnPlayWeaponUpgradeAnim();// 0x505573c
	void OnPlayPurchaseAnim();// 0x505573c
	void OnPlayIdleAnim();// 0x505573c
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x49daf88
	void OnCurrentAnimFinish();// 0x49daaa0
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x49db0f4
	bool IsProductRecommendEquipType(const enum ProductType);// 0x49da764
	bool IsInteractable(SolarCharacter* InCharacter);// 0x49db314
	void InitWeaponUpgradeEnergyCost();// 0x49da750
	void InitializeElectricShop();// 0x49db518
	float GetServerWorldTime();// 0x49d9d40
	float GetRemainingCD(const int ProductID);// 0x49da36c
	float GetDiscountedPrice(SolarCharacter* BuyerCharacter, float Price);// 0x49d9f90
	void GetDiscountedItem(SolarCharacter* BuyerCharacter, out ElectricShopItem OutItem);// 0x49da080
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x49da174
	FString GetBuyerID(const int ProductID);// 0x49da274
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x49d9ad0
	void ClientUpgradeWeaponSuccess();// 0x49dac50
	void ClientUpgradeShieldSuccess();// 0x49dab58
	void ClientUpdateModelAnim();// 0x505573c
	void ClientPurchaseSuccess();// 0x49daf38
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x49dab6c
	void ClientHUDUpgradeShieldSuccess(SolarCharacter* InCharacter);// 0x49daab4
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x49dae50
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x49dac64
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x49dad08
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x49dadac
	void AddInstigator(SolarCharacter* InCharacter);// 0x49db474

--------------------------------
Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x320, Size: 0x8]
	Vector2D MarkIconRealLoc;//[Offset: 0x328, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x330, Size: 0x8]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	enum MarkerType;//[Offset: 0x339, Size: 0x1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 0x1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b, Size: 0x1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]
	Actor* TargetActorRef;//[Offset: 0x340, Size: 0x8]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x48c9c18
	void SetUpdateState(bool ShouldUpdateLocation);// 0x48c9924
	void SetMarkPos(out const Vector Loc);// 0x48c9874
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x48c9a70
	void SetColorOpacityIndex(byte InColorOpacityIndex);// 0x48c97d4
	void OnBigMapOpen();// 0x505573c
	void InitVehicleMarkIcon(int VehicleID);// 0x505573c
	void InitStaticIcon(int MarkID);// 0x48c9b6c
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x48c9cbc
	void EdgeFix(Vector2D Pos);// 0x48c99d0
	void CleanData();// 0x505573c

--------------------------------
Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x320, Size: 0x4]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x328, Size: 0x50]
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x505573c
	void RemoveDotLineOnMap(int DotLineID);// 0x505573c
	void RemoveAllMapMarks();// 0x48d0078
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x48d008c
	void PlayVoiceOnMiniMap(enum InVoiceType, out const MapVoiceData InVoiceData);// 0x48cfed0
	void MapScaleFormat(MapMarkBase* MapMark);// 0x48cffd4
	void Lua_MapScaleFormat(MapMarkBase* MapMark);// 0x505573c
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x505573c
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x505573c
	void InitMapMarkPool();// 0x48d0244
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x48d018c
	bool EdgeSupportMarkFix(MapMarkBase* InMarkInstance, out Vector2D FixedPos);// 0x505573c
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x505573c
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x505573c

--------------------------------
Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 0x8]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 0x10]
	float CoolDownDuration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Prize;//[Offset: 0x4, Size: 0x4]
	int Num;//[Offset: 0x8, Size: 0x4]
	int ProductID;//[Offset: 0xc, Size: 0x4]
	float CoolDown;//[Offset: 0x10, Size: 0x4]
	int Generation;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float EndWorldTime;//[Offset: 0x8, Size: 0x4]
	FString BuyerID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 0x4]
	float PoolRefreshTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ElectricShopItemDemo.Actor.Object

--------------------------------
Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 0x8]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 0x8]
	static bool UseRenderThread();// 0x4aabfe4
	static bool SupportsMultithreading();// 0x4aabdac
	static double Seconds();// 0x4aacc10
	void ReceiveShutdown();// 0x505573c
	void ReceiveInit();// 0x505573c
	static bool IsThisApplicationForeground();// 0x4aac25c
	static bool IsRunningOnBattery();// 0x4aabde4
	static bool Is64bitOperatingSystem();// 0x4aac5b4
	static int64 GetVideoMemory();// 0x4aabcdc
	FString GetUniqueDeviceId();// 0x4aaccac
	static FString GetTimeZoneId();// 0x4aabf34
	static FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x4aaca74
	SolarPlatformStats* GetSolarPlatformStats();// 0x4aacc44
	int GetSimultaneousInstanceId();// 0x4aacc78
	static FString GetPrimaryGPUBrand();// 0x4aac69c
	static FString GetPathVarDelimiter();// 0x4aac990
	static void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x4aac4a0
	static FString GetOSVersion();// 0x4aac3f0
	static uint32 GetMoniterWidth();// 0x4aabd44
	static uint32 GetMoniterRefreshRate();// 0x4aabd10
	static uint32 GetMoniterHeight();// 0x4aabd78
	static int GetMaxPathLength();// 0x4aaca40
	GameUserSettings* GetGameUserSettings();// 0x4aacba8
	static FString GetEnvironmentVariable(FString VariableName);// 0x4aac01c
	Engine* GetEngine();// 0x4aacbdc
	static bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x4aac294
	static float GetDeviceTemperatureLevel();// 0x4aabe1c
	static FString GetDeviceMakeAndModel();// 0x4aac5ec
	static FString GetDefaultDeviceProfileName();// 0x4aabe84
	static FString GetCPUVendor();// 0x4aac8e0
	static uint32 GetCPUInfo();// 0x4aac8ac
	static FString GetCPUChipset();// 0x4aac74c
	static FString GetCPUBrand();// 0x4aac7fc
	static int GetBatteryLevel();// 0x4aabe50
	static FString ClipboardPaste();// 0x4aac10c
	static void ClipboardCopy(FString str);// 0x4aac1bc

--------------------------------
Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 0x8]
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x3aa89b4
	void ReceiveShutdown();// 0x505573c
	void ReceivePostWorldInitialization(World* World);// 0x3aa89b4
	void ReceiveInit();// 0x505573c
	uint64 GetRHIUsedMemory();// 0x4aadd70
	float GetRenderThreadTime();// 0x4aadda4
	int GetNumDrawCalls();// 0x4aade0c
	int GetMinFPS();// 0x3aa89b4
	float GetGameThreadTime();// 0x4aaddd8
	int GetAverageFPS();// 0x3aa89b4

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x6bf90d8
	bool SupportsHDRDisplayOutput();// 0x6bf8c8c
	void SetVSyncEnabled(bool bEnable);// 0x6bfa22c
	void SetVisualEffectQuality(int Value);// 0x6bf93f0
	void SetViewDistanceQuality(int Value);// 0x6bf9750
	void SetToDefaults();// 0x6bf8fd0
	void SetTextureQuality(int Value);// 0x6bf94c8
	void SetShadowQuality(int Value);// 0x6bf9678
	void SetShadingQuality(int Value);// 0x6bf9168
	void SetScreenResolution(IntPoint Resolution);// 0x6bfa418
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x6bf9898
	void SetResolutionScaleValue(int NewScaleValue);// 0x6bf993c
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x6bf97f4
	void SetPostProcessingQuality(int Value);// 0x6bf9318
	void SetOverallScalabilityLevel(int Value);// 0x6bf9da8
	void SetFullscreenMode(byte InFullscreenMode);// 0x6bfa30c
	void SetFrameRateLimit(float NewLimit);// 0x6bf9e88
	void SetFoliageQuality(int Value);// 0x6bf9240
	void SetDynamicResolutionEnabled(bool bEnable);// 0x6bfa148
	void SetBenchmarkFallbackValues();// 0x6bf9fec
	void SetAudioQualityLevel(int QualityLevel);// 0x6bf9f48
	void SetAntiAliasingQuality(int Value);// 0x6bf95a0
	void SaveSettings();// 0x6bf9008
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x6bf8ce8
	void RevertVideoMode();// 0x6bfa000
	void ResetToCurrentSettings();// 0x6bf8fec
	void LoadSettings(bool bForceReload);// 0x6bf9024
	bool IsVSyncEnabled();// 0x6bfa1f4
	bool IsVSyncDirty();// 0x6bfa068
	bool IsScreenResolutionDirty();// 0x6bfa0d8
	bool IsHDREnabled();// 0x6bf8b2c
	bool IsFullscreenModeDirty();// 0x6bfa0a0
	bool IsDynamicResolutionEnabled();// 0x6bfa110
	bool IsDynamicResolutionDirty();// 0x6bfa030
	bool IsDirty();// 0x6bf90f4
	int GetVisualEffectQuality();// 0x6bf93bc
	int GetViewDistanceQuality();// 0x6bf971c
	int GetTextureQuality();// 0x6bf9494
	static int GetSyncInterval();// 0x6bf8e80
	int GetShadowQuality();// 0x6bf9644
	int GetShadingQuality();// 0x6bf9134
	IntPoint GetScreenResolution();// 0x6bfa528
	float GetResolutionScaleNormalized();// 0x6bf99e0
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x6bf9a14
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x6bf9bc0
	float GetRecommendedResolutionScale();// 0x6bf8f58
	byte GetPreferredFullscreenMode();// 0x6bfa2d8
	int GetPostProcessingQuality();// 0x6bf92e4
	int GetOverallScalabilityLevel();// 0x6bf9d6c
	IntPoint GetLastConfirmedScreenResolution();// 0x6bfa4f0
	byte GetLastConfirmedFullscreenMode();// 0x6bfa3b0
	static GameUserSettings* GetGameUserSettings();// 0x6bf8e18
	byte GetFullscreenMode();// 0x6bfa3e4
	float GetFrameRateLimit();// 0x6bf9e54
	static int GetFramePace();// 0x6bf8e4c
	int GetFoliageQuality();// 0x6bf920c
	IntPoint GetDesktopResolution();// 0x6bfa4b8
	static IntPoint GetDefaultWindowPosition();// 0x6bf8ee8
	static byte GetDefaultWindowMode();// 0x6bf8eb4
	float GetDefaultResolutionScale();// 0x6bf8f94
	static IntPoint GetDefaultResolution();// 0x6bf8f20
	int GetCurrentHDRDisplayNits();// 0x6bf8b64
	int GetAudioQualityLevel();// 0x6bf9f2c
	int GetAntiAliasingQuality();// 0x6bf956c
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x6bf8b98
	void ConfirmVideoMode();// 0x6bfa014
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x6bfa628
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x6bfa560
	void ApplyNonResolutionSettings();// 0x6bfa60c
	void ApplyHardwareBenchmarkResults();// 0x6bf8ccc

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 0x18]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x658, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 0x10]
	int TickCycles;//[Offset: 0x7c0, Size: 0x4]
	int GameCycles;//[Offset: 0x7c4, Size: 0x4]
	int ClientCycles;//[Offset: 0x7c8, Size: 0x4]
	float NearClipPlane;//[Offset: 0x7cc, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 0x8]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 0x10]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	enum TransitionType;//[Offset: 0x8e8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	float MeshLODRange;//[Offset: 0x910, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 0x4]
	float DisplayGamma;//[Offset: 0x94c, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b8, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c8, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9cc, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d0, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc20, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc30, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc40, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc50, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc54, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc68, Size: 0x4]

--------------------------------
Class: RuntimeAssetsCollectionBase.Object

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x6d9778c
	enum GetSynchronizationState();// 0x6d976a8
	QualifiedFrameTime GetQualifiedFrameTime();// 0x6d9782c
	FrameRate GetFrameRate();// 0x6d976e4
	Timecode GetDelayedTimecode();// 0x6d97720
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x6d977f8

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x4c8ad1c

--------------------------------
Class: IMChatObject.Object
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition);// 0x48bd1d4

--------------------------------
Class: SolarLuaManager.Object
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x40, Size: 0x18]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x60, Size: 0x8]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x4a8a0f0
	void OnLuaContextCleanup(bool bFullCleanup);// 0x3aa89b4
	static enum GetBuildConfiguration();// 0x4a8a194
	void AddToDoNotShowAgainList(FString Msg);// 0x4a8a040

--------------------------------
Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x505573c

--------------------------------
Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 0x10]
	FString LogTypeName;//[Offset: 0x40, Size: 0x10]
	SolarGameInstanceBase* Owner;//[Offset: 0x50, Size: 0x8]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x58, Size: 0x28]
	static SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x4a27a4c
	void SetSwapLogFileSize(int InSize);// 0x4a27f64
	void SetSwapLogFileInterval(int InInterval);// 0x4a27ec8
	void SetLogValueSeparater(FString InValueSeparater);// 0x4a27ddc
	void SetLogTerminator(FString InTerminator);// 0x4a27c04
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x4a28188
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x4a28274
	void SetLogFileExtension(FString InLogFileExtension);// 0x4a2809c
	void SetLogFileDir(FString InLogFileDir);// 0x4a28360
	void SetLogElementSeparater(FString InElementSeparater);// 0x4a27cf0
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x4a28000
	void ReceiveShutdown();// 0x3aa89b4
	void ReceiveInit();// 0x3aa89b4
	void NotifyBattleStart(FString InBattleID);// 0x4a28e48
	void NotifyBattleEnd();// 0x4a28e34
	static void LogInternal(FString InLog);// 0x4a27870
	static void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x4a28b64
	static void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x4a28ca4
	static void LogGameStats_Key(FString InKey);// 0x4a28d94
	bool IsUseEmptyHeadData(FString InPlayerId);// 0x3aa89b4
	int GetSwapLogFileSize();// 0x4a2874c
	int GetSwapLogFileInterval();// 0x4a28728
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0x3aa89b4
	static FString GetProperLogElement(FString InElement);// 0x4a27910
	FString GetLogValueSeparater();// 0x4a28634
	FString GetLogTerminator();// 0x4a2844c
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x4a27b28
	FString GetLogFileNameSuffix();// 0x4a28888
	FString GetLogFileNamePrefix();// 0x4a2897c
	FString GetLogFileExtension();// 0x4a28794
	FString GetLogFileDir();// 0x4a28a70
	FString GetLogElementSeparater();// 0x4a28540
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerId);// 0x3aa89b4
	int GetLogCheckIntervalMS();// 0x4a28770
	FString GetHeadDataString(FString InPlayerId);// 0x3aa89b4
	FString GetEmptyHeadDataString();// 0x3aa89b4

--------------------------------
Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 0x4]
	int PIEInstance;//[Offset: 0x4, Size: 0x4]
	FString BattleID;//[Offset: 0x8, Size: 0x10]
	FString WorldName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int weaponid;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	int[] Parts;//[Offset: 0x18, Size: 0x10]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CrashReportManager.Object
	void SetUserId(out FString UserId);// 0x4880a38
	static void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x48808fc

--------------------------------
Class: SolarPopPanelManager.SolarGameManager.Object

--------------------------------
Class: SolarApplicationLifetimeManager.SolarGameManager.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 0x8]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 0x8]
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0x3aa89b4
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0x3aa89b4

--------------------------------
Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x38, Size: 0x50]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x88, Size: 0x50]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xd8, Size: 0x50]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x128, Size: 0x50]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x178, Size: 0x50]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1c8, Size: 0x50]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x218, Size: 0x50]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x268, Size: 0x50]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2b8, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 0x50]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 0x8]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 0x8]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 0x8]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 0x8]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 0x8]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 0x4]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 0x8]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 0x8]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 0x8]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 0x50]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 0x50]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 0x50]
	void UpdateCanSendSaveMsg();// 0x4a41b30
	void UpdateCameraLayer(int NewLayer);// 0x3aa89b4
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x4a41fc0
	bool TrySaveAllHomeActors();// 0x4a41b94
	void TryResetAllHomeActors();// 0x4a41b80
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x4a41d4c
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x4a41e40
	void TryRemoveAllInvalidHomeActors();// 0x4a41b6c
	void TryRemoveAllHomeActors();// 0x4a41b58
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x4a41bcc
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x4a42198
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x4a420dc
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x4a42254
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x3aa89b4
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x4a41f00
	void SetLastSelectingThisID(out const FString InThisID);// 0x4a42878
	void SetLastCreateThisID(out const FString InThisID);// 0x4a42768
	void SetIsConstruct(bool bNewConstruct);// 0x4a42530
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x4a41608
	void SetHoldingType(enum NewType);// 0x4a42454
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x4a41a3c
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x4a42a74
	void SetCurBuildingID(int NewItemID);// 0x4a425d8
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x3aa89b4
	void SelectHomeActor_Other(FString ThisID);// 0x3aa89b4
	void SaveBuilding_Request(bool bSave);// 0x3aa89b4
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x4a416f8
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x3aa89b4
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x3aa89b4
	void RemoveAllHomeActors_Request();// 0x3aa89b4
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x3aa89b4
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x3aa89b4
	bool OnIsDragChanged(bool bIsDrag);// 0x3aa89b4
	void OnInvalidActorsCountChanged(int NewCount);// 0x3aa89b4
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x4a42370
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x3aa89b4
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x3aa89b4
	void NotifyWhenClickActorOnOtherFloor();// 0x3aa89b4
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x3aa89b4
	void NotifyLoadingUIChanged(bool bShow);// 0x3aa89b4
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x4a418c4
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x4a417e0
	bool HasFoundation();// 0x4a40ae0
	DataTable* GetTextureDataTable();// 0x4a42f64
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x4a40bbc
	SolarHomeShaderConfig* GetShaderConfig();// 0x4a42f98
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] outData);// 0x4a40e78
	FString GetLastCreateThisID();// 0x4a4267c
	int GetInvalidActorsCount();// 0x4a40cfc
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x4a42bb0
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x4a42b7c
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x4a42be4
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x4a42fcc
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x4a42d84
	enum GetHomeActorSecondType(int ItemID);// 0x3aa89b4
	enum GetHomeActorFirstType(int ItemID);// 0x3aa89b4
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x4a43264
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x4a430d4
	FString GetCurSelectingThisID();// 0x4a42988
	enum GetCurHoldingItemType();// 0x4a424f8
	int GetCurBuildingID();// 0x4a42514
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x4a40fc4
	void ExportHomeActorDataToPath(FString FilePath);// 0x3aa89b4
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x3aa89b4
	void DeSelectAllHomeActors_Request();// 0x4a41b44
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x3aa89b4
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x3aa89b4
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x4a4121c
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x4a412f0
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x4a41074
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x4a41148
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x4a413c4
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x4a414d8
	void Clear();// 0x4a40ce8
	void ChangeCameraLayer(int DeltaLayer);// 0x4a40b18
	bool CanPreviewWithBuilding(int TypeID);// 0x3aa89b4
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x4a40d18

--------------------------------
Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 0x10]
	FString ParentThisID;//[Offset: 0x30, Size: 0x10]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 0x10]
	FString TexturesID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x228, Size: 0x8]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x230, Size: 0x38]
	HomeActorServerData HomeActorServerData;//[Offset: 0x268, Size: 0x68]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d0, Size: 0x50]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x330, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x338, Size: 0x10]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x348, Size: 0x50]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x398, Size: 0x8]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a0, Size: 0x10]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b0, Size: 0x10]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x4a3e954
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x4a3f100
	void SetStaticData(out const HomeActorStaticData NewData);// 0x4a3f554
	void SetServerData(out const HomeActorServerData NewData);// 0x4a3f480
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x4a3f364
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4a3ecb8
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4a3ee2c
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x4a3f1f0
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x4a3ea28
	void OnCanSaveChanged(bool bNewCanSave);// 0x4a3f054
	DataTable* GetTextureDataTable();// 0x4a3f2e0
	StaticMeshComponent* GetStaticMeshComp();// 0x4a3e7f8
	HomeActorStaticData GetStaticData();// 0x4a3ec98
	SolarHomeShaderConfig* GetShaderConfig();// 0x4a3f314
	HomeActorServerData GetServerData();// 0x4a3ec78
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x4a3eb78
	enum GetHitSurface(out const Vector HitNormal);// 0x4a3e89c
	bool GetCanSave();// 0x4a3f348
	bool CanSelected();// 0x4a3e82c
	bool CanRemove();// 0x4a3e864

--------------------------------
Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FString ThisID;//[Offset: 0x8, Size: 0x10]
	enum Owner;//[Offset: 0x18, Size: 0x4]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	Vector CurLocation;//[Offset: 0x20, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x2c, Size: 0xc]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 0x10]
	FString ParentObject;//[Offset: 0x48, Size: 0x10]
	FString[] ChildObjects;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	enum FirstType;//[Offset: 0x8, Size: 0x4]
	enum SecondType;//[Offset: 0xc, Size: 0x4]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	FString BpPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: HomeOriginalShader

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x4c8, Size: 0xc]
	float LineThickness;//[Offset: 0x4d4, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x6b8aaac
	Vector GetUnscaledBoxExtent();// 0x6b8aa50
	Vector GetScaledBoxExtent();// 0x6b8aa74

--------------------------------
Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 0x50]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 0x18]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 0x10]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 0x10]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 0x10]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 0x10]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 0x4]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 0x4]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 0x4]

--------------------------------
Class: SolarHomeDragUI.Actor.Object

--------------------------------
Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x228, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x230, Size: 0x10]
	BaseSpaceData BaseSpaceData;//[Offset: 0x240, Size: 0xc]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x4a49c9c
	void ShowBaseSpace();// 0x4a49ba4
	void OnBaseSpaceUnOccupied();// 0x4a49b68
	void OnBaseSpaceOccupied();// 0x4a49b7c
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x4a49bb8
	void HideBaseSpace();// 0x4a49b90
	BaseSpaceData GetData();// 0x4a49b44

--------------------------------
Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 0x4]
	enum BaseSpaceType;//[Offset: 0x4, Size: 0x4]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x298, Size: 0x8]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a0, Size: 0x50]
	<float,int> LayerMap;//[Offset: 0x2f0, Size: 0x50]
	float FloorUnit;//[Offset: 0x360, Size: 0x4]
	float WallUnit;//[Offset: 0x364, Size: 0x4]
	float BaseUnit;//[Offset: 0x368, Size: 0x4]
	float RoundOnBase;//[Offset: 0x36c, Size: 0x4]
	float RoundOnFloor;//[Offset: 0x370, Size: 0x4]
	float ArrowOnBase;//[Offset: 0x374, Size: 0x4]
	float ArrowOnFloor;//[Offset: 0x378, Size: 0x4]
	float ArrowToWall;//[Offset: 0x37c, Size: 0x4]
	Transform[] BasisFloorsTransArr;//[Offset: 0x388, Size: 0x10]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	void OpenAirWall();// 0x4a4e7cc
	void Init(int InBuildWidth, int InBuildHeight);// 0x4a4e7fc
	bool GetIsAirWallOpen();// 0x4a4e7e0
	void CloseAirWall();// 0x4a4e7b8

--------------------------------
Class: SolarHomePlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0xa00, Size: 0x8]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xa08, Size: 0x8]
	SolarHomeActor* DragActor;//[Offset: 0xa10, Size: 0x8]
	float MinCheckDistance;//[Offset: 0xa18, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xa1c, Size: 0x4]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xa20, Size: 0x8]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa29, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0xa30, Size: 0x8]
	float MoveCheckDis;//[Offset: 0xa38, Size: 0x4]
	float CheckDis;//[Offset: 0xbd0, Size: 0x4]
	SolarHomeCameraManager* CameraManager;//[Offset: 0xc60, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0xc68, Size: 0xc]
	Vector OriginalLookAtLocation;//[Offset: 0xc74, Size: 0xc]
	Actor* CurrentViewTarget;//[Offset: 0xc80, Size: 0x8]
	Actor* OriginalViewTarget;//[Offset: 0xc88, Size: 0x8]
	void StopBuilding();// 0x4a4d758
	void StartFadeOutEffect();// 0x4a4d700
	void StartBuilding();// 0x4a4d76c
	void SolarGM_Home_ResetLayer(int InLayer);// 0x4a4d104
	void SolarGM_FillUpHome();// 0x4a4d0f0
	void SolarGM_ExportHomeActorToPath(FString FilePath);// 0x4a4d040
	void ShowBuildMainUI(bool bShow);// 0x505573c
	void SetNormalCameraTarget();// 0x4a4d34c
	void SetConstructionCameraTarget();// 0x4a4d360
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x505573c
	void ResetConstructionCamera();// 0x4a4d1bc
	void ResetCameraRotation();// 0x4a4d1a8
	void OnTouchMove(int Index, out const Vector Location);// 0x4a4d518
	void OnTouchEnd(int Index, out const Vector Location);// 0x4a4d424
	void OnTouchBegin(int Index, out const Vector Location);// 0x4a4d60c
	void OnDragBegin(out const Vector Location);// 0x4a4d374
	void OnCameraRight(const float Value);// 0x4a4d1d0
	void OnCameraForward(const float Value);// 0x4a4d274
	bool GetIsConstruction();// 0x4a4d73c
	int GetCameraCurrentLayer();// 0x4a4d318
	void BindConstructionInput();// 0x4a4d728
	void BindBattleInput();// 0x4a4d714

--------------------------------
Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	Vector Loction;//[Offset: 0x28, Size: 0xc]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 0x1]
	byte RollByte;//[Offset: 0x35, Size: 0x1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 0x4]
	byte MovementMode;//[Offset: 0x3c, Size: 0x1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 0x4]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 0x4]
	byte JetPackFlag;//[Offset: 0x48, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xb8, Size: 0x68]
	Vector LookAtLocation;//[Offset: 0x134, Size: 0xc]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x140, Size: 0x8]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x150, Size: 0x8]
	CameraActor* BuildCamera;//[Offset: 0x158, Size: 0x8]
	Actor* BattleCamera;//[Offset: 0x160, Size: 0x8]
	CameraComponent* BuildCameraComp;//[Offset: 0x168, Size: 0x8]
	void UpdateSliderScaleUI(float InScale);// 0x505573c
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x505573c
	void SetNormalCameraTarget();// 0x4a4b778
	void SetConstructionCameraTarget();// 0x4a4b78c
	void RotateCameraSpin(const float Value);// 0x4a4b2f4
	void RotateCameraPitch(const float Value);// 0x4a4b398
	void MoveCameraRight(const float Value);// 0x4a4b43c
	void MoveCameraForward(const float Value);// 0x4a4b4e0
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x4a4b584
	bool ChangeCameraMode(enum InMode);// 0x4a4b7a0
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x4a4b850
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x4a4b944

--------------------------------
Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 0x4]
	float MouseMoveScale;//[Offset: 0x4, Size: 0x4]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 0x4]
	float MouseZoomScale;//[Offset: 0xc, Size: 0x4]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 0x4]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 0x4]
	float MouseRotateScale;//[Offset: 0x18, Size: 0x4]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 0x4]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 0x4]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 0x8]
	float DefultTime;//[Offset: 0x38, Size: 0x4]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 0x8]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 0x4]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 0x8]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 0x18]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 0x10]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 0x4]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 0x18]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 0x4]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 0x10]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 0x10]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarWaterActorNew.StaticMeshActor.Actor.Object
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4c19afc
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4c19c68

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x231, Size: 0x1]
	void SetMobility(byte InMobility);// 0x6d88480

--------------------------------
Class: HomeShaderData

--------------------------------
Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 0x10]
	static void SolarDebugLog(enum Channel, FString Message);// 0x4a1f9b8
	static void EnableDebugLogChannel(enum Channel);// 0x4a1f924
	static void DisableDebugLogChannel(enum Channel);// 0x4a1f890

--------------------------------
Class: SCustomizedGameModeManager.Object
	SolarGameMode_JobManager* JobManager;//[Offset: 0x30, Size: 0x8]
	SolarGameMode_DataManager* DataManager;//[Offset: 0x38, Size: 0x8]
	SolarGameMode_PlayerManager* PlayerManager;//[Offset: 0x40, Size: 0x8]
	SolarGameMode_CharacterManager* CharacterManager;//[Offset: 0x48, Size: 0x8]
	SolarGameMode_LevelManager* LevelManager;//[Offset: 0x50, Size: 0x8]
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x58, Size: 0x8]
	SolarGameMode_EffectJobManager* EffectJobManager;//[Offset: 0x60, Size: 0x8]
	SCustomizedMode_AttributeManager* AttributeManager;//[Offset: 0x68, Size: 0x8]
	SolarGameModeData* GameModeData;//[Offset: 0x70, Size: 0x8]
	void InitModeById(int ModeID);// 0x491c0e8

--------------------------------
Class: SolarGameMode_JobManager.Object
	<FString,GameMode_SideData*> SideList;//[Offset: 0x38, Size: 0x50]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0x88, Size: 0x8]
	DataTable* CurrentModeJobData;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: GameMode_SideData.Object
	<FString,GameMode_JobData*> JobList;//[Offset: 0x28, Size: 0x50]
	SGameMode_Player*[] PlayerList;//[Offset: 0x78, Size: 0x10]
	FString Name;//[Offset: 0x88, Size: 0x10]
	int SideIndex;//[Offset: 0x98, Size: 0x4]
	int MatchCount;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: GameMode_JobData.Object
	SGameMode_Player*[] PlayerList;//[Offset: 0x28, Size: 0x10]
	FString Name;//[Offset: 0x38, Size: 0x10]
	FString[] Tags;//[Offset: 0x48, Size: 0x10]
	GameMode_JobManagerRow JobData;//[Offset: 0x58, Size: 0x120]
	int MatchCount;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: SGameMode_Player.Object
	Controller* Controller;//[Offset: 0x28, Size: 0x8]
	int PlayerId;//[Offset: 0x30, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x38, Size: 0x10]
	byte SolarTeamId;//[Offset: 0x48, Size: 0x1]
	byte PosInTeam;//[Offset: 0x49, Size: 0x1]
	int Gender;//[Offset: 0x4c, Size: 0x4]
	int AvatarID;//[Offset: 0x50, Size: 0x4]
	FString SideName;//[Offset: 0x58, Size: 0x10]
	FString JobName;//[Offset: 0x68, Size: 0x10]
	FString SolarNickName;//[Offset: 0x78, Size: 0x10]
	FString OS;//[Offset: 0x88, Size: 0x10]
	int UserId;//[Offset: 0x98, Size: 0x4]
	bool bIsAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	enum PlayerState;//[Offset: 0x9d, Size: 0x1]
	void OnRep_PlayerController();// 0x4a1ad08
	SolarPlayerState* GetBindedPlayerState();// 0x4a1aecc
	Pawn* GetBindedPawn();// 0x4a1af00
	SolarCharacter* GetBindedCharacter();// 0x4a1af34
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x4a1adcc
	void ClientCloseUI(FString UIName);// 0x4a1ad1c
	void BindNewCharacter(SolarCharacter* NewCharacter);// 0x4a1af68

--------------------------------
Class: GameMode_JobManagerRow.TableRowBase
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString Desc;//[Offset: 0x18, Size: 0x10]
	int Count;//[Offset: 0x28, Size: 0x4]
	int MatchCount;//[Offset: 0x2c, Size: 0x4]
	FString Side;//[Offset: 0x30, Size: 0x10]
	FString Job;//[Offset: 0x40, Size: 0x10]
	FString[] Tag;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath BP_Join;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath BP_Deploy;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath BP_Slay;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath BP_Assist;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath BP_Die;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BP_Hit;//[Offset: 0xd8, Size: 0x18]
	SoftObjectPath BP_GetHit;//[Offset: 0xf0, Size: 0x18]
	SoftObjectPath BP_ControllerLogic;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: SCustomizedGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SolarGameMode_LogicComponent* ModeLogicComponent;//[Offset: 0x4f8, Size: 0x8]
	SolarGameMode_RewardComponent* ModeRewardComponent;//[Offset: 0x500, Size: 0x8]
	SCustomizedGameModeManager* CustomModeManager;//[Offset: 0x508, Size: 0x8]
	SolarGameMode_DataManager* CustomModeDataManager;//[Offset: 0x510, Size: 0x8]
	class SolarRadarBase* RadarClass;//[Offset: 0x518, Size: 0x8]
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x505573c
	void OnReceiveBattleStart(PlayerController* PlayerController);// 0x505573c

--------------------------------
Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	class SolarChargingPile[] ChargingZoneClass;//[Offset: 0x468, Size: 0x10]
	ChargingZone[] ChargingZones;//[Offset: 0x478, Size: 0x10]
	float TimeToEnd;//[Offset: 0x488, Size: 0x4]
	delegate OnPlayerDisconnectedGame;//[Offset: 0x498, Size: 0x10]
	delegate OnPlayerReconnectedGame;//[Offset: 0x4a8, Size: 0x10]
	int SettlementStageConfigID;//[Offset: 0x4d8, Size: 0x4]
	bool bEnableTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	float InitTrackingDelay;//[Offset: 0x4e0, Size: 0x4]
	float TrackingTimeInterval;//[Offset: 0x4e4, Size: 0x4]
	float DefaultTrackRevealDistance;//[Offset: 0x4e8, Size: 0x4]
	float MinTrackDelta;//[Offset: 0x4ec, Size: 0x4]
	float TrackTimeout;//[Offset: 0x4f0, Size: 0x4]
	uint32 MaxTrackNum;//[Offset: 0x4f4, Size: 0x4]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x48f9904
	void ReceiveBattleOver();// 0x505573c
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x48f9760
	bool IsAutoSettlementWhenKilled();// 0x48f980c
	bool IsAllowReconnectGame(SolarPlayerState* Player);// 0x48f984c

--------------------------------
Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate PreStartPlay;//[Offset: 0x310, Size: 0x10]
	delegate CalledStartPlay;//[Offset: 0x320, Size: 0x10]
	delegate PostStartPlay;//[Offset: 0x330, Size: 0x10]
	delegate PreHandleMatchHasStarted;//[Offset: 0x340, Size: 0x10]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x350, Size: 0x10]
	delegate PostHandleMatchHasStarted;//[Offset: 0x360, Size: 0x10]
	delegate PreRestartPlayer;//[Offset: 0x370, Size: 0x10]
	delegate CalledRestartPlayer;//[Offset: 0x380, Size: 0x10]
	delegate PostRestartPlayer;//[Offset: 0x390, Size: 0x10]
	delegate PreEndPlay;//[Offset: 0x3a0, Size: 0x10]
	delegate CalledEndPlay;//[Offset: 0x3b0, Size: 0x10]
	delegate PostEndPlay;//[Offset: 0x3c0, Size: 0x10]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d0, Size: 0x10]
	int GamePlayMode;//[Offset: 0x3e4, Size: 0x4]
	class Actor[] ManagerClasses;//[Offset: 0x3e8, Size: 0x10]
	FString CharacterClassPath;//[Offset: 0x3f8, Size: 0x10]
	int CharacterIdInTrainningCourse;//[Offset: 0x408, Size: 0x4]
	int SkinIdInTrainningCourse;//[Offset: 0x40c, Size: 0x4]
	int BagIdInTrainingCourse;//[Offset: 0x410, Size: 0x4]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	int SpecifiedCharacterSkinID;//[Offset: 0x418, Size: 0x4]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int SpecifiedCharacterBagID;//[Offset: 0x420, Size: 0x4]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x428, Size: 0x4]
	delegate OnPostSpawnDefaultSolarCharacterAtTransform;//[Offset: 0x430, Size: 0x10]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x440, Size: 0x8]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x448, Size: 0x8]
	float[] RadarBrokenRadios;//[Offset: 0x450, Size: 0x10]
	void UpdatePlayerState(FString PlayerId, int CharacterId, int SkinId, int CharacterLevel);// 0x49ea588
	void UpdatePlayerDataForBotAI(int AIConfigID, SolarPlayerState* PlayerState);// 0x505573c
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x505573c
	void UpdateBotPlayerData(SolarPlayerState* PlayerState);// 0x505573c
	void UpdateBackpackData(FString PlayerId, int Grade, int NewUnLockNum);// 0x49ea44c
	FString TryKickOutOnlinePlayer(FString PlayerId, const bool IsAllowReconnect);// 0x49ead08
	void StartFillUpBotAI();// 0x49ea438
	void SetGamePlayMode(int InGamePlayMode);// 0x49ea744
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, bool bo);// 0x49ea8a8
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, FString Params);// 0x49eaa74
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x505573c
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x505573c
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(Controller* NewPlayer, SolarCharacter* NewCharacter);// 0x505573c
	void OnStartBattleresponded();// 0x49ea894
	bool OnPlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x49eae50
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x505573c
	void KickOutPlayerToLobby(FString InPlayerId);// 0x49eac58
	void KickOutAllPlayerToLobby();// 0x49eac44
	void InitCharacterClassPath(int CharacterId);// 0x505573c
	FString GetMonsterClassPath(int AICharacterID);// 0x505573c
	void GetMonsterAISpawnSettings(int inPlayerTeamSize, out MonsterAISpawnSettings outMonsterAISpawnSettings);// 0x505573c
	int GetGamePlayMode();// 0x49ea708
	static GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x49ea7f0
	int GetBotAINumber();// 0x505573c
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x505573c
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x505573c
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x505573c
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x505573c

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2d4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2d8, Size: 0x4]
	int NumBots;//[Offset: 0x2dc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2e4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x300, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x304, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void StartMatch();// 0x6be4b90
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x6be4958
	void Say(FString Msg);// 0x6be4a04
	void RestartGame();// 0x6be4b58
	bool ReadyToStartMatch();// 0x6be4afc
	bool ReadyToEndMatch();// 0x6be4abc
	void K2_OnSetMatchState(FName NewState);// 0x505573c
	bool IsMatchInProgress();// 0x6be4bec
	bool HasMatchEnded();// 0x6be4bac
	FName GetMatchState();// 0x6be4c2c
	void EndMatch();// 0x6be4b74
	void AbortMatch();// 0x6be4b3c

--------------------------------
Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x489b740
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x489aeb0
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x489b318
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x489b678
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x489ada8
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x489b250
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x489a838
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x489a940
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x489b4a0
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x489ab48
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x489b078
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x489b3d8
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x489aa40
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x489afb0
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x489a4d0
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x489a5d8
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x489b560
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x489ac48
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x489b138
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x489a6d8
	SolarGameMode* GetGameModeOwner();// 0x489b800

--------------------------------
Class: SolarChargingPile.SolarPile.SolarMapElementBase.Actor.Object

--------------------------------
Class: ChargingZone
	float Level1;//[Offset: 0x0, Size: 0x4]
	float Level2;//[Offset: 0x4, Size: 0x4]
	float Level3;//[Offset: 0x8, Size: 0x4]
	float Level4;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarGameMode_LogicComponent.ActorComponent.Object
	void OnPlayerQuit(SGameMode_Player* QuitPlayer);// 0x505573c
	void OnPlayerPlacedFinished(SGameMode_Player* Player, FString LevelName);// 0x505573c
	void OnPlayerOfflineTimeOut(SGameMode_Player* OfflineTimeoutPlayer);// 0x505573c
	void OnPlayerLevelLoaded(SGameMode_Player* Player, FString LevelName);// 0x505573c
	void OnPlayerJoin(SGameMode_Player* NewPlayer);// 0x505573c
	void OnPlayerJobChange(SGameMode_Player* Player, FString OldSide, FString OldJob, FString NewSide, FString NewJob);// 0x505573c
	void OnOpenSupplement();// 0x505573c
	void OnMatchEnd(const int RPCID);// 0x505573c
	void OnGameModeInit();// 0x505573c
	void OnCloseSupplement();// 0x505573c
	void OnBotAIDataReady();// 0x505573c
	void OnBattleTick(float BattleTime);// 0x505573c
	void OnBattleBegin();// 0x505573c

--------------------------------
Class: SolarGameMode_RewardComponent.ActorComponent.Object
	void OnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x505573c
	void ClientOnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x505573c

--------------------------------
Class: SolarGameMode_DataManager.Object
	<enum,SolarGameMode_DataAccessorBase*> Accessors;//[Offset: 0x40, Size: 0x50]
	SolarGameMode_JobManager* JobManager;//[Offset: 0x98, Size: 0x8]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0xa0, Size: 0x8]
	SCustomizedMode_ModeDataReady* ModeDataReadyAction;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: SolarGameMode_DataAccessorBase.Object
	SolarGameMode_RankManager* RankManager;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SolarGameMode_RankManager.Object
	SolarGameMode_RankData[] NewRanking;//[Offset: 0x30, Size: 0x10]
	SolarGameMode_RankData[] OldRanking;//[Offset: 0x40, Size: 0x10]
	<FString,SolarGameMode_RankDataMap> RankObjectList;//[Offset: 0x50, Size: 0x50]
	void RemoveRangeEvent(FString RankDataName);// 0x49f6dc4
	void BindEvent(FString RankDataName, delegate Delegate);// 0x49f6ec4

--------------------------------
Class: SolarGameMode_RankData
	Object* HostObject;//[Offset: 0x0, Size: 0x8]
	int RankingNumber;//[Offset: 0x8, Size: 0x4]
	int IntValue;//[Offset: 0xc, Size: 0x4]
	float FloatValue;//[Offset: 0x10, Size: 0x4]
	FString RankDataName;//[Offset: 0x18, Size: 0x10]
	FString ValueName;//[Offset: 0x28, Size: 0x10]
	enum DataType;//[Offset: 0x38, Size: 0x1]
	enum HostType;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: SolarGameMode_RankDataMap
	enum RankDataType;//[Offset: 0x0, Size: 0x1]
	SolarGameMode_RankData[] CurrentRanking;//[Offset: 0x8, Size: 0x10]
	<Object*,SolarGameMode_RankData> RankDatas;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: SCustomizedMode_ModeDataReady.BlueprintAsyncActionBase.Object
	delegate OnModeDataReadyComplete;//[Offset: 0x38, Size: 0x10]
	void HandleModeDataReadyComplete();// 0x491dfa0
	static SCustomizedMode_ModeDataReady* BindModeDataReady(Object* WorldContextObject);// 0x491dfb4

--------------------------------
Class: SolarRadarBase.Actor.Object
	bool bPublicRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	enum RadarType;//[Offset: 0x229, Size: 0x1]
	enum[] ScanTargetTypes;//[Offset: 0x230, Size: 0x10]
	float EffectRadius;//[Offset: 0x240, Size: 0x4]
	Vector2D EffectSize;//[Offset: 0x244, Size: 0x8]
	bool bTeamShare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bShowTowards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	bool bMarkPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1]
	bool bUniqueExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1]
	bool bNotifyEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	float DisplayTime;//[Offset: 0x254, Size: 0x4]
	float ScanFrequency;//[Offset: 0x258, Size: 0x4]
	bool bPerspectiveInScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	MaterialInterface* PerspectiveMaterial;//[Offset: 0x260, Size: 0x28]
	MaterialInterface* StencilMaterial;//[Offset: 0x288, Size: 0x28]
	int PerspectiveMeshSortPriority;//[Offset: 0x2b0, Size: 0x4]
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0x300, Size: 0x4]
	GameplayTagContainer InhibitionTagContainer;//[Offset: 0x308, Size: 0x20]
	Actor*[] PerspectiveedActors;//[Offset: 0x330, Size: 0x10]
	<Actor*,PerspectiveActorInfo> ProcessingActors;//[Offset: 0x340, Size: 0x50]
	int[] OneTimeScannedPlayerIDs;//[Offset: 0x390, Size: 0x10]
	SolarCharacter*[] ScanNotifiedPlayers;//[Offset: 0x3a0, Size: 0x10]
	void ServerOneTimeScanStart();// 0x4ae4bb8
	void PerspectiveTargetCharacter(SolarCharacter* InTargetCharacter);// 0x4ae4b00
	void OnRep_OneTimeScannedPlayerIDs();// 0x4ae4ba4
	void LoadPerspectiveMaterials();// 0x4ae4bcc
	void ChangeCharacterMultiPassMaterial(SolarCharacter* InTargetCharacter, bool bInRender);// 0x4ae4a10

--------------------------------
Class: PerspectiveActorInfo

--------------------------------
Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xd0, Size: 0x8]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xd8, Size: 0x8]
	SolarGameMode* GameModeOwner;//[Offset: 0xe0, Size: 0x8]
	bool bEnableIrisAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bEnableMLSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bPreserveBotOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bEnableWarmClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	class SolarBotAITeamManager* BotTeamManagerClass;//[Offset: 0xf0, Size: 0x8]
	int MaxNumPreservedBots;//[Offset: 0xf8, Size: 0x4]
	float MaxRatioPreservedBots;//[Offset: 0xfc, Size: 0x4]
	SolarBotAITeamManager* BotTeamManager;//[Offset: 0x110, Size: 0x8]
	MonsterAISpawnSettings VolumeMonsterSpawnSettings;//[Offset: 0x120, Size: 0x68]
	bool EnableMonsterSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool PreserveBot(SolarBotAIController* InBotController, out const Vector InPreservedLocation);// 0x49f445c
	bool PopPreservedBot(out SolarBotAIController* OutController, out const Vector OutTeleportLocation, SolarBotAIController* InSpecificController);// 0x49f4308
	void OnAcquiredIrisAIFeedStrategy(out const FeedBotStrategyInfo[] StrategyInfos);// 0x505573c

--------------------------------
Class: SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x380, Size: 0x8]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x388, Size: 0x8]
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x390, Size: 0x30]
	int UniqueSpawnerID;//[Offset: 0x3c0, Size: 0x4]
	GameplayTag BattleSubTreeTag;//[Offset: 0x3c4, Size: 0x8]
	int DefaultDifficultyLevel;//[Offset: 0x3cc, Size: 0x4]
	int CurrentDifficultyLevel;//[Offset: 0x3d0, Size: 0x4]
	float CharacterLookAtInterpSpeed;//[Offset: 0x3d4, Size: 0x4]
	float SimulatedCameraInterpSpeed;//[Offset: 0x3d8, Size: 0x4]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	int BotDefaultWeaponId;//[Offset: 0x3e0, Size: 0x4]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	BotFireConfig DefaultFireConfig;//[Offset: 0x3e8, Size: 0x10]
	BotFireConfig FireConfigToBot;//[Offset: 0x3f8, Size: 0x10]
	BotFireConfig VehicleFireConfig;//[Offset: 0x408, Size: 0x10]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0x418, Size: 0x10]
	float DamageFactorToVehicle;//[Offset: 0x428, Size: 0x4]
	float DamageFactorToBotVehicle;//[Offset: 0x42c, Size: 0x4]
	float BotAIAttackRange;//[Offset: 0x430, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0x434, Size: 0x4]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	BotBonusDropConfig BonusDropConfig;//[Offset: 0x43c, Size: 0x18]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x454, Size: 0x4]
	enum BotAIType;//[Offset: 0x458, Size: 0x1]
	int BotFeature;//[Offset: 0x45c, Size: 0x4]
	Vector2D MovementVector;//[Offset: 0x460, Size: 0x8]
	<GameplayTag,BehaviorTree*> SubTreeMap;//[Offset: 0x498, Size: 0x50]
	Actor* AITarget;//[Offset: 0x52c, Size: 0x8]
	SolarWarmTargetComponent* WarmTargetComponent;//[Offset: 0x558, Size: 0x8]
	delegate OnBotAIDeath;//[Offset: 0x560, Size: 0x10]
	SolarCharacter* PossessedCharacer;//[Offset: 0x588, Size: 0x8]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x590, Size: 0x8]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x5a0, Size: 0x8]
	void UpdateDynamicSubtree();// 0x496af70
	void UpdateCharacterRotate(float DeltaTime);// 0x496ade8
	void StopBehaviorTree();// 0x496ad04
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x496aa94
	bool SetupBotAIDifficulty(int DifficultyLevel, bool bAsDefault);// 0x505573c
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x496ae8c
	void OnReset();// 0x505573c
	void OnEnterLanding();// 0x496ad90
	bool IsTeamLeader();// 0x496af84
	bool IsIndependent();// 0x496afbc
	void InitBotAIConfig();// 0x505573c
	Actor* GetTargetEnemy();// 0x496ad18
	SolarCharacter* GetSolarCharacter();// 0x496adac
	byte GetMyTeamID();// 0x496ad54
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x496aff4
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x496ac58

--------------------------------
Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x350, Size: 0x8]
	AISenseConfig_Sight* SightConfig;//[Offset: 0x358, Size: 0x8]
	AISenseConfig_Damage* DamageSenseConfig;//[Offset: 0x360, Size: 0x8]
	int AICharacterID;//[Offset: 0x368, Size: 0x4]
	void DestroyCharacterCorpse();// 0x4948714

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2f8, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x300, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x308, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x310, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x318, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x320, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x328, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x330, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x713c5e8
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x713c4a0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x713c054
	void SetMoveBlockDetection(bool bEnable);// 0x713c7a8
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x713c6f0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x505573c
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x713c130
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x713c8f8
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x713cbd8
	void K2_SetFocus(Actor* NewFocus);// 0x713c268
	void K2_SetFocalPoint(Vector FP);// 0x713c30c
	void K2_ClearFocus();// 0x713c220
	bool HasPartialPath();// 0x713c88c
	PathFollowingComponent* GetPathFollowingComponent();// 0x713c114
	byte GetMoveStatus();// 0x713c8c4
	Vector GetImmediateMoveDestination();// 0x713c854
	Actor* GetFocusActor();// 0x713c234
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x713c3b0
	Vector GetFocalPoint();// 0x713c468
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x713c0f8
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x713c544

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x714e6bc
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x714e8a4
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x714e5c8
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x714eec0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x714e7b0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x714ebe4
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x714eaf0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x714ecd8
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x714edcc
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x714e9f4
	bool IsVectorValueSet(out const FName KeyName);// 0x714e508
	Vector GetValueAsVector(out const FName KeyName);// 0x714f074
	FString GetValueAsString(out const FName KeyName);// 0x714f1f0
	Rotator GetValueAsRotator(out const FName KeyName);// 0x714efb4
	Object* GetValueAsObject(out const FName KeyName);// 0x714f6a8
	FName GetValueAsName(out const FName KeyName);// 0x714f134
	int GetValueAsInt(out const FName KeyName);// 0x714f474
	float GetValueAsFloat(out const FName KeyName);// 0x714f3b8
	byte GetValueAsEnum(out const FName KeyName);// 0x714f530
	class Object GetValueAsClass(out const FName KeyName);// 0x714f5ec
	bool GetValueAsBool(out const FName KeyName);// 0x714f2f8
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x714e2e0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x714e3f4
	void ClearValue(out const FName KeyName);// 0x714e22c

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString Reason);// 0x7151da0
	void StartLogic();// 0x7151e74
	void RestartLogic();// 0x7151e58
	bool IsRunning();// 0x7151d60
	bool IsPaused();// 0x7151d20

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x713fe90
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x713ff64
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x713fd64
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x713fad4
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x713fbbc

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x714718c
	void AIIgnorePlayers();// 0x71471a8

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x7148e94
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x71490b4
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x7148f80

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x7167ed0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x7166788
	Vector[] GetResultsAsLocations();// 0x7166870
	Actor*[] GetResultsAsActors();// 0x7166920
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x71669d0
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x7166a9c
	float GetItemScore(int ItemIndex);// 0x7166b68
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x505573c

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x713a718

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x71702ec
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x716f9a0
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x716f7f8
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x716ff50
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x7170128
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x716fac0
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x716fd08

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x7143de0

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8]
	Actor* Instigator;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarBotLootComponent.ActorComponent.Object
	GameplayTag LootSubTreeTag;//[Offset: 0xb0, Size: 0x8]
	float MoveCostFactor;//[Offset: 0xb8, Size: 0x4]
	float TeammateSearchedFactor;//[Offset: 0xbc, Size: 0x4]
	float TeammateTargetedFactor;//[Offset: 0xc0, Size: 0x4]
	float AssualtRifleBaseValue;//[Offset: 0xc4, Size: 0x4]
	float ShotgunBaseValue;//[Offset: 0xc8, Size: 0x4]
	float SubmachinegunBaseValue;//[Offset: 0xcc, Size: 0x4]
	float SniperBaseValue;//[Offset: 0xd0, Size: 0x4]
	float WeaponQualityValue;//[Offset: 0xd4, Size: 0x4]
	float AmmoBaseValue;//[Offset: 0xd8, Size: 0x4]
	float AmmoMatchFactor;//[Offset: 0xdc, Size: 0x4]
	float ShieldBaseValue;//[Offset: 0xe0, Size: 0x4]
	float ShieldQualityValue;//[Offset: 0xe4, Size: 0x4]
	float JetpackModuleBaseValue;//[Offset: 0xe8, Size: 0x4]
	float JetpackModuleQualityValue;//[Offset: 0xec, Size: 0x4]
	float MedkitBaseValue;//[Offset: 0xf0, Size: 0x4]
	float MedkitHPRatioFactor;//[Offset: 0xf4, Size: 0x4]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x100, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x7170b78
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x7170c88
	Vector GetPathDestination();// 0x7170c1c
	byte GetPathActionType();// 0x7170c54

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x230, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x238, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2b4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2b8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a0, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x713e814
	void RequestStimuliListenerUpdate();// 0x713ee08
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x713ee1c
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x713ed34
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x713ea1c
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x713eb24
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x713ec2c
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x713e904
	void ForgetAll();// 0x713edf4

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x71728e0
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x7172a18
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x7172788
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x7172834

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x717157c
	void Finish(byte WithResult);// 0x71713ec
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x7171498

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	float ThreatUpdateInterval;//[Offset: 0x180, Size: 0x4]
	float AttackTriggerThreshold;//[Offset: 0x184, Size: 0x4]
	float CancelAttackTriggerThreshold;//[Offset: 0x188, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x18c, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x190, Size: 0x4]
	float SwitchTargetDifferenceValue;//[Offset: 0x194, Size: 0x4]
	float SightIncreaseBase;//[Offset: 0x198, Size: 0x4]
	float SightIncreaseDistanceFactor;//[Offset: 0x19c, Size: 0x4]
	float SightDecreaseBase;//[Offset: 0x1a0, Size: 0x4]
	float SightDecreaseDistanceFactor;//[Offset: 0x1a4, Size: 0x4]
	float SightDecreaseMax;//[Offset: 0x1a8, Size: 0x4]
	float SightMaxValue;//[Offset: 0x1ac, Size: 0x4]
	float HearingAddBase;//[Offset: 0x1b0, Size: 0x4]
	float HearingAddDistanceFactor;//[Offset: 0x1b4, Size: 0x4]
	float HearingDecreasePerTick;//[Offset: 0x1b8, Size: 0x4]
	float HearingMaxValue;//[Offset: 0x1bc, Size: 0x4]
	float BotThreatFactor;//[Offset: 0x1c0, Size: 0x4]
	float PlayerThreatFactor;//[Offset: 0x1c4, Size: 0x4]
	float DeathVergeFactor;//[Offset: 0x1c8, Size: 0x4]
	float MaxDistanceThreatFactor;//[Offset: 0x1cc, Size: 0x4]
	float DistanceThreatFactorDecayRate;//[Offset: 0x1d0, Size: 0x4]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	FName[] ForbiddenTags;//[Offset: 0x1d8, Size: 0x10]
	void UpdateSenseConfig();// 0x4aa0248
	void SetTargetSelectEnabled(bool bInEnable);// 0x4aa0410
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x4aa0308
	void OnBotPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x4a9ffd8
	float GetTargetCurrentThreatValue(SolarCharacter* ThreatTarget);// 0x4aa019c
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x4aa025c

--------------------------------
Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 0x4]
	float HitRate;//[Offset: 0x4, Size: 0x4]
	float ActiveDamageRate;//[Offset: 0x8, Size: 0x4]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BotBonusDropConfig
	float ActiveTime;//[Offset: 0x0, Size: 0x4]
	float DeactiveTime;//[Offset: 0x4, Size: 0x4]
	int NumOfAmmo;//[Offset: 0x8, Size: 0x4]
	int KitId;//[Offset: 0xc, Size: 0x4]
	int NumOfKit;//[Offset: 0x10, Size: 0x4]
	int NumOfElectricity;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarWarmTargetComponent.ActorComponent.Object
	SolarPlayerController* WarmPlayerController;//[Offset: 0xb0, Size: 0x8]
	bool bEnableWarmClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bEnableWarmDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bExcludeHasEnemyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bExcludeHasEnemyBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 0x1]
	bool bExcludeHasSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]

--------------------------------
Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float MinDetectInterval;//[Offset: 0x2a0, Size: 0x4]
	uint32 MaxDetectIteration;//[Offset: 0x2a4, Size: 0x4]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2a8, Size: 0xc]
	float AgentSwimingHalfHeightPct;//[Offset: 0x2b4, Size: 0x4]
	float AgentNormalHalfHeightPct;//[Offset: 0x2b8, Size: 0x4]
	float ReachTestCheckAngleWV;//[Offset: 0x2bc, Size: 0x4]
	float MinSpeedLastSegmentWV;//[Offset: 0x2c0, Size: 0x4]
	float TurningSpeedWV;//[Offset: 0x2c4, Size: 0x4]
	float TurningSteeringThresholdWV;//[Offset: 0x2c8, Size: 0x4]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	SolarVehiclePawn* VehicleActor;//[Offset: 0x308, Size: 0x8]
	float SensorTraceDistance;//[Offset: 0x31c, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	float RightSensorAlpha;//[Offset: 0x324, Size: 0x4]
	float CentralSensorAlpha;//[Offset: 0x328, Size: 0x4]
	float LeftSensorAlpha;//[Offset: 0x32c, Size: 0x4]
	float SteeringAngle;//[Offset: 0x330, Size: 0x4]
	float VehicleSteeringSensitivity;//[Offset: 0x334, Size: 0x4]
	float BrakingForce;//[Offset: 0x338, Size: 0x4]
	float DecelerationDistance;//[Offset: 0x33c, Size: 0x4]
	float VehicleDecelerationSpeed;//[Offset: 0x340, Size: 0x4]
	float VehicleTurningSpeed;//[Offset: 0x344, Size: 0x4]
	float CheckReverseDistance;//[Offset: 0x348, Size: 0x4]
	float HoverCheckBlockSpeed;//[Offset: 0x34c, Size: 0x4]
	float WheeledCheckBlockSpeed;//[Offset: 0x350, Size: 0x4]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x354, Size: 0x4]
	float CheckBlockTime;//[Offset: 0x35c, Size: 0x4]
	int TryReverseTimes;//[Offset: 0x368, Size: 0x4]
	float TryReverseDurationTime;//[Offset: 0x36c, Size: 0x4]
	float SolveBlockGoFrontTime;//[Offset: 0x378, Size: 0x4]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	void SetVehicle(Actor* VehicleActorIn);// 0x49e22f4
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x49e2398

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x268, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x71605ac

--------------------------------
Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2b0, Size: 0x8]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2b8, Size: 0x8]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2c8, Size: 0x28]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x2f0, Size: 0x8]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x2f8, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x300, Size: 0x8]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x308, Size: 0x8]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x310, Size: 0x8]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x318, Size: 0x8]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x320, Size: 0x8]
	BasedMovement BasedMovement;//[Offset: 0x328, Size: 0x28]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x350, Size: 0x10]
	int HealthUIID;//[Offset: 0x360, Size: 0x4]
	float VehicleInteractionRadius;//[Offset: 0x364, Size: 0x4]
	Vector OutVehicleOffset;//[Offset: 0x368, Size: 0xc]
	float WaterDraftDepth;//[Offset: 0x374, Size: 0x4]
	float CarpadProtectTime;//[Offset: 0x378, Size: 0x4]
	float CarPadAccelerationMultiplier;//[Offset: 0x37c, Size: 0x4]
	Vector[] DropPassengerLocations;//[Offset: 0x380, Size: 0x10]
	Vector DropPassengerAtTop;//[Offset: 0x390, Size: 0xc]
	FName BodySocketName;//[Offset: 0x39c, Size: 0x8]
	Vector DamageBoxLocation;//[Offset: 0x3a4, Size: 0xc]
	Vector DamageBoxExtent;//[Offset: 0x3b0, Size: 0xc]
	float VehicleMaxSpeedOnUI;//[Offset: 0x3bc, Size: 0x4]
	enum VehicleControlUIType;//[Offset: 0x3c0, Size: 0x1]
	enum VehicleAnimationType;//[Offset: 0x3c1, Size: 0x1]
	VehicleVFX NosCameraVFX;//[Offset: 0x3d0, Size: 0x90]
	float NOSCameraEffectAngle;//[Offset: 0x460, Size: 0x4]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x468, Size: 0x50]
	VehicleVFX[] NosVFXes;//[Offset: 0x4b8, Size: 0x10]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x4c8, Size: 0x4]
	float SpeedThresholdForStandingOn;//[Offset: 0x4cc, Size: 0x4]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x4d0, Size: 0x4]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x4d8, Size: 0x28]
	float SprayVelocity;//[Offset: 0x578, Size: 0x4]
	float HeavyInSpeed;//[Offset: 0x57c, Size: 0x4]
	float CriticalAngle;//[Offset: 0x580, Size: 0x4]
	Vector OffsetBasedVechileLoction;//[Offset: 0x584, Size: 0xc]
	float CollisionSparkThreshold;//[Offset: 0x590, Size: 0x4]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x598, Size: 0x28]
	FName CollisionSparkParamNowel;//[Offset: 0x5c0, Size: 0x8]
	FName CollisionSparkParamQuantity;//[Offset: 0x5c8, Size: 0x8]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x5d0, Size: 0x4]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x5d8, Size: 0x88]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x660, Size: 0x88]
	VehicleVFX SpeedParticle;//[Offset: 0x6f0, Size: 0x90]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x780, Size: 0x10]
	VehicleVFX[] DriverOnVFXs;//[Offset: 0x790, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x7a0, Size: 0xc]
	SeatCameraSetting DefaultCameraSetting;//[Offset: 0x7ac, Size: 0x30]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0x7e0, Size: 0x88]
	float CameraFovInterpSpeed;//[Offset: 0x868, Size: 0x4]
	RuntimeFloatCurve CameraDistanceMultiplierCurve;//[Offset: 0x870, Size: 0x88]
	float CameraDistanceInterpSpeed;//[Offset: 0x8f8, Size: 0x4]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 0x1]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x900, Size: 0x88]
	float CameraFollowTimeThreshold;//[Offset: 0x988, Size: 0x4]
	float CamearResetFollowSpeed;//[Offset: 0x98c, Size: 0x4]
	float CameraFollowSpeedThreshold;//[Offset: 0x990, Size: 0x4]
	RuntimeFloatCurve CameraZLagDistanceCurve;//[Offset: 0x998, Size: 0x88]
	bool bResetTargetPitchOffsetBasedOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 0x1]
	float MaxSpeedDecelerationRate;//[Offset: 0xa24, Size: 0x4]
	SolarVehicleMaterialData BackLampData;//[Offset: 0xa28, Size: 0x28]
	SolarVehicleMaterialData[] VehicleMaterialDataArray;//[Offset: 0xa50, Size: 0x10]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0xa60, Size: 0x8]
	class GameplayEffect* DefaultAttributes;//[Offset: 0xa68, Size: 0x8]
	class GameplayEffect* CanDriveEffect;//[Offset: 0xa70, Size: 0x8]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0xa78, Size: 0x8]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0xa80, Size: 0x8]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0xa88, Size: 0x8]
	VehicleVFX ExplosionVFX;//[Offset: 0xa90, Size: 0x90]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xb20, Size: 0x80]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xba0, Size: 0x90]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0xe70, Size: 0x8]
	int MaxLodLevelForUpdateVisual;//[Offset: 0xe98, Size: 0x4]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0xea0, Size: 0x10]
	PrimitiveComponent* PlatformComponent;//[Offset: 0xeb0, Size: 0x8]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 0x1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0xebc, Size: 0x4]
	float DegreeThresholdForAttachPlatform;//[Offset: 0xec0, Size: 0x4]
	float SpeedThresholdForAttachPlatform;//[Offset: 0xec4, Size: 0x4]
	class SolarAbility* CollideDamageAbility;//[Offset: 0xec8, Size: 0x8]
	float CrashDamageWeight;//[Offset: 0xed0, Size: 0x4]
	float SelfCrashDamageRate;//[Offset: 0xed4, Size: 0x4]
	float PassengerDamageRatio;//[Offset: 0xed8, Size: 0x4]
	float MinPlayerDamageVelocity;//[Offset: 0xedc, Size: 0x4]
	float CollidedCharacterDmgRatio;//[Offset: 0xee0, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0xee4, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0xee8, Size: 0x8]
	float CollidePushUpAngle;//[Offset: 0xef0, Size: 0x4]
	float CharacterProtectTime;//[Offset: 0xef4, Size: 0x4]
	int[] StealthHideMats;//[Offset: 0xef8, Size: 0x10]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf14, Size: 0x1]
	Vector_NetQuantize RepLocation;//[Offset: 0xf18, Size: 0xc]
	SphereComponent* VehicleInteractionZone;//[Offset: 0xf28, Size: 0x8]
	float WaterLineHeight;//[Offset: 0xf34, Size: 0x4]
	int MovementForbidPreSpeed;//[Offset: 0xf38, Size: 0x4]
	bool IsLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 0x1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0xf70, Size: 0x1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0xf71, Size: 0x1]
	int[] OccupiedSeats;//[Offset: 0x1068, Size: 0x10]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x1078, Size: 0xc]
	int VehicleID;//[Offset: 0x1084, Size: 0x4]
	Actor*[] ActorsOnPlatform;//[Offset: 0x10e0, Size: 0x10]
	byte CurPlayerInputMask;//[Offset: 0x1111, Size: 0x1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x1112, Size: 0x1]
	int SkinId;//[Offset: 0x11a8, Size: 0x4]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x11c0, Size: 0x10]
	byte CurrentDamageStatus;//[Offset: 0x11d0, Size: 0x1]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d1, Size: 0x1]
	void WeakPointStateChanged(byte WeakPointID);// 0x4c02730
	void StatVehicleCollision(Vector PreVelocity, Vector CurVelocity);// 0x4c01e18
	void StatVehicleAutoMove(int MoveTime);// 0x4c01f04
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x4c027d4
	void SetVehicleId(int InID);// 0x4c03034
	void SetTakeMoveInput(bool bInTakeInput);// 0x4c02a90
	void SetPlayerInputVector(out const Vector2D InputVector, float CameraYaw);// 0x4c033a4
	void SetCurrentHealth(float InHealth);// 0x4c012e0
	void SetCrossCarpad(SolarCarPad* InCarpad);// 0x4c02678
	void SetAllWeakPointToNewState(enum NewWeakPointState);// 0x4c028bc
	void ServerSetPlayerInput(const Vector_NetQuantizeNormal InputVector, const byte InputMask);// 0x4c02114
	void ServerSetCrossCarpad(SolarCarPad* InCarpad);// 0x4c025cc
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4c0112c
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x4c01228
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x4c00b0c
	void ServerSendCorrectionToClient(float ServerTimeStamp, Vector_NetQuantize WorldLocation, Vector_NetQuantizeNormal WorldRotationCompressed);// 0x4c009e4
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x4c00900
	void ServerApplyVehicleSkin(int InSkinID);// 0x4c01cb4
	void ServerApplyDamageToVehilceAndPassenger(Actor* OtherActor, float DamageToSelf, float DamageToOther, const Vector HitLocation);// 0x4c01fa8
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x4c02b3c
	void RemoveSeatSlot(byte SeatIndex);// 0x4c03108
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x4c0148c
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x4c01d60
	void PlaySpeedboardSound();// 0x4c01e04
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x4c01530
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4c02200
	void OnStencilLoaded();// 0x4c0271c
	void OnSkinDataAssetLoadedNext(SoftClassPath SkinVehiclePath);// 0x4c01bb4
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x4c023d0
	void OnRep_WaterLineHeight();// 0x4c03494
	void OnRep_VehicleBurning();// 0x4c01604
	void OnRep_SkinId();// 0x4c01afc
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x4c02528
	void OnRep_RemoveStencil();// 0x4c034a8
	bool IsVehicleFullHealth();// 0x4c01454
	bool IsVehicleDangerous();// 0x4c02a68
	bool IsVehicleBroken();// 0x4c02a40
	bool IsTeammateWith(const Pawn* Pawn);// 0x4c02eb0
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x4c01868
	bool IsExistEnemy(const SolarCharacter* Character);// 0x4c032c0
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x4c01918
	bool InSameTeam();// 0x4c02f60
	bool HasAbilityActive(byte SeatIndex);// 0x4c017b8
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x4c02960
	int GetVehicleTypeID();// 0x4c02fcc
	byte GetVehicleTeamId();// 0x4c02f98
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x4c03370
	int GetVehicleGroupID();// 0x4c03000
	float GetSpeedInKmh();// 0x4c034d0
	float GetSpeed();// 0x4c0350c
	Vector GetSpawnOffset();// 0x4c02a1c
	Vector2D GetPlayerInputVector();// 0x4c0328c
	int GetPassengerCount();// 0x4c030d4
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x4c031e0
	float GetMaxHealth();// 0x4c013ec
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x4c0170c
	int GetHealthPercentInt();// 0x4c013b8
	SolarCharacter* GetDriverCharacter();// 0x4c031ac
	float GetDangerHealthPrecent();// 0x4c01384
	float GetCurrentHealth();// 0x4c01420
	float GetAbilityCostEnergy(byte SeatIndex, byte AbilityIndex);// 0x4c01a0c
	bool DoesAbilitySatisfyTagRequirements(int CurSeatIndex, byte AbilityIndex);// 0x4c0080c
	void DeleteStencilMesh();// 0x4c034bc
	void ClientVehicleExplosion();// 0x4c015d4
	void ClientVehicleBroken();// 0x4c015e8
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4c00c34
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4c00db4
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value);// 0x4c00ef4
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x4c01030
	bool CheckUpdateVisual();// 0x4c00724
	bool CheckOpenParticleOptimization(int Bias);// 0x4c0075c
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x4c01618
	void ApplySkinFromCDO(SolarVehiclePawn* SkinVehiclePawnCDO);// 0x4c01b10
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x4c02c40

--------------------------------
Class: SolarCarPad.SolarInteractableActor.Actor.Object
	float Duration;//[Offset: 0x238, Size: 0x4]
	float SpeedMultiplier;//[Offset: 0x23c, Size: 0x4]
	float DistanceThresholdForValidation;//[Offset: 0x240, Size: 0x4]

--------------------------------
Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	enum CurrentState;//[Offset: 0x4, Size: 0x1]
	byte WeakPointID;//[Offset: 0x5, Size: 0x1]
	enum LastState;//[Offset: 0x6, Size: 0x1]
	FName[] WeakPointSockets;//[Offset: 0x8, Size: 0x10]
	Vector WeakPointOffset;//[Offset: 0x18, Size: 0xc]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x28, Size: 0x28]
	Transform WeakPointRelativeTransform;//[Offset: 0x50, Size: 0x30]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x80, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x88, Size: 0x8]
	float MaxWeakPointHealth;//[Offset: 0x90, Size: 0x4]
	float RepairCostEnergy;//[Offset: 0x94, Size: 0x4]
	float RepairDuration;//[Offset: 0x98, Size: 0x4]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	class GameplayEffect* BrokenEffect;//[Offset: 0xe0, Size: 0x8]
	float FacingAngle;//[Offset: 0xf0, Size: 0x4]
	float DistFromCharacterToWeakPoint;//[Offset: 0xf4, Size: 0x4]

--------------------------------
Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 0x8]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 0x8]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverrideCameraSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	SeatCameraSetting SeatCameraSetting;//[Offset: 0x14, Size: 0x30]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	OutVehicleShootSetting OutVehicleShotSetting;//[Offset: 0x48, Size: 0xc8]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x110, Size: 0x10]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x120, Size: 0x8]
	VehicleSeatWeaponSkinInfo VehicleSeatWeaponSkinInfo;//[Offset: 0x128, Size: 0x30]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x160, Size: 0x8]
	Rotator EjectRotation;//[Offset: 0x168, Size: 0xc]
	bool bOverrideDefaultEjectParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	VehicleEjectParams EjectParams;//[Offset: 0x178, Size: 0x10]
	SolarCharacter* SeatPassenger;//[Offset: 0x188, Size: 0x8]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0x190, Size: 0x8]

--------------------------------
Class: SeatCameraSetting
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	Vector OffsetToTarget;//[Offset: 0x4, Size: 0xc]
	Vector OffsetToTargetForTrace;//[Offset: 0x10, Size: 0xc]
	float DefaultPitch;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float MinYaw;//[Offset: 0x28, Size: 0x4]
	float MaxYaw;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: OutVehicleShootSetting
	Vector OutShotCameraOffset;//[Offset: 0x0, Size: 0xc]
	Rotator OutShotCameraRotation;//[Offset: 0xc, Size: 0xc]
	Vector2D OutShotCameraYawLimite;//[Offset: 0x18, Size: 0x8]
	CurveFloat* OutShotPitchLimiteCurve;//[Offset: 0x20, Size: 0x8]
	Vector ShotAimCameraOffset;//[Offset: 0x28, Size: 0xc]
	RuntimeFloatCurve ShotAimCameraFovCurve;//[Offset: 0x38, Size: 0x88]
	float OutShotBlendTime;//[Offset: 0xc0, Size: 0x4]
	float ShotAimBlendTime;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 0x4]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	bool bHideAbilityButtonAfterCancelButtonVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 0x1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x400, Size: 0x20]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	float DurationTime;//[Offset: 0x424, Size: 0x4]
	class GameplayEffect* ActivateEffect;//[Offset: 0x428, Size: 0x8]
	Texture2D* AbilityIcon;//[Offset: 0x430, Size: 0x28]
	float CostEnergy;//[Offset: 0x458, Size: 0x4]
	FString AbilityTextType;//[Offset: 0x460, Size: 0x10]
	float DamageToVehicle;//[Offset: 0x470, Size: 0x4]
	float DamageToCharacter;//[Offset: 0x474, Size: 0x4]
	SolarVehiclePawn* GetVehiclePawn();// 0x4c0a158

--------------------------------
Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0xb90, Size: 0x4]
	float MinWeaponPitch;//[Offset: 0xb94, Size: 0x4]
	float MaxWeaponYaw;//[Offset: 0xb98, Size: 0x4]
	float MinWeaponYaw;//[Offset: 0xb9c, Size: 0x4]
	float PitchFollowSpeed;//[Offset: 0xba0, Size: 0x4]
	float YawFollowSpeed;//[Offset: 0xba4, Size: 0x4]
	bool bAbsoluteRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 0x1]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba9, Size: 0x1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbaa, Size: 0x1]
	Vector ScopeCameraOffset;//[Offset: 0xbac, Size: 0xc]
	Vector ScopeTargetOffset;//[Offset: 0xbb8, Size: 0xc]
	float ScopeCameraDistance;//[Offset: 0xbc4, Size: 0x4]
	float ScopeBlendTime;//[Offset: 0xbc8, Size: 0x4]
	float ScopeFOVSwitchSpeed;//[Offset: 0xbcc, Size: 0x4]
	enum DefaultWeaponScopeType;//[Offset: 0xbd0, Size: 0x1]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0xbd8, Size: 0x8]
	float PitchCameraOffset;//[Offset: 0xbe0, Size: 0x4]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe4, Size: 0x1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe5, Size: 0x1]
	byte FireType;//[Offset: 0xbe6, Size: 0x1]
	FName FireSocketName;//[Offset: 0xbe8, Size: 0x8]
	FName[] MuzzleCheckSocketNames;//[Offset: 0xbf0, Size: 0x10]
	byte FireAixsType;//[Offset: 0xc00, Size: 0x1]
	FName TurretVSocketName;//[Offset: 0xc04, Size: 0x8]
	FName TurretHSocketName;//[Offset: 0xc0c, Size: 0x8]
	FString ReloadSoundName1P;//[Offset: 0xc18, Size: 0x10]
	FString ReloadSoundName3P;//[Offset: 0xc28, Size: 0x10]
	FString ReloadSoundName3PEnemy;//[Offset: 0xc38, Size: 0x10]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0xc48, Size: 0x8]
	SolarCharacter* WeaponOwner;//[Offset: 0xc58, Size: 0x8]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]
	bool bActivedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 0x1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0xc64, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0xc70, Size: 0x8]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0xc78, Size: 0x28]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0xca0, Size: 0x8]
	FName AttachBoneName;//[Offset: 0xca8, Size: 0x8]
	SolarCharacter* CahedLastOwner;//[Offset: 0xcb0, Size: 0x8]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe0, Size: 0x1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfe0, Size: 0x1]
	Vector2D AssistLockImageSize;//[Offset: 0xfe4, Size: 0x8]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfec, Size: 0x1]
	float AutoLockSpreadDec;//[Offset: 0xff0, Size: 0x4]
	float PreSelectProgress;//[Offset: 0xff4, Size: 0x4]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0xff8, Size: 0x88]
	enum AssistLockState;//[Offset: 0x1080, Size: 0x1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1081, Size: 0x1]
	bool bUsingCameraRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1082, Size: 0x1]
	float TriggerSmoothReticleDistance;//[Offset: 0x1084, Size: 0x4]
	Vector2D SmoothReticleSpeed;//[Offset: 0x1088, Size: 0x8]
	Transform CachedWeaponRelativeTransform;//[Offset: 0x1090, Size: 0x30]
	Transform CachedFireMuzzleTransform;//[Offset: 0x10c0, Size: 0x30]
	Transform CachedTurretVSocketTransform;//[Offset: 0x10f0, Size: 0x30]
	Transform CachedTurretHSocketTransform;//[Offset: 0x1120, Size: 0x30]
	float WeaponFollowCameraYaw;//[Offset: 0x1150, Size: 0x4]
	float WeaponFollowCameraPitch;//[Offset: 0x1154, Size: 0x4]
	Rotator SimulateWeaponRot;//[Offset: 0x1158, Size: 0xc]
	Transform SimulateMuzzleTransform;//[Offset: 0x1170, Size: 0x30]
	Rotator SimulateWeaponTargetRotator;//[Offset: 0x11a0, Size: 0xc]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0x11b0, Size: 0x20]
	void VehicleWeaponOpenScope();// 0x4c15024
	void VehicleWeaponCloseScope();// 0x4c15010
	void UpdateWeaponSimulateTransform(float DeltaTime, bool bInFreeLook);// 0x4c14eb8
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x4c150cc
	void OnStencilLoaded();// 0x4c15320
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x4c15178
	bool IsPlayerLocallyControlledWeapon();// 0x4c15094
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x4c1521c
	Vector GetShotTargetLocation();// 0x4c14fa8
	byte GetFireType();// 0x4c15078
	bool CheckCanOpenScope();// 0x4c15038
	bool CanEnterFireState();// 0x4c14fd0

--------------------------------
Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum PresetScopeType;//[Offset: 0x320, Size: 0x1]
	Image* img_Vehicle;//[Offset: 0x328, Size: 0x8]
	Image* Img_Weapon;//[Offset: 0x330, Size: 0x8]
	CanvasPanel* Panel_Pitch;//[Offset: 0x338, Size: 0x8]
	WeaponScopeSliderWidget* Crosshair_Slider;//[Offset: 0x340, Size: 0x8]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x348, Size: 0x8]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x350, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x358, Size: 0x8]
	CanvasPanel* Panel_Border;//[Offset: 0x360, Size: 0x8]
	Image* ReticleDirection;//[Offset: 0x368, Size: 0x8]
	CanvasPanel* Coredot;//[Offset: 0x370, Size: 0x8]
	Image* ForbidImg;//[Offset: 0x378, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x380, Size: 0x8]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x388, Size: 0x8]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x390, Size: 0x8]
	Image* ProgressImage;//[Offset: 0x398, Size: 0x8]
	WidgetAnimation* ProgressAnima;//[Offset: 0x3a0, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x3a8, Size: 0x8]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x4c8191c
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x505573c
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x4c81aec
	void OnScopeTypeChanged(enum InScopeType);// 0x4c81d00
	void OnScopeTriggerChanged(bool bChecked);// 0x4c81da4
	void OnScopeOpened();// 0x4c81a34
	void InitScopeUI(SolarVehiclePawn* InVehicle);// 0x4c81a48
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x4c81c24

--------------------------------
Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 0x8]
	float CrossHairOpacity;//[Offset: 0xc, Size: 0x4]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 0x8]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 0x4]
	bool bCrossHairForbid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: WeaponScopeSliderWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnWeaponScopeChanged;//[Offset: 0x320, Size: 0x10]
	ScopeSliderData[] ScopeSliderDatas;//[Offset: 0x330, Size: 0x10]
	int ScopeSliderType;//[Offset: 0x340, Size: 0x4]
	float SliderAnimPlaySpeed;//[Offset: 0x344, Size: 0x4]
	Slider* Slider_ADS;//[Offset: 0x348, Size: 0x8]
	SolarTextBlock* Txt_Scope;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Anim_Type0;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Type1;//[Offset: 0x360, Size: 0x8]
	WidgetAnimation* AnimToPlay;//[Offset: 0x368, Size: 0x8]
	void SetSliderDisplay(float InValue, bool bSkipAnimation);// 0x4ca065c
	void OnSliderValueChanged(float InValue);// 0x4ca074c

--------------------------------
Class: ScopeSliderData
	Vector2D SliderPercentRange;//[Offset: 0x0, Size: 0x8]
	float SliderAnimeTimer;//[Offset: 0x8, Size: 0x4]
	enum ScopeMagnifier;//[Offset: 0xc, Size: 0x1]
	FText DisplayText;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x130, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x134, Size: 0x10]
	float MinValue;//[Offset: 0x144, Size: 0x4]
	float MaxValue;//[Offset: 0x148, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x150, Size: 0x3a0]
	byte Orientation;//[Offset: 0x4f0, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x4f4, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x504, Size: 0x10]
	Vector2D SliderHandleOffset;//[Offset: 0x514, Size: 0x8]
	bool CommitTouchStartValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51f, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	float StepSize;//[Offset: 0x524, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x530, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x540, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x550, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x560, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x570, Size: 0x10]
	void SetValue(float InValue);// 0x607a56c
	void SetStepSize(float InValue);// 0x607a228
	void SetSliderHandleOffset(Vector2D InValue);// 0x607a040
	void SetSliderHandleColor(LinearColor InValue);// 0x607a0e0
	void SetSliderBarColor(LinearColor InValue);// 0x607a184
	void SetNormalBarImage(out const SlateBrush InImage);// 0x6079dcc
	void SetMinValue(float InValue);// 0x607a4c8
	void SetMaxValue(float InValue);// 0x607a424
	void SetLocked(bool InValue);// 0x607a2cc
	void SetIndentHandle(bool InValue);// 0x607a378
	void SetHoveredBarImage(out const SlateBrush InImage);// 0x6079bf8
	void SetBarThickness(float InValue);// 0x6079fa0
	float GetValue();// 0x607a644
	float GetNormalizedValue();// 0x607a610

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush HoveredBarImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush DisabledBarImage;//[Offset: 0x138, Size: 0x98]
	SlateBrush NormalThumbImage;//[Offset: 0x1d0, Size: 0x98]
	SlateBrush HoveredThumbImage;//[Offset: 0x268, Size: 0x98]
	SlateBrush DisabledThumbImage;//[Offset: 0x300, Size: 0x98]
	float BarThickness;//[Offset: 0x398, Size: 0x4]

--------------------------------
Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	FText Text;//[Offset: 0x158, Size: 0x18]
	int LocTextID;//[Offset: 0x170, Size: 0x4]
	enum PreviewLang;//[Offset: 0x174, Size: 0x1]
	Vector2D CalcSize;//[Offset: 0x178, Size: 0x8]
	delegate TextDelegate;//[Offset: 0x180, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x190, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b8, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1c8, Size: 0x50]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x218, Size: 0x18]
	SlateBrush StrikeBrush;//[Offset: 0x230, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x2c8, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2d0, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2e0, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2f0, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 0x1]
	void SetWrapTextAt(float InWrapTextAt);// 0x4bde090
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x4bddfe4
	void SetText(FText InText);// 0x4bddcd0
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x4bde3f8
	void SetShadowOffset(Vector2D InShadowOffset);// 0x4bde8b4
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x4bde95c
	void SetOpacity(float InOpacity);// 0x4bdea08
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4bde34c
	void SetMargin(Margin InMargin);// 0x4bde29c
	void SetLocTextID(int InLocTextID);// 0x4bdeab4
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x4bdeb60
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x4bde1f0
	void SetFont(SlateFontInfo InFontInfo);// 0x4bde710
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x4bdee7c
	void SetAutoWrapText(bool InAutoTextWrap);// 0x4bde13c
	Vector2D GetTextSize();// 0x4bddf30
	FText GetText();// 0x4bdde58
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x4bddf6c
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x4bddfa8

--------------------------------
Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int DefaultFontSize;//[Offset: 0x4, Size: 0x4]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 0x1]
	int SpecialFontSize;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0x830, Size: 0x8]
	Widget* OffGroup;//[Offset: 0x838, Size: 0x8]
	enum CheckedGroupVisibility;//[Offset: 0x840, Size: 0x1]
	enum UncheckedGroupVisibility;//[Offset: 0x841, Size: 0x1]
	void OnStateChanged(bool bIsChecked);// 0x49c2954
	void ManualSetIsChecked(bool InIsChecked);// 0x49c2a00

--------------------------------
Class: VehicleSeatWeaponSkinInfo
	SkeletalMesh* WeaponMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	class AnimInstance* WeaponMeshAnimClass;//[Offset: 0x18, Size: 0x8]
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x20, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: VehicleEjectParams
	float EjectTime;//[Offset: 0x0, Size: 0x4]
	float EjectDistance;//[Offset: 0x4, Size: 0x4]
	float EjectBreakableTime;//[Offset: 0x8, Size: 0x4]
	float EjectCameraFadeOutTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba8, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xba8, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xba8, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x33c3250

--------------------------------
Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xe4, Size: 0x4]
	float ServerBufferCheckTimeInterval;//[Offset: 0xe8, Size: 0x4]
	int ServerBufferCheckCount;//[Offset: 0xec, Size: 0x4]
	float ServerBufferCheckMinSpeed;//[Offset: 0xf0, Size: 0x4]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xf4, Size: 0x4]
	float AtRestThresholdCount;//[Offset: 0xf8, Size: 0x4]
	enum ExtrapolationMode;//[Offset: 0xfc, Size: 0x1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]
	float ExtrapolationTimeLimit;//[Offset: 0x100, Size: 0x4]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float ExtrapolationDistanceLimit;//[Offset: 0x108, Size: 0x4]
	float SendPositionThreshold;//[Offset: 0x10c, Size: 0x4]
	float SendRotationThreshold;//[Offset: 0x110, Size: 0x4]
	float SendVelocityThreshold;//[Offset: 0x114, Size: 0x4]
	float SendAngularVelocityThreshold;//[Offset: 0x118, Size: 0x4]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x11c, Size: 0x4]
	float ReceivedPositionThreshold;//[Offset: 0x120, Size: 0x4]
	float AngularVelocityForRotationThreshold;//[Offset: 0x124, Size: 0x4]
	float ReceivedRotationThreshold;//[Offset: 0x128, Size: 0x4]
	float PositionSnapThreshold;//[Offset: 0x12c, Size: 0x4]
	float RotationSnapThreshold;//[Offset: 0x130, Size: 0x4]
	float PositionLerpSpeed;//[Offset: 0x134, Size: 0x4]
	float RotationLerpSpeed;//[Offset: 0x138, Size: 0x4]
	enum SyncPosition;//[Offset: 0x13c, Size: 0x1]
	enum SyncRotation;//[Offset: 0x13d, Size: 0x1]
	enum SyncVelocity;//[Offset: 0x13e, Size: 0x1]
	enum SyncAngularVelocity;//[Offset: 0x13f, Size: 0x1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 0x1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	float SendRate;//[Offset: 0x148, Size: 0x4]
	float TimeSmoothing;//[Offset: 0x14c, Size: 0x4]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x180, Size: 0x8]
	SceneComponent* RelativeComponent;//[Offset: 0x188, Size: 0x8]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x190, Size: 0x8]
	float AtRestPositionThreshold;//[Offset: 0x4e8, Size: 0x4]
	float AtRestRotationThreshold;//[Offset: 0x4ec, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x500, Size: 0x8]

--------------------------------
Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object

--------------------------------
Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x368, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x370, Size: 0x8]

--------------------------------
Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x320, Size: 0x4]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	static SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x4b0af20

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x284, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x288, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x294, Size: 0xc]
	float ProbeSize;//[Offset: 0x2a0, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x2a4, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a5, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a5, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a5, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a5, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a5, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a5, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a5, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a5, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a6, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x2a8, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x2ac, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x2b0, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x2b4, Size: 0x4]
	bool IsCollisionFixApplied();// 0x6d8424c
	Vector GetUnfixedCameraPosition();// 0x6d84284
	Rotator GetTargetRotation();// 0x6d842bc

--------------------------------
Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0x940, Size: 0x8]

--------------------------------
Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 0x10]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x4bff2e0
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x4bff218
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x4bff088
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x4bff470
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x4bff3a8
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x4bff150
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x4bff538

--------------------------------
Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x4953b24
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x4953d9c
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x4953a24
	static float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x4953c0c
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x4953ccc

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 0x8]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10]
	FName AttachedSocket;//[Offset: 0x38, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: SolarVehicleMaterialData
	int8 MaterialIndex;//[Offset: 0x0, Size: 0x1]
	FName ParamName;//[Offset: 0x4, Size: 0x8]
	float OnValue;//[Offset: 0xc, Size: 0x4]
	float OffValue;//[Offset: 0x10, Size: 0x4]
	float ActiveSpeed;//[Offset: 0x14, Size: 0x4]
	MaterialInstanceDynamic* MatInstanceDynamic;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 0x10]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 0x10]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 0x10]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Engine_RTPC;//[Offset: 0x70, Size: 0x10]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 0x10]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 0x10]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 0x4]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 0x10]
	FString Tire_3P;//[Offset: 0xc8, Size: 0x10]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 0x10]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 0x10]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 0x10]
	FString Tire_RTPC;//[Offset: 0x108, Size: 0x10]
	FString Tire_Group;//[Offset: 0x118, Size: 0x10]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 0x50]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 0x10]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 0x10]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 0x10]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 0x10]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 0x10]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 0x10]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 0x10]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 0x10]
	FString Engine_Start_3P;//[Offset: 0x2a0, Size: 0x10]
	FString Engine_Start_3P_Enemy;//[Offset: 0x2b0, Size: 0x10]
	FString Braking_Loop_RTPC;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Braking_Loop_3P;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x2e0, Size: 0x10]
	FString Stop_Braking_Loop_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	float BrakingLoopSoundDegree;//[Offset: 0x310, Size: 0x4]
	float BrakingLoopSoundSpeed;//[Offset: 0x314, Size: 0x4]
	FString Play_Reverse_Loop;//[Offset: 0x318, Size: 0x10]
	FString Stop_Reverse_Loop;//[Offset: 0x328, Size: 0x10]
	FString Drift_RTPC;//[Offset: 0x338, Size: 0x10]
	FString Drift_Start;//[Offset: 0x348, Size: 0x10]
	FString Drift_Stop;//[Offset: 0x358, Size: 0x10]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x368, Size: 0x1]
	FString Play_SelfHealing_3P;//[Offset: 0x370, Size: 0x10]
	FString Stop_SelfHealing_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x390, Size: 0x10]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x3a0, Size: 0x10]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x3b0, Size: 0x10]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x3c0, Size: 0x4]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x3c8, Size: 0x10]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x3d8, Size: 0x10]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x3e8, Size: 0x10]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x3f8, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x408, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x418, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x428, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x438, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x448, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x458, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x468, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x478, Size: 0x10]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x488, Size: 0x10]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x498, Size: 0x10]
	FString HoverJumpOnActive1P;//[Offset: 0x4a8, Size: 0x10]
	FString HoverJumpOnActive3P;//[Offset: 0x4b8, Size: 0x10]
	FString HoverJumpWhileActive1P;//[Offset: 0x4c8, Size: 0x10]
	FString HoverJumpWhileActive3P;//[Offset: 0x4d8, Size: 0x10]
	FString HoverJumpOnRemove1P;//[Offset: 0x4e8, Size: 0x10]
	FString HoverJumpOnRemove3P;//[Offset: 0x4f8, Size: 0x10]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x508, Size: 0x10]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x518, Size: 0x10]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x528, Size: 0x10]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x538, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x548, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x558, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x568, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x578, Size: 0x10]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x588, Size: 0x10]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x598, Size: 0x10]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x5a8, Size: 0x10]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x5b8, Size: 0x10]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x5c8, Size: 0x10]

--------------------------------
Class: AbilityCooldownTimer
	byte CooldownAbilityIndex;//[Offset: 0x0, Size: 0x1]
	float AbilityAppliedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SolarBotAITeamManager.Object
	float UpdateInterval;//[Offset: 0x28, Size: 0x4]
	float DefaultSeparateDistance;//[Offset: 0x2c, Size: 0x4]
	float DefaultReturnDistance;//[Offset: 0x30, Size: 0x4]
	class SolarBotTeamVisualizer* DebugVisualizerClass;//[Offset: 0x90, Size: 0x8]
	SolarBotTeamVisualizer* DebugVisualizer;//[Offset: 0x98, Size: 0x8]
	bool ShouldTeamActivate(out const SolarBotTeamInfo BotInfo);// 0x496d93c
	void SetTeamBlackboardValueAsVector(int TeamID, out const FName KeyName, Vector VectorValue, enum InBotState, bool bSkipIndependent);// 0x496c704
	void SetTeamBlackboardValueAsString(int TeamID, out const FName KeyName, FString StringValue, enum InBotState, bool bSkipIndependent);// 0x496ca9c
	void SetTeamBlackboardValueAsRotator(int TeamID, out const FName KeyName, Rotator VectorValue, enum InBotState, bool bSkipIndependent);// 0x496c538
	void SetTeamBlackboardValueAsObject(int TeamID, out const FName KeyName, Object* ObjectValue, enum InBotState, bool bSkipIndependent);// 0x496d5e0
	void SetTeamBlackboardValueAsName(int TeamID, out const FName KeyName, FName NameValue, enum InBotState, bool bSkipIndependent);// 0x496c8d0
	void SetTeamBlackboardValueAsInt(int TeamID, out const FName KeyName, int IntValue, enum InBotState, bool bSkipIndependent);// 0x496d07c
	void SetTeamBlackboardValueAsFloat(int TeamID, out const FName KeyName, float FloatValue, enum InBotState, bool bSkipIndependent);// 0x496ceb0
	void SetTeamBlackboardValueAsEnum(int TeamID, out const FName KeyName, byte EnumValue, enum InBotState, bool bSkipIndependent);// 0x496d248
	void SetTeamBlackboardValueAsClass(int TeamID, out const FName KeyName, class Object ClassValue, enum InBotState, bool bSkipIndependent);// 0x496d414
	void SetTeamBlackboardValueAsBool(int TeamID, out const FName KeyName, bool BoolValue, enum InBotState, bool bSkipIndependent);// 0x496ccd0
	void SetBotDropOut(const SolarBotAIController* InController, bool bDropOut);// 0x496dac4
	void OnTeamDeactive(out const SolarBotTeamInfo TeamInfo);// 0x505573c
	void OnTeamActivate(out const SolarBotTeamInfo TeamInfo);// 0x505573c
	void OnBotUnRegister(out const SolarBotMemberInfo BotInfo);// 0x505573c
	void OnBotStateChanged(out const SolarBotMemberInfo BotInfo, enum OldState);// 0x505573c
	void OnBotRegister(out const SolarBotMemberInfo BotInfo);// 0x505573c
	bool IsValidTeamID(int InTeamID);// 0x496d7ac
	bool IsTeamLeader(const SolarBotAIController* InController);// 0x496dca8
	bool IsIndependent(const SolarBotAIController* InController);// 0x496da14
	bool GetBotTeamInfo(SolarBotAIController* InController, out SolarBotTeamInfo OutTeamInfo);// 0x496de5c
	bool GetBotMemberInfo(SolarBotAIController* InController, out SolarBotMemberInfo OutMemberInfo);// 0x496dd58
	static SolarBotAITeamManager* Get(const Object* Context);// 0x496df68
	bool CheckBotTeamState(const SolarBotAIController* InController, enum MemberState);// 0x496dbb4
	Vector CalculateTeamPosition(out const SolarBotTeamInfo TeamInfo);// 0x496d864

--------------------------------
Class: SolarBotTeamInfo
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int TeamID;//[Offset: 0x4, Size: 0x4]
	Vector TeamPosition;//[Offset: 0x8, Size: 0xc]
	float SeparateDistance;//[Offset: 0x14, Size: 0x4]
	float ReturnDistance;//[Offset: 0x18, Size: 0x4]
	SolarBotMemberInfo[] MemberInfos;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarBotMemberInfo
	SolarBotAIController* BotController;//[Offset: 0x0, Size: 0x8]
	enum MemberState;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SolarBotTeamVisualizer.Info.Actor.Object
	Color[] DrawDebugColors;//[Offset: 0x228, Size: 0x10]
	Font* TextFont;//[Offset: 0x238, Size: 0x8]
	BotTeamDebugInfo[] BotTeamDebugInfos;//[Offset: 0x240, Size: 0x10]

--------------------------------
Class: BotTeamDebugInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	BotMemberDebugInfo[] MemberDebugInfos;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BotMemberDebugInfo
	Vector MemberLocation;//[Offset: 0x0, Size: 0xc]
	FString IDStr;//[Offset: 0x10, Size: 0x10]
	enum MemberState;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: MonsterAISpawnSettings
	int MonsterGroupSizeMin;//[Offset: 0x0, Size: 0x4]
	int MonsterGroupSizeMax;//[Offset: 0x4, Size: 0x4]
	int NumberMonsterGroupMin;//[Offset: 0x8, Size: 0x4]
	int NumberOfMonsterGroupMax;//[Offset: 0xc, Size: 0x4]
	float MonsterSpawnCoolDown;//[Offset: 0x10, Size: 0x4]
	float MonsterSpawnStartTime;//[Offset: 0x14, Size: 0x4]
	<int,float> MonsterGroupProbabilities;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: FeedBotStrategyInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	float FeedPriority;//[Offset: 0x10, Size: 0x4]
	float Difficulty;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xd8, Size: 0x50]
	enum[] SpecialFuncTag;//[Offset: 0x128, Size: 0x10]
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerId);// 0x4a1d3c8

--------------------------------
Class: PlayerStatisticsData.Object
	delegate OnPlayerStatDataUpdate;//[Offset: 0x28, Size: 0x10]
	delegate OnIncreaseWeaponKillNum;//[Offset: 0x38, Size: 0x10]
	Vector GetValue_Vector(enum InType);// 0x4a1c698
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x4a1c590
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x4a1c488
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x4a1ca48
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x4a1c850
	int GetValue_Int(enum InType);// 0x4a1cb38
	float GetValue_FloatFromMap(enum InType, int IntKey);// 0x4a1c958
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x4a1c748
	float GetValue_Float(enum InType);// 0x4a1cbe4

--------------------------------
Class: SolarGameMode_PlayerManager.Object
	SGameMode_Player*[] Players;//[Offset: 0x30, Size: 0x10]
	<Controller*,SGameMode_Player*> ControllerMap;//[Offset: 0x40, Size: 0x50]
	SGameMode_Player* LocalPlayer;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: SolarGameMode_CharacterManager.Object
	SolarCharacter*[] Characters;//[Offset: 0x30, Size: 0x10]
	static void PlaceCharacterAtStart(SolarCharacter* Character, PlayerStart* PlayerStart, const bool bClearAllItems, const bool bEmptyEnergy, const bool bReChargeJetToFull, const bool bClearWeapons);// 0x49f4b68
	static void PlaceCharacterAtLocation(SolarCharacter* Character, out const Vector Location);// 0x49f4a84

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x24c, Size: 0x8]

--------------------------------
Class: SolarGameMode_LevelManager.Object
	<FString,SGameMode_LevelConfig> LevelConfigs;//[Offset: 0xc8, Size: 0x50]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x118, Size: 0x50]
	<SolarCharacter*> MovementDisabledCharacters;//[Offset: 0x168, Size: 0x50]
	<FString,ElementLevelStreaming> PersistentElementLevelStreamings;//[Offset: 0x208, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x258, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x268, Size: 0x10]
	void ShowTransitionUI();// 0x3aa89b4
	void SetMinimapFootprintVisible(bool bVisible);// 0x3aa89b4
	void OnStreamingLevelLoaded();// 0x49ffe04
	void OnLevelLoaded();// 0x49ffdc8
	void OnElementStreamingLevelUnLoaded();// 0x49ffddc
	void OnElementStreamingLevelLoaded();// 0x49ffdf0
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x49ffce0
	void HideTransitionUI();// 0x3aa89b4

--------------------------------
Class: SGameMode_LevelConfig
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x20, Size: 0x18]
	int MiniMapId;//[Offset: 0x38, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	SolarElementGroupPath[] ElementGroups;//[Offset: 0x40, Size: 0x10]
	class LoadingUIBase* LoadingUI;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SolarElementGroupPath
	FString Name;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ElementLevel;//[Offset: 0x10, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: LoadingUIBase.LoadingWidgetBase.UserWidget.Widget.Visual.Object
	Image* Img_BG;//[Offset: 0x258, Size: 0x8]
	ProgressBar* LoadProgress;//[Offset: 0x260, Size: 0x8]
	SolarTextBlock* Txt_Percent_Num;//[Offset: 0x268, Size: 0x8]
	SolarTextBlock* Txt_Tips;//[Offset: 0x270, Size: 0x8]
	<FString,Texture2D*> BGImgMap;//[Offset: 0x278, Size: 0x50]
	ULoadingDataEntry[] ShowBgLoadingArray;//[Offset: 0x2f0, Size: 0x10]
	float FakeProgress;//[Offset: 0x310, Size: 0x4]
	void StartDisplayLoading(out const ULoadingDataEntry[] InLoadingBgArray, float InShowBgTime, bool bInOrder, float InShowTipsTime);// 0x48c8e24
	void SetTips(out const FText InTips);// 0x48c8c70
	void SetLoadingProgress(float InPercent);// 0x48c8d80
	void SetFakeProgress(float NewProgress);// 0x48c8bcc
	void SetBGImgFromPath(out const SoftObjectPath Path);// 0x48c8fbc
	void SetBGImg(FString ImgName);// 0x48c9080
	void OnWidgetReleasedAsLoadingScreen(Object* Outer);// 0x505573c
	void OnWidgetCreatedAsLoadingScreen(Object* Outer);// 0x505573c
	void OnLevelPreLoad(FString MapPackageName);// 0x505573c
	void OnAsyncLoadingFlushUpdate();// 0x505573c

--------------------------------
Class: LoadingWidgetBase.UserWidget.Widget.Visual.Object
	void LoadingStarted();// 0x351d4b4
	void LoadingFinished();// 0x351d498

--------------------------------
Class: ULoadingDataEntry
	SoftObjectPath LoadingBg;//[Offset: 0x0, Size: 0x18]
	int[] TipIntArray;//[Offset: 0x18, Size: 0x10]
	FString[] TipArray;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ElementLevelStreaming
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	LevelStreamingDynamic* LevelStreamingDynamic;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 0x10]
	SolarMonster*[] MonsterList;//[Offset: 0x40, Size: 0x10]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x50, Size: 0x10]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x60, Size: 0x50]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xb0, Size: 0x50]
	void OnStimulusActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x49fee48

--------------------------------
Class: SolarMonster.SolarCharacterBase.Character.Pawn.Actor.Object
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0x5d0, Size: 0x8]
	SolarMBCComponent* SolarMBCComponent;//[Offset: 0x5d8, Size: 0x8]
	WeaponSystemBase* WeaponSystemComponent;//[Offset: 0x5e0, Size: 0x8]
	int MonsterID;//[Offset: 0x5e8, Size: 0x4]
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x4a96608
	void SetCurrentHealth(float healthValue);// 0x4a963f4
	void OnMonsterDied();// 0x505573c
	FString GetSoundEventNameSpawn();// 0x4a96550
	FString GetSoundEventNameHasEnemy();// 0x4a96498
	SolarMonsterAIController* GetMonsterController();// 0x4a966ac

--------------------------------
Class: SolarMonsterAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	float LoseSightTimeConfig;//[Offset: 0x378, Size: 0x4]
	float LoseEnemyActorConfig;//[Offset: 0x37c, Size: 0x4]
	float DamageSenseDistThreshold;//[Offset: 0x380, Size: 0x4]
	SolarAISpawnVolume* OwnerAISpawnVolume;//[Offset: 0x388, Size: 0x8]
	<Actor*,float> DamageStimulusMap;//[Offset: 0x390, Size: 0x50]
	<Actor*> SightStimulusActors;//[Offset: 0x3e0, Size: 0x50]
	int StrengthGrade;//[Offset: 0x430, Size: 0x4]
	float WeaponDamageAttenuation;//[Offset: 0x434, Size: 0x4]
	<Actor*> IgnoredActors;//[Offset: 0x438, Size: 0x50]
	bool UpdateStrengthGradeCfg(int InStrengthGrade);// 0x505573c
	void SetSightSenseParams(float SightRadius, float LoseSightRadius, float PeripheralVisionHalfAngleDegrees, float MaxAge);// 0x4a970ec
	void OnTargetUpdateCallBack(Actor* Actor, AIStimulus Stimulus);// 0x4a96eec
	void OnStimulusActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x4a96e04
	SolarMonster* GetMonster();// 0x4a970b8
	float GetDamageFactor();// 0x4a96dd0

--------------------------------
Class: SolarAISpawnVolume.Volume.Brush.Actor.Object
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x260, Size: 0x8]
	float AISpawnVolumeTetherRadius;//[Offset: 0x29c, Size: 0x4]

--------------------------------
Class: SolarMBCComponent.ActorComponent.Object
	SolarMonster* MonsterOwner;//[Offset: 0xb0, Size: 0x8]
	SolarMonsterAnimInstance* MonsterAnimInstance;//[Offset: 0xb8, Size: 0x8]
	bool bHasEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	void OnRep_HasEnemy();// 0x4a944ac
	void NetPlayMontageFromBT();// 0x4a94490
	void NetAbortMontageFromBT();// 0x4a94474

--------------------------------
Class: SolarMonsterAnimInstance.AnimInstance.Object
	SolarMonster* Monster;//[Offset: 0x268, Size: 0x8]
	SolarMBCComponent* BehaviorCtrlComponent;//[Offset: 0x270, Size: 0x8]
	float MoveSpeed;//[Offset: 0x278, Size: 0x4]
	bool IsDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	float DamageDirection;//[Offset: 0x280, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x284, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x288, Size: 0x4]
	bool bIsDoingMontageFromAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	void DoPlayMontageFromBT();// 0x505573c
	void DoAbortMontageFromBT();// 0x505573c
	bool CheckAttackStateTransitionOut(float CurrentRatio, float BlendOutRatio, int AttackState);// 0x4a97744

--------------------------------
Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x260, Size: 0x4]
	FString Side;//[Offset: 0x268, Size: 0x10]
	FString Job;//[Offset: 0x278, Size: 0x10]
	FString ElementID;//[Offset: 0x288, Size: 0x10]
	enum Type;//[Offset: 0x298, Size: 0x1]
	enum State;//[Offset: 0x299, Size: 0x1]
	enum Visibility;//[Offset: 0x29a, Size: 0x1]
	FName ElementTypeName;//[Offset: 0x29c, Size: 0x8]
	FString GroupKey;//[Offset: 0x2a8, Size: 0x10]
	Vector[] PlayerLocations;//[Offset: 0x2b8, Size: 0x10]
	void SetElementVisibility(const enum NewType);// 0x4acc168
	enum SetElementState(const enum NewState);// 0x4acc214
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x505573c
	void OnElementStateChanged(const enum CurrentState);// 0x505573c

--------------------------------
Class: SolarGameMode_EffectJobManager.Object

--------------------------------
Class: SCustomizedMode_AttributeManager.Object

--------------------------------
Class: SolarGameModeData.Object
	int GameModeID;//[Offset: 0x30, Size: 0x4]
	SGameMode_ModeConfig* CurrentModeData;//[Offset: 0x38, Size: 0x8]
	FString ModeConfigPath;//[Offset: 0x40, Size: 0x10]
	FString ModeParamsStr;//[Offset: 0x50, Size: 0x10]
	DataTable* JobDataTable;//[Offset: 0x60, Size: 0x8]
	DataTable* BoardDataTable;//[Offset: 0x68, Size: 0x8]
	DataTable* AttributeDataTable;//[Offset: 0x70, Size: 0x8]
	<FString,FString> ModeParams;//[Offset: 0xa8, Size: 0x50]
	void ReadConfigData();// 0x3aa89b4
	void InitModeParams(FString ParamStr);// 0x3aa89b4

--------------------------------
Class: SGameMode_ModeConfig.DataAsset.Object
	SoftObjectPath BP_Mode;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath BP_Reward;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RewardMap;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath JobStructure;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DataStructure;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath AttributeModifier;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath WellEffectJobRelationTable;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BadEffectJobRelationTable;//[Offset: 0xd8, Size: 0x18]
	FString UIConfig;//[Offset: 0xf0, Size: 0x10]
	SCustomMode_GameModeSetting GameModeSetting;//[Offset: 0x100, Size: 0x68]
	SGameMode_LevelConfig[] Levels;//[Offset: 0x168, Size: 0x10]
	<FString,FString> Arguments;//[Offset: 0x178, Size: 0x50]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	bool bActiveRadarOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 0x1]
	float AllowJoinBattleLifeTime;//[Offset: 0x1cc, Size: 0x4]
	bool bAllowJoinAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bConsiderPotentialPlayerWhenSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]

--------------------------------
Class: SCustomMode_GameModeSetting
	SoftObjectPath PlayerControllerClass;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath DefaultPawnClass;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PlayerStateClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath HUDClass;//[Offset: 0x48, Size: 0x18]
	int SettlementStageConfigID;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SolarRedHintManager.SolarGameManager.Object

--------------------------------
Class: SolarGameModeSelectionManager.SolarGameManager.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 0x8]
	void SaveGameModeLockSettings();// 0x4a1be88
	void LoadGameModeLockSettings();// 0x4a1be9c

--------------------------------
Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 0x50]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 0x10]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 0x10]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x4a1a6a0

--------------------------------
Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 0x1]
	float GetPingBackend;//[Offset: 0x34, Size: 0x4]
	float FPS;//[Offset: 0x38, Size: 0x4]
	byte GetPingBattleServer();// 0x4aab864
	float GetPacketsLossRate();// 0x4aab7fc
	float GetAverageFPS();// 0x4aab830

--------------------------------
Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x30, Size: 0x8]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	ChatOperatorUserSettings TempChatOperatorSettings;//[Offset: 0x39, Size: 0x2]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x40, Size: 0x8]
	void SaveGameSettings();// 0x4a2edc0
	void ResetToDefault(enum SettingPart);// 0x4a2edd4
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x4a2ec2c
	void OnSettingConfigSaved();// 0x4a2ec18
	void OnPickupSettingChanged();// 0x4a2ec04
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x4a2ed1c
	void Init(SolarGameInstanceBase* GameInstance);// 0x4a2ee78

--------------------------------
Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 0x18]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 0x80]
	WeaponUserSettings WeaponSettings;//[Offset: 0xd0, Size: 0x18]
	LanguageUserSettings LanguageSettings;//[Offset: 0xe8, Size: 0x2]
	CharacterVoiceUserSettings CharacterVoiceSettings;//[Offset: 0xea, Size: 0x1]
	SoundUserSettings SoundSettings;//[Offset: 0xec, Size: 0x20]
	BasicUserSettings BasicSettings;//[Offset: 0x10c, Size: 0x7]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0x114, Size: 0x88]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x19c, Size: 0x3]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x19f, Size: 0x2]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x1a8, Size: 0x18]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	float ConfigVersion;//[Offset: 0x1c4, Size: 0x4]
	FString ToJsonObjectString();// 0x4a2df74
	void FromJsonObjectString(FString JsonStr);// 0x4a2d51c
	bool CheckJsonObjectString(FString JsonStr);// 0x4a2da0c

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 0x1]
	enum ColorThemeType;//[Offset: 0x1, Size: 0x1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	FloatValue AdaptationUIValue;//[Offset: 0x4, Size: 0x4]
	enum SelectQualityLevel;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FloatValue
	float Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoScopeShotgunSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAutoScopeShotgunAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bAutoScopeSniperSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bAutoScopeSniperAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bAutoScopeSpecial_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bSniperSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bShotgunSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 0x1]
	enum CurCharacterVoiceLanguage;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: CharacterVoiceUserSettings
	enum CurVoiceLanguage;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 0x8]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 0x8]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	int MicroPhoneVolume;//[Offset: 0x18, Size: 0x4]
	int LoudSpeakerVolume;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum curGyroscpeChooseLevel;//[Offset: 0x5, Size: 0x1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x6, Size: 0x1]

--------------------------------
Class: SensitivityUserSettings
	FloatValue Sensitivity_Free;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0x4, Size: 0x4]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0x8, Size: 0x20]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x28, Size: 0x20]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x48, Size: 0x20]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x68, Size: 0x4]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x6c, Size: 0x4]
	VehicleCameraSensitivityData Sensitivity_Vehicle_NoShoot;//[Offset: 0x70, Size: 0xc]
	VehicleCameraSensitivityData Sensitivity_Vehicle_Shoot;//[Offset: 0x7c, Size: 0xc]

--------------------------------
Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: VehicleCameraSensitivityData
	FloatValue Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 0x1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 0x1]
	enum Mic;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 0x18]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x40, Size: 0x110]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x150, Size: 0x8]

--------------------------------
Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 0x8]
	RangeData Sound_Action;//[Offset: 0x8, Size: 0x8]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SensitivitySettingsRange
	RangeData Sensitivity_Free;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x8, Size: 0x8]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x10, Size: 0x40]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x50, Size: 0x40]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_NoShoot;//[Offset: 0x90, Size: 0x18]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_Shoot;//[Offset: 0xa8, Size: 0x18]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0xc0, Size: 0x8]
	RangeData Sensitivity_VehicleFire;//[Offset: 0xc8, Size: 0x8]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xd0, Size: 0x40]

--------------------------------
Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: VehicleCameraSensitivityRangeData
	RangeData Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarLoginManager.SolarGameManager.Object
	void InitFromLogin();// 0x3aa89b4
	void Init(SolarGameInstanceBase* GameInstance);// 0x505573c

--------------------------------
Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 0x8]
	void SaveLockSettings();// 0x4a7e7ac
	void LoadLockSettings();// 0x4a7e7c0
	void Init(SolarGameInstanceBase* GameInstance);// 0x4a7e708

--------------------------------
Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 0x50]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x4a7e280

--------------------------------
Class: SolarGameProgressManager.SolarGameManager.Object
	delegate OnGameStart;//[Offset: 0x38, Size: 0x10]
	void OnWorldConditionsCompleted();// 0x4a20908
	void OnStreamingLevelComplete();// 0x4a2091c
	void OnShadersCompileComplete();// 0x4a20930
	void OnGameStart__DelegateSignature();// 0x505573c
	static void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x4a205d8
	static void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x4a206ac
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x4a20780
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x4a20824
	static bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x4a20a90
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x4a20c40
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x4a20b90
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x4a20d48
	static bool HasGameStarted(const Object* WorldContextObject);// 0x4a209e8
	static SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x4a20944

--------------------------------
Class: SolarABTestManager.SolarGameManager.Object

--------------------------------
Class: SolarHttpManager.SolarGameManager.Object
	<FString,int> ReportStr2ReprotTimes;//[Offset: 0x40, Size: 0x50]
	int ReportRetryTimes;//[Offset: 0x90, Size: 0x4]
	delegate OnImgUploaded;//[Offset: 0x98, Size: 0x10]
	int Jank;//[Offset: 0xc4, Size: 0x4]
	int BigJank;//[Offset: 0xc8, Size: 0x4]
	float FPS25;//[Offset: 0xcc, Size: 0x4]
	int PeakPlayerNum;//[Offset: 0xf8, Size: 0x4]
	int PeakAINum;//[Offset: 0xfc, Size: 0x4]
	int PeakVehicleNum;//[Offset: 0x100, Size: 0x4]
	void UploadToHTTP(FString URL, FString str);// 0x4a54d00
	void UploadImg(out const int Appid, out const int AppUid, FString AppToken, out const int GameID, out const int UID, FString SourceImgPath);// 0x4a549d4
	FString StringToBase64(FString str);// 0x4a54ef8
	void StopRecordJank();// 0x4a54c28
	void StartRecordJank();// 0x4a54c3c
	void ResetPerfData(bool bKeepCurrentData);// 0x4a54900
	void ReportAbnormalPlayerToBackend(FString InPlayerId, FString InVariableName, FString InVariableValue);// 0x3aa89b4
	void ReCordOnlineError(FString InStr);// 0x3aa89b4
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x505573c
	void InitializeDelegates();// 0x4a549c0
	FString GetHttpReportUrl();// 0x4a54c50
	float GetAvgNum(int PerfType);// 0x4a54840
	void ClearDelegates();// 0x4a549ac
	void CleanPerfDirtyData();// 0x4a548ec
	FString Base64ToMD5(FString str);// 0x4a54e00

--------------------------------
Class: SolarActivityManager.SolarGameManager.Object

--------------------------------
Class: SolarTutorialManager.SolarGameManager.Object
	enum CurrentTutorialStage;//[Offset: 0x42, Size: 0x1]
	delegate OnRegisterEvent;//[Offset: 0x48, Size: 0x10]
	delegate OnStepActionBegan;//[Offset: 0x58, Size: 0x10]
	delegate OnStepActionEnded;//[Offset: 0x68, Size: 0x10]
	delegate OnStepActionReset;//[Offset: 0x78, Size: 0x10]
	delegate OnStepActionDisposed;//[Offset: 0x88, Size: 0x10]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0xe8, Size: 0x8]
	TutorialTableRow[] TutorialTableRows;//[Offset: 0xf0, Size: 0x10]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0x100, Size: 0x10]
	TutorialConditionTableRow[] ConditionTableRows;//[Offset: 0x110, Size: 0x10]
	<int,TutorialConditionTableRow> ConditionTableMapRows;//[Offset: 0x120, Size: 0x50]
	<int,Tutorial*> Tutorials;//[Offset: 0x170, Size: 0x50]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]
	int64 LastCheckTimestamp;//[Offset: 0x328, Size: 0x8]
	FString TutorialDataTablePath;//[Offset: 0x330, Size: 0x10]
	FString ActionDataTablePath;//[Offset: 0x340, Size: 0x10]
	FString ConditionDataTablePath;//[Offset: 0x350, Size: 0x10]
	FString TutorialGlobalConfigPath;//[Offset: 0x360, Size: 0x10]
	<uint16,FName> OriginCheckFuncNames;//[Offset: 0x370, Size: 0x50]
	<uint16,Function*> CheckFuncs;//[Offset: 0x3c0, Size: 0x50]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x430, Size: 0x8]
	void TryToStopTutorialByTutorialID(int InTutorialId);// 0x4beeddc
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x4bed2c8
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x4bee0e0
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x4bee228
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x4bee370
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x4bee4b8
	void TriggerTutorialModuleEvents(enum Module);// 0x4beef38
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x4bed038
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x4bef08c
	bool TriggerTutorialEventInternal(byte TriggerID);// 0x4beefdc
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x4bef194
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x4bed558
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x4bede50
	FString[] TriggerRunningStep(out const FString[] Params);// 0x4becda8
	FString[] TriggerPlayerLevelGreaterThan(out const FString[] Params);// 0x4bed410
	FString[] TriggerPlayerInTargetStage(out const FString[] Params);// 0x4beba6c
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x4bed930
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x4bedd08
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x4beda78
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x4bed6a0
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x4becb18
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x4becc60
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x4bed7e8
	FString[] TriggerFunctionUnlock(out const FString[] Params);// 0x4bed180
	void TriggerEvent(enum Module);// 0x4beee80
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x4bedf98
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x4becef0
	FString[] TriggerApproachElectronicTreasureBox(out const FString[] Params);// 0x4bec9d0
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x4bedbc0
	void TickActivatedTutorials();// 0x4beef24
	void TestTutorialTipsUI(int ID);// 0x3aa89b4
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x3aa89b4
	void SetTutorialTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x3aa89b4
	void SetSignNameBoolChange(FString SignName, bool NboolChangeum);// 0x3aa89b4
	void SetFlagNameIntCount(FString FlagName, int Num);// 0x3aa89b4
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x4bebbb4
	void SaveTutorialLevelSaveGame();// 0x4beba58
	void SaveLevelTutorialID(FString InLevelName, int InTutorialId);// 0x4beb564
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x4beb754
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x4beb958
	bool RunTriggerConditionCheck(Tutorial* InTutorial);// 0x3aa89b4
	bool RunConditionCheckByTutorialId(enum InConditionType, int InTutorialId);// 0x3aa89b4
	bool RunConditionCheckByExpression(FString InConditionalExpression);// 0x3aa89b4
	void ReceivePostSetupData();// 0x3aa89b4
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0x3aa89b4
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0x3aa89b4
	void ReceiveOnPostLoadMapWithWorld(FString LevelName);// 0x3aa89b4
	void ReceiveOnAllTutorialsFinished();// 0x3aa89b4
	void ReceiveLoadTutorialLevelData();// 0x3aa89b4
	void ReceiveLoadData();// 0x3aa89b4
	void ReceiveClearData();// 0x3aa89b4
	bool PreCheckTutorial(Tutorial* InTutorial);// 0x3aa89b4
	bool PreCheckSetup(int TutorialID);// 0x3aa89b4
	void OnPostLoadMap(FString LevelName);// 0x4bee600
	bool IsInTutorialLevel();// 0x3aa89b4
	void InitGuideActorByActionID(int[] ActionIDs, TutorialLevelInteractableActor* TutorialGuideActor);// 0x4beeca0
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x3aa89b4
	UserWidget* GetWeightByPanelNameAndChildWeightName(FString PanelName, FString ChildWidgetName);// 0x3aa89b4
	bool GetTutorialTipsUIInteractionFlag(int TutorialID);// 0x3aa89b4
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x4beb530
	bool GetSignNameBoolChange(FString SignName);// 0x3aa89b4
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x4beb658
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x4beb850
	int GetFlagNameIntCount(FString FlagName);// 0x3aa89b4
	byte GetCurrentPlayerLevel();// 0x3aa89b4
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x4bee6b0
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0x3aa89b4
	bool CheckTutorialTipUIOnClick(int TutorialID);// 0x3aa89b4
	void CheckTutorials(enum InTutorialModule, float InCheckInterval, bool bForceCheck);// 0x4bef284
	bool CheckIfWidgetReleased(FString InWidgetName);// 0x3aa89b4
	bool CheckIfWidgetPressed(FString InWidgetName);// 0x3aa89b4
	bool CheckIfWidgetClicked(FString InWidgetName);// 0x3aa89b4
	bool CheckIfWeaponSlotHasSpecifiedItem(int InSlot, int InItemID);// 0x4bebc58
	bool CheckIfUIPanelOpened(FString PanelName);// 0x3aa89b4
	bool CheckIfTutorialLevelDone(FString LevelName);// 0x3aa89b4
	bool CheckIfTakeDamage(int InLostHealth);// 0x4bec830
	bool CheckIfSprintingContinuously(float InTimeOfDuration);// 0x4bec780
	bool CheckIfShieldNotFull();// 0x4bec518
	bool CheckIfRunningStep(int TutorialID, int ActionID);// 0x4bebee0
	bool CheckIfReloading();// 0x4bec1d8
	bool CheckIfRechargingShield();// 0x4bec4e0
	bool CheckIfPlayerLevelGreaterThan(byte InSpecifiedLevel);// 0x3aa89b4
	bool CheckIfPlayerInTargetScene(byte InPlayStage);// 0x3aa89b4
	bool CheckIfOpenBigMapUMG();// 0x4bec2c0
	bool CheckIfNearAirDropBox();// 0x4bec2f8
	bool CheckIfMandatoryClicked();// 0x3aa89b4
	bool CheckIfJumpBegin();// 0x4bec6d8
	bool CheckIfJetFlyingVertically();// 0x4bec630
	bool CheckIfJetFlyingHorizontally();// 0x4bec668
	bool CheckIfInWater();// 0x4bec5c0
	bool CheckIfInVehicle();// 0x4bec168
	bool CheckIfInLobbyMain();// 0x3aa89b4
	bool CheckIfInAir();// 0x4bec588
	bool CheckIfHasSpecifiedItem(int InNum, int InItemID);// 0x4bec8e0
	bool CheckIfHasSpecifiedEquipmentByType(enum InItemType);// 0x4bebe30
	bool CheckIfHasSpecifiedEquipmentById(int InItemID);// 0x4bebd80
	bool CheckIfHasShield();// 0x4bec550
	bool CheckIfHasMatched();// 0x3aa89b4
	bool CheckIfFunctionUnlock(FString FunctionID);// 0x3aa89b4
	bool CheckIfEquipSpecifiedWeapon(int InWeaponID);// 0x4bec0b8
	bool CheckIfDying();// 0x4bec5f8
	bool CheckIfDead();// 0x4bebd48
	bool CheckIfCurrentWeaponAmmoFull();// 0x4bec1a0
	bool CheckIfConsumingMedicine();// 0x4bec6a0
	bool CheckIfCanUseSpecifiedWeaponAbility(int InAmmoId);// 0x4bec210
	bool CheckIfCanUseSpecifiedVehicleWeapon(FString InVehicleWeaponClassName);// 0x4bec368
	bool CheckIfCanUseSpecifiedVehicleAbility(FString InVehicleAbilityClassName);// 0x4bec424
	bool CheckIfCanOpenTreasureBox();// 0x3aa89b4
	bool CheckIfCanJetFlyVertically();// 0x4bec710
	bool CheckIfCanJetFlyHorizontally();// 0x4bec748
	bool CheckIfBotAIDying(int UniqueSpawnerID);// 0x4bebfd0
	bool CheckIfApproachElectronicTreasureBox();// 0x4bec080
	bool CheckIfAlreadyTriggeredMaxCount(int InTutorialId, int InTriggerMax);// 0x3aa89b4
	bool CheckIfAirDropBoxLanded();// 0x4bec330
	bool CheckConsumeItemButtonType(int InItemType);// 0x3aa89b4

--------------------------------
Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 0x50]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 0x4]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 0x4]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x90, Size: 0x38]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x4beab04
	FString GetTutorialLevelMainMapPath();// 0x4beaa54
	FString GetTutorialLevelMainMapName();// 0x4bea9a4
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x4beabbc

--------------------------------
Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 0x18]
	int VeteranTutorialID;//[Offset: 0x28, Size: 0x4]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 0x4]
	float WaitToEndTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	int[] TutorialIds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	enum TriggerStage;//[Offset: 0x21, Size: 0x1]
	enum Module;//[Offset: 0x22, Size: 0x1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 0x28]
	int EndNum;//[Offset: 0x50, Size: 0x4]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 0x28]
	int[] ActionIDs;//[Offset: 0x80, Size: 0x10]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]

--------------------------------
Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x20, Size: 0x78]
	TutorialNoticeUI TutorialNoticeUI;//[Offset: 0x98, Size: 0x30]
	TutorialForceUI TutorialForceUI;//[Offset: 0xc8, Size: 0x38]
	HighestGuide HighestGuide;//[Offset: 0x100, Size: 0x2]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0x108, Size: 0x18]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	TutorialRepeatTip RepeatTip;//[Offset: 0x128, Size: 0x18]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0x140, Size: 0x20]
	TutorialSoftCondition EndCondition;//[Offset: 0x160, Size: 0x28]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x188, Size: 0x28]
	float WaitTime;//[Offset: 0x1b0, Size: 0x4]
	float MinExecuteTime;//[Offset: 0x1b4, Size: 0x4]
	int[] OpenBehaviors;//[Offset: 0x1b8, Size: 0x10]
	int[] CloseBehaviors;//[Offset: 0x1c8, Size: 0x10]
	int FixedTriggerAreaID;//[Offset: 0x1d8, Size: 0x4]
	int[] BotAISpawnIDs;//[Offset: 0x1e0, Size: 0x10]
	int[] BotAIDeathIDs;//[Offset: 0x1f0, Size: 0x10]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x200, Size: 0x10]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x210, Size: 0x10]

--------------------------------
Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x10, Size: 0x18]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x28, Size: 0x18]
	Vector2D TutorialBPLocation;//[Offset: 0x40, Size: 0x8]
	int LocTextID;//[Offset: 0x48, Size: 0x4]
	float LocTextDuration;//[Offset: 0x4c, Size: 0x4]
	float DelayShowUITime;//[Offset: 0x50, Size: 0x4]
	float WaitUIShowTime;//[Offset: 0x54, Size: 0x4]
	float DelayShowCanCloseUITIme;//[Offset: 0x58, Size: 0x4]
	FString TextUISlotAnchorsAndAlignment;//[Offset: 0x60, Size: 0x10]
	enum UIParent;//[Offset: 0x70, Size: 0x1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]

--------------------------------
Class: TutorialNoticeUI
	SoftObjectPath NoticeUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NoticeUISlotAnchorsAndAlignment;//[Offset: 0x18, Size: 0x10]
	int NoticeUILocTextId;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TutorialForceUI
	SoftObjectPath TutorialForceUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NeedTouchOffLinkNodeButton;//[Offset: 0x18, Size: 0x10]
	FString ClickTouchOffLinkNodeButton;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: HighestGuide
	bool bIsUsingHighestGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsClickAnywhereToContinue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 0x10]
	float DelayTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TutorialSingleSubtitle
	FString LocalTextID;//[Offset: 0x0, Size: 0x10]
	FString Voice;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 0x4]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 0x10]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0xc, Size: 0x1]
	FString[] Parameters;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x68, Size: 0x98]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0x100, Size: 0x8]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x108, Size: 0x8]
	void Stop();// 0x4c61e40
	void ReceiveOnStart();// 0x3aa89b4
	void ReceiveOnSingleTaskFinish();// 0x3aa89b4
	void ReceiveOnFinish();// 0x3aa89b4
	void OnSingleTaskFinish();// 0x4c61dc0
	TutorialTableRow GetTableRowData();// 0x4c61e08
	int GetCurrentFinishNum();// 0x4c61dd4

--------------------------------
Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x4c67510
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x505573c

--------------------------------
Class: TutorialCondition.Object
	FString GetWorldName();// 0x4c64e90
	SolarCharacter* GetPlayer();// 0x4c64f40

--------------------------------
Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object

--------------------------------
Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x78, Size: 0x10]
	ActionNode*[] ExecutingNodes;//[Offset: 0x88, Size: 0x10]
	int TotalCount();// 0x4928ba8
	ActionNode* GetCurrentExecutingNode();// 0x4928b74
	SequenceNode* Append(ActionNode* Node);// 0x4928ac8

--------------------------------
Class: ActionNode.Object
	delegate OnBeganCallback;//[Offset: 0x28, Size: 0x10]
	delegate OnEndedCallback;//[Offset: 0x38, Size: 0x10]
	delegate OnResetCallback;//[Offset: 0x48, Size: 0x10]
	delegate OnDisposedCallback;//[Offset: 0x58, Size: 0x10]
	void Reset();// 0x4833f78
	bool Finished();// 0x4833f48
	void Finish();// 0x4833f8c
	bool Execute(float DeltaTime);// 0x4833fa8
	bool Disposed();// 0x4833f2c
	void Dispose();// 0x4833f64

--------------------------------
Class: TutorialLevelInteractableActor.Actor.Object
	void UnregisterEvent();// 0x505573c
	void RegisterEvent();// 0x505573c
	SolarTutorialManager* GetSolarTutorialManager();// 0x4c65200

--------------------------------
Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 0x50]
	enum PlayerProficiency;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	FString PlayerStartTag;//[Offset: 0x10, Size: 0x10]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TutorialID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SettlementStageManager.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	int CurStageIndex;//[Offset: 0x38, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 0x4]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 0x8]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 0x8]
	void UpdateModeConfig(const int InConfigID);// 0x492eb98
	void SkipToTarget();// 0x505573c
	void ShowNextStage();// 0x505573c
	void ShowDiePage();// 0x505573c
	void Init();// 0x505573c
	class SolarUWSettlementBase GetSettlementUIClass();// 0x492e910
	int GetSettlementStageID();// 0x492eb64
	SettlementConfig GetSettlementConfigRow();// 0x492e944
	SettlementFormula* GetFormula();// 0x492e8dc
	FString GetClassRelativePathName(const class Object InClass);// 0x505573c
	void CloseDiePage();// 0x505573c

--------------------------------
Class: SettlementFormula.Actor.Object
	static FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x492a074
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x49295a0
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x505573c
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x492966c
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x505573c
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x505573c
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x505573c
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x4929208
	float GetKDA(out const SettlementParam_KDA InParam);// 0x505573c
	FString[] GetGroupResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x49293d4
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x505573c
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x492972c
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x4929850
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x505573c

--------------------------------
Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float Lifetime;//[Offset: 0x8, Size: 0x4]
	int PlayerRank;//[Offset: 0xc, Size: 0x4]
	float GoldPunishRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float UseTime;//[Offset: 0x8, Size: 0x4]
	int WeaponKillNum;//[Offset: 0xc, Size: 0x4]
	int WeaponAssitNum;//[Offset: 0x10, Size: 0x4]
	float ExpRatio;//[Offset: 0x14, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x24, Size: 0x4]
	float CoinPunishRatio;//[Offset: 0x28, Size: 0x4]
	int RankCorePunish;//[Offset: 0x2c, Size: 0x4]
	int BaseExp;//[Offset: 0x30, Size: 0x4]
	float ExpRatio;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DeathNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MvpCharacterID;//[Offset: 0x320, Size: 0x4]
	int MvpSkinID;//[Offset: 0x324, Size: 0x4]
	SettlementStageManager* SettlementStageManager;//[Offset: 0x328, Size: 0x8]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x4bfaeb4
	void PlayMvpCharacterVoice();// 0x4bfaea0

--------------------------------
Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 0x4]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 0x40]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 0x28]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 0x28]
	int Page_SkipIndex;//[Offset: 0x28, Size: 0x4]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 0x50]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x4862b00
	Object* GetCrossLevelData(FString InSoltName);// 0x4862a48

--------------------------------
Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 0x4]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 0x10]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x70, Size: 0x50]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xc0, Size: 0x50]
	int DefaultMSAALevel;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 0x1]
	float FrameRateLobby;//[Offset: 0x4, Size: 0x4]
	float FrameRateInGame;//[Offset: 0x8, Size: 0x4]
	float FrameRatePC;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	void GetMatchResult(out MatchResult MatchResult);// 0x3aa89b4

--------------------------------
Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	FString BattleAddr;//[Offset: 0x10, Size: 0x10]
	FString Token;//[Offset: 0x20, Size: 0x10]
	int ModeID;//[Offset: 0x30, Size: 0x4]
	int RuleID;//[Offset: 0x34, Size: 0x4]
	FString SelfPlayerID;//[Offset: 0x38, Size: 0x10]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 0x10]
	FString MapName;//[Offset: 0x58, Size: 0x10]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 0x18]

--------------------------------
Class: MatchResult_Group
	int GroupID;//[Offset: 0x0, Size: 0x4]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString playerName;//[Offset: 0x10, Size: 0x10]
	int AvatarID;//[Offset: 0x20, Size: 0x4]
	int fightCharacterID;//[Offset: 0x24, Size: 0x4]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 0x18]
	FString CharacterName;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarAkSoundManager.SolarGameManager.Object
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x494e224
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x494e30c

--------------------------------
Class: KeyMappingManager.Object
	delegate OnKeyMappingUpdate;//[Offset: 0x120, Size: 0x10]
	delegate OnKeyMappingConfirm;//[Offset: 0x130, Size: 0x10]
	delegate OnKeyboardUpdate;//[Offset: 0x140, Size: 0x10]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 0x50]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 0x8]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x48c6750
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x48c67f4
	void ResetKeyMapping();// 0x48c673c
	bool IsComboKey(FString KeyName);// 0x48c6324
	void ImportKeyMappingSetting();// 0x48c6984
	bool HasKeyModified();// 0x48c62ec
	FString[] GetAllActionNames(int PlanIndex);// 0x48c65c8
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x48c63e0
	void ApplyResult();// 0x48c6728

--------------------------------
Class: KeyMappingFileMgr.Object

--------------------------------
Class: SolarSpecialEffectsMgr.Object

--------------------------------
Class: AndroidInputManager.Object
	delegate OnAndroidBackPressed;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: RegistedActorContainer

--------------------------------
Class: SolarAbstractViewModel.Object

--------------------------------
Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 0x10]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 0x10]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 0x10]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 0x10]
	OperationUIElement[] WheeledJoyStickOperationUI;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 0x10]
	float CurScale;//[Offset: 0x10, Size: 0x4]
	float MinScale;//[Offset: 0x14, Size: 0x4]
	float MaxScale;//[Offset: 0x18, Size: 0x4]
	float CurOpacity;//[Offset: 0x1c, Size: 0x4]
	float MinOpacity;//[Offset: 0x20, Size: 0x4]
	float MaxOpacity;//[Offset: 0x24, Size: 0x4]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float minOffsetY;//[Offset: 0x2c, Size: 0x4]
	float maxOffsetY;//[Offset: 0x30, Size: 0x4]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	Vector2D Translation;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 0x8]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 0x8]
	int AttributeID;//[Offset: 0x50, Size: 0x4]
	float CurrentValue;//[Offset: 0x54, Size: 0x4]
	float MaxValue;//[Offset: 0x58, Size: 0x4]
	float MinValue;//[Offset: 0x5c, Size: 0x4]
	float BaseValue;//[Offset: 0x60, Size: 0x4]
	void OnModifierChanged();// 0x4954ec4

--------------------------------
Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 0x4]
	float AttributeValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x228, Size: 0x8]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x230, Size: 0x8]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x238, Size: 0x8]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x240, Size: 0x10]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x250, Size: 0x8]
	float OriginScale;//[Offset: 0x264, Size: 0x4]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x288, Size: 0x8]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x290, Size: 0x8]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x298, Size: 0x50]
	FString AssemblingId;//[Offset: 0x2f0, Size: 0x10]
	void SetRenderMode(byte Mode);// 0x4956838
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x4956744
	void OnMeshEffectFactorChange();// 0x505573c
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x49564ec
	void OnChildPSCompActive(ActorComponent* Component, bool bReset);// 0x4956590
	bool IsFly();// 0x4956680
	bool IsCharging();// 0x49566f0
	bool HasEnergy();// 0x49566b8
	float GetBackpackOrginScale();// 0x4956728

--------------------------------
Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x580, Size: 0x10]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x590, Size: 0x50]
	SolarCharacter* SolarCharacter;//[Offset: 0x5e0, Size: 0x8]
	SolarBackpackActor* BackPackActor;//[Offset: 0x5e8, Size: 0x8]

--------------------------------
Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x4c831d0
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x4c8305c

--------------------------------
Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	float Length;//[Offset: 0x8, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SolarBackpackSFX.Actor.Object
	void OnPropellingModeChanged(enum PropellingMode);// 0x505573c
	ParticleSystemComponent* GetTrailEffectComponent();// 0x49673d8
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x496727c
	void BackpackSFXEnd();// 0x4967168
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x4967184

--------------------------------
Class: SolarBackpackComponent.ActorComponent.Object
	float DeathBoxEnergyRate;//[Offset: 0xb8, Size: 0x4]
	float RebirthEnergyRate;//[Offset: 0xbc, Size: 0x4]
	delegate OnWeaponCreateCompleteDelegate;//[Offset: 0xc8, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0x150, Size: 0x4]
	float SolarChargeInterval;//[Offset: 0x154, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0x158, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x15c, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x160, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x164, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x178, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x17c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x180, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x184, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x188, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x18c, Size: 0x4]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x228, Size: 0x4]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x22c, Size: 0x4]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x230, Size: 0x50]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x280, Size: 0x50]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	<int,int> defaultDeathBoxEnergyConfig;//[Offset: 0x328, Size: 0x50]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x378, Size: 0x50]
	float DiscardItemDelayNoticeTime;//[Offset: 0x3c8, Size: 0x4]
	float[] GradeRankProportion;//[Offset: 0x3d0, Size: 0x10]
	int[] InitialGridNum;//[Offset: 0x3e0, Size: 0x10]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x3f0, Size: 0x10]
	void WeaponCreateCompleteDelegate__DelegateSignature(byte SlotType, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x505573c
	void UpdateItemUI();// 0x495c048
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x495e168
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x495e250
	void UpdateConsumeSlotUI();// 0x4962580
	bool TryTriggerAbility(const int InItemID);// 0x495bd50
	void TrySendDropItemTips(const int InDroppedItemID);// 0x495a2c4
	float TakeDeathBoxEnergy();// 0x495a3b0
	int SupportWeaponSlotNum();// 0x4961274
	void StartCheckTutorials();// 0x495a368
	void SmoothEnergy(const float Amount);// 0x495d2bc
	void SetSettlementsOnServer();// 0x4961360
	void SetRequirementBySetting();// 0x49612a8
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x496249c
	void SetBoxCharging(bool bSet);// 0x495dd1c
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x4961514
	bool ServerUseItem(int ItemID, int Num);// 0x495e8f4
	void ServerSwapBagGrid(int FromGrade, int FromGridIndex, int TargetGrade, int TargetIndex);// 0x495ead4
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x495bf5c
	void ServerSetEnergyState(enum State);// 0x495d404
	bool ServerSendOutItem(int ItemID, int Num);// 0x495e9e4
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x495b350
	void ServerRPCUpgradeShield(SolarElectricShop* InTargetShop);// 0x495b2ac
	void ServerRPCUnLockBagGrid(const int Grade, const int NewUnLockNum);// 0x495fc74
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x495abf4
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x495ab10
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x495aa2c
	void ServerRPCSwapBagGridLuaCall(int FromGrade, int FromGridIndex, int TargetGrade, int TargetIndex);// 0x4960ee0
	void ServerRPCSwapBagGrid(const int FromGrade, const int FromGridIndex, const int TargetGrade, const int TargetIndex);// 0x4960984
	void ServerRPCSetSettlements_Implementation();// 0x4960878
	void ServerRPCSetBagRequirementArr(out const BagRequirementData[] BagRequirements);// 0x49607b8
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x495b56c
	void ServerRPCInitSettlementNeedRankArr();// 0x496112c
	void ServerRPCInitBagGradeData();// 0x4961140
	void ServerRPCFixBagGrid(const int InGrade, const int InGridIndex);// 0x496088c
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x495acd8
	void ServerRPCDisCardWeaponLuaCall(int Slot);// 0x4960d58
	void ServerRPCDiscardWeapon(const int InSlot);// 0x4960bd0
	void ServerRPCDisCardItemLuaCall(int ID, int Num);// 0x4960dfc
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x4960c74
	void ServerRPCDisCardHomeItemLuaCall(int Grade, int gridIndex);// 0x4961048
	void ServerRPCDiscardHomeItem(const int Grade, const int gridIndex);// 0x4960aec
	void ServerRPCArrangeBag();// 0x4960970
	void ServerPickUpHomeItemsGM(const int InItemID, const int InItemNum);// 0x495e6a4
	bool ServerPickUpHomeItems(int ItemID, bool isAutoPick);// 0x495f940
	int ServerGetDefaultGridNum(int Grade);// 0x495fae4
	void ServerFixBagGrid(int Grade, int gridIndex);// 0x495fb90
	bool ServerDiscardWeapon(const int Slot, const int InTriggerType, const bool bShow);// 0x495ed2c
	bool ServerDiscardHomeItem(int Grade, int gridIndex);// 0x495ec3c
	bool ServerDiscardFromBackpackByType(const enum ItemType, const bool InDropItem, const int InTriggerType);// 0x495ee68
	bool ServerDiscardFromBackpack(const int ItemID, const int Num, const bool InDropItem, const int InTriggerType);// 0x495efb4
	void ServerConsumeExtraEnergy(const float Amount, const enum Usage);// 0x495da64
	void ServerConsumeEnergy(const float Amount, const enum Usage);// 0x495db4c
	void ServerClearJetModule();// 0x495bf48
	void ServerClearEnergyState(enum State);// 0x495d360
	void ServerClearAllItems();// 0x495f4b4
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x495e788
	void ServerArrangeBag();// 0x495f748
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup);// 0x495f140
	bool ServerAddWeaponToWeaponSysByData(out const SolarItemData WeaponData, const bool IsAutoPickup, const int TriggerType);// 0x495f31c
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x495f65c
	int ServerAddToItemMap(SolarItemData ItemData);// 0x495fd58
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x495f4c8
	int ServerAddToBackpackByIdAndNum(const int ItemID, const int Num, const bool Bydefault, const float CurValue, const bool NeedReset, const int UserId, const int TriggerType);// 0x4960028
	int ServerAddToBackpack(out const SolarItemData ItemData, const bool Bydefault, const int TriggerType);// 0x495fe94
	bool ServerAddHomeItemToBagGrid(int ItemID, int Grade, int gridIndex);// 0x495f80c
	void ReqUseEnergy(float Amount, enum Usage);// 0x495dc34
	void RequestWeaponReplaceNotice(int OldWeaponItemId, int CurWeaponItemId, int OldWeaponLevel, int CurWeaponLevel);// 0x495cc38
	void RequestWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x495ca70
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x495b748
	void RequestUpgradeShield(SolarElectricShop* InTargetShop);// 0x495b6a4
	void RequestEquipReplaceNotice(int OldEquipItemId, int CurEquipItemId, int EquipType);// 0x495cda0
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x495b82c
	void RefreshWeaponPartsInBackPackUI();// 0x49625a8
	void RefreshWeaponInBackPackUIInternal();// 0x496260c
	void RefreshWeaponInBackPackUI();// 0x49625d0
	void RefreshItemInBackPackUI();// 0x49625f8
	void RefreshHomeItemBackPackUI();// 0x49625bc
	void RefreshEquipInBackPackUI();// 0x49625e4
	void RefreshBackPackUIState();// 0x4962594
	void PurchaseEShopItemsResponse_Implementation(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x495b434
	int PredictEnergy(const float Amount);// 0x495d210
	void OnUnLockGrid(int Grade);// 0x49612bc
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x495ba58
	void OnGameModeGlobalSettingChanged(GameModeGlobalSetting* InNewSettings);// 0x495d024
	void OnDayNightChange(const int ID);// 0x495c9cc
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x495e338
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x495af84
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x495aea0
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x495adbc
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x495b068
	bool ModuleOverflow2(int ModuleMax);// 0x495d904
	bool ModuleOverflow(int ModuleMax);// 0x495d9b4
	ReplicateBagGridData[] MergeAllGrade();// 0x4961dac
	void LogBackPackItem();// 0x4961500
	bool IsReviveItemRecommend();// 0x495a1dc
	bool IsReviveItemPickable();// 0x495a1a4
	bool IsReviveItem(const int InItemID);// 0x495a214
	bool IsExtraEnergyID(int ID);// 0x495e494
	bool IsEquippedWeapon(const int InThisID);// 0x49618c4
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x495a674
	bool IsEnergyID(int ID);// 0x495e544
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel);// 0x495c094
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x495a4d4
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x495a3e4
	void InitSettlementNeedRankArrOnServer();// 0x496142c
	void InitEquipItemUI();// 0x496117c
	void InitDefaultItem(int ItemID, int Num);// 0x4961190
	void InitDefaultDayNight(const int GameModeID);// 0x495c928
	void InitDeathBoxEnergyRate();// 0x4961168
	void InitBagGradeDataOnServer();// 0x4961418
	bool HasPickEnoughItem(int ItemID, out int requirementIndex);// 0x4961ee4
	bool HasEmptyWeaponSlot();// 0x495c43c
	bool GetWeaponSlotEmpty(int Slot);// 0x495c1dc
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x495a764
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x495c474
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x4961974
	float GetTotalEnergy();// 0x495cff0
	float GetQuantityFrom(enum Usage);// 0x495e054
	int GetPlayerRank();// 0x4961c74
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x4961680
	int GetNeedRankNumOnServer(int Grade);// 0x495fa38
	float GetMaxExtraEnergy();// 0x495e100
	float GetMaxEnergy();// 0x495e42c
	float GetMaxDeathBoxEnergyFromConfig();// 0x495a37c
	bool GetLastNormalGrid(out int outGrade, out int outGridIndex);// 0x4961ab0
	int GetItemNumById(int ItemID);// 0x4962344
	int GetItemMaxPile(int ItemID);// 0x49623f0
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x49620cc
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x4962208
	int GetHasUnLockGridNum(int Grade);// 0x4961bc8
	float GetFrequencyFrom(enum Usage);// 0x495dfa8
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x495c678
	int GetEquipIdByType(enum ItemType);// 0x495c87c
	int GetDefaultAddGrade();// 0x4962098
	int GetDafalutAddGrid(int Grade);// 0x4961fec
	float GetCurrExtraEnergy();// 0x495e134
	SolarItemData GetCurrentWeaponItemData();// 0x495c28c
	bool GetCurrentWeaponIsOverloading();// 0x495c05c
	void GetCurrentEquipItems(out int[] OutArray);// 0x4961440
	float GetCurrEnergy();// 0x495e460
	SolarCharacter* GetCharacterOwner();// 0x4962620
	void GetBagGridDatasByGrade(int Grade, out ReplicateBagGridData[] OutBagGridDataArray);// 0x4961ca8
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x495a8c4
	float GetAbilityRemainingCD(const int InItemID);// 0x495bb54
	float GetAbilityDuration(const int InItemID);// 0x495bc00
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x495b964
	void FixBagGrid(int Grade, int gridIndex);// 0x496046c
	void ExecuteGM(FString InStrGM);// 0x495e5f4
	void EquipModuleByID(int ModuleID);// 0x495d54c
	int EquipModule(const int ID, const float ModuleMax);// 0x495d814
	void EquipBatteryByID(int BatteryID);// 0x495d4a8
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float CD);// 0x495d5f0
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x4960550
	void DiscardItem(SolarItemData DiscardItem);// 0x496068c
	void DelayCheckClearAbility(const int InItemID);// 0x495bcac
	void CompleteWholeRowOnServer(int Grade);// 0x4961374
	void CommitEnergy(const int ID);// 0x495d16c
	void ClientWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x495cb54
	void ClientEquipReplaceNotice(const int OldEquipItemId, const int CurEquipItemId, const int EquipType);// 0x495cec8
	bool ClearBackpackItemByID(const int InItemID);// 0x4960284
	void CheckToGiveAbility(const int InItemID);// 0x495bea4
	void CheckToClearAbility(const int InItemID);// 0x495be00
	bool CheckIsRecWeaponParts(const int ItemID);// 0x495b14c
	bool CheckIsEquippedDifferentScope(const int PartID);// 0x495a5c4
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x495b1fc
	float ChargeMain(const float Amount, enum Usage);// 0x495deb8
	float ChargeExtra(const float Amount, enum Usage);// 0x495ddc8
	void CancelEnergy(const int ID);// 0x495d0c8
	bool CanAutoPickupHomeItem(const int InItemID);// 0x495f75c
	bool BatteryOverflow(int BatteryMax);// 0x495d764
	void ArrangeBag();// 0x4961154
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x4960334

--------------------------------
Class: BagRequirementData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicateBagGridData
	SolarItemData ItemData;//[Offset: 0x0, Size: 0xa8]
	enum GridType;//[Offset: 0xa8, Size: 0x1]
	int BagGrade;//[Offset: 0xac, Size: 0x4]
	int Index;//[Offset: 0xb0, Size: 0x4]
	bool IsRequirementTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxPile;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicateBagGradeData
	int BagGrade;//[Offset: 0x0, Size: 0x4]
	ReplicateBagGridData[] BagGridDataArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	int Slot;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int PropellingCounter;//[Offset: 0x4, Size: 0x4]
	byte JetType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: GyroscopeConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	DataTable* gyroscopeSensitivityDataTab;//[Offset: 0x38, Size: 0x8]
	DataTable* GyroscopeDeviceModelDataTab;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 0x1]
	Object* Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 0x8]
	float MaxRescureDis;//[Offset: 0xc0, Size: 0x4]
	float MaxRescureAngle;//[Offset: 0xc4, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0xc8, Size: 0x4]
	float TempTime;//[Offset: 0xcc, Size: 0x4]
	float CheckInterval;//[Offset: 0xd0, Size: 0x4]
	float TempReqTime;//[Offset: 0xd4, Size: 0x4]
	float RequestTimeout;//[Offset: 0xd8, Size: 0x4]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe0, Size: 0x8]
	SolarCharacter*[] NearByDeathVergeTeamMates;//[Offset: 0xe8, Size: 0x10]
	void TryRescueClosestTeammateLuaCall(bool IsShow);// 0x3aa89b4
	void TryRescueClosestTeammate();// 0x4bdcfac
	void ShowTeamRescueToUI(bool IsShow);// 0x505573c
	void SetRescueBtnVisibility(bool bIsVisible);// 0x3aa89b4
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x4bdd0d0
	void ReqCancelTeamRescure();// 0x4bdd0bc
	void OnRescueStateChangeInternal();// 0x3aa89b4
	void OnRescueStateChange();// 0x4bdd218
	void DetectRescueTeammate(float DeltaTime);// 0x4bdd174
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x4bdcfc0

--------------------------------
Class: InjectorMeshPreset
	SoftObjectPath InjectorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform InjectorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: WaterEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	FName DefaultTrackSocket;//[Offset: 0x28, Size: 0x8]
	FName FTrackSocket;//[Offset: 0x30, Size: 0x8]
	FName BTrackSocket;//[Offset: 0x38, Size: 0x8]
	FName LTrackSocket;//[Offset: 0x40, Size: 0x8]
	FName RTrackSocket;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb0, Size: 0x8]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x4a6500c
	void OnPlayerBackpackItemUpdate();// 0x4a64ff8
	bool CanUseMedicine();// 0x4a64fc0

--------------------------------
Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x4d0, Size: 0x8]
	float PickUpHighlyThresholdFactor;//[Offset: 0x4e0, Size: 0x4]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 0x1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x4e8, Size: 0x50]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x53c, Size: 0x8]
	<enum,ActorArrayMap> PickupItemsMap;//[Offset: 0x550, Size: 0x50]
	Actor*[] ProccessedList;//[Offset: 0x5a0, Size: 0x10]
	bool ItemUIToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	UIManager* UIManager;//[Offset: 0x5b8, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x5c0, Size: 0x8]
	Actor* PendingFirstItemActor;//[Offset: 0x670, Size: 0x8]
	SolarTreasureBoxActor* PendingFirstTreasureBox;//[Offset: 0x678, Size: 0x8]
	SolarTreasureBoxActor* PendingFirstDeathBox;//[Offset: 0x680, Size: 0x8]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	float UnAutoPickupItemTime;//[Offset: 0x68c, Size: 0x4]
	float AutoPickupTime;//[Offset: 0x690, Size: 0x4]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 0x1]
	bool GlobalAutoPickupHomeItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 0x1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 0x1]
	SolarGameUserSettings* UserSettings;//[Offset: 0x770, Size: 0x8]
	delegate OnItemDataSet;//[Offset: 0x788, Size: 0x10]
	delegate UpdateCheckBoxesVisibility;//[Offset: 0x798, Size: 0x10]
	delegate OnUpdateCheckBoxesHighLight;//[Offset: 0x7a8, Size: 0x10]
	delegate OnUpdateCheckBoxesStates;//[Offset: 0x7b8, Size: 0x10]
	delegate OnPickupListClear;//[Offset: 0x7c8, Size: 0x10]
	delegate OnTogglePickupList;//[Offset: 0x7d8, Size: 0x10]
	delegate OnSelectPickupSightWidget;//[Offset: 0x7e8, Size: 0x10]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]
	float DelayedDisplayTime;//[Offset: 0x7fc, Size: 0x4]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x800, Size: 0x8]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x808, Size: 0x8]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x810, Size: 0x8]
	FString[] FireResultMsgs;//[Offset: 0x818, Size: 0x10]
	DeathTreasureBox*[] NearByDeathboxes;//[Offset: 0x838, Size: 0x10]
	DeathTreasureBox* NearestResurrectBox;//[Offset: 0x848, Size: 0x8]
	bool LastResurrecteBtnVisbile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 0x1]
	float CheckResurrectInterval;//[Offset: 0x854, Size: 0x4]
	float TempResurrectInterval;//[Offset: 0x858, Size: 0x4]
	float CheckStopResurrectInterval;//[Offset: 0x85c, Size: 0x4]
	float TempStopResurrectInterval;//[Offset: 0x860, Size: 0x4]
	void UpdateResurrection(const float InDeltaTime);// 0x4aa1448
	void UpdateItemUI(bool bForce);// 0x4aa2af0
	void UpdateCheckboxSwitchLuaCall(enum PickupType, bool InCheckBoxSwitch);// 0x4aa1bf8
	void UpdateCheckboxSwitches(out const <enum,bool> InOpenSwitches);// 0x4aa1ce8
	void UpdateBagNearbyData();// 0x4aa2adc
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x4aa3b9c
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData);// 0x4aa2288
	void TryPickupItem(Actor* PickActor);// 0x4aa23b8
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4aa2d18
	void TryClearDirtyData(const bool bForce);// 0x4aa3d84
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4aa2c68
	void ToggleItemUI(bool Flag);// 0x4aa3edc
	void StopListenFireInput(bool bIsInstantlyStop);// 0x4aa1b38
	void StopAutoPickupTimer(enum PickupType);// 0x4aa2024
	void StopAutoPickupBoxHomeItemTimer();// 0x4aa1ffc
	void StartListenFireInput();// 0x4aa1be4
	void StartCheckTutorials(enum TriggerType);// 0x4aa2b9c
	void StartAutoPickupTimer(enum PickupType);// 0x4aa20c8
	void StartAutoPickupBoxHomeItemTimer();// 0x4aa2010
	void ShowPickupList(bool Flag);// 0x4aa3e30
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x4aa3cd4
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x4aa1e90
	void SetPickupSwitchInLua(const bool IsOpen);// 0x505573c
	void SetPickupSwitch(const bool IsOpen);// 0x4aa30d0
	void SetPickupCapsuleSize(out const Vector Size);// 0x4aa4074
	void SetIsAutoPickupHomeItems(const bool InValue);// 0x4aa245c
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x4aa1f3c
	void RestartPickupTimer(enum PickupType);// 0x4aa1dd8
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup);// 0x4aa3974
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType);// 0x4aa352c
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x4aa3a64
	void ReqPickupHomeItemByDrag(SolarItemActor* ItemActor, int Grade, int gridIndex);// 0x4aa384c
	void ReqPickupBoxHomeItemByDrag(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, int Grade, int gridIndex);// 0x4aa36e4
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x4aa3488
	void RemoveNearbyDeathbox(DeathTreasureBox* InDeathbox);// 0x4aa1300
	void RefreshResurrectBtn();// 0x4aa11d0
	void RefreshPickupTimer();// 0x4aa1e7c
	void RefreshItemUI();// 0x4aa3f9c
	void RecheckPendingActors();// 0x4aa28b4
	void ReceiveFireResult(FString InFireResultMsg);// 0x4aa1a88
	void ProcessFireResultMsgs();// 0x4aa1a74
	void PickFirstItemFromPickupList();// 0x4aa216c
	void OnWeaponUpgrade(SolarPlayerWeapon* InWeapon);// 0x4aa14ec
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x4aa1590
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x4aa25a0
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x4aa33a0
	void OnPickupSettingChanged();// 0x4aa1fe8
	void OnPickupConfirmHandle();// 0x4aa2180
	void OnPickupActorEnd(Actor* ItemActor);// 0x4aa276c
	void OnPickupActorBegin(Actor* ItemActor);// 0x4aa2810
	void OnEquipChanged();// 0x4aa258c
	void OnCharacterDeathBegin();// 0x4aa2e78
	void OnActorDestroyed(Actor* Actor);// 0x4aa26c8
	void MarkDirtyForTick();// 0x4aa3fb0
	bool IsValidItemActor(const Actor* ItemActor);// 0x4aa3fc4
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x4aa31b4
	bool IsEquipItem(const enum InType);// 0x4aa32f0
	bool IsCharacterInAir();// 0x4aa317c
	void InitPickupCheckBoxSwitches();// 0x4aa2578
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x4aa2e8c
	Actor* GetPickupTreasureBoxActor();// 0x4aa28c8
	DeathTreasureBox* GetNearestResurrectBox();// 0x4aa10f0
	<int,ActorArray> GetItemData(enum PickupItemType);// 0x4aa29a8
	int GetItemCount(enum PickupItemType);// 0x4aa28fc
	bool GetIsGlobalPickup();// 0x4aa2540
	bool GetIsAutoPickupHomeItems();// 0x4aa2508
	void DoStopOpeningAirDropBox();// 0x4aa2c40
	void DoOpenAirDropBox();// 0x4aa2c54
	void DetectNearestResurrectTarget();// 0x4aa12ec
	void CloseItemUI();// 0x4aa3f88
	void ClearAutoShowPickupListHandle();// 0x4aa1a60
	void ClearAllTimer();// 0x4aa1dc4
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x4aa2194
	bool CheckIsItemMaximizing(const int ItemID);// 0x4aa2dc8
	bool CanResurrectOwner(DeathTreasureBox* InDeathbox, out float OutDistance);// 0x4aa11e4
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x4aa1864
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x4aa17c0
	void CallHUDSetActiveResurrectBtn(const bool Inactive);// 0x4aa1124
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x4aa1908
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x4aa19b4
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x4aa171c
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x4aa1678
	void AddNearbyDeathbox(DeathTreasureBox* InDeathbox);// 0x4aa13a4

--------------------------------
Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 0x1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x440, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x444, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x448, Size: 0x4]
	FString PlayerId;//[Offset: 0x450, Size: 0x10]
	FString NickName;//[Offset: 0x460, Size: 0x10]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x488, Size: 0x10]
	float ResurrectDistance;//[Offset: 0x498, Size: 0x4]
	byte CurrResurrectionState;//[Offset: 0x49c, Size: 0x1]
	void SetCurrResurrectionState(const int InState);// 0x48878bc
	void ReceiveSetUIEnable(bool IsShow);// 0x505573c
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x505573c
	void ReceiveRefreshExtraEnergy(FString Message);// 0x505573c
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x505573c
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x488799c
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4887b08
	void OnRep_PickupedChanged();// 0x4887974
	void OnRep_CurrExtraEnergyValueChanged();// 0x4887988
	void OnRep_BResurrectionStateChanged();// 0x4887960
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x505573c
	bool IsInResurrectRange(SolarCharacter* InReqCharacter, out float RealDistance);// 0x48876fc
	bool CanBuyResurrect(SolarCharacter* InReqCharacter);// 0x4887804

--------------------------------
Class: BoxChargingInfo

--------------------------------
Class: SolarTreatmentComponent.ActorComponent.Object
	delegate OnCharacterHealthLow;//[Offset: 0xb8, Size: 0x10]
	int MedicineItemId;//[Offset: 0xc8, Size: 0x4]
	float DefaultTreatmentDuration;//[Offset: 0xcc, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 0x8]
	void TryStopTreatment();// 0x4be9130
	void TryStatisticsTreatedTimes();// 0x4be90e0
	void TryStartTreatment();// 0x4be9144
	void StopProgress();// 0x4be9108
	void StartProgress();// 0x4be911c
	bool IsMedicineEnough();// 0x4be91c8
	bool IsFullHealth();// 0x4be9190
	bool IsAbleToContinueTreatment();// 0x4be9200
	void IncreaseTreatedTimes();// 0x4be90f4
	FString GetModuleName_Implementation();// 0x4be9238
	bool CanStartTreatment();// 0x505573c
	bool CanBeTreated();// 0x4be9158

--------------------------------
Class: OperatorMeshPreset
	ParticleSystem* ShieldRepairFXResourceSoft;//[Offset: 0x0, Size: 0x28]
	Vector ShieldRepairFXRelativeLocation;//[Offset: 0x28, Size: 0xc]
	SoftObjectPath ShieldOperatorMeshPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath ShieldOperatorBigMeshPath;//[Offset: 0x50, Size: 0x18]
	Transform ShieldOperatorRelativeTrans;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ShieldEffect
	ParticleSystem* ShieldEffect;//[Offset: 0x0, Size: 0x28]
	Vector EffectScale;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TreasureBoxOperatorMeshPreset
	SoftObjectPath TreasureBoxOperatorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform TreasureBoxOperatorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x4e1, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x4e2, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x4e8, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x4f0, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	float RedrawTime;//[Offset: 0x4fc, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x508, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x514, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x51e, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51f, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x520, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x528, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x538, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x548, Size: 0x4]
	enum BlendMode;//[Offset: 0x54c, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x550, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x578, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x580, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x588, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x590, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x598, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x5a0, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x5a8, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x5b0, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x5b8, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x5c4, Size: 0x8]
	int LayerZOrder;//[Offset: 0x5cc, Size: 0x4]
	enum GeometryMode;//[Offset: 0x5d0, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x5d4, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x60990b8
	void SetWindowFocusable(bool bInWindowFocusable);// 0x6099178
	void SetWidgetSpace(enum NewSpace);// 0x60993b8
	void SetWidget(UserWidget* Widget);// 0x6099c60
	void SetTwoSided(const bool bWantTwoSided);// 0x60998d4
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x60996c8
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x6099810
	void SetRedrawTime(float InRedrawTime);// 0x6099474
	void SetPivot(out const Vector2D InPivot);// 0x60995f4
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x6099bbc
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x6099af4
	void SetGeometryMode(enum InGeometryMode);// 0x60992fc
	void SetDrawSize(Vector2D Size);// 0x60999b8
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x6099530
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x6099240
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x609976c
	void RequestRedraw();// 0x609999c
	enum GetWindowVisiblility();// 0x609915c
	bool GetWindowFocusable();// 0x6099224
	enum GetWidgetSpace();// 0x6099458
	UserWidget* GetUserWidgetObject();// 0x6099d74
	bool GetTwoSided();// 0x6099980
	bool GetTickWhenOffscreen();// 0x60998b8
	TextureRenderTarget2D* GetRenderTarget();// 0x6099d40
	float GetRedrawTime();// 0x6099514
	Vector2D GetPivot();// 0x60996a8
	LocalPlayer* GetOwnerPlayer();// 0x6099ac0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x6099d0c
	bool GetManuallyRedraw();// 0x6099ba0
	enum GetGeometryMode();// 0x609939c
	Vector2D GetDrawSize();// 0x6099a8c
	bool GetDrawAtDesiredSize();// 0x60995d8
	float GetCylinderArcAngle();// 0x60992e0
	Vector2D GetCurrentDrawSize();// 0x6099a58

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4]
	int SizeY;//[Offset: 0xc4, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xc8, Size: 0x10]
	byte AddressX;//[Offset: 0xd8, Size: 0x1]
	byte AddressY;//[Offset: 0xd9, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xda, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xda, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xda, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xdb, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xdd, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xde, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xdf, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: TeammateHUDPreset
	class UserWidget* TeammateHUDClass;//[Offset: 0x0, Size: 0x8]
	bool bUseDesireSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector2D DrawSize;//[Offset: 0xc, Size: 0x8]
	int ZOrder;//[Offset: 0x14, Size: 0x4]
	float DisplayMaxDistance;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 0x10]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 0x10]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 0x10]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xb8, Size: 0x8]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xc0, Size: 0x8]
	MaterialInterface* DetectedMaterial;//[Offset: 0xc8, Size: 0x28]
	UserWidget* CreatedScreenUI;//[Offset: 0xf0, Size: 0x8]
	TimerHandle DetectedTimerHandle;//[Offset: 0xf8, Size: 0x8]
	SolarCharacter* CharacterOwner;//[Offset: 0x100, Size: 0x8]
	ScannedInfo[] CurrentScanResults;//[Offset: 0x108, Size: 0x10]
	float CurrentSpanTimer;//[Offset: 0x118, Size: 0x4]
	FName[] ActivedRadarTags;//[Offset: 0x120, Size: 0x10]
	MaterialChangeHandle DetectedMaterialHandle;//[Offset: 0x130, Size: 0x8]
	void OnRecivedScanResults();// 0x3aa89b4
	void OnRecieveOnceScanStart(int ScanedNum);// 0x4ae53fc
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x4ae5570
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x4ae54a0
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime);// 0x4ae5308
	void OnceScanSuccessNotifation(int ScanedNum);// 0x3aa89b4
	void OnceScanFailedNotifation();// 0x3aa89b4
	void MarkedByOnceScanNotifation();// 0x3aa89b4
	FString GetModuleName_Implementation();// 0x4ae5640
	void ExposedByRadarNotifation();// 0x3aa89b4
	void ChangeDetectedMaterial(bool bInDetected);// 0x4ae525c

--------------------------------
Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 0x4]
	byte RadarType;//[Offset: 0x10, Size: 0x1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 0x8]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	enum TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	float TargetToward;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 0x10]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float DamageTime;//[Offset: 0xc, Size: 0x4]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xb8, Size: 0x8]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xc0, Size: 0x4]
	float MinCheckDistance;//[Offset: 0xc4, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xc8, Size: 0x4]
	void VehicleNotify(int VehicleID, int NameLocID, SolarPlayerController* PC);// 0x3aa89b4
	void UpdateAttachedMarks();// 0x4cbf1a8
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x4cbf354
	void ResponseChosenMark();// 0x3aa89b4
	void RemoveAttachedMarkByActors(out Actor*[] InActors);// 0x4cbf1bc
	void RecycleWorldMark(HUD_WorldMark* WorldMark);// 0x3aa89b4
	void NotifyThatToFarToMark();// 0x3aa89b4
	void MarkWarningOnWorld();// 0x4cbf5e8
	void MarkQuickChatOnWorld(FString IconImg);// 0x4cbf538
	void MarkPointOnWorld();// 0x4cbf5fc
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x4cbf610
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x4cbf3f8
	void MarkActorByAttachToThem(Actor* InActor);// 0x4cbf27c
	void LuaRelease();// 0x3aa89b4
	void LuaInit();// 0x3aa89b4
	void InteractTypeNotify(enum Type, SolarPlayerController* PC);// 0x3aa89b4
	void Init(SolarCharacter* Character);// 0x4cbf704
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x4cbf320
	HUD_WorldMark* GetFreeWorldMark();// 0x3aa89b4
	void CreateWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x3aa89b4
	void CreateWarningWidget(WorldMarkData Data);// 0x3aa89b4
	void CreateItemMarkWidget(WorldMarkData Data);// 0x3aa89b4
	void CreateInvalidWidget(WorldMarkData Data, bool bShouldNotify);// 0x3aa89b4

--------------------------------
Class: HUD_WorldMark.SolarUserWidget.UserWidget.Widget.Visual.Object
	float LiveTime;//[Offset: 0x320, Size: 0x4]
	float RefreshTime;//[Offset: 0x324, Size: 0x4]
	Vector WorldPos;//[Offset: 0x328, Size: 0xc]
	Vector2D ScreenSize;//[Offset: 0x334, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x33c, Size: 0x8]
	bool bIsOutOfRangeLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool bHasBeenAnsweredByMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]
	bool bIfWasChosen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 0x1]
	bool bIsCreateBySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 0x1]
	Image* ImgMarkArrow;//[Offset: 0x348, Size: 0x8]
	Image* ImgItemMarkArrow;//[Offset: 0x350, Size: 0x8]
	int PosInTeam;//[Offset: 0x358, Size: 0x4]
	enum Type;//[Offset: 0x35c, Size: 0x1]
	bool bAttachToObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 0x1]
	void UpdateDistance(out const Vector TargetPos);// 0x505573c
	void SwitchWidget(bool bOutOfRange);// 0x505573c
	void SetIfBeChosen(bool bIfChosen);// 0x505573c
	void LogMarkResponse();// 0x48b31e4
	void InitAttachedWidget(Actor* ActorAttachedTo);// 0x48b31f8
	void DestroySelf();// 0x505573c

--------------------------------
Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* MarkPanel;//[Offset: 0x320, Size: 0x8]
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x48b3ab0
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x48b3920

--------------------------------
Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Actor* CurrentFollowActor;//[Offset: 0x338, Size: 0x8]
	PlayerController* CurrentPlayerController;//[Offset: 0x340, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x348, Size: 0x8]
	Vector2D MarkPanelSize;//[Offset: 0x350, Size: 0x8]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x4835084
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x4835164
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x483524c
	Vector GetFollowActorLocation();// 0x483504c
	float GetDistance();// 0x4835130
	Actor* GetCurrentFollowActor();// 0x4835018

--------------------------------
Class: SolarCharacterAbility.SolarAbility.Actor.Object
	enum[] Conditions;//[Offset: 0x310, Size: 0x10]
	enum TriggerType;//[Offset: 0x320, Size: 0x1]
	float CoolDown;//[Offset: 0x324, Size: 0x4]
	int CharacterId;//[Offset: 0x328, Size: 0x4]
	int Level;//[Offset: 0x32c, Size: 0x4]
	int LevelOutside;//[Offset: 0x330, Size: 0x4]
	SolarCharacterAbilityCondition*[] ConditionInsts;//[Offset: 0x338, Size: 0x10]
	void UpdateParamsFromConfig();// 0x505573c
	void UpdateParam(FString ParamKey, float ParamValue);// 0x49a94b0
	void PrepareConfigData();// 0x505573c
	static void GiveCharacterAbility(class SolarCharacterAbility AbilityClass, SolarCharacter* SolarCharacter);// 0x49a95a4

--------------------------------
Class: SolarCharacterAbilityCondition.Object

--------------------------------
Class: CharacterGameplayTagsConfig.DataAsset.Object
	GameplayTag CruiseAbilityTag;//[Offset: 0x30, Size: 0x8]
	GameplayTag SkydiveFlyAbilityTag;//[Offset: 0x38, Size: 0x8]
	GameplayTag SkydiveLandAbilityTag;//[Offset: 0x40, Size: 0x8]
	GameplayTag CrouchAbilityTag;//[Offset: 0x48, Size: 0x8]
	GameplayTag JumpAbilityTag;//[Offset: 0x50, Size: 0x8]
	GameplayTag SprintAbilityTag;//[Offset: 0x58, Size: 0x8]
	GameplayTag SwimAbilityTag;//[Offset: 0x60, Size: 0x8]
	GameplayTag VaultAbilityTag;//[Offset: 0x68, Size: 0x8]
	GameplayTag JetFlyAbilityTag;//[Offset: 0x70, Size: 0x8]
	GameplayTag JetFlyVertAbilityTag;//[Offset: 0x78, Size: 0x8]
	GameplayTag JetFlyHoriAbilityTag;//[Offset: 0x80, Size: 0x8]
	GameplayTag LaunchAbilityTag;//[Offset: 0x88, Size: 0x8]
	GameplayTag EquipAbilityTag;//[Offset: 0x90, Size: 0x8]
	GameplayTag MeleeAbilityTag;//[Offset: 0x98, Size: 0x8]
	GameplayTag FireAbilityTag;//[Offset: 0xa0, Size: 0x8]
	GameplayTag ReloadAbilityTag;//[Offset: 0xa8, Size: 0x8]
	GameplayTag BoltAbilityTag;//[Offset: 0xb0, Size: 0x8]
	GameplayTag OpenScopeAbilityTag;//[Offset: 0xb8, Size: 0x8]
	GameplayTag GetOnVehicleAbilityTag;//[Offset: 0xc0, Size: 0x8]
	GameplayTag GetOffVehicleAbilityTag;//[Offset: 0xc8, Size: 0x8]
	GameplayTag SwitchVehicleSeatAbilityTag;//[Offset: 0xd0, Size: 0x8]
	GameplayTag StickOutOffVehicleAbilityTag;//[Offset: 0xd8, Size: 0x8]
	GameplayTag TreatAbilityTag;//[Offset: 0xe0, Size: 0x8]
	GameplayTag RechargeShieldAbilityTag;//[Offset: 0xe8, Size: 0x8]
	GameplayTag BigRechargeShieldAbilityTag;//[Offset: 0xf0, Size: 0x8]
	GameplayTag OpenTreasureBoxAbilityTag;//[Offset: 0xf8, Size: 0x8]
	GameplayTag RepairVehicleAbilityTag;//[Offset: 0x100, Size: 0x8]
	GameplayTag RescueAbilityTag;//[Offset: 0x108, Size: 0x8]
	GameplayTag AutoPickUpAbilityTag;//[Offset: 0x110, Size: 0x8]
	GameplayTag ResurrectTeammateAbilityTag;//[Offset: 0x118, Size: 0x8]
	GameplayTag DeathVergeAbilityTag;//[Offset: 0x120, Size: 0x8]
	GameplayTag DeathAbilityTag;//[Offset: 0x128, Size: 0x8]
	GameplayTag RebirthAbilityTag;//[Offset: 0x130, Size: 0x8]
	GameplayTag ParkourMasterEffectTag;//[Offset: 0x138, Size: 0x8]
	GameplayTag HawkEyeEffectTag;//[Offset: 0x140, Size: 0x8]
	GameplayTag MassInvisibilityEffectTag;//[Offset: 0x148, Size: 0x8]
	GameplayTag RapidBoostEffectTag;//[Offset: 0x150, Size: 0x8]
	GameplayTag SkydiveSoundTag;//[Offset: 0x158, Size: 0x8]
	GameplayTag CruisingStatusTag;//[Offset: 0x160, Size: 0x8]
	GameplayTag WalkingStatusTag;//[Offset: 0x168, Size: 0x8]
	GameplayTag FallingStatusTag;//[Offset: 0x170, Size: 0x8]
	GameplayTag FlyingStatusTag;//[Offset: 0x178, Size: 0x8]
	GameplayTag SwimmingStatusTag;//[Offset: 0x180, Size: 0x8]
	GameplayTag SkydivingStatusTag;//[Offset: 0x188, Size: 0x8]
	GameplayTag VaultingStatusTag;//[Offset: 0x190, Size: 0x8]
	GameplayTag VaultingAcceptCancelTag;//[Offset: 0x198, Size: 0x8]
	GameplayTag VaultingAcceptWeaponInputTag;//[Offset: 0x1a0, Size: 0x8]
	GameplayTag LaunchStatusTag;//[Offset: 0x1a8, Size: 0x8]
	GameplayTag SprintingStatusTag;//[Offset: 0x1b0, Size: 0x8]
	GameplayTag MeleeAttackingStatusTag;//[Offset: 0x1b8, Size: 0x8]
	GameplayTag FullBodyMeleeStatusTag;//[Offset: 0x1c0, Size: 0x8]
	GameplayTag FiringStatusTag;//[Offset: 0x1c8, Size: 0x8]
	GameplayTag VehicleFiringStatusTag;//[Offset: 0x1d0, Size: 0x8]
	GameplayTag HiddenFireStatusTag;//[Offset: 0x1d8, Size: 0x8]
	GameplayTag BoltingStatusTag;//[Offset: 0x1e0, Size: 0x8]
	GameplayTag ReloadingStatusTag;//[Offset: 0x1e8, Size: 0x8]
	GameplayTag ScopeOpeningStatusTag;//[Offset: 0x1f0, Size: 0x8]
	GameplayTag OpeningTreasureBoxStatusTag;//[Offset: 0x1f8, Size: 0x8]
	GameplayTag RechargingShieldStatusTag;//[Offset: 0x200, Size: 0x8]
	GameplayTag RescuingStatusTag;//[Offset: 0x208, Size: 0x8]
	GameplayTag TreatingStatusTag;//[Offset: 0x210, Size: 0x8]
	GameplayTag ReviveTeammateStatusTag;//[Offset: 0x218, Size: 0x8]
	GameplayTag MassInvisibilityStatusTag;//[Offset: 0x220, Size: 0x8]
	GameplayTag MassInvisibilityPrepareStatusTag;//[Offset: 0x228, Size: 0x8]
	GameplayTag DeathVergeStatusTag;//[Offset: 0x230, Size: 0x8]
	GameplayTag DeathStatusTag;//[Offset: 0x238, Size: 0x8]
	GameplayTag InhibitOpenScopeStatusTag;//[Offset: 0x240, Size: 0x8]
	GameplayTag InhibitWeaponInputStatusTag;//[Offset: 0x248, Size: 0x8]
	GameplayTag InhibitWeaponFireInputStatusTag;//[Offset: 0x250, Size: 0x8]
	GameplayTag InhibitMoveStatusTag;//[Offset: 0x258, Size: 0x8]
	GameplayTag InhibitUnCrouchStatusTag;//[Offset: 0x260, Size: 0x8]
	GameplayTag InhibitLeftHandWeaponAttachTag;//[Offset: 0x268, Size: 0x8]
	GameplayTag InhibitBuyResurrectionTag;//[Offset: 0x270, Size: 0x8]
	GameplayTag TrackingMasterStatusTag;//[Offset: 0x278, Size: 0x8]
	GameplayTag StartCruiseEventTag;//[Offset: 0x280, Size: 0x8]
	GameplayTag IntoParachuteZoneEventTag;//[Offset: 0x288, Size: 0x8]
	GameplayTag ForceParachuteEventTag;//[Offset: 0x290, Size: 0x8]
	GameplayTag FinishCruiseEventTag;//[Offset: 0x298, Size: 0x8]
	GameplayTag LaunchEventTag;//[Offset: 0x2a0, Size: 0x8]
	GameplayTag VaultEventTag;//[Offset: 0x2a8, Size: 0x8]
	GameplayTag StepEventTag;//[Offset: 0x2b0, Size: 0x8]
	GameplayTag MeleeAttackEventTag;//[Offset: 0x2b8, Size: 0x8]
	GameplayTag FireEventTag;//[Offset: 0x2c0, Size: 0x8]
	GameplayTag BoltEventTag;//[Offset: 0x2c8, Size: 0x8]
	GameplayTag EquipEventTag;//[Offset: 0x2d0, Size: 0x8]
	GameplayTag SwapEventTag;//[Offset: 0x2d8, Size: 0x8]
	GameplayTag PickUpEventTag;//[Offset: 0x2e0, Size: 0x8]
	GameplayTag AutoPickUpEventTag;//[Offset: 0x2e8, Size: 0x8]
	GameplayTag RepairVehicleEventTag;//[Offset: 0x2f0, Size: 0x8]
	GameplayTag DyingEventTag;//[Offset: 0x2f8, Size: 0x8]
	GameplayTag KillOrAssistEventTag;//[Offset: 0x300, Size: 0x8]
	GameplayTag GottenOnVehicleEventTag;//[Offset: 0x308, Size: 0x8]
	GameplayTag GottenOffVehicleEventTag;//[Offset: 0x310, Size: 0x8]
	GameplayTag VehicleForJetEventTag;//[Offset: 0x318, Size: 0x8]
	GameplayTag SideLeavingEventTag;//[Offset: 0x320, Size: 0x8]
	GameplayTag SideJoiningEventTag;//[Offset: 0x328, Size: 0x8]
	GameplayTag UltimateForbidenEventTag;//[Offset: 0x330, Size: 0x8]
	GameplayTag UltimateForbidenStatusTag;//[Offset: 0x338, Size: 0x8]
	GameplayTag BigWaterGunActivatingTag;//[Offset: 0x340, Size: 0x8]
	GameplayTag AirDropTag;//[Offset: 0x348, Size: 0x8]
	GameplayTag OwnNightComesAbilityTag;//[Offset: 0x350, Size: 0x8]
	GameplayTag SummonedJumpPadLaunchCooldownTag;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x680, Size: 0x8]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68b, Size: 0x1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x68c, Size: 0x4]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x690, Size: 0x4]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x694, Size: 0x4]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x698, Size: 0x4]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x69c, Size: 0x4]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	float OverriddenFallingGravity;//[Offset: 0x6a4, Size: 0x4]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x6a8, Size: 0x4]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x6ac, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x6b0, Size: 0x1]
	float MinTimeToCorrectClientAfterForcedUpdate;//[Offset: 0x6b4, Size: 0x4]
	float MaxTimeToKeepCorrectingClientAfterForcedUpdate;//[Offset: 0x6b8, Size: 0x4]
	enum CurrentAirMoveMode;//[Offset: 0x6d6, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x6d7, Size: 0x1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x6d8, Size: 0xc]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x6e4, Size: 0xc]
	JetPackConfig* JetPackConfig;//[Offset: 0x700, Size: 0x8]
	SkydiveConfig* SkydiveConfig;//[Offset: 0x720, Size: 0x8]
	float HinderAngel;//[Offset: 0x75c, Size: 0x4]
	float HinderPercent;//[Offset: 0x760, Size: 0x4]
	float HinderZ;//[Offset: 0x764, Size: 0x4]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x768, Size: 0x4]
	float SwimSpeedConfig;//[Offset: 0x76c, Size: 0x4]
	float SwimSpeedSmoothSpeed;//[Offset: 0x770, Size: 0x4]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x774, Size: 0x4]
	float SwimMaxSinkingSpeed;//[Offset: 0x778, Size: 0x4]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x77c, Size: 0x8]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 0x1]
	float DeathVergeBodyRadius;//[Offset: 0x78c, Size: 0x4]
	float DeathVergeHalfHeight;//[Offset: 0x790, Size: 0x4]
	void SetHinderZ(float InHinderZ);// 0x49b277c
	void SetHinderAngel(float InHinderAngel);// 0x49b2820
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x49b2930
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x49b2678
	byte GetSteppedSurfaceType();// 0x49b28c4
	enum GetLastWalkMode();// 0x49b28f8
	enum GetCurrentWalkMode();// 0x49b2914

--------------------------------
Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x610, Size: 0x4]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x638, Size: 0x38]

--------------------------------
Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float JumpTime;//[Offset: 0x4, Size: 0x4]
	float JumpDelay;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: JetPackConfig.DataAsset.Object
	float AltitudeLimitation;//[Offset: 0x30, Size: 0x4]
	float DashHeightForLimitedAltitude;//[Offset: 0x34, Size: 0x4]
	float SlantDashInputThreshold;//[Offset: 0x38, Size: 0x4]
	float VerticalDashTime;//[Offset: 0x3c, Size: 0x4]
	float VerticalDashHeight;//[Offset: 0x40, Size: 0x4]
	float VerticalDashAngle;//[Offset: 0x44, Size: 0x4]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x48, Size: 0x4]
	float VerticalDashBreakableTime;//[Offset: 0x4c, Size: 0x4]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x50, Size: 0x4]
	float SlantDashTime;//[Offset: 0x54, Size: 0x4]
	float SlantDashHeight;//[Offset: 0x58, Size: 0x4]
	float SlantDashAngle;//[Offset: 0x5c, Size: 0x4]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x60, Size: 0x4]
	float SlantDashBreakableTime;//[Offset: 0x64, Size: 0x4]
	float SlantDashCameraFadeOutTime;//[Offset: 0x68, Size: 0x4]
	float HorizontalDashTime;//[Offset: 0x6c, Size: 0x4]
	float HorizontalDashDistance;//[Offset: 0x70, Size: 0x4]
	float HorizontalDashAngle;//[Offset: 0x74, Size: 0x4]
	float HorizontalDashEndSpeed;//[Offset: 0x78, Size: 0x4]
	float HorizontalDashBreakableTime;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x80, Size: 0x4]
	float UnderWaterHorizontalDashTime;//[Offset: 0x84, Size: 0x4]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x88, Size: 0x4]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x8c, Size: 0x4]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x90, Size: 0x4]
	VehicleEjectParams DefaultVehicleEjectParams;//[Offset: 0x94, Size: 0x10]

--------------------------------
Class: SkydiveConfig.DataAsset.Object
	float DefaultFallingSpeed;//[Offset: 0x30, Size: 0x4]
	float MinFallingSpeed;//[Offset: 0x34, Size: 0x4]
	float FallingBrakingDeceleration;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve FlyingForwardPitchMappingCurve;//[Offset: 0x40, Size: 0x88]
	RuntimeFloatCurve MaxFlyingForwardSpeedCurve;//[Offset: 0xc8, Size: 0x88]
	float MaxFlyingSidewardSpeed;//[Offset: 0x150, Size: 0x4]
	float MaxFlyingAcceleration;//[Offset: 0x154, Size: 0x4]
	float MinFlyingBrakingDeceleration;//[Offset: 0x158, Size: 0x4]
	float MaxFlyingBrakingDeceleration;//[Offset: 0x15c, Size: 0x4]
	float FlyingRotationSmoothSpeedYaw;//[Offset: 0x160, Size: 0x4]
	float FlyingRotationSmoothSpeedPitch;//[Offset: 0x164, Size: 0x4]
	float FlyingRotationSmoothSpeedYawOnFollowing;//[Offset: 0x168, Size: 0x4]
	float FlyingRotationSmoothSpeedPitchOnFollowing;//[Offset: 0x16c, Size: 0x4]
	float LandingHeight;//[Offset: 0x170, Size: 0x4]
	float LandingFallingSpeed;//[Offset: 0x174, Size: 0x4]
	float LandingFallingBrakingDeceleration;//[Offset: 0x178, Size: 0x4]
	float LandingMaxFlyingSpeed;//[Offset: 0x17c, Size: 0x4]
	float LandingFlyingAcceleration;//[Offset: 0x180, Size: 0x4]
	FName[] LandingIgnoredActorTags;//[Offset: 0x188, Size: 0x10]
	Vector[] FollowFormation;//[Offset: 0x198, Size: 0x10]
	float SmoothTimeToCatchUpWithLeaderOnBeginning;//[Offset: 0x1a8, Size: 0x4]
	CharacterMovementNetworkOptions NetworkOptions;//[Offset: 0x1ac, Size: 0xc]
	CharacterMovementSimulationOptions SimulationOptions;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CharacterMovementSimulationOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x4, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x8, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CruiseAssetSet.DataAsset.Object
	SoftClassPath CapsuleActorClass;//[Offset: 0x30, Size: 0x18]
	SoftClassPath[] CruiseAbilityClasses;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x230, Size: 0x8]
	WidgetComponent* LocationSign;//[Offset: 0x238, Size: 0x8]
	MiniMapAirlineData MiniMapData;//[Offset: 0x264, Size: 0x2c]
	UsingAirlineData CurrentAirline;//[Offset: 0x290, Size: 0x44]
	int ForceParachuteWarningTime;//[Offset: 0x2d4, Size: 0x4]
	float MaxAllowedSmoothDistance;//[Offset: 0x2d8, Size: 0x4]
	float ClientSpeedScale;//[Offset: 0x2dc, Size: 0x4]
	float ClientRotationSmoothSpeed;//[Offset: 0x2e0, Size: 0x4]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x318, Size: 0x8]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x320, Size: 0x50]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x370, Size: 0x10]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x4984adc
	void OnRep_MiniMapAirline();// 0x4984c54
	void OnRep_CurrentAirline();// 0x4984c40
	static SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x4984d40
	float GetCruiseProgress();// 0x4984c68
	void ClientSmoothMove(float DeltaTime);// 0x4984c9c
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x4984b80

--------------------------------
Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 0x8]
	int BoarderTeamID;//[Offset: 0x8, Size: 0x4]
	int BoarderTeamSize;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UsingAirlineData
	int MapID;//[Offset: 0x0, Size: 0x4]
	Vector StartPoint;//[Offset: 0x4, Size: 0xc]
	Vector EndPoint;//[Offset: 0x10, Size: 0xc]
	Vector2D Direction;//[Offset: 0x1c, Size: 0x8]
	float Speed;//[Offset: 0x24, Size: 0x4]
	float Height;//[Offset: 0x28, Size: 0x4]
	Vector CanParachutePoint;//[Offset: 0x2c, Size: 0xc]
	Vector ForceParachutePoint;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 0x50]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 0x10]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x485b89c
	void ClearTeamFormationData();// 0x485b888
	void ClearCruiseFormationData();// 0x485b7b0
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x485b9a4
	static void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x485b620
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x485ba98
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x485b7c4

--------------------------------
Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 0xc]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 0x8]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb0, Size: 0x8]
	SolarCharacter* GetCharacterOwner();// 0x487df9c

--------------------------------
Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x228, Size: 0x18]
	SoftObjectPath StopCruisingPath;//[Offset: 0x240, Size: 0x18]
	FName CruiseCharacterBindingName;//[Offset: 0x258, Size: 0x8]
	FName CruiseCapsuleBindingName;//[Offset: 0x260, Size: 0x8]
	FName CruiseCameraBindingName;//[Offset: 0x268, Size: 0x8]
	float SequenceCameraBlendDuration;//[Offset: 0x270, Size: 0x4]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x278, Size: 0x8]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x280, Size: 0x8]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x288, Size: 0x18]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a0, Size: 0x8]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b0, Size: 0x10]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c0, Size: 0x10]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d0, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x2d8, Size: 0x8]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e0, Size: 0x8]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2e8, Size: 0x8]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f0, Size: 0x8]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x2f8, Size: 0x8]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x300, Size: 0x8]
	SoftObjectPath CloudParticlePath;//[Offset: 0x308, Size: 0x18]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x340, Size: 0x8]
	void StopCruiseSequenceFinished();// 0x4983e1c
	void StartCruiseSequenceFinished();// 0x4983e30
	void PlayStopCruiseSequence();// 0x4983f50
	void PlayStopCruiseAnimation();// 0x4983f3c
	void PlayStartCruiseSequence();// 0x4983f78
	void PlayCruiseLoopAnimation();// 0x4983f64
	void HideCapsuleAirflowVFX();// 0x4983f28
	static SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x4983e44

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x270, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x280, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x288, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x290, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2a0, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a8, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	void ShowBurnin();// 0x6284744
	void SetSequence(LevelSequence* InSequence);// 0x62849a4
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x62847a0
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x628484c
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x6284480
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x62845d0
	void ResetBindings();// 0x6283f2c
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x6283f40
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x6284008
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x62840ec
	void OnLevelSequenceLoaded__DelegateSignature();// 0x505573c
	LevelSequence* LoadSequence();// 0x6284a48
	void HideBurnin();// 0x6284758
	LevelSequencePlayer* GetSequencePlayer();// 0x628476c
	LevelSequence* GetSequence();// 0x6284a7c
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x6283d6c
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x6283e68
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x62841f8
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x6284328

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x888, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x62865c8
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x6286600

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x408, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10]
	delegate OnStop;//[Offset: 0x428, Size: 0x10]
	delegate OnPause;//[Offset: 0x438, Size: 0x10]
	delegate OnFinished;//[Offset: 0x448, Size: 0x10]
	byte Status;//[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4]
	int DurationFrames;//[Offset: 0x46c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 0x10]
	void StopAtCurrentTime();// 0x5e59df0
	void Stop();// 0x5e59e04
	void SetTimeRange(float StartTime, float Duration);// 0x5e59650
	void SetPlayRate(float PlayRate);// 0x5e58ec4
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x5e59a68
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x5e59b4c
	void SetFrameRate(FrameRate FrameRate);// 0x5e59860
	void SetFrameRange(int StartFrame, int Duration);// 0x5e59734
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x5e58e10
	void ScrubToSeconds(float TimeInSeconds);// 0x5e5931c
	bool ScrubToMarkedFrame(FString InLabel);// 0x5e59100
	void ScrubToFrame(FrameTime NewPosition);// 0x5e59508
	void Scrub();// 0x5e59e18
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x5e58a40
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x5e58aec
	void PlayToSeconds(float TimeInSeconds);// 0x5e593c0
	bool PlayToMarkedFrame(FString InLabel);// 0x5e591bc
	void PlayToFrame(FrameTime NewPosition);// 0x5e595ac
	void PlayReverse();// 0x5e59ef8
	void PlayLooping(int NumLoops);// 0x5e59e40
	void Play();// 0x5e59f0c
	void Pause();// 0x5e59e2c
	void JumpToSeconds(float TimeInSeconds);// 0x5e59278
	void JumpToPosition(float NewPlaybackPosition);// 0x5e599c4
	bool JumpToMarkedFrame(FString InLabel);// 0x5e59044
	void JumpToFrame(FrameTime NewPosition);// 0x5e59464
	bool IsReversed();// 0x5e58f9c
	bool IsPlaying();// 0x5e5900c
	bool IsPaused();// 0x5e58fd4
	void GoToEndAndStop();// 0x5e59ddc
	QualifiedFrameTime GetStartTime();// 0x5e59840
	float GetPlayRate();// 0x5e58f68
	float GetPlaybackStart();// 0x5e59cb0
	float GetPlaybackPosition();// 0x5e59d34
	float GetPlaybackEnd();// 0x5e59c54
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x5e58bdc
	float GetLength();// 0x5e59d00
	FrameRate GetFrameRate();// 0x5e5990c
	int GetFrameDuration();// 0x5e59928
	QualifiedFrameTime GetEndTime();// 0x5e59818
	QualifiedFrameTime GetDuration();// 0x5e5995c
	bool GetDisableCameraCuts();// 0x5e58df0
	QualifiedFrameTime GetCurrentTime();// 0x5e59990
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x5e58cd4
	void ChangePlaybackDirection();// 0x5e59ee4

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x6282c88
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x6282db0
	Object* FindMetaDataByClass(class Object InClass);// 0x6282e4c
	Object* CopyMetaData(Object* InMetaData);// 0x6282d14

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x62838d8

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x258, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x310, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x505573c
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x6285854

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7e0, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x60a5e2c

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x880, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x88c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x898, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x8b0, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x908, Size: 0x4]
	float CurrentAperture;//[Offset: 0x90c, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x910, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x920, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x930, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x940, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0x950, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x960, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x970, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x974, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x60a6a88
	void SetFilmbackPresetByName(FString InPresetName);// 0x60a6be8
	void SetCurrentFocalLength(out const float InFocalLength);// 0x60a6e9c
	float GetVerticalFieldOfView();// 0x60a6e34
	static NamedLensPreset[] GetLensPresetsCopy();// 0x60a6970
	FString GetLensPresetName();// 0x60a6b38
	float GetHorizontalFieldOfView();// 0x60a6e68
	FString GetFilmbackPresetName();// 0x60a6d84
	FString GetDefaultFilmbackPresetName();// 0x60a6c98

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: SkydivingEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	Transform AttachmentOffset;//[Offset: 0x30, Size: 0x30]
	FName AttachmentSocket;//[Offset: 0x60, Size: 0x8]
	enum Lifetime;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void OnRep_bEnabled();// 0x6bdca50

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x288, Size: 0x18]
	SLHeightFogData HeightFogData_M;//[Offset: 0x2a0, Size: 0x10]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x2b0, Size: 0x20]
	LinearColor FogColor_M;//[Offset: 0x2d0, Size: 0x10]
	float FogDensity;//[Offset: 0x2e0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x2e4, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x2e8, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x2f4, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x308, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x310, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x314, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x324, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x328, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x32c, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x330, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x334, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x344, Size: 0x4]
	float StartDistance;//[Offset: 0x348, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x34c, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x354, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x358, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x35c, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x36c, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x370, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x374, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x6bdd534
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x6bdd490
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x6bdd34c
	void SetVolumetricFogDistance(float NewValue);// 0x6bdd2a8
	void SetVolumetricFogAlbedo(Color NewValue);// 0x6bdd3f0
	void SetVolumetricFog(bool bNewValue);// 0x6bdd5d8
	void SetStartDistance(float Value);// 0x6bdd728
	void SetSecondFogData_FogHeightOffset(float Value);// 0x6bddf7c
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x6bde020
	void SetSecondFogData_FogDensity(float Value);// 0x6bde0c4
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x6bddba4
	void SetInscatteringTextureTint(LinearColor Value);// 0x6bddb00
	void SetInscatteringColorCubemapAngle(float Value);// 0x6bddcec
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x6bddd90
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x6bddc48
	void SetFogMaxOpacity(float Value);// 0x6bdd7cc
	void SetFogInscatteringColor(LinearColor Value);// 0x6bdde34
	void SetFogHeightFalloff(float Value);// 0x6bdd870
	void SetFogDensity(float Value);// 0x6bdded8
	void SetFogCutoffDistance(float Value);// 0x6bdd684
	void SetDirectionalInscatteringStartDistance(float Value);// 0x6bdd9b8
	void SetDirectionalInscatteringExponent(float Value);// 0x6bdda5c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x6bdd914
	void Set_HStartDistance(float _HStartDistance);// 0x6bde5e4
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x6bde540
	void Set_HFogHeight(float _HFogHeight);// 0x6bde72c
	void Set_HFogFallOff(float _HFogFallOff);// 0x6bde688
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x6bde168
	void Set_DStartDistance(float _DStartDistance);// 0x6bde7d0
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x6bde874
	void Set_DMaxDistance(float _DMaxDistance);// 0x6bde9bc
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x6bde3f8
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x6bde354
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x6bde20c
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x6bde49c
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x6bde2b0
	void Set_DFogHeight(float _DFogHeight);// 0x6bdeb04
	void Set_DFogGamma(float _DFogGamma);// 0x6bde918
	void Set_DFogFallOff(float _DFogFallOff);// 0x6bdea60

--------------------------------
Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 0x4]
	float DFogFallOff;//[Offset: 0x4, Size: 0x4]
	float DMaxDistance;//[Offset: 0x8, Size: 0x4]
	float DFogGamma;//[Offset: 0xc, Size: 0x4]
	float DMaxOpacity;//[Offset: 0x10, Size: 0x4]
	float DStartDistance;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 0x4]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float HStartDistance;//[Offset: 0x8, Size: 0x4]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 0x4]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 0x4]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 0x4]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 0x10]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1300, Size: 0x8]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x1308, Size: 0x8]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1310, Size: 0x1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x1318, Size: 0x10]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x1328, Size: 0x10]
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x4938734
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x49389ec
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x4938890
	void RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x4938fe0
	void PostDefaultAbilitiesGranted();// 0x505573c
	void OnRep_ReplicatedAnimMontageForMesh();// 0x4938bd0
	void OnNotifiedTagChanged(out const GameplayTag Tag, bool bAdded);// 0x4939a80
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x4938bec
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x4938e88
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(const class GameplayAbility AbilityClass, int Level);// 0x4939748
	GameplayAbilitySpecHandle K2_GiveAbility(const class GameplayAbility AbilityClass, int Level);// 0x4939838
	void K2_GetEffectMaxTimeRemainingAndDuration(GameplayTag EffectTag, out float TimeRemaining, out float Duration);// 0x4939544
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x49399d4
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x4939690
	bool IsNotifiedTagAvailable(out const GameplayTag Tag);// 0x4939b84
	GameplayAbilitySpecHandle GiveDefaultAbility(const class GameplayAbility AbilityClass);// 0x4939928
	void ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x4939378
	void AddGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x49391ac

--------------------------------
Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 0x30]

--------------------------------
Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 0x38]

--------------------------------
Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 0x4]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 0x8]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 0x8]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 0x38]
	float MetaAttributeValue;//[Offset: 0x58, Size: 0x4]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 0x10]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 0x3]

--------------------------------
Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 0x8]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 0x38]
	float EffectValue;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 0x50]
	<FName,SoundGroupBase*> SoundGroupTable;//[Offset: 0x80, Size: 0x50]
	Transform DefaultTransform;//[Offset: 0xd0, Size: 0x30]

--------------------------------
Class: SoundGroupBase.Object

--------------------------------
Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 0x4]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 0x4]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 0x1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	byte HealthChangeType;//[Offset: 0xba, Size: 0x1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 0x8]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 0x8]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	int UseWeaponID;//[Offset: 0xd4, Size: 0x4]
	enum DamageType;//[Offset: 0xd8, Size: 0x1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 0x8]
	FString HitBoneName;//[Offset: 0xf0, Size: 0x10]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0x8b5, Size: 0x1]
	enum PlayerOutType;//[Offset: 0x8b6, Size: 0x1]
	enum PlayerType;//[Offset: 0x8b7, Size: 0x1]
	enum PlayerGameRole;//[Offset: 0x8b8, Size: 0x1]
	delegate OnSideChange;//[Offset: 0x8d0, Size: 0x10]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0x8e0, Size: 0x10]
	void UpDateDataManager(const SCMReplicateHostData[] ReplicateData, bool bInit);// 0x49014f8
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x4901940
	void OnRep_BattleState();// 0x49017cc
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x505573c
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x505573c
	void NotifyUpdateCGMData(FString InDataName);// 0x490171c
	void NotifyClientUpdateDataManager(bool bInit);// 0x490144c
	bool NeedConsiderRepData();// 0x49016dc
	SCMReplicateHostData[] GetReplicateDataArray();// 0x4901620
	SCMPlayerState*[] GetMySidePlayerList();// 0x4901890
	SCMPlayerState*[] GetMySideJobPlayerList();// 0x49017e0
	void CanPlayerBattle();// 0x505573c

--------------------------------
Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 0x1]
	FString HostID;//[Offset: 0x8, Size: 0x10]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 0x10]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 0x10]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum DataChangeType;//[Offset: 0x11, Size: 0x1]
	int VInt;//[Offset: 0x14, Size: 0x4]
	float VFloat;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 0xc]
	FString VString;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	FString[] KeyArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x238, Size: 0x10]
	float AddForceCoefficient;//[Offset: 0x248, Size: 0x4]
	float BrokenDestroyTime;//[Offset: 0x24c, Size: 0x4]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x49d227c
	void OnClientBrokenEffect();// 0x505573c
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x49d2110

--------------------------------
Class: WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0x338, Size: 0x8]
	SolarWeaponSlotData[] WeaponSlotDatas;//[Offset: 0x340, Size: 0x10]
	SolarWeaponSystemData WeaponSystemData;//[Offset: 0x350, Size: 0x28]
	SolarCharacter* MyPawn;//[Offset: 0x378, Size: 0x8]
	bool bVisibleToggleOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	WeaponAction WeaponPickupAction;//[Offset: 0x398, Size: 0x8]
	WeaponAction WeaponSwitchAction;//[Offset: 0x3a0, Size: 0x8]
	WeaponAction WeaponReplaceAction;//[Offset: 0x3a8, Size: 0x8]
	WeaponAction WeaponDropAction;//[Offset: 0x3b0, Size: 0x8]
	WeaponAction WeaponClearAction;//[Offset: 0x3b8, Size: 0x8]
	WeaponAction WeaponDataUpdateAction;//[Offset: 0x3c0, Size: 0x8]
	PlayerWeaponSystemWidgetMgr* SpectateModeWidgetMgrCache;//[Offset: 0x3c8, Size: 0x8]
	PlayerWeaponSystemWidgetMgr* WeaponSystemWidgetMgr;//[Offset: 0x3d0, Size: 0x8]
	void TriggerBoltAnim();// 0x4cacfbc
	void SpectateModeTick(float InDeltaTime);// 0x4cac810
	void SpawnMeleeWeapon(SolarCharacter* Owner);// 0x4cac9e0
	void ResetCurrentWeaponFireState();// 0x4cace28
	void PostBolt();// 0x4cacfd0
	void OpenScopeForSpectator();// 0x4cac8d0
	void OnRep_WeaponSystemData(SolarWeaponSystemData InLastWeaponSystemData);// 0x4cac6d4
	void OnRep_WeaponSwitchAction();// 0x4cac994
	void OnRep_WeaponReplaceAction();// 0x4cac978
	void OnRep_WeaponPickupAction();// 0x4cac9b0
	void OnRep_WeaponDropAction();// 0x4cac95c
	void OnRep_WeaponDataUpdateAction();// 0x4cac924
	void OnRep_WeaponClearAction();// 0x4cac940
	void OnRep_VisibleToggleOn();// 0x4cac9cc
	float GetWeaponWeight();// 0x4cacb98
	SolarPlayerWeapon* GetWeaponBySlot(int Slot);// 0x4cacea8
	SolarUnArmWeapon* GetUnArmWeapon();// 0x4cace74
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x4cacd8c
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x4cacdc0
	int GetLastActiveWeaponSlot();// 0x4cacf54
	bool GetIsUnArm();// 0x4cace3c
	float GetCurrentWeaponReloadTime(int Mode);// 0x4cacce0
	bool GetCurrentWeaponIsOverloading();// 0x4cacfe4
	Texture2D* GetCurrentWeaponIcon();// 0x4caca84
	float GetCurrentWeaponBoltTime(int Mode);// 0x4cacc34
	SolarPlayerWeapon* GetCurrentWeapon();// 0x4cacdf4
	float GetCurrentSwitchWeaponTime();// 0x4cacc00
	int GetCurrentActiveSlot();// 0x4cacf88
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x4cacbcc
	void GameStatisticsWeaponSkill(FString Param);// 0x4cacab8
	void CrosshairQuitReload();// 0x4cac8ec
	void CrosshairEnterReload();// 0x4cac908
	void CloseScopeForSpectator();// 0x4cac8b4
	void CleanWeaponSlotsUI();// 0x4cacb68
	void ChangeShootingOption();// 0x4cad01c
	void CancelSecondaryFire();// 0x4cacb7c

--------------------------------
Class: SolarWeaponSystemData
	SolarPlayerWeapon*[] PlayerWeaponArray;//[Offset: 0x0, Size: 0x10]
	SolarUnArmWeapon* PlayerPunch;//[Offset: 0x10, Size: 0x8]
	int8 CurrentActiveSlot;//[Offset: 0x18, Size: 0x1]
	int8 LocalCurrentActiveSlot;//[Offset: 0x19, Size: 0x1]
	int8 LastActiveSlot;//[Offset: 0x1a, Size: 0x1]
	SolarPlayerWeapon* CurrentPlayerWeaponPTR;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x230, Size: 0x4]
	byte[] HitDetectableTypes;//[Offset: 0x238, Size: 0x10]
	float Interval;//[Offset: 0x248, Size: 0x4]
	class UserWidget* CrossHair;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath FireIconPath;//[Offset: 0x258, Size: 0x18]
	SlateBrush FireBtnBrush;//[Offset: 0x270, Size: 0x98]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x308, Size: 0x8]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x318, Size: 0x8]
	class SolarAbility* MeleeAbilityClass;//[Offset: 0x320, Size: 0x8]
	class SolarGameplayAbility[] MeleeAbilities;//[Offset: 0x328, Size: 0x10]
	GameplayAbilitySpecHandle[] AbilitySpecHandles;//[Offset: 0x338, Size: 0x10]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x4bf6978
	void ServerDealMeleeDamage(SolarCharacterBase* Target);// 0x4bf6730
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x4bf6814
	SlateBrush GetFireButtonBrush();// 0x4bf6a84
	SolarCharacterBase* GetAttackTargetCharacter();// 0x4bf6a68

--------------------------------
Class: SolarGameplayAbility.GameplayAbility.Object
	bool bTryActivateWhenGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	enum InputID;//[Offset: 0x3fa, Size: 0x1]
	bool bAllowReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 0x1]
	bool bActiveOnPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	AbilityMeshMontage[] CurrentAbilityMeshMontages;//[Offset: 0x400, Size: 0x10]
	void RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x4a1de34
	void ReceivingGiven(out const GameplayAbilityActorInfo ActorInfo, out const GameplayAbilitySpec Spec);// 0x505573c
	void MontageStopForMesh(SkeletalMeshComponent* InMesh, float OverrideBlendOutTime);// 0x4a1d9a0
	void MontageStopForAllMeshes(float OverrideBlendOutTime);// 0x4a1d8fc
	void MontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, FName FromSectionName, FName ToSectionName);// 0x4a1da88
	void MontageJumpToSectionForMesh(SkeletalMeshComponent* InMesh, FName SectionName);// 0x4a1dbb0
	int GetDefaultGrantedLevel(const Actor* InOwner, const Actor* InAvatar);// 0x4a1dd40
	AnimMontage* GetCurrentMontageForMesh(SkeletalMeshComponent* InMesh);// 0x4a1dc94
	void ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x4a1e1cc
	void AddGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x4a1e000

--------------------------------
Class: AbilityMeshMontage
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	AnimMontage* Montage;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarWeaponSlotData

--------------------------------
Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 0x4]
	int ActionParameter;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerWeaponSystemWidgetMgr.WeaponSystemWidgetMgr.Object
	SolarPlayerWeapon* CurrentPlayerWeapon;//[Offset: 0x50, Size: 0x8]
	UserWidget* UnArmWidget;//[Offset: 0x58, Size: 0x8]
	void InitUnarmWidget(SolarUnArmWeapon* UnArmWeapon);// 0x48f2efc

--------------------------------
Class: WeaponSystemWidgetMgr.Object
	SolarWeapon* CurrentWeapon;//[Offset: 0x28, Size: 0x8]
	bool bReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	FeedbackWidget* FeedbackWidget;//[Offset: 0x38, Size: 0x8]
	CrossHairWidget* CrossHairWidget;//[Offset: 0x48, Size: 0x8]
	void UpdateClipCapacity(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x4caf418
	void SetShootActive(bool bo);// 0x4caf334
	void ReloadTick(float DeltaTime);// 0x4caf274
	void QuitReload(bool InbReloadSuccess, int InReservedAmmo, int InMaxAmmo, int InReloadAmmo);// 0x4caf5f4
	void PreWeaponFire(int Mode);// 0x4caf810
	void OverloadTick(float DeltaTime);// 0x4caf1d0
	void Overload(bool bEntry);// 0x4caf548
	void OpenScope();// 0x4caf3fc
	void InitWeaponWidget(SolarWeapon* Weapon);// 0x4caf080
	void EnterReload(int Mode);// 0x4caf76c
	void CoolDownTick(float DeltaTime);// 0x4caf12c
	void CloseScope();// 0x4caf3e0
	void Clear();// 0x4caf318

--------------------------------
Class: SkeletalMeshComponentConfig.DataAsset.Object
	SoftObjectPath AnimClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkeletalMesh;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: WeaponSystemPlayer.WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bInitializeWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 0x1]
	float ReloadBlockTimeMax;//[Offset: 0x450, Size: 0x4]
	FString ReceviedReloadMessage;//[Offset: 0x458, Size: 0x10]
	StaticMeshActor* DroppedClip;//[Offset: 0x478, Size: 0x8]
	StaticMeshActor* ExtractedClip;//[Offset: 0x480, Size: 0x8]
	bool bHoldFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	float CheckPickableWeaponRange;//[Offset: 0x48c, Size: 0x4]
	Actor* LastCheckPickableWeapon;//[Offset: 0x490, Size: 0x8]
	float PressOpenScopeTime;//[Offset: 0x4b0, Size: 0x4]
	void TestSetSkin(int SkinId);// 0x4ca45cc
	void TestSafeArea();// 0x4ca4678
	void TakeOffEquipAttributes(SolarPlayerWeapon* Weapon);// 0x505573c
	void SwitchFireMode();// 0x4ca6ad4
	void SwitchChargeUI(bool On, int Mode);// 0x4ca44c4
	void SetAllEnemyRenderMode(const byte InRenderModeType);// 0x4ca4420
	void ServerSwitch(const byte TargetSlot);// 0x4ca47ec
	void ServerSwap(const byte SourceSlot, const byte TargetSlot);// 0x4ca4898
	void ServerShowCurrent(const byte Show);// 0x4ca4740
	void ServerReplaceUpgradeRoute(const byte Slot);// 0x4ca4694
	void ServerReload(const byte CurrentSlot, const byte FireMode);// 0x4ca4a34
	bool ServerPackDropWeapon(int Slot);// 0x4ca6b0c
	void ServerGameStaticsWeaponSkill(const byte FireMode);// 0x4ca4988
	void ServerAutoDropWeapon(SolarPlayerWeapon* InPendingDropWeapon);// 0x4ca4360
	void ReplaceUpgradeRoute(const int Slot);// 0x4ca5b70
	void RecieveSafeAreaUpdateMsg(const int Num);// 0x4ca66a4
	void RecieveExpPackMsg(int ItemID, int Num);// 0x4ca69f0
	void RecieveExpMsg(bool bClient, int Type, int Num, int Slot);// 0x4ca6878
	void RecieveAssistMsg(enum HitedCharacterType);// 0x4ca6600
	void ReceiveWeaponEXP(int InExp);// 0x4ca626c
	void PutEquipAttributes(SolarPlayerWeapon* Weapon);// 0x505573c
	void PrintSensitivityGM();// 0x4ca45b8
	void PostAddWeaponEXPMessageWhenKill(const int InWeaponSlot, const enum InHitType, const float InDamage, const bool InbKillPlayer);// 0x4ca6310
	void PostAddWeaponEXPMessageFromLua(const int InWeaponSlot, const enum InHitType, const float InDamage, const bool InbKillPlayer);// 0x4ca6488
	void OnWeaponUpgrade(int InCurrentLevel, uint32 InUniqueID);// 0x4ca52bc
	void OnWeaponUpdateSkillPoint(uint32 InWeaponUniqueID, bool InbCoolDownFinish, int InCurrentExtraPoint);// 0x4ca50a0
	void OnWeaponUpdatePart(int InNewPartId, int InOldPartID, uint32 InWeaponUniqueID);// 0x4ca4b70
	void OnWeaponUpdateExp(float InTotalExp, float InCurrentExp, uint32 InUniqueID);// 0x4ca4f78
	void OnWeaponUpdateClipCapacity(int InFireMode, int InCurrentAmmoCount, int InCurrentSpareAmmoCount, uint32 InUniqueID);// 0x4ca53a0
	void OnWeaponUnlockAttributeSlot();// 0x4ca4ec0
	void OnWeaponSwitchOverload(bool InbSwitchOn, uint32 InUniqueID);// 0x4ca5508
	void OnWeaponReleaseSkill(bool InbSuccess, uint32 InUniqueID, uint32 InResultID);// 0x4ca4d8c
	void OnWeaponQuitReload(int InFireMode, bool InbReloadSuccess, uint32 InUniqueID);// 0x4ca55fc
	void OnWeaponEnterReload(int InFireMode, uint32 InUniqueID);// 0x4ca5734
	void OnWeaponEnterFireCD(int InFireMode, uint32 InUniqueID);// 0x4ca51d8
	void OnWeaponEnterBurstFire(int InFireMode);// 0x4ca4ed4
	void OnWeaponChangeAppreance(bool InbWeaponPart, enum InWeaponPartType);// 0x4ca4c98
	void OnPlayerEnergyUpdate();// 0x4ca4b5c
	void OnEnterBattleAction(enum battleType);// 0x4ca5d34
	bool NeedThermalImage();// 0x4ca5cfc
	bool IsWeaponAmmoUseEnergy(int Slot, int FireMode);// 0x4ca5dd8
	bool IsWeaponAmmoUseBagResource(int Slot, int FireMode);// 0x4ca5ec8
	bool IsReloadBlock();// 0x4ca4b24
	bool IsOwnUpgradeRoute(int Slot);// 0x4ca5c14
	bool IsCurrentWeapon(uint32 InUniqueID);// 0x4ca61bc
	bool InternalReplaceUpgradeRoute(SolarPlayerWeapon* wp);// 0x4ca5ac0
	void InitializeWeaponSystem(SolarCharacter* InOwner);// 0x4ca58c4
	int GetWeaponSkin(SolarPlayerWeapon* Weapon);// 0x4ca5968
	SolarPlayerWeapon* GetWeaponByItemID(int ItemInstanceId);// 0x4ca5818
	SolarPlayerWeapon* GetWeaponByID(int ID);// 0x4ca5fb8
	int GetSlotByItemID(int64 InItemThisID);// 0x4ca6064
	int GetSlotByID(uint32 InUniqueID);// 0x4ca6110
	float GetRetrofitCost(int Slot);// 0x4ca5a14
	bool CurrentWeaponIsThermalImage();// 0x4ca5cc4
	void ClientRecieveExpMsg(int Type, int Num, int Slot);// 0x4ca6748
	void ClearWeapons();// 0x4ca6af0
	void CheckPickableWeapon();// 0x4ca440c
	bool CanReplaceUpgradeRoute(int Slot);// 0x505573c

--------------------------------
Class: WeaponSystemPlayerAI.WeaponSystemPlayerBase.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	void ServerAIPickupWeapon(const byte Slot);// 0x4cabea8
	bool IsCurrentWeapon(int ID);// 0x4cabf54
	void ClearWeapons();// 0x4cac004

--------------------------------
Class: WeaponSystemVehicleComponent.WeaponSystemBase.BaseWeaponComponent.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x328, Size: 0x50]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x390, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x398, Size: 0x8]
	WeaponAction WeaponEquipAction;//[Offset: 0x3d0, Size: 0x8]
	WeaponAction WeaponUnequipAction;//[Offset: 0x3d8, Size: 0x8]
	WeaponAction WeaponStartReloadAction;//[Offset: 0x3e0, Size: 0x8]
	VehicleWeaponSystemWidgetMgr* WeaponSystemWidgetMgr;//[Offset: 0x3e8, Size: 0x8]
	<FName,enum> SavedWeaponScopeMap;//[Offset: 0x3f0, Size: 0x50]
	enum CurrentScopeType;//[Offset: 0x440, Size: 0x1]
	void ServerStatVehicleWeaponFire(FString Param);// 0x4cae284
	void ServerStartReload();// 0x4cae49c
	void ServerReload(const byte ModeIndex, const int Need);// 0x4cae3ac
	void ServerChangeWeaponScopeType(enum InScopeType);// 0x4cae1d8
	void OnRep_WeaponUnequipAction();// 0x4cae350
	void OnRep_WeaponStartReloadAction();// 0x4cae33c
	void OnRep_WeaponEquipAction();// 0x4cae364
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x4cae4b8
	SolarVehicleWeapon* GetMyWeapon();// 0x4cae378
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x4cae608
	void FireInput(bool bPress);// 0x4cae55c

--------------------------------
Class: VehicleWeaponSystemWidgetMgr.WeaponSystemWidgetMgr.Object
	SolarVehicleWeapon* VehicleWeapon;//[Offset: 0x50, Size: 0x8]
	VehicleWeaponScopeWidget* VehicleWeaponScopeUI;//[Offset: 0x58, Size: 0x8]
	VehicleWeaponCrossHairInfo CachedCrossHairInfo;//[Offset: 0x60, Size: 0x24]
	void Forbid(bool bEntry);// 0x4c825ec

--------------------------------
Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 0x8]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: VehicleRepairToolMeshPreset
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	Transform RelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: MotionWarpingComponent.ActorComponent.Object
	bool bSearchForWindowsInAnimsWithinMontages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	delegate OnPreUpdate;//[Offset: 0xb8, Size: 0x10]
	Character* CharacterOwner;//[Offset: 0xc8, Size: 0x8]
	RootMotionModifier*[] Modifiers;//[Offset: 0xd0, Size: 0x10]
	<FName,MotionWarpingTarget> WarpTargetMap;//[Offset: 0xe0, Size: 0x50]
	int RemoveWarpTarget(FName WarpTargetName);// 0x35b632c
	void DisableAllRootMotionModifiers();// 0x35b6a04
	void AddOrUpdateWarpTargetFromTransform(FName WarpTargetName, Transform TargetTransform);// 0x35b67d0
	void AddOrUpdateWarpTargetFromLocationAndRotation(FName WarpTargetName, Vector TargetLocation, Rotator TargetRotation);// 0x35b63d8
	void AddOrUpdateWarpTargetFromLocation(FName WarpTargetName, Vector TargetLocation);// 0x35b6544
	void AddOrUpdateWarpTargetFromComponent(FName WarpTargetName, const SceneComponent* Component, FName BoneName, bool bFollowComponent);// 0x35b665c
	void AddOrUpdateWarpTarget(FName WarpTargetName, out const MotionWarpingTarget WarpTarget);// 0x35b68e8

--------------------------------
Class: RootMotionModifier.Object
	AnimSequenceBase* Animation;//[Offset: 0x28, Size: 0x8]
	float StartTime;//[Offset: 0x30, Size: 0x4]
	float EndTime;//[Offset: 0x34, Size: 0x4]
	float PreviousPosition;//[Offset: 0x38, Size: 0x4]
	float CurrentPosition;//[Offset: 0x3c, Size: 0x4]
	float Weight;//[Offset: 0x40, Size: 0x4]
	bool bInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	Transform StartTransform;//[Offset: 0x50, Size: 0x30]
	float ActualStartTime;//[Offset: 0x80, Size: 0x4]
	delegate OnActivateDelegate;//[Offset: 0x84, Size: 0x10]
	delegate OnUpdateDelegate;//[Offset: 0x94, Size: 0x10]
	delegate OnDeactivateDelegate;//[Offset: 0xa4, Size: 0x10]
	enum State;//[Offset: 0xb4, Size: 0x1]

--------------------------------
Class: MotionWarpingTarget
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8]
	FName BoneName;//[Offset: 0x38, Size: 0x8]
	bool bFollowComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DebugReplicator.Actor.Object

--------------------------------
Class: BattleUpgradeEffectContainer.FastArraySerializer
	BattleUpgradeEffect[] DataArray;//[Offset: 0x108, Size: 0x10]
	SolarCharacter* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: BattleUpgradeEffect.FastArraySerializerItem
	int Level;//[Offset: 0xc, Size: 0x4]
	int EffectID;//[Offset: 0x10, Size: 0x4]
	int[] EffectCandidate;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SoundGroupPlayContext
	SolarCharacter* Instigator;//[Offset: 0x0, Size: 0x8]
	SolarCharacter* LocalCharacter;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ShieldRes;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath InvincibleMAT;//[Offset: 0xa8, Size: 0x18]
	SoftClassPath AnimBPRes;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath GetSkinRes();// 0x487e89c
	SoftObjectPath GetSkinIcon();// 0x487e928
	SoftObjectPath GetInvincibleMAT();// 0x487e9b4
	SoftObjectPath GetCharaSkinRes();// 0x487e80c
	SoftObjectPath GetAnimBPRes();// 0x487e780

--------------------------------
Class: SolarWeaponDamageEvent.SolarPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 0xc]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 0x4]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	byte TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanISpectateNonTeamPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 0x4]
	int Diamond;//[Offset: 0x4, Size: 0x4]
	FString playerName;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: InteractiveTaskStatus
	int TaskID;//[Offset: 0x0, Size: 0x4]
	int CurLevel;//[Offset: 0x4, Size: 0x4]
	int ProgressValue;//[Offset: 0x8, Size: 0x4]
	int TargetValue;//[Offset: 0xc, Size: 0x4]
	int Param;//[Offset: 0x10, Size: 0x4]
	bool bAvailableToNxtLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	GiftSenderInfo[] TaskGiftPlayerInfo;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: BattleUpgradeEffectParamData
	enum EffectType;//[Offset: 0x0, Size: 0x1]
	int ParameterSum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SpectateReportInfo
	uint32 RankLevelID;//[Offset: 0x0, Size: 0x4]
	FString TargetUserID;//[Offset: 0x8, Size: 0x10]
	byte TargetType;//[Offset: 0x18, Size: 0x1]
	uint32 SpectateElapsedTime;//[Offset: 0x1c, Size: 0x4]
	byte Type;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: InteractiveTaskConfig.TableRowBase
	int TaskID;//[Offset: 0x8, Size: 0x4]
	int GiftID;//[Offset: 0xc, Size: 0x4]
	int TaskName;//[Offset: 0x10, Size: 0x4]
	FString Describe;//[Offset: 0x18, Size: 0x10]
	int TaskUpgradeDescribe;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath TaskIcon;//[Offset: 0x30, Size: 0x18]
	enum CurrencyType;//[Offset: 0x48, Size: 0x1]
	int MaxTaskLevel;//[Offset: 0x4c, Size: 0x4]
	int[] TaskTarget;//[Offset: 0x50, Size: 0x10]
	int[] UpgradePrice;//[Offset: 0x60, Size: 0x10]
	int[] TaskReward;//[Offset: 0x70, Size: 0x10]
	enum TaskType;//[Offset: 0x80, Size: 0x1]
	int Param;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 0x4]
	int AccountLevel;//[Offset: 0x4, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x58, Size: 0x4]
	int CurCharacterExp;//[Offset: 0x5c, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x64, Size: 0x4]
	int RankAfterScore;//[Offset: 0x68, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x6c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x74, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 0x4]
	int RankLegend;//[Offset: 0x80, Size: 0x4]
	byte RankProtectType;//[Offset: 0x84, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]

--------------------------------
Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 0x50]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementConfig;//[Offset: 0xb0, Size: 0x8]
	AchievementFormula* AchievementFormula;//[Offset: 0xb8, Size: 0x8]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xc0, Size: 0x8]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x1c0, Size: 0x50]
	void UnlockAchievement(int InAchievementID);// 0x49432a0
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x49430d8
	void NotifyAchievementUpdatedByID(int InAchievementID);// 0x4943344
	bool IsAchievementCompleted(int InAchievementID);// 0x4942f7c
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x49431bc
	int GetAchievementValue(int InAchievementID);// 0x494302c

--------------------------------
Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x4942ae4

--------------------------------
Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int ProgressValue;//[Offset: 0x4, Size: 0x4]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AchievementReportType;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SpatializeInfoTrack.SpatializeInfo.Info.Actor.Object
	TrackArray TrackArray;//[Offset: 0x280, Size: 0x118]

--------------------------------
Class: SpatializeInfo.Info.Actor.Object
	Pawn* LocalPlayer;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TrackArray.FastArraySerializer
	TrackItem[] Tracks;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: TrackItem.SpatializeItem.FastArraySerializerItem
	float Time;//[Offset: 0x18, Size: 0x4]
	byte ID;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: SpatializeItem.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SCMPlayerRPCComponent.ActorComponent.Object
	void ReceivedLevelLoaded(FString LevelName);// 0x505573c
	void ReceivedCharacter();// 0x505573c
	void ReceivedBeginLevelLoad(FString LevelName);// 0x505573c

--------------------------------
Class: SolarInputManager.ActorComponent.Object
	SolarPlayerSensitivitys* SenSetting;//[Offset: 0xc8, Size: 0x8]
	enum CurSenType;//[Offset: 0xd0, Size: 0x1]
	TouchHandler TouchHandler;//[Offset: 0xf8, Size: 0xd8]
	void SetTouchScaler(float InVal);// 0x4a60aa0
	void SetNoiseThresholdFactor(float InVal);// 0x4a60b80
	void SetMouseScaler(Vector2D InVal);// 0x4a60804
	void SetCurveVerticalFix(Vector2D InVec);// 0x4a60d3c
	void SetCurveVerticalFactor(Vector2D InVec);// 0x4a60ef4
	void SetCurveHorizonFix(Vector2D InVec);// 0x4a60c60
	void SetCurveHorizonFactor(Vector2D InVec);// 0x4a60e18
	float GetTouchScaler();// 0x4a60b48
	float GetNoiseThresholdFactor();// 0x4a60c28
	Vector2D GetMouseScaler();// 0x4a608a8
	float GetFixedOutputY();// 0x4a609c0
	float GetFixedOutputX();// 0x4a609f8
	float GetDeltaMoveY();// 0x4a60a30
	float GetDeltaMoveX();// 0x4a60a68
	Vector2D GetCurveVerticalFix();// 0x4a60de0
	Vector2D GetCurveVerticalFactor();// 0x4a60f98
	Vector2D GetCurveHorizonFix();// 0x4a60d04
	Vector2D GetCurveHorizonFactor();// 0x4a60ebc
	float GetAverageDeltaMoveY();// 0x4a60950
	float GetAverageDeltaMoveX();// 0x4a60988
	float GetAccelerateAdditionY();// 0x4a608e0
	float GetAccelerateAdditionX();// 0x4a60918

--------------------------------
Class: SolarPlayerSensitivitys.Object
	int CurScopeType;//[Offset: 0x68, Size: 0x4]
	void UpdateSensitivity();// 0x4acb77c
	void SetSensitivity(enum InType, Vector2D InSensitivity);// 0x4acbb00
	void InitPlayerSensitivity();// 0x4acba40
	Vector2D GetVehicleScopeSensitivity(int InType);// 0x4acb83c
	Vector2D GetVehicleScopeFireSensitivity(int InType);// 0x4acb790
	Vector2D GetSensitivity(enum InType);// 0x4acba54
	Vector2D GetScopeSensitivity(int InType);// 0x4acb994
	Vector2D GetScopeFireSensitivity(int InType);// 0x4acb8e8

--------------------------------
Class: TouchHandler
	CurveFloat* AccelerateCurveX;//[Offset: 0x60, Size: 0x8]
	CurveFloat* AccelerateCurveY;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: SolarCharacterSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarCharacterCameraComponent* Camera;//[Offset: 0x368, Size: 0x8]
	SolarCharacter* OwnerCharacter;//[Offset: 0x370, Size: 0x8]

--------------------------------
Class: SolarCharacterCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* Character;//[Offset: 0x908, Size: 0x8]
	float ThirdPersonVerticalOffset;//[Offset: 0x914, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouched;//[Offset: 0x918, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouchMoving;//[Offset: 0x91c, Size: 0x4]
	float ThirdPersonHorizontalOffset;//[Offset: 0x920, Size: 0x4]
	CurveFloat* FollowForwardOffsetCurve;//[Offset: 0x928, Size: 0x8]
	float FollowForwardOffsetMultiplier;//[Offset: 0x930, Size: 0x4]
	float CrouchCameraLagTime;//[Offset: 0x934, Size: 0x4]
	float UnCrouchCameraLagTime;//[Offset: 0x938, Size: 0x4]
	float ShoulderShotVerticalOffset;//[Offset: 0x93c, Size: 0x4]
	float ShoulderShotVerticalOffsetWhenCrouched;//[Offset: 0x940, Size: 0x4]
	float ShoulderShotHorizontalOffset;//[Offset: 0x944, Size: 0x4]
	float ShoulderShotDistanceToTarget;//[Offset: 0x948, Size: 0x4]
	CurveFloat* ShoulderShotFollowDistanceCurve;//[Offset: 0x950, Size: 0x8]
	float ShoulderShotCameraFOV;//[Offset: 0x958, Size: 0x4]
	float ShoulderShotCameraZoomInOutTime;//[Offset: 0x95c, Size: 0x4]
	float ScopeShotVerticalOffsetWithStanding;//[Offset: 0x960, Size: 0x4]
	float ScopeShotVerticalOffsetWhenCrouch;//[Offset: 0x964, Size: 0x4]
	float DistanceToScopePivot;//[Offset: 0x968, Size: 0x4]
	float ArmDistanceToCamera;//[Offset: 0x96c, Size: 0x4]
	float ScopeHorizontalOffset;//[Offset: 0x970, Size: 0x4]
	float ThirdPeekVerticalOffset;//[Offset: 0x974, Size: 0x4]
	float ThirdPeekHorizontalOffset;//[Offset: 0x978, Size: 0x4]
	float FirstPeekAngle;//[Offset: 0x97c, Size: 0x4]
	float SwimDistanceToTarget;//[Offset: 0x980, Size: 0x4]
	float SwimDistSwitchSpeed;//[Offset: 0x984, Size: 0x4]
	Vector CuriseCameraOffset;//[Offset: 0x988, Size: 0xc]
	Vector CuriseTargetOffset;//[Offset: 0x994, Size: 0xc]
	float CuriseDistanceToTarget;//[Offset: 0x9a0, Size: 0x4]
	Vector SkydiveCameraOffset;//[Offset: 0x9a4, Size: 0xc]
	Vector SkydiveTargetOffset;//[Offset: 0x9b0, Size: 0xc]
	float SkydiveDistanceToTarget;//[Offset: 0x9bc, Size: 0x4]
	float SkydiveDistanceToTargetOnBoosting;//[Offset: 0x9c0, Size: 0x4]
	float SkydiveViewPitchMax;//[Offset: 0x9c4, Size: 0x4]
	float SkydiveViewPitchMin;//[Offset: 0x9c8, Size: 0x4]
	CameraSettings JetFlySettingsVertical;//[Offset: 0x9cc, Size: 0x20]
	CameraSettings JetFlySettingsFront;//[Offset: 0x9ec, Size: 0x20]
	CameraSettings JetFlySettingsBack;//[Offset: 0xa0c, Size: 0x20]
	CameraSettings JetFlySettingsLeft;//[Offset: 0xa2c, Size: 0x20]
	CameraSettings JetFlySettingsRight;//[Offset: 0xa4c, Size: 0x20]
	RuntimeFloatCurve JetFlyFadeInCurve;//[Offset: 0xa70, Size: 0x88]
	RuntimeFloatCurve JetFlyFadeOutCurve;//[Offset: 0xaf8, Size: 0x88]
	float InstigatorReachTime;//[Offset: 0xb80, Size: 0x4]
	float InstigatorSpectateTime;//[Offset: 0xb84, Size: 0x4]
	class CameraShake* CameraShakeSkydiveFlying;//[Offset: 0xb88, Size: 0x8]
	float CameraShakeSkydiveFlyingSpeedMin;//[Offset: 0xb90, Size: 0x4]
	float CameraShakeSkydiveFlyingSpeedMax;//[Offset: 0xb94, Size: 0x4]
	class CameraShake* CameraShakeJetPackLaunch;//[Offset: 0xb98, Size: 0x8]
	class CameraShake* CameraShakeLand;//[Offset: 0xba0, Size: 0x8]
	class CameraShake* CameraShakeVehicleEjectLaunch;//[Offset: 0xba8, Size: 0x8]
	float CameraShakeLandDistanceMin;//[Offset: 0xbb0, Size: 0x4]
	float CameraShakeLandDistanceMax;//[Offset: 0xbb4, Size: 0x4]
	float TakeOffCamPitchMin;//[Offset: 0xbb8, Size: 0x4]
	float TakeOffCamPitchMax;//[Offset: 0xbbc, Size: 0x4]
	float LandingSpeedThreshold;//[Offset: 0xbc0, Size: 0x4]
	CamEffectSettings TakeOffCamSettings;//[Offset: 0xbc8, Size: 0x38]
	CamEffectSettings LightLandCamSettings;//[Offset: 0xc00, Size: 0x38]
	CamEffectSettings HeavyLandCamSettings;//[Offset: 0xc38, Size: 0x38]
	CamEffectSettings ParkourCamSettings;//[Offset: 0xc70, Size: 0x38]

--------------------------------
Class: CameraSettings
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	float CameraFOV;//[Offset: 0x4, Size: 0x4]
	Vector TargetOffset;//[Offset: 0x8, Size: 0xc]
	Vector CameraOffset;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: CamEffectSettings
	float FadeIn;//[Offset: 0x0, Size: 0x4]
	float FadeOut;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	bool bEnableOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	CurveVector* OffsetCurve;//[Offset: 0x10, Size: 0x8]
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	CurveVector* RotationCurve;//[Offset: 0x20, Size: 0x8]
	bool bEnableFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	CurveFloat* FOVCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x21c0, Size: 0x8]
	SolarAbilityComponent* SolarAbility;//[Offset: 0x21c8, Size: 0x8]
	Vector PreviousLocation;//[Offset: 0x21d0, Size: 0xc]
	float Time;//[Offset: 0x21dc, Size: 0x4]
	float CurrentTime;//[Offset: 0x21e0, Size: 0x4]
	float PreviousTime;//[Offset: 0x21e4, Size: 0x4]
	float DeltaTime;//[Offset: 0x21e8, Size: 0x4]
	Vector DeltaLocation;//[Offset: 0x21ec, Size: 0xc]
	bool OnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21f8, Size: 0x1]
	float Speed;//[Offset: 0x21fc, Size: 0x4]
	Vector2D Direction;//[Offset: 0x2200, Size: 0x8]
	float[] SpeedRecord;//[Offset: 0x2208, Size: 0x10]
	Vector[] LocationRecord;//[Offset: 0x2218, Size: 0x10]
	float[] Record_X;//[Offset: 0x2228, Size: 0x10]
	float[] Record_y;//[Offset: 0x2238, Size: 0x10]
	float SpeedFixBase;//[Offset: 0x2248, Size: 0x4]
	CurveFloat* SpeedFix;//[Offset: 0x2250, Size: 0x8]
	delegate OnEjectingStateChanged;//[Offset: 0x2258, Size: 0x10]
	byte EjectState;//[Offset: 0x2268, Size: 0x1]
	bool ShowPoisonCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2269, Size: 0x1]
	int PoisonDamageNum;//[Offset: 0x226c, Size: 0x4]
	TimerHandle PoisonCircleEffectDetectionhandle;//[Offset: 0x2270, Size: 0x8]
	SolarCameraComponent* GetSolarCameraComponent();// 0x505573c
	SolarSpringArmComponent* GetSolarSpringArmComponent();// 0x505573c
	void OnRep_ShowPoisonCircleEffect();// 0x505573c
	void Refresh Show Poison Circle Effect(bool Ignore Is Observation Target, bool CallFunc_IsServer_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_SolarReplayPlayerController_C* K2Node_DynamicCast_AsBP_Solar_Replay_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_SolarReplayPlayerController_C* K2Node_DynamicCast_AsBP_Solar_Replay_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_CMPlayerController_C* K2Node_DynamicCast_AsBP_CMPlayer_Controller, bool K2Node_DynamicCast_bSuccess, BP_CMPlayerController_C* K2Node_DynamicCast_AsBP_CMPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_PlaySound2Dbyname_ReturnValue, bool CallFunc_Is_Observation_Target_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue);// 0x505573c
	void OnRep_PoisonDamageNum(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsViewportFocused_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue);// 0x505573c
	bool Is Observation Target(bool CallFunc_IsViewportFocused_ReturnValue, bool CallFunc_IsLocalPlayerSpectatingMe_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x505573c
	float FixSpeed(float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x505573c
	void FigureSpeed(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_GetFixedSpeed_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x505573c
	float GetFixedY(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x505573c
	float GetFixedX(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x505573c
	void SetCameraInput(Vector NewLocalVar, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector Temp_struct_Variable, float CallFunc_GetFixedY_ReturnValue, float CallFunc_GetFixedX_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x505573c
	void SetCameraInput(float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, FString CallFunc_Conv_Vector2dToString_ReturnValue);// 0x505573c
	Vector GetFixedLocation(Vector InLocation, int NewLocalVar, Vector NewLocalVar, bool Temp_bool_Variable, bool Temp_bool_Variable, Vector Temp_struct_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_Divide_VectorInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Array_Get_Item, Vector K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x505573c
	float GetFixedSpeed(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x505573c
	void DecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float tmpAltitudePercent, float CallFunc_GetSkydiveLandingHeight_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x505573c
	void UndecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float L_Var, CurveFloat* UndecelerationEffectCurve, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetFloatValue_ReturnValue);// 0x505573c
	void InpActEvt_Delete_K2Node_InputKeyEvent(Key Key);// 0x505573c
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x505573c
	void InpActEvt_Home_K2Node_InputKeyEvent(Key Key);// 0x505573c
	void InpActEvt_End_K2Node_InputKeyEvent(Key Key);// 0x505573c
	void ReceiveBeginPlay();// 0x505573c
	void ReceiveEndPlay(byte EndPlayReason);// 0x505573c
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x505573c
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x505573c
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x505573c
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x505573c
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x505573c
	void Event_UseReviveItem(SCMPlayerState* Player);// 0x505573c
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x505573c
	void PoisonCircleEffectDetection();// 0x505573c
	void K2_OnEndViewTarget(PlayerController* PC);// 0x505573c
	void Event_PoisonCircleEffectDetection(bool Ignore Is Observation Target);// 0x505573c
	void Event_RealesePoisonCircleEffectDetectionhandle();// 0x505573c
	void ExecuteUbergraph_BP_SolarCharacterPlayer(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, ABP_SolarCharacter_FPP_C* K2Node_DynamicCast_AsABP_Solar_Character_FPP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsEditor_ReturnValue, Key K2Node_InputKeyEvent_Key, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, byte K2Node_Event_EndPlayReason, float K2Node_Event_FallingRate, ParticleSystemComponent*[] CallFunc_GetAllSkydiveFlyingEffects_OutEffects, float K2Node_Event_DistanceToGround, ParticleSystemComponent*[] CallFunc_GetAllSkydiveLandingEffects_OutEffects, bool K2Node_Event_bIsInWater, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Event_InDuration, bool K2Node_Event_bInOpenScope, SCMPlayerState* K2Node_CustomEvent_Player, PlayerController* K2Node_Event_PC, PlayerController* K2Node_Event_PC, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool K2Node_CustomEvent_Ignore_Is_Observation_Target, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x505573c
	void OnEjectingStateChanged__DelegateSignature(byte State, SolarCharacter* TargetCharacter);// 0x505573c

--------------------------------
Class: BP_SolarReplayPlayerController_C.SolarReplayPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb80, Size: 0x8]
	bool ExitSafeareaPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 0x1]
	void OnModeChange(enum OldMode, enum CurMode);// 0x505573c
	void OnTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x505573c
	void InitEffectEvent();// 0x505573c
	void ExecuteUbergraph_BP_SolarReplayPlayerController(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_OldMode, enum K2Node_CustomEvent_CurMode, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarSpectateInfo* K2Node_CustomEvent_SpectateInfo, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess);// 0x505573c

--------------------------------
Class: ABP_SolarCharacter_FPP_C.AnimInstance.Object
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x268, Size: 0x30]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x298, Size: 0x28]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2c0, Size: 0x28]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2e8, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x360, Size: 0x30]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x390, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x408, Size: 0x30]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x438, Size: 0xb0]
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4e8, Size: 0x48]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x530, Size: 0x78]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x5a8, Size: 0xa0]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x648, Size: 0xc8]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x710, Size: 0xe0]
	SolarCharacter* SolarCharacter;//[Offset: 0x7f0, Size: 0x8]
	bool IsScopeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 0x1]
	float ScopeFadeTime;//[Offset: 0x7fc, Size: 0x4]
	bool IsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 0x1]
	bool ShootDouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x802, Size: 0x1]
	float Horizontal;//[Offset: 0x804, Size: 0x4]
	float Vertical;//[Offset: 0x808, Size: 0x4]
	bool bUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 0x1]
	float K2Node_Event_DeltaTimeX;//[Offset: 0x810, Size: 0x4]
	SolarCharacter* K2Node_DynamicCast_AsSolar_Character;//[Offset: 0x818, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 0x1]
	SolarPlayerNormalWeapon* K2Node_DynamicCast_AsSolar_Player_Normal_Weapon;//[Offset: 0x828, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	float CallFunc_GetFPPFireBlendParam_OutHorizontal;//[Offset: 0x834, Size: 0x4]
	float CallFunc_GetFPPFireBlendParam_OutVertical;//[Offset: 0x838, Size: 0x4]
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_768665AB4918F96C9C3C8F92EF926EE4();// 0x39b9c6c
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_01B670704C4A0F8E519CD8A192C5E1D6();// 0x39b9bfc
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_BlendSpacePlayer_3F7F3A024A89FD2FAB9063A431F0D14F();// 0x39b9c50
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_BlendListByBool_F136F87A4DDCD2678555C9B592100DA7();// 0x39b9c18
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_ApplyAdditive_59A6240B497277801D7323A0DCF93F2E();// 0x39b9c34
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);// 0x39b9c88
	void BlueprintInitializeAnimation();// 0x39b9d50
	void BlueprintBeginPlay();// 0x39b9d34
	void AnimGraph(out PoseLink bpp__AnimGraph__pf);// 0x39b9b34

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 0x10]
	FName Name;//[Offset: 0x20, Size: 0x8]
	FName Group;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNode_Base

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x30, Size: 0x8]
	float PlayRateBasis;//[Offset: 0x38, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x40, Size: 0x30]
	float StartPosition;//[Offset: 0x70, Size: 0x4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x10, Size: 0x4]
	byte GroupRole;//[Offset: 0x14, Size: 0x1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float BlendWeight;//[Offset: 0x18, Size: 0x4]
	float InternalTimeAccumulator;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	InputRange InRange;//[Offset: 0x4, Size: 0x8]
	InputRange OutRange;//[Offset: 0xc, Size: 0x8]
	float Scale;//[Offset: 0x14, Size: 0x4]
	float Bias;//[Offset: 0x18, Size: 0x4]
	float ClampMin;//[Offset: 0x1c, Size: 0x4]
	float ClampMax;//[Offset: 0x20, Size: 0x4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 0x4]
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 0x4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 0x10]
	FName SlotName;//[Offset: 0x20, Size: 0x8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 0x10]
	float[] BlendTime;//[Offset: 0x20, Size: 0x10]
	enum TransitionType;//[Offset: 0x30, Size: 0x1]
	enum BlendType;//[Offset: 0x31, Size: 0x1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AnimNode_ApplyAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x10, Size: 0x10]
	PoseLink Additive;//[Offset: 0x20, Size: 0x10]
	float Alpha;//[Offset: 0x30, Size: 0x4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x34, Size: 0x8]
	int LODThreshold;//[Offset: 0x3c, Size: 0x4]
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x40, Size: 0x48]
	FName AlphaCurveName;//[Offset: 0x88, Size: 0x8]
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x90, Size: 0x30]
	enum AlphaInputType;//[Offset: 0xc4, Size: 0x1]
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0, Size: 0x4]
	float Bias;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: InputAlphaBoolBlend
	float BlendInTime;//[Offset: 0x0, Size: 0x4]
	float BlendOutTime;//[Offset: 0x4, Size: 0x4]
	enum BlendOption;//[Offset: 0x8, Size: 0x1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x10, Size: 0x8]
	AlphaBlend AlphaBlend;//[Offset: 0x18, Size: 0x30]

--------------------------------
Class: AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	float X;//[Offset: 0x30, Size: 0x4]
	float Y;//[Offset: 0x34, Size: 0x4]
	float Z;//[Offset: 0x38, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bResetPlayTimeWhenBlendSpaceChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	float StartPosition;//[Offset: 0x44, Size: 0x4]
	BlendSpaceBase* BlendSpace;//[Offset: 0x48, Size: 0x8]
	BlendSpaceBase* PreviousBlendSpace;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	WeaponPartsComponent* WeaponPartsComponent;//[Offset: 0xf68, Size: 0x8]
	bool QueryCanEquipPart(const enum Type, const int InWeaponID);// 0x4acadcc
	void PlayUpgradeEffect();// 0x4aca96c
	void InitLvAndPartsFromTable();// 0x4aca980
	int GetPartIDByTypeAndLevel(const int InWeaponID, const enum Type, const int Level);// 0x4aca838
	int GetEquippedPartLevel(const enum Type);// 0x4acac60
	bool GetEquipedScopeTypeAndLevel(out enum Type, out int Level);// 0x4acab40
	int GetDefaultPartIDByType(const int InWeaponID, const enum Type);// 0x4aca748
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int OldLevel, int NewLevel, int Reason);// 0x4aca994
	bool CanEquipPart(const enum Type);// 0x4acad14

--------------------------------
Class: UI_Resurrect_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	WidgetAnimation* CountDown_Progress_Anim;//[Offset: 0x328, Size: 0x8]
	WidgetAnimation* CountDown_Anim;//[Offset: 0x330, Size: 0x8]
	WidgetAnimation* Resurrecting_Enter_Anim;//[Offset: 0x338, Size: 0x8]
	WidgetAnimation* ReliveProp_Anim;//[Offset: 0x340, Size: 0x8]
	Overlay* CountDown;//[Offset: 0x348, Size: 0x8]
	Image* img_Props;//[Offset: 0x350, Size: 0x8]
	Image* Img_RebirthTimeMAT;//[Offset: 0x358, Size: 0x8]
	TextBlock* Txt_RebirthTimeNum;//[Offset: 0x360, Size: 0x8]
	TimerHandle TimerHandle;//[Offset: 0x368, Size: 0x8]
	int ReviveWaitTime;//[Offset: 0x370, Size: 0x4]
	void Visible and Invisible Protection(out bool Exec, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue);// 0x505573c
	void SetIcon(byte Type, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x505573c
	void UIEvent_CountDown();// 0x505573c
	void UIEvent_Show(int ReviveWaitTime);// 0x505573c
	void ShowResurrectUI(int Time, byte Type);// 0x505573c
	void ExecuteUbergraph_UI_Resurrect(int EntryPoint, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool Temp_bool_Variable, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_ReviveWaitTime, FText CallFunc_Conv_IntToText_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_SafeDivide_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Revive_Item_Camera, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_Time, byte K2Node_Event_Type, GameReviveItemManager* CallFunc_GetActorOfClass_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Format_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_Visible_and_Invisible_Protection_Exec, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x505573c

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x606aba0

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x606b030
	void SetPadding(Margin InPadding);// 0x606b178
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x606b0d4

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int MaxReviveUsage;//[Offset: 0x228, Size: 0x4]
	float ReviveItemRepoTime;//[Offset: 0x22c, Size: 0x4]
	float ReviveProximityRadius;//[Offset: 0x230, Size: 0x4]
	float ReviveHeight;//[Offset: 0x234, Size: 0x4]
	float ReviveWaitTime;//[Offset: 0x238, Size: 0x4]
	bool bGlobalUseRevieItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	void SetGlobalUseReviveItem(const bool InCanUseItem);// 0x48a180c
	bool PlayerTryUseReviveItem(SolarPlayerState* InPlayerState, const int InUseNum);// 0x48a166c
	void OnTeammateReviveManagerRefresh();// 0x48a1644
	void OnRep_GlobalUseRevieItem();// 0x48a1658
	bool IsPlayerReviving(SolarPlayerState* InPlayerState);// 0x505573c
	float GetReviveWaitTime();// 0x48a19fc
	float GetReviveProximityRadius();// 0x48a1a64
	float GetReviveItemRepoTime();// 0x48a1a98
	int GetReviveItemID();// 0x48a1b00
	float GetReviveHeight();// 0x48a1a30
	int GetPlayerReviveItemNum(SolarPlayerState* InPlayerState);// 0x48a1760
	int GetMaxReviveUsage();// 0x48a1acc
	void ClearAllPlayersReviveItem();// 0x505573c
	bool CanPlayerUseReviveItem(SolarPlayerState* InPlayerState, bool bCheckItemNum);// 0x48a18f8
	bool CanGlobalUseReviveItem();// 0x48a18b8

--------------------------------
Class: GameManagerBase.Info.Actor.Object

--------------------------------
Class: BP_Character_BattleRoyale_C.BP_SCustomCharacterBase_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2290, Size: 0x8]
	delegate OnPlayerRevive;//[Offset: 0x2298, Size: 0x10]
	SolarUserWidget* UI_EliminateResultBuyResurrection;//[Offset: 0x22a8, Size: 0x8]
	CGMCountdownExecComponent* BPC_CountdownExec;//[Offset: 0x22b0, Size: 0x8]
	DeathTreasureBox* DeathBoxRef;//[Offset: 0x22b8, Size: 0x8]
	ActorMarkBase* DeathBoxMark;//[Offset: 0x22c0, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0x22c8, Size: 0x10]
	int Index;//[Offset: 0x22d8, Size: 0x4]
	float openProgress;//[Offset: 0x22dc, Size: 0x4]
	int UI_Relive_StartTime;//[Offset: 0x22e0, Size: 0x4]
	TimerHandle LandedDetectionHandel;//[Offset: 0x22e8, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x22f0, Size: 0x8]
	void GetOpenProgress(out float openProgress);// 0x505573c
	void GetWeaponLevelDamageBonus(out float Result, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x505573c
	void Get BPC Countdown Exec(out CGMCountdownExecComponent* BPC_CountdownExec);// 0x505573c
	void OnRep_OpenProgress(bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarReplayPlayerController* K2Node_DynamicCast_AsSolar_Replay_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x505573c
	void Death Cleanup UI(SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x505573c
	void Open Death UI(int NumberOfSurvivingTeammates, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue);// 0x505573c
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x505573c
	float DealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser, float CallFunc_GetWeaponLevelDamageBonus_Result, float CallFunc_DealDamageResolve_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_DealDamageResolve_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x505573c
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x505573c
	void SetMapID(int MapID);// 0x505573c
	void Event_EnterSkydiveFly();// 0x505573c
	void Event_OnCharacterDead();// 0x505573c
	void OnInterrupted(BPC_CountdownExec_C* BPC_CountdownExec);// 0x505573c
	void OnEnterTheCountdown(BPC_CountdownExec_C* BPC_CountdownExec);// 0x505573c
	void Event_SetBPC_CountdownExec(CGMCountdownExecComponent* BPC_CountdownExec);// 0x505573c
	void SetCountDownOwnerRef(Actor* Owner);// 0x505573c
	void Debug GoToNext PoisonCircle();// 0x505573c
	void Debug Set DayAndNightTime(float Time);// 0x505573c
	void ReceiveBeginPlay();// 0x505573c
	void SetReviveCameraFade(float Time);// 0x505573c
	void OnRespondToPlayerApproachingExec(CGMCountdownExecComponent* ExecComp);// 0x505573c
	void Event_ApproachingOnServer(CGMCountdownExecComponent* ExecComp);// 0x505573c
	void Event_ApproachingOnMulticast(CGMCountdownExecComponent* ExecComp);// 0x505573c
	void OnRespondToPlayerLeavingExec(CGMCountdownExecComponent* ExecComp);// 0x505573c
	void Event_LeavingExecOnServer(CGMCountdownExecComponent* ExecComp);// 0x505573c
	void Event_LeavingExecOnMulticast(CGMCountdownExecComponent* ExecComp);// 0x505573c
	void SetOpenProgress(float openProgress);// 0x505573c
	void SetOpenProgressOnServer(float openProgress);// 0x505573c
	void Event_OnResBegin(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x505573c
	void BeginPlayBlueprint();// 0x505573c
	void DoEvent_EnterSkydiveFly();// 0x505573c
	void ExecuteUbergraph_BP_Character_BattleRoyale(int EntryPoint, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_CustomEvent_MapID, bool CallFunc_IsValid_ReturnValue, SolarGameInstanceBase* K2Node_DynamicCast_AsSolar_Game_Instance_Base, bool K2Node_DynamicCast_bSuccess, SolarMapManager* CallFunc_GetSolarMapManager_ReturnValue, BPC_CountdownExec_C* K2Node_Event_BPC_CountdownExec, bool CallFunc_IsValid_ReturnValue, BPC_CountdownExec_C* K2Node_Event_BPC_CountdownExec, CGMCountdownExecComponent* K2Node_CustomEvent_BPC_CountdownExec, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_Event_Owner, BP_BattleRoylePoisonCircle_C* CallFunc_GetActorOfClass_ReturnValue, BP_DI_DeathBoxA_TreasureBox_C* K2Node_DynamicCast_AsBP_DI_Death_Box_A_Treasure_Box, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float K2Node_CustomEvent_Time, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, float K2Node_Event_Time, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, CGMCountdownExecComponent* K2Node_Event_ExecComp, CGMCountdownExecComponent* K2Node_CustomEvent_ExecComp, CGMCountdownExecComponent* K2Node_CustomEvent_ExecComp, BP_DeathBoxCountdownExec_C* K2Node_DynamicCast_AsBP_Death_Box_Countdown_Exec, bool K2Node_DynamicCast_bSuccess, CGMCountdownExecComponent* K2Node_Event_ExecComp, CGMCountdownExecComponent* K2Node_CustomEvent_ExecComp, CGMCountdownExecComponent* K2Node_CustomEvent_ExecComp, BP_DeathBoxCountdownExec_C* K2Node_DynamicCast_AsBP_Death_Box_Countdown_Exec, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, float K2Node_Event_OpenProgress, float K2Node_CustomEvent_OpenProgress, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_SwitchEnum_CmpSuccess, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x505573c
	void OnPlayerRevive__DelegateSignature(SolarCharacter* TargetCharacter);// 0x505573c

--------------------------------
Class: BP_SCustomCharacterBase_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2278, Size: 0x8]
	class GameplayAbility[] DefaultAbilitiesExtra;//[Offset: 0x2280, Size: 0x10]
	byte [A]GetHealthState(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool CallFunc_IsDying_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x505573c
	bool [S]SkyDiveFly(Vector Location, float Height, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, bool K2Node_Select_Default);// 0x505573c
	bool [S]Set Sky Dive State(bool CallFunc_TryActivateAbilityByClass_ReturnValue);// 0x505573c
	void BeginPlayBlueprint();// 0x505573c
	void ExecuteUbergraph_BP_SCustomCharacterBase(int EntryPoint, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, class GameplayAbility CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue);// 0x505573c

--------------------------------
Class: CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	class CGFormula* Formula;//[Offset: 0x38, Size: 0x8]
	SettlementPageConfig* SettlePageConfig;//[Offset: 0x40, Size: 0x8]
	<FString,SCMMapConfig> MapConfig;//[Offset: 0x48, Size: 0x50]
	DataManagerConfig DataManagerConfig;//[Offset: 0x98, Size: 0x10]
	JobManagerConfig JobConfig;//[Offset: 0xa8, Size: 0x8]
	bool EnableUltimateSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	enum UltimateSkillStateOnEnterPrepare;//[Offset: 0xb1, Size: 0x1]
	enum UltimateSkillStateOnEnterBattle;//[Offset: 0xb2, Size: 0x1]
	enum UltimateSkillStateOnBeginSkyDiving;//[Offset: 0xb3, Size: 0x1]
	bool EnableWeaponUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool EnablePlayerUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	InGameLevelingConfig InGameLevelingConfig;//[Offset: 0xb8, Size: 0x8]
	ExpItemConfig ExpItemConfig;//[Offset: 0xc0, Size: 0x8]
	bool bIfShouldSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bIfSupportDeathverge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	<int,int> DeathBoxEnergyLimitConfig;//[Offset: 0xd0, Size: 0x50]
	int GetRequiredExpForLevel(int InLevel);// 0x4863dd4
	int GetMaxInGameLevel();// 0x4863e80
	int GetExpItemCountByLevel(const int InLevel);// 0x4863d28

--------------------------------
Class: CGFormula.Info.Actor.Object
	static FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x485dc4c
	bool IsSettlementBagItem(SolarPlayerState* InPS);// 0x505573c
	int GetZomborg(SolarPlayerState* InPS);// 0x505573c
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x505573c
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID);// 0x505573c
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x505573c
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult);// 0x505573c
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS);// 0x505573c
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerId, out FString InPBName);// 0x505573c
	float GetKDA(SolarPlayerState* InPS);// 0x505573c
	FString[] GetGroupResultPlayerExData(FString SolarPlayerId, out FString InPBName);// 0x505573c
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS);// 0x505573c
	int GetCharacterExp(SolarPlayerState* InPS);// 0x505573c
	int GetAccountExp(SolarPlayerState* InPS);// 0x505573c
	int CalculateTeamRank(SolarPlayerState* InPS);// 0x485d07c
	int CalculatePlayerRank(SolarPlayerState* InPS);// 0x485d130
	float CalculateMVPScore(SolarPlayerState* InPS);// 0x505573c

--------------------------------
Class: SettlePageParam
	int WeaponExpSettlmentNum;//[Offset: 0x0, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SettlementPageConfig.DataAsset.Object
	int PageSkipIndex;//[Offset: 0x30, Size: 0x4]
	class SolarUWSettlementBase[] SettlementPage;//[Offset: 0x38, Size: 0x10]
	FString EnterSettleSoundEvent;//[Offset: 0x48, Size: 0x10]
	FString ExitSettleSoundEvent;//[Offset: 0x58, Size: 0x10]
	int[] PageIndexs;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SCMMapConfig
	FString Desc;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x10, Size: 0x18]
	int MiniMapId;//[Offset: 0x28, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	<FString,SCMElementMapConfig> ElementGroups;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: SCMElementMapConfig
	SoftObjectPath ElementLevel;//[Offset: 0x0, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum LoadType;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: DataManagerConfig
	DataTable* GeneralDataTable;//[Offset: 0x0, Size: 0x8]
	DataTable* DataTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: JobManagerConfig
	DataTable* JobTable;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: InGameLevelingConfig
	DataTable* ExpTable;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ExpItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CGMCountdownExecComponent.ActorComponent.Object
	enum State;//[Offset: 0xb0, Size: 0x1]
	float OpenTime;//[Offset: 0xb4, Size: 0x4]
	float MinOpenTime;//[Offset: 0xb8, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0xc0, Size: 0x8]
	float openProgress;//[Offset: 0xc8, Size: 0x4]
	bool bHasBeenExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	float ProtectionTime;//[Offset: 0xd0, Size: 0x4]
	float RestProtectionTime;//[Offset: 0xd4, Size: 0x4]
	float CurrentOpenedTime;//[Offset: 0xd8, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0xe0, Size: 0x8]
	void StartCountingDown(SolarCharacter* InOpeningCharacter);// 0x4862114
	void RespondToPlayerLeaving(SolarCharacter* Character);// 0x4861fcc
	void RespondToPlayerApproaching(SolarCharacter* Character);// 0x4862070
	void OnStartStartCountingDownExec(SolarCharacter* InOpeningCharacter);// 0x505573c
	void OnRespondToPlayerLeavingExec(SolarCharacter* Character);// 0x505573c
	void OnRespondToPlayerApproachingExec(SolarCharacter* Character);// 0x505573c
	void OnRep_StateChange();// 0x4861f34
	void OnRep_OpenCharacterChange();// 0x4861f48
	bool IsOpenningCharacterOffline();// 0x4861f5c
	bool IsOpeningCharacterInRange();// 0x4861f94
	void ExecuteAfterTheCountdown();// 0x505573c
	void ChangeOpenProgress(float Progress);// 0x4861e90

--------------------------------
Class: BP_SI_RebornLine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_Tag;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void Event_SetWaitingColor();// 0x505573c
	void Event_SetFinishColor();// 0x505573c
	void ExecuteUbergraph_BP_SI_RebornLine(int EntryPoint);// 0x505573c

--------------------------------
Class: HUDDispatcherBase.Object
	delegate OnTeammateStateReplicated;//[Offset: 0x30, Size: 0x10]
	delegate OnTeammatePlayerStateReplicated;//[Offset: 0x40, Size: 0x10]
	delegate OnCharacterPSInGameChanged;//[Offset: 0x50, Size: 0x10]
	delegate OnPlayerOperationInGameChanged;//[Offset: 0x60, Size: 0x10]
	delegate OnTeammatePSRemoveWhenPreparation;//[Offset: 0x70, Size: 0x10]
	delegate OnTeammatePSRemoveWhenBattle;//[Offset: 0x80, Size: 0x10]
	delegate OnTeammateHPChanged;//[Offset: 0x90, Size: 0x10]
	delegate OnTeammateShieldChanged;//[Offset: 0xa0, Size: 0x10]
	delegate OnTeammateReviveItemChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnTeammateReviveManagerChanged;//[Offset: 0xc0, Size: 0x10]
	delegate OnTeammateReviveStateChanged;//[Offset: 0xd0, Size: 0x10]
	delegate OnTeammateNetStateChanged;//[Offset: 0xe0, Size: 0x10]
	delegate OnNavMapMarked;//[Offset: 0xf0, Size: 0x10]
	delegate OnNavMapMarkCleared;//[Offset: 0x100, Size: 0x10]
	delegate OnTalentInitialized;//[Offset: 0x110, Size: 0x10]
	delegate OnTeammateCharacterIdChanged;//[Offset: 0x120, Size: 0x10]
	delegate OnTeammateSkinIdChanged;//[Offset: 0x130, Size: 0x10]
	delegate OnLevelChanged;//[Offset: 0x140, Size: 0x10]
	delegate OnSkillCDStateChanged;//[Offset: 0x150, Size: 0x10]
	delegate OnTeammateTalentStateChanged;//[Offset: 0x160, Size: 0x10]
	delegate OnSpecTargetChanged;//[Offset: 0x170, Size: 0x10]
	delegate OnSkydivingLeaderIndexReplicated;//[Offset: 0x180, Size: 0x10]
	delegate OnSkydivingMemberStatusUpdated;//[Offset: 0x190, Size: 0x10]
	delegate OnSkydivingFollowInvitationResponded;//[Offset: 0x1a0, Size: 0x10]
	delegate OnSkydivingLeaderTransferResponded;//[Offset: 0x1b0, Size: 0x10]
	delegate OnSkydiveFollowDisabled;//[Offset: 0x1c0, Size: 0x10]
	delegate OnBindHPPanelDelegate;//[Offset: 0x1d0, Size: 0x10]
	delegate OnBindItemPanelDelegate;//[Offset: 0x1e0, Size: 0x10]
	delegate OnBindPowerBarDelegate;//[Offset: 0x1f0, Size: 0x10]
	delegate OnPoisonEffectUpdatedDelegate;//[Offset: 0x200, Size: 0x10]
	delegate OnRefreshBackpackItemDelegate;//[Offset: 0x210, Size: 0x10]
	delegate OnRefreshBackpackEquipDelegate;//[Offset: 0x220, Size: 0x10]
	delegate OnRefreshBackpackWeaponDelegate;//[Offset: 0x230, Size: 0x10]
	delegate OnRefreshBackpackWeaponPartDelegate;//[Offset: 0x240, Size: 0x10]
	delegate OnSetActiveOpenBoxBtnDelegate;//[Offset: 0x250, Size: 0x10]
	delegate OnSetActiveOpenBoxProgressDelegate;//[Offset: 0x260, Size: 0x10]
	delegate OnSetTreasureBoxActorDelegate;//[Offset: 0x270, Size: 0x10]
	delegate OnSetAirdropBoxActorDelegate;//[Offset: 0x280, Size: 0x10]
	delegate OnHideTreasureBoxUIDelegate;//[Offset: 0x290, Size: 0x10]
	delegate OnHideAirdropBoxUIDelegate;//[Offset: 0x2a0, Size: 0x10]
	delegate OnSetPickupSwitchDelegate;//[Offset: 0x2b0, Size: 0x10]
	delegate OnAirdropCharChangeDelegate;//[Offset: 0x2c0, Size: 0x10]
	delegate OnAirdropProgressChangeDelegate;//[Offset: 0x2d0, Size: 0x10]
	delegate OnPlayerNumberChanged;//[Offset: 0x2e0, Size: 0x10]
	delegate OnKillNumberChanged;//[Offset: 0x2f0, Size: 0x10]
	delegate OnNotifyTerminator;//[Offset: 0x300, Size: 0x10]
	delegate OnNotifyRevengeAndShutDown;//[Offset: 0x310, Size: 0x10]
	delegate OnCapsulePlayerNumChanged;//[Offset: 0x320, Size: 0x10]
	delegate OnBombingStarted;//[Offset: 0x330, Size: 0x10]
	delegate OnBombingStopped;//[Offset: 0x340, Size: 0x10]
	delegate OnItemDiscarded;//[Offset: 0x350, Size: 0x10]
	delegate OnSettingRequestOpened;//[Offset: 0x360, Size: 0x10]
	delegate OnSettingRequestClosed;//[Offset: 0x370, Size: 0x10]
	delegate OnMigrateAccountVisibilityRequestChanged;//[Offset: 0x380, Size: 0x10]
	delegate OnCustomizeVisibilityRequestChanged;//[Offset: 0x390, Size: 0x10]
	delegate OnDriveCustomizeOpened;//[Offset: 0x3a0, Size: 0x10]
	delegate OnDriveCustomizeClosed;//[Offset: 0x3b0, Size: 0x10]
	delegate OnBackpackTookPickup;//[Offset: 0x3c0, Size: 0x10]
	delegate OnBackpackReleasedPickup;//[Offset: 0x3d0, Size: 0x10]
	delegate OnBackpackVisibilitySet;//[Offset: 0x3e0, Size: 0x10]
	delegate OnElectricShopVisibilitySet;//[Offset: 0x3f0, Size: 0x10]
	delegate OnBigMapVisibilitySet;//[Offset: 0x400, Size: 0x10]
	delegate OnRescueBtnVisibilitySet;//[Offset: 0x410, Size: 0x10]
	delegate OnBuyResurrectBtnVisibilitySet;//[Offset: 0x420, Size: 0x10]
	delegate OnBigMapCloseButtonClicked;//[Offset: 0x430, Size: 0x10]
	delegate OnPickupFlagChanged;//[Offset: 0x440, Size: 0x10]
	delegate OnPickupListVisibilityChanged;//[Offset: 0x450, Size: 0x10]
	delegate OnPickupItemSet;//[Offset: 0x460, Size: 0x10]
	delegate OnPickupItemCalculated;//[Offset: 0x470, Size: 0x10]
	delegate OnPickupCheckValidUpdated;//[Offset: 0x480, Size: 0x10]
	delegate OnPickupCheckHighlightUpdated;//[Offset: 0x490, Size: 0x10]
	delegate OnPickupCheckStatesUpdated;//[Offset: 0x4a0, Size: 0x10]
	delegate OnPickupItemSelected;//[Offset: 0x4b0, Size: 0x10]
	delegate OnPlayerDead;//[Offset: 0x4c0, Size: 0x10]
	delegate OnJoyStickSprintStateReset;//[Offset: 0x4d0, Size: 0x10]
	delegate OnJoyStickInputReset;//[Offset: 0x4e0, Size: 0x10]
	delegate OnJoyStickResetAll;//[Offset: 0x4f0, Size: 0x10]
	delegate OnTutorialGettingWidget;//[Offset: 0x500, Size: 0x10]
	delegate OnBattleTutorialWidgetDisplayed;//[Offset: 0x510, Size: 0x10]
	delegate OnTutorialSequenceRequested;//[Offset: 0x520, Size: 0x10]
	delegate OnDrivingTutorialStopped;//[Offset: 0x530, Size: 0x10]
	delegate OnFireButtonsInputReset;//[Offset: 0x540, Size: 0x10]
	bool bBackpackVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bElectricShopVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	bool bBigMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]
	bool bRescueBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]
	bool bBuyResurrectBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	delegate OnInBattle;//[Offset: 0x558, Size: 0x10]
	delegate OnNotInBattle;//[Offset: 0x568, Size: 0x10]
	delegate OnRadarStationUpdated;//[Offset: 0x578, Size: 0x10]
	delegate OnAngleViewEnabled;//[Offset: 0x588, Size: 0x10]
	delegate OnCharacterSwimStateChanged;//[Offset: 0x598, Size: 0x10]
	delegate OnCharacterWaterClimbAvailable;//[Offset: 0x5a8, Size: 0x10]
	delegate OnHitTraceUpdated;//[Offset: 0x5b8, Size: 0x10]
	delegate OnHitTraceRemoved;//[Offset: 0x5c8, Size: 0x10]
	delegate OnHitTraceCleared;//[Offset: 0x5d8, Size: 0x10]
	delegate OnProfessionFunctionalChanged;//[Offset: 0x5e8, Size: 0x10]
	delegate OnBackpackModeChanged;//[Offset: 0x5f8, Size: 0x10]
	delegate OnPickupListAdd;//[Offset: 0x608, Size: 0x10]
	delegate OnPickupListRemove;//[Offset: 0x618, Size: 0x10]
	delegate OnTeammateStateChanged;//[Offset: 0x628, Size: 0x10]
	delegate OnRepliableMessageChanged;//[Offset: 0x638, Size: 0x10]
	delegate OnPlayerFlagDisplayChanged;//[Offset: 0x648, Size: 0x10]
	delegate OnSpectateModeEntered;//[Offset: 0x658, Size: 0x10]
	delegate OnSpectateModeExited;//[Offset: 0x668, Size: 0x10]
	delegate OnSpectateReferToChanged;//[Offset: 0x678, Size: 0x10]
	delegate OnSpectateTargetItemsChanged;//[Offset: 0x688, Size: 0x10]
	delegate OnMarkButtonHoverChanged;//[Offset: 0x698, Size: 0x10]
	delegate OnMarkButtonTouchMoved;//[Offset: 0x6a8, Size: 0x10]
	delegate OnMarkButtonBeenLongPressed;//[Offset: 0x6b8, Size: 0x10]
	delegate OnMarkButtonDragSelectEnded;//[Offset: 0x6c8, Size: 0x10]
	delegate OnBattleModeChanged;//[Offset: 0x6d8, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x6e8, Size: 0x10]
	delegate OnCharacterHPChanged;//[Offset: 0x6f8, Size: 0x10]
	delegate OnCharacterDead;//[Offset: 0x718, Size: 0x10]
	delegate OnCharacterEnterWater;//[Offset: 0x728, Size: 0x10]
	delegate OnCharacterSelfRebirth;//[Offset: 0x738, Size: 0x10]
	delegate OnCharacterLevelUp;//[Offset: 0x748, Size: 0x10]
	delegate OnCharacterGainExp;//[Offset: 0x758, Size: 0x10]
	delegate OnBattleUpgradeEffect;//[Offset: 0x768, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectBegin;//[Offset: 0x778, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectFinish;//[Offset: 0x788, Size: 0x10]
	delegate OnSpectateBattleUpgradeEffectUpdate;//[Offset: 0x798, Size: 0x10]
	delegate OnTeammateRebirth;//[Offset: 0x7a8, Size: 0x10]
	delegate OnRapidBoostActivationChanged;//[Offset: 0x7b8, Size: 0x10]
	delegate OnMemberFlagIDChanged01;//[Offset: 0x7c8, Size: 0x10]
	delegate OnMemberFlagIDChanged02;//[Offset: 0x7d8, Size: 0x10]
	delegate OnMemberFlagIDChanged03;//[Offset: 0x7e8, Size: 0x10]
	delegate OnMemberFlagIDChanged04;//[Offset: 0x7f8, Size: 0x10]
	delegate OnSideAttributeSetRemoved;//[Offset: 0x808, Size: 0x10]
	delegate OnSideAttributeSetAdded;//[Offset: 0x818, Size: 0x10]
	delegate OnSideAttributeSetChanged;//[Offset: 0x828, Size: 0x10]
	delegate OnDrivingStateChanged;//[Offset: 0x838, Size: 0x10]
	delegate OnVehicleScopeInitialized;//[Offset: 0x848, Size: 0x10]
	delegate OnEquipVehicleWeaponDelegate;//[Offset: 0x858, Size: 0x10]
	delegate OnVehicleWeaponScopeDelegate;//[Offset: 0x868, Size: 0x10]
	delegate OnTransformerChangeWeaponDelegate;//[Offset: 0x878, Size: 0x10]
	delegate OnVehicleTypeChangeDelegate;//[Offset: 0x888, Size: 0x10]
	delegate OnVehicleAbilityManuallyCancelChange;//[Offset: 0x898, Size: 0x10]
	delegate OnInputSprintLockStart;//[Offset: 0x8a8, Size: 0x10]
	delegate OnSprintIconActived;//[Offset: 0x8b8, Size: 0x10]
	delegate OnSprintIconHide;//[Offset: 0x8c8, Size: 0x10]
	delegate OnSprintLockIconActived;//[Offset: 0x8d8, Size: 0x10]
	delegate OnTeamMessageReceive;//[Offset: 0x8e8, Size: 0x10]
	delegate OnVJetForbiddenChanged;//[Offset: 0x8f8, Size: 0x10]
	delegate OnHJetForbiddenChanged;//[Offset: 0x908, Size: 0x10]
	delegate OnVJetTotalTimesSet;//[Offset: 0x918, Size: 0x10]
	delegate OnHJetTotalTimesSet;//[Offset: 0x928, Size: 0x10]
	delegate OnVJetRestTimesSet;//[Offset: 0x938, Size: 0x10]
	delegate OnHJetRestTimesSet;//[Offset: 0x948, Size: 0x10]
	delegate OnVJetChargeStateChanged;//[Offset: 0x958, Size: 0x10]
	delegate OnVJetCDStateChanged;//[Offset: 0x968, Size: 0x10]
	delegate OnHJetChargeStateChanged;//[Offset: 0x978, Size: 0x10]
	delegate OnHJetCDStateChanged;//[Offset: 0x988, Size: 0x10]
	delegate OnVJetTimesCharging;//[Offset: 0x998, Size: 0x10]
	delegate OnHJetTimesCharging;//[Offset: 0x9a8, Size: 0x10]
	delegate OnVJetCoolingDown;//[Offset: 0x9b8, Size: 0x10]
	delegate OnHJetCoolingDown;//[Offset: 0x9c8, Size: 0x10]
	delegate OnVJetModuleLevelChanged;//[Offset: 0x9d8, Size: 0x10]
	delegate OnHJetModuleLevelChanged;//[Offset: 0x9e8, Size: 0x10]
	delegate OnSkydiveFlyStateChanged;//[Offset: 0x9f8, Size: 0x10]
	delegate OnSkydiveAltitudeUpdate;//[Offset: 0xa08, Size: 0x10]
	delegate OnSkydiveSpeedUpdate;//[Offset: 0xa18, Size: 0x10]
	delegate OnShowGameNoticeDelegate;//[Offset: 0xa28, Size: 0x10]
	delegate OnStartCountDownDelegate;//[Offset: 0xa38, Size: 0x10]
	delegate OnStopCountDownDelegate;//[Offset: 0xa48, Size: 0x10]
	delegate OnOverlapElectricShopDelegate;//[Offset: 0xa68, Size: 0x10]
	delegate OnUpdateVehicleInteractionDelegate;//[Offset: 0xa78, Size: 0x10]
	delegate OnCruiseHeightSet;//[Offset: 0xa88, Size: 0x10]
	delegate OnEnterCruisingDelegate;//[Offset: 0xa98, Size: 0x10]
	delegate OnEnterParachutingDelegate;//[Offset: 0xaa8, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0xab8, Size: 0x10]
	delegate OnCustomizeLayoutChangedDelegate;//[Offset: 0xac8, Size: 0x10]
	delegate OnSetUIActionSwitchDelegate;//[Offset: 0xad8, Size: 0x10]
	delegate OnEShopWeaponUpgradeDelegate;//[Offset: 0xae8, Size: 0x10]
	delegate OnEShopShieldUpgradeDelegate;//[Offset: 0xaf8, Size: 0x10]
	delegate OnEShopPurchaseSuccessDelegate;//[Offset: 0xb08, Size: 0x10]
	delegate OnEShopItemCDRefreshDelegate;//[Offset: 0xb18, Size: 0x10]
	delegate OnEShopItemRefreshDelegate;//[Offset: 0xb28, Size: 0x10]
	delegate OnEShopSlotWeaponUpgradeDelegate;//[Offset: 0xb38, Size: 0x10]
	delegate OnEShopWeaponChangeDelegate;//[Offset: 0xb48, Size: 0x10]
	delegate OnEShopPoolRefreshDelegate;//[Offset: 0xb58, Size: 0x10]
	delegate TryOpenElectricShopDelegate;//[Offset: 0xb68, Size: 0x10]
	delegate OnTeammateHomePanelGetting;//[Offset: 0xb78, Size: 0x10]
	delegate OnHomeBattleUIGetting;//[Offset: 0xb88, Size: 0x10]
	delegate OnHomeMainBuildGetting;//[Offset: 0xb98, Size: 0x10]
	delegate OnHomeFriendListGetting;//[Offset: 0xba8, Size: 0x10]
	delegate OnHomeLevelUpUIGetting;//[Offset: 0xbb8, Size: 0x10]
	delegate OnShieldAvailableChanged;//[Offset: 0xbc8, Size: 0x10]
	delegate OnShieldChanged;//[Offset: 0xbd8, Size: 0x10]
	delegate OnShieldFXUpdated;//[Offset: 0xbe8, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0xbf8, Size: 0x10]
	delegate OnMaxShieldValueUpdate;//[Offset: 0xc08, Size: 0x10]
	delegate OnGetWeaponCrosshairPanel;//[Offset: 0xc18, Size: 0x10]
	delegate TryOpenTreasureBoxDelegate;//[Offset: 0xc28, Size: 0x10]
	delegate TryOpenAirDropTreasureBoxDelegate;//[Offset: 0xc38, Size: 0x10]
	delegate TryCancelAirDropTreasureBoxDelegate;//[Offset: 0xc48, Size: 0x10]
	delegate OnSwitchEMP;//[Offset: 0xc58, Size: 0x10]
	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened);// 0x505573c
	void VehicleTypeChanged__DelegateSignature();// 0x505573c
	void VehicleAbilityManuallyCancelChange__DelegateSignature(bool bManuallyCancelAbilityActived);// 0x505573c
	void TwoIntUIInteractDelegate__DelegateSignature(int Value01, int Value02);// 0x505573c
	void TwoIntImplementableDelegate__DelegateSignature(int Value01, int Value02);// 0x505573c
	void TransformerWeaponChanged__DelegateSignature(enum InType);// 0x505573c
	void ToggledBigMapVisibility();// 0x4cb95e8
	void ToggledBackpackVisibility();// 0x4cb9754
	void StopDrivingTutorial();// 0x4cb9078
	void SprintLockIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x505573c
	void SimpleUIInteractDelegate__DelegateSignature();// 0x505573c
	void SimpleTriggerDelegate__DelegateSignature();// 0x505573c
	void SimpleSpectatorDelegate__DelegateSignature();// 0x505573c
	void SimplePlayerStateDelegate__DelegateSignature(SolarPlayerState* TeammatePS);// 0x505573c
	void SimpleOnRefreshDelegate__DelegateSignature();// 0x505573c
	void SimpleOnBindDelegate__DelegateSignature();// 0x505573c
	void SimpleImplementableDelegate__DelegateSignature();// 0x505573c
	void SimpleFloatDelegate__DelegateSignature(float Value);// 0x505573c
	void SimpleCharacterLuaDelegate__DelegateSignature();// 0x505573c
	void SetRescueBtnVisibility(bool bVisible);// 0x4cb9490
	void SetElectricShopVisibility(bool bVisible);// 0x4cb95fc
	void SetBuyResurrectBtnVisibility(const bool bVisible);// 0x4cb93e4
	void SetBigMapVisibility(bool bVisible);// 0x4cb953c
	void SetBackpackVisibility(bool bInValue);// 0x4cb96a8
	void RemoveItemFromPickup(Object* InCardItem);// 0x4cb8dcc
	void ReceivePlayerDeath(out const KillInfo KillInfo);// 0x4cb92e8
	void PlayerTutorialSequence(const bool bPlay);// 0x4cb908c
	void PickupListDelegate__DelegateSignature(Object* CardItem);// 0x505573c
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible);// 0x505573c
	void OnWidgetButtonClicked__DelegateSignature();// 0x505573c
	void OnVehicleScopeInitialized__DelegateSignature(UserWidget* Widget);// 0x505573c
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum UiState, SolarVehiclePawn* InVehicleComponent, float EnergyCost);// 0x505573c
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay);// 0x505573c
	FString OnTutorialGettingWidget__DelegateSignature(out Widget* Result, out const FName[] WidgetNameLink);// 0x505573c
	void OnTeamMessageReceive__DelegateSignature(FString MemberName, FString Message, bool bLocalPlayer, bool bSound, int PosInTeam);// 0x505573c
	void OnTeammateTalentStateChanged__DelegateSignature(enum TalentState, byte PosInTeam, float AdditionalParam);// 0x505573c
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);// 0x505573c
	void OnTeammateShieldChanged__DelegateSignature(byte PosInTeam, out const ShieldInfo OldShield, out const ShieldInfo NewShield);// 0x505573c
	void OnTeammateReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer);// 0x505573c
	void OnTeammateReviveItemChanged__DelegateSignature(byte PosInTeam, byte ReviveItemNum, bool bCanRebirth);// 0x505573c
	void OnTeammatePlatStateRemove__DelegateSignature(byte PosInTeam, bool bLastOne);// 0x505573c
	void OnTeammateIntegerDataChanged__DelegateSignature(int Data, byte PosInTeam);// 0x505573c
	void OnTeammateHPChanged__DelegateSignature(byte PosInTeam, float CurrentHP, float MaxHP);// 0x505573c
	void OnSwitchEMP__DelegateSignature(SolarCharacter* InCharacter, bool InbSwitchOnEMP);// 0x505573c
	void OnStopCountDownDelegate__DelegateSignature(const int InTextId);// 0x505573c
	void OnStartCountDownDelegate__DelegateSignature(out const CountDownInfo InCountDownInfo);// 0x505573c
	void OnSprintIconHide__DelegateSignature();// 0x505573c
	void OnSprintIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x505573c
	void OnSpectateTargetItemsChanged__DelegateSignature(ReplicateItemData[] InItemDatas);// 0x505573c
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x4cb8b68
	void OnSpectateReferToChanged__DelegateSignature(const SolarPlayerState* ReferToPlayerState, enum State);// 0x505573c
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x505573c
	void OnSpecTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x505573c
	void OnSkydivingMemberDataUpdated__DelegateSignature(SolarPlayerState* MemberPS);// 0x505573c
	void OnSkydivingFollowRequestResponded__DelegateSignature(SolarPlayerState* Follower, bool bAgreed);// 0x505573c
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);// 0x505573c
	void OnSkydiveFollowDisabled__DelegateSignature();// 0x505573c
	void OnSkydiveFlyStateChanged__DelegateSignature(bool bInFly);// 0x505573c
	void OnSkydiveDataUpdate__DelegateSignature(float NewData);// 0x505573c
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);// 0x505573c
	void OnSkillActivationChanged__DelegateSignature(bool bActivated);// 0x505573c
	void OnSideAttributeSetRemoved__DelegateSignature(FString SideName);// 0x505573c
	void OnSideAttributeSetChanged__DelegateSignature(FString SideName, out const SideAttributeSet SideRef);// 0x505573c
	void OnShowGameNotice__DelegateSignature(const int InNoticeID, out const HUDNoticeParams InNoiceParams);// 0x505573c
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerId, const enum ShieldRechargeState, bool bFixPreAdd);// 0x505573c
	void OnShieldFXUpdated__DelegateSignature();// 0x505573c
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x505573c
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable);// 0x505573c
	void OnSetUIActionSwitchDelegate__DelegateSignature(enum InAction, bool bOn);// 0x505573c
	void OnSetTreasureBoxActorDelegate__DelegateSignature(Actor* InActor);// 0x505573c
	void OnSetPickupSwitchDelegate__DelegateSignature(enum InType, bool InFlag);// 0x505573c
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive);// 0x505573c
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int SelectedIndex);// 0x505573c
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x505573c
	void OnRepliableMessageChanged__DelegateSignature();// 0x505573c
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius);// 0x505573c
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay);// 0x505573c
	void OnPlayerDead__DelegateSignature(out const KillInfo DeathMsgInfo);// 0x505573c
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible);// 0x505573c
	void OnPickupItemSet__DelegateSignature(out const Actor*[] ObjectList, enum Type);// 0x505573c
	void OnPickupItemSelected__DelegateSignature(Object* SelectWidget, int SelectWidgetThisID);// 0x505573c
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf);// 0x505573c
	void OnPickupCheckValidUpdated__DelegateSignature(out const ItemCountsList ItemCountsList);// 0x505573c
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate);// 0x505573c
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum Type, bool IsRecommend);// 0x505573c
	void OnOverlapElectricShopDelegate__DelegateSignature(const bool InOverlap);// 0x505573c
	void OnNotifyTerminator__DelegateSignature(FString InTerminatorName);// 0x505573c
	void OnNotifyRevengeAndShutDown__DelegateSignature(out const KillInfo InKillInfo);// 0x505573c
	void OnNavMapMarked__DelegateSignature(byte PosInTeam, out const Vector2D MarkPosition);// 0x505573c
	void OnNavMapMarkCleared__DelegateSignature(byte PosInTeam);// 0x505573c
	void OnMemberFlagIDChanged__DelegateSignature(int FlagID);// 0x505573c
	void OnMaxShieldValueUpdate__DelegateSignature(const float MaxShieldVal);// 0x505573c
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter);// 0x505573c
	void OnMarkButtonSimpleTriggered__DelegateSignature();// 0x505573c
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);// 0x505573c
	void OnJetTimesChanged__DelegateSignature(int NewTimes);// 0x505573c
	void OnJetModuleLevelChanged__DelegateSignature(int NewLevel);// 0x505573c
	void OnJetFlyStateChanged__DelegateSignature(bool bStart);// 0x505573c
	void OnJetFlyForbiddenChanged__DelegateSignature(enum ForbiddenType, bool bAdded);// 0x505573c
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);// 0x505573c
	void OnInputSprintLockStart__DelegateSignature();// 0x505573c
	void OnInitElectricShopDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x505573c
	UserWidget* OnHomelandGetWidget__DelegateSignature();// 0x505573c
	int OnHitTraceUpdated__DelegateSignature(int HitTraceID, enum HitTraceType, float Angle, float WidgetScale);// 0x505573c
	void OnHideUIByThisIDDelegate__DelegateSignature(int64 InThisID);// 0x505573c
	SolarWeaponCrosshairPanelWidget* OnGetWeaponCrosshairPanel__DelegateSignature();// 0x505573c
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x505573c
	void OnEShopWeaponChangeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x505573c
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int InWeaponSlot);// 0x505573c
	void OnEShopShieldUpgradeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x505573c
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int InProductID, SolarCharacter* InCharacter);// 0x505573c
	void OnEShopInfoUpdateDelegate__DelegateSignature(SolarElectricShop* InElectricShop);// 0x505573c
	void OnDrivingTutorialStopped__DelegateSignature();// 0x505573c
	void OnDrivingStateChanged__DelegateSignature(enum DriveState);// 0x505573c
	void OnCustomizeLayoutChangedDelegate__DelegateSignature(enum InType);// 0x505573c
	void OnCharacterStateChanged__DelegateSignature();// 0x505573c
	void OnCharacterSelfRebirth__DelegateSignature(SolarCharacter* RebirthCharacter);// 0x505573c
	void OnCharacterRescueStateChanged__DelegateSignature(byte NewRescueState);// 0x505573c
	void OnCharacterLevelUp__DelegateSignature(int NewLevel, FString DynamicTip);// 0x505573c
	void OnCharacterIDSet__DelegateSignature(int CharacterId);// 0x505573c
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP);// 0x505573c
	void OnCharacterGainExp__DelegateSignature(int ExpAdded);// 0x505573c
	void OnBombingStarted__DelegateSignature(int BombId, out const Vector Location, float Radius);// 0x505573c
	void OnBattleUpgradeEffect__DelegateSignature(enum EffectType, int ParamSum);// 0x505573c
	void OnBattleTutorialWidgetDisplayed__DelegateSignature(Widget* TutorialWidget, byte ParentPanelType);// 0x505573c
	void OnBattleModeChanged__DelegateSignature(byte NewModeType);// 0x505573c
	void OnBackpackTookPickup__DelegateSignature(out const Vector2D NewPosition);// 0x505573c
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(AirDropTreasureBox* InAirdropBox);// 0x505573c
	void JoyStickSimpleDeleghate__DelegateSignature();// 0x505573c
	bool IsElectricShopVisible();// 0x4cb7a94
	void IntUIInteractDelegate__DelegateSignature(int Value);// 0x505573c
	void IntImplementableDelegate__DelegateSignature(int Value);// 0x505573c
	void InternalCallVJetTotalTimesSet();// 0x4cb7ffc
	void InternalCallVJetTimesCharging();// 0x4cb7fac
	void InternalCallVJetRestTimesSet();// 0x4cb7fe8
	void InternalCallVJetModuleLevelChanged();// 0x4cb7f84
	void InternalCallVJetCoolingDown();// 0x4cb7f98
	void InternalCallVJetChargeStateChanged();// 0x4cb7fd4
	void InternalCallVJetCDStateChanged();// 0x4cb7fc0
	void InternalCallSkydiveSpeed();// 0x4cb7ea8
	void InternalCallSkydiveFlyStateChanged();// 0x4cb7ebc
	void InternalCallHJetTotalTimesSet();// 0x4cb7f70
	void InternalCallHJetTimesCharging();// 0x4cb7f20
	void InternalCallHJetRestTimesSet();// 0x4cb7f5c
	void InternalCallHJetModuleLevelChanged();// 0x4cb7ef8
	void InternalCallHJetCoolingDown();// 0x4cb7f0c
	void InternalCallHJetChargeStateChanged();// 0x4cb7f48
	void InternalCallHJetCDStateChanged();// 0x4cb7f34
	void IntCharacterLuaDelegate__DelegateSignature(int Value);// 0x505573c
	void IntBackpackDelegate__DelegateSignature(int Value);// 0x505573c
	SolarUserWidget* GetWorldMarkPanel();// 0x4cb98e0
	Widget* GetWidgetFromBattleUIForTutorial(out const FName[] InWidgetNameLink);// 0x4cb9220
	UserWidget* GetTeammateHomePanel();// 0x4cb7410
	static HUDDispatcherBase* GetHUDDispatcher_FromUI(const Widget* InWidget);// 0x4cba4d4
	static HUDDispatcherBase* GetHUDDispatcher_FromPC(const PlayerController* InPC);// 0x4cba6c0
	static HUDDispatcherBase* GetHUDDispatcher_FromHUD(const HUD* InHUD);// 0x4cba578
	static HUDDispatcherBase* GetHUDDispatcher_FromCharacter(const SolarCharacter* InCharacter);// 0x4cba61c
	UserWidget* GetHomeMainBuild();// 0x4cb73a8
	UserWidget* GetHomeLevelUpUI();// 0x4cb7340
	UserWidget* GetHomeFriendList();// 0x4cb7374
	UserWidget* GetHomeBattleUI();// 0x4cb73dc
	void EquipVehicleWeapon__DelegateSignature(SolarVehicleWeapon* InVehicleWeapon);// 0x505573c
	void DisplayBattleTutorialWidget(Widget* InTutorialWidget, const byte InParentType);// 0x4cb9138
	void BroadcastVJetForbiddenChanged(enum Types, bool bAdded);// 0x4cb8218
	void BroadcastSpectateTargetItemsChanged(out const ReplicateItemData[] InItemDatas);// 0x4cb8c4c
	void BroadcastSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x4cb8a84
	void BroadcastSpectateBattleUpgradeEffectUpdate(SolarSpectateInfo* SpectateInfo);// 0x4cb831c
	void BroadcastSkydiveSpeed();// 0x4cb7ed0
	bool BroadcastShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x4cb6ee4
	void BroadcastShieldFXUpdated();// 0x4cb70f8
	bool BroadcastShieldChanged(const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x4cb710c
	bool BroadcastShieldAvailable(const bool bAvailable);// 0x4cb7288
	void BroadcastSettingRequestOpened(const int InOwnerType);// 0x4cb9b38
	void BroadcastSettingRequestClosed();// 0x4cb9b24
	void BroadcastSelectingBattleUpgradeEffectFinish(int SelectedIndex);// 0x4cb83c0
	void BroadcastSelectingBattleUpgradeEffectBegin(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x4cb8464
	void BroadcastProfessionFunctionalChanged(const bool bEnabled);// 0x4cb8fb8
	void BroadcastPoisonEffectUpdated(float PosX, float PosY, float Redius);// 0x4cb977c
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay);// 0x4cb8d0c
	void BroadcastOnVJetTotalTimesSetDelegate();// 0x4cb8204
	void BroadcastOnVJetTimesChargingDelegate();// 0x4cb81b4
	void BroadcastOnVJetRestTimesSetDelegate();// 0x4cb81f0
	void BroadcastOnVJetModuleLevelChangedDelegate();// 0x4cb818c
	void BroadcastOnVJetCoolingDownDelegate();// 0x4cb81a0
	void BroadcastOnVJetChargeStateChangedDelegate();// 0x4cb81dc
	void BroadcastOnVJetCDStateChangedDelegate();// 0x4cb81c8
	void BroadcastOnTeammateStateChangedDelegate();// 0x4cb8db8
	void BroadcastOnTeammateRebirth();// 0x4cb8308
	void BroadcastOnTeamateReviveStateChanged(SolarPlayerState* RevivingMeTeammatePlayer);// 0x4cba430
	void BroadcastOnStopCountDownDelegate(const int InTextId);// 0x4cb7b70
	void BroadcastOnStartCountDownDelegate(out const CountDownInfo InCountDownInfo);// 0x4cb7c14
	void BroadcastOnSkydiveFlyStateChanged();// 0x4cb7ee4
	void BroadcastOnShowGameNoticeDelegate(const int InNoticeID, out const HUDNoticeParams InNoticeParams);// 0x4cb7d64
	void BroadcastOnSetTreasureBoxActorDelegate(Actor* InActor);// 0x4cba1a8
	void BroadcastOnSetPickupSwitchDelegate(const enum InType, const bool InFlag);// 0x4cb9ecc
	void BroadcastOnSetAirdropBoxActorDelegate(Actor* InActor);// 0x4cba104
	void BroadcastOnSetActiveOpenBoxProgressDelegate(const bool Inactive);// 0x4cba24c
	void BroadcastOnSetActiveOpenBoxBtnDelegate(const bool Inactive);// 0x4cba2f8
	void BroadcastOnRightMouseButtonDownEvent();// 0x4cb6e18
	void BroadcastOnRefreshBackpackWeaponPartDelegate();// 0x4cba3a4
	void BroadcastOnRefreshBackpackWeaponDelegate();// 0x4cba3b8
	void BroadcastOnRefreshBackpackItemDelegate();// 0x4cba3e0
	void BroadcastOnRefreshBackpackEquipDelegate();// 0x4cba3cc
	void BroadcastOnOverlapElectricShopDelegate(const bool InOverlap);// 0x4cb79e8
	void BroadcastOnInteractEvent();// 0x4cb6e2c
	void BroadcastOnInitElectricShopDelegate(SolarCharacter* InCharcter);// 0x4cb7acc
	void BroadcastOnHJetTotalTimesSetDelegate();// 0x4cb8088
	void BroadcastOnHJetTimesChargingDelegate();// 0x4cb8038
	void BroadcastOnHJetRestTimesSetDelegate();// 0x4cb8074
	void BroadcastOnHJetModuleLevelChangedDelegate();// 0x4cb8010
	void BroadcastOnHJetCoolingDownDelegate();// 0x4cb8024
	void BroadcastOnHJetChargeStateChangedDelegate();// 0x4cb8060
	void BroadcastOnHJetCDStateChangedDelegate();// 0x4cb804c
	void BroadcastOnHideTreasureBoxUIDelegate(const int64 InThisID);// 0x4cba060
	void BroadcastOnHideAirdropBoxUIDelegate(const int64 InThisID);// 0x4cb9fbc
	void BroadcastOnEShopWeaponUpgradeDelegate(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x4cb7904
	void BroadcastOnEShopWeaponChangeDelegate(SolarCharacter* InCharacter);// 0x4cb74e8
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int InWeaponSlot);// 0x4cb758c
	void BroadcastOnEShopShieldUpgradeDelegate(SolarCharacter* InCharacter);// 0x4cb7860
	void BroadcastOnEShopPurchaseSuccessDelegate(int InProductID, SolarCharacter* InCharacter);// 0x4cb7778
	void BroadcastOnEShopPoolRefreshDelegate(SolarElectricShop* InElectricShop);// 0x4cb7444
	void BroadcastOnEShopItemRefreshDelegate(SolarElectricShop* InElectricShop);// 0x4cb7630
	void BroadcastOnEShopItemCDRefreshDelegate(SolarElectricShop* InElectricShop);// 0x4cb76d4
	void BroadcastOnBindPowerBarDelegates();// 0x4cba3f4
	void BroadcastOnBindItemPanelDelegates();// 0x4cba408
	void BroadcastOnBindHPPanelDelegates();// 0x4cba41c
	void BroadcastOnAirdropProgressChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x4cb9d84
	void BroadcastOnAirdropCharChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x4cb9e28
	void BroadcastMigrateAccountVisibilityRequestChanged(const bool bVisible);// 0x4cb9a78
	void BroadcastMaxShieldValueUpdate(const float MaxShieldValue);// 0x4cb6e40
	void BroadcastJoyStickSprintStateReset();// 0x4cb98cc
	void BroadcastJoyStickResetAll();// 0x4cb98a4
	void BroadcastJoyStickInputReset();// 0x4cb98b8
	void BroadcastItemDiscarded(const int InItemID, const int InTotalCount);// 0x4cb9bdc
	void BroadcastHJetForbiddenChanged(enum Types, bool bAdded);// 0x4cb809c
	void BroadcastFireButtonsReset();// 0x4cb9768
	void BroadcastDriveCustomizeOpened(const int InLayoutType);// 0x4cb9928
	void BroadcastDriveCustomizeClosed();// 0x4cb9914
	void BroadcastCustomizeVisibilityRequestChanged(const bool bVisible);// 0x4cb99cc
	void BroadcastCharacterRescueStateChanged(const byte NewRescueState);// 0x4cb8884
	void BroadcastCharacterLevelUp(const int InLevel, FString DynamicTip);// 0x4cb873c
	void BroadcastCharacterHPState();// 0x4cb8928
	void BroadcastCharacterGainExp(const int ExpAdded);// 0x4cb8698
	void BroadcastBattleUpgradeEffect(const enum EffectType, const int ParamSum);// 0x4cb85b0
	void BroadcastBattleState();// 0x4cb9064
	void BroadcastBattleModeChanged(byte InModeType);// 0x4cb893c
	void BroadcastBackpackTakesPickup(out const Vector2D NewPosition);// 0x4cb9cd4
	void BroadcastBackpackReleasesPickup();// 0x4cb9cc0
	void BroadcastBackpackModeChanged(const int NewMode);// 0x4cb8f14
	void BoolUIInteractDelegate__DelegateSignature(bool bValue);// 0x505573c
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue);// 0x505573c
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue);// 0x505573c
	void BindLocalSpectateDelegates(SolarSpectateInfo* SpectateInfo);// 0x4cb89e0
	void AddItemToPickup(Object* InCardItem);// 0x4cb8e70

--------------------------------
Class: CountDownInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float RemainingTime;//[Offset: 0x8, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int PassiveTextID;//[Offset: 0x10, Size: 0x4]
	int ContributorCharacterId;//[Offset: 0x38, Size: 0x4]
	enum State;//[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: SideAttributeSet.FastArraySerializerItem
	FString SideName;//[Offset: 0x10, Size: 0x10]
	SideAttribute SideTreatmentDurationReductionMultiple;//[Offset: 0x20, Size: 0x18]
	SideAttribute SideShieldChargeDurationReductionMultiple;//[Offset: 0x38, Size: 0x18]
	SideAttribute SideBigShieldChargeDurationReductionMultiple;//[Offset: 0x50, Size: 0x18]
	SideAttribute SideItemDiscountMultiple;//[Offset: 0x68, Size: 0x18]
	SideAttribute SideItemAdditionMultiple;//[Offset: 0x80, Size: 0x18]

--------------------------------
Class: SideAttribute
	float Value;//[Offset: 0x0, Size: 0x4]
	SCMPlayerState*[] Contributors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: HUDNoticeParams
	<FString,FString> Params;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ItemCountsList
	<enum,int> Type2IntMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SolarWeaponCrosshairPanelWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* WeaponCrosshairPanel;//[Offset: 0x320, Size: 0x8]
	UserWidgetPool CrosshairWidgetPool;//[Offset: 0x328, Size: 0x80]
	void RemoveWeaponCrosshair(UserWidget* InCrosshairWidget, bool InbRemainCache);// 0x4c38b6c
	SolarWeaponCrosshairPanelWidget* GetSelf();// 0x4c38b38
	UserWidget* AddWeaponCrosshairToPanel(class UserWidget InWidgetClass);// 0x4c38c5c

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BPC_CountdownExec_C.CGMCountdownExecComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 0x8]
	void AddUI(SolarCharacter* OpeningCharacter);// 0x505573c
	void CloseUI(SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x505573c
	void ExecuteAfterTheCountdown();// 0x505573c
	void OnRespondToPlayerApproachingExec(SolarCharacter* Character);// 0x505573c
	void OnRespondToPlayerLeavingExec(SolarCharacter* Character);// 0x505573c
	void OnStartStartCountingDownExec(SolarCharacter* InOpeningCharacter);// 0x505573c
	void ExecuteUbergraph_BPC_CountdownExec(int EntryPoint, SolarCharacter* K2Node_Event_Character, SolarCharacter* K2Node_Event_Character, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, SolarCharacter* K2Node_Event_InOpeningCharacter, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess);// 0x505573c

--------------------------------
Class: S_ResurrectInfo
	bool bClearWeapons_8_85433FCD494E4E2DDCA2F6AB69D508C9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClearAllItems_7_1B66870A49E70A4A31DBD1B93C1AE45D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEmptyEnergy_9_422079A04E20412A0DD60594501D7D8C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bReChargeJetToFull_10_2649F2CB4F2A722D287E91848E966DBF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	enum ResurrectMethod_15_E3E0A84B479C7DB70DAAF88AAF99DA23;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: BP_BattleRoylePoisonCircle_C.BP_CustomPoisonCircle_Template_C.SolarCustomModeCircleSafeArea.SolarCustomModeSafeArea.SolarSafeArea.SolarMapElementBase.Actor.Object
	bool UsePoisonCircleMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e5, Size: 0x1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e6, Size: 0x1]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x9e8, Size: 0x4]
	HitResult CallFunc_K2_SetActorLocation_SweepHitResult;//[Offset: 0x9ec, Size: 0x88]
	void UI_DetectAndExecuteShowNotice();// 0x39f07a8

--------------------------------
Class: BP_CustomPoisonCircle_Template_C.SolarCustomModeCircleSafeArea.SolarCustomModeSafeArea.SolarSafeArea.SolarMapElementBase.Actor.Object
	StaticMeshComponent* StaticMeshCicle;//[Offset: 0x458, Size: 0x8]
	StaticMeshComponent* SafeArea;//[Offset: 0x460, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x468, Size: 0x8]
	int DamageLevel;//[Offset: 0x470, Size: 0x4]
	Vector2D MapSize;//[Offset: 0x474, Size: 0x8]
	int MiniCircleID;//[Offset: 0x47c, Size: 0x4]
	int BigMapCircleID;//[Offset: 0x480, Size: 0x4]
	float CircleScale;//[Offset: 0x484, Size: 0x4]
	float PreRadius;//[Offset: 0x488, Size: 0x4]
	bool bDrawLineToCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	<SolarAbilitySystemComponent*,GameplayAbilitySpecHandle> AbilityMap;//[Offset: 0x490, Size: 0x50]
	SolarGameInstanceBase* GameInstance;//[Offset: 0x4e0, Size: 0x8]
	<MiniMapWidget*,int> Map_CircleID;//[Offset: 0x4e8, Size: 0x50]
	Color CircleColor;//[Offset: 0x538, Size: 0x4]
	enum SpaceState;//[Offset: 0x53c, Size: 0x1]
	class Object* DamageAbility;//[Offset: 0x540, Size: 0x8]
	delegate OnPlayerEnterSafeRing;//[Offset: 0x548, Size: 0x10]
	delegate OnPlayerLeaveSafeRing;//[Offset: 0x558, Size: 0x10]
	delegate OnSetNextSafeArea;//[Offset: 0x568, Size: 0x10]
	bool PauseExec;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	FString LevelName;//[Offset: 0x580, Size: 0x10]
	int Index;//[Offset: 0x590, Size: 0x4]
	int ShowNoticeIndex;//[Offset: 0x594, Size: 0x4]
	Vector TempCenterPos;//[Offset: 0x598, Size: 0xc]
	bool UsePoisonCircleMarkerPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	MaterialParameterInfo NewVar;//[Offset: 0x5a8, Size: 0x10]
	float Distance Threshold;//[Offset: 0x5b8, Size: 0x4]
	int Temp_int_Array_Index_Variable;//[Offset: 0x5bc, Size: 0x4]
	Object* Temp_object_Variable;//[Offset: 0x5c0, Size: 0x8]
	MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance;//[Offset: 0x5c8, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	Material* K2Node_DynamicCast_AsMaterial;//[Offset: 0x5d8, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 0x1]
	enum Temp_byte_Variable;//[Offset: 0x5e3, Size: 0x1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x5e4, Size: 0x4]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5e8, Size: 0x10]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x5f8, Size: 0x4]
	Actor* K2Node_CustomEvent_Actor;//[Offset: 0x600, Size: 0x8]
	bool CallFunc_IsLocalCharacter_IsLocalCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	Vector K2Node_CustomEvent_Center;//[Offset: 0x60c, Size: 0xc]
	float K2Node_CustomEvent_Radius;//[Offset: 0x618, Size: 0x4]
	float K2Node_CustomEvent_WaitTime;//[Offset: 0x61c, Size: 0x4]
	float K2Node_CustomEvent_MoveTime;//[Offset: 0x620, Size: 0x4]
	int K2Node_CustomEvent_DamageLevel;//[Offset: 0x624, Size: 0x4]
	int K2Node_CustomEvent_Index;//[Offset: 0x628, Size: 0x4]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x630, Size: 0x40]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x670, Size: 0x40]
	HitResult CallFunc_K2_SetActorLocation_SweepHitResult;//[Offset: 0x6b0, Size: 0x88]
	Actor* K2Node_Event_Actor;//[Offset: 0x738, Size: 0x8]
	Actor* K2Node_Event_Actor;//[Offset: 0x740, Size: 0x8]
	float K2Node_CustomEvent_Radius;//[Offset: 0x748, Size: 0x4]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x74c, Size: 0x4]
	MiniMapWidget*[] CallFunc_Map_Keys_Keys;//[Offset: 0x750, Size: 0x10]
	MiniMapWidget* CallFunc_Array_Get_Item;//[Offset: 0x760, Size: 0x8]
	int CallFunc_Map_Find_Value;//[Offset: 0x768, Size: 0x4]
	int CallFunc_AddCircle_ReturnValue;//[Offset: 0x76c, Size: 0x4]
	MiniMapWidget*[] CallFunc_Map_Keys_Keys;//[Offset: 0x770, Size: 0x10]
	MiniMapWidget* CallFunc_Array_Get_Item;//[Offset: 0x780, Size: 0x8]
	int CallFunc_Map_Find_Value;//[Offset: 0x788, Size: 0x4]
	enum K2Node_CustomEvent_SpaceState;//[Offset: 0x78c, Size: 0x1]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x790, Size: 0x40]
	SolarCharacter*[] CallFunc_GetAllActorsOfClass_OutActors;//[Offset: 0x7d0, Size: 0x10]
	bool K2Node_Event_bInside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	Actor* K2Node_Event_Actor;//[Offset: 0x7e8, Size: 0x8]
	Actor* K2Node_Event_Actor;//[Offset: 0x7f0, Size: 0x8]
	HitResult CallFunc_K2_SetActorLocation_SweepHitResult;//[Offset: 0x7f8, Size: 0x88]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x880, Size: 0x4]
	SolarMapElementBase* CallFunc_GetActorOfClass_ReturnValue;//[Offset: 0x888, Size: 0x8]
	HitResult CallFunc_K2_SetActorLocation_SweepHitResult;//[Offset: 0x890, Size: 0x88]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x918, Size: 0x10]
	Object* K2Node_CustomEvent_Loaded;//[Offset: 0x928, Size: 0x8]
	int CallFunc_GetDataInt_OutValue;//[Offset: 0x930, Size: 0x4]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x938, Size: 0x40]
	Vector2D K2Node_CustomEvent_Center;//[Offset: 0x978, Size: 0x8]
	float K2Node_CustomEvent_Radius;//[Offset: 0x980, Size: 0x4]
	int K2Node_CustomEvent_DamageLevel;//[Offset: 0x984, Size: 0x4]
	FormatArgumentData K2Node_MakeStruct_FormatArgumentData;//[Offset: 0x988, Size: 0x40]
	FormatArgumentData[] K2Node_MakeArray_Array;//[Offset: 0x9c8, Size: 0x10]
	SCustomGameState* K2Node_DynamicCast_AsBP_Custom_Game_State_Base;//[Offset: 0x9d8, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e2, Size: 0x1]
	bool K2Node_Select_Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e3, Size: 0x1]
	void OnSetNextSafeArea__DelegateSignature(Vector bpp__Center__pf, float bpp__Radius__pf, float bpp__WaitTime__pf, float bpp__MoveTime__pf, int bpp__Index__pf);// 0x505573c
	void OnPlayerLeaveSafeRing__DelegateSignature(Actor* bpp__Actor__pf);// 0x505573c
	void OnPlayerEnterSafeRing__DelegateSignature(Actor* bpp__Actor__pf);// 0x505573c
	void OnBasicSystemReady__DelegateSignature();// 0x505573c
	void UpdateMapUI(float bpp__PosX__pf, float bpp__PosY__pf, float bpp__Radius__pf);// 0x39f12e8
	void ShrinkingCompleted();// 0x39f1f5c
	void ShowNotice();// 0x39f17b0
	void ShowEffectInside(bool bpp__bInside__pf);// 0x39f2024
	void SetNextArea(Vector bpp__Center__pf, float bpp__Radius__pf, float bpp__WaitTime__pf, float bpp__MoveTime__pf, int bpp__DamageLevel__pf, int bpp__Index__pf);// 0x39f1b28
	void SetMiniapPoisonCircleSizeAndPos();// 0x39f18d0
	void SetMeshVisibility();// 0x39f1418
	void SetCurrentArea(Vector2D bpp__Center__pf, float bpp__Radius__pf, int bpp__DamageLevel__pf);// 0x39f2230
	void Reset Material(Object* bpp__Object__pf);// 0x39f123c
	void Refresh Minimap UI();// 0x39f1434
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x39f19d0
	void ReceiveBeginPlay();// 0x39f19b4
	void OnSystemReady();// 0x39f1e78
	void OnStateChanged(enum bpp__SpaceState__pf);// 0x39f1f78
	void OnRep_SpaceState();// 0x39f163c
	void OnLoaded_2CF9BD9E4D7B992D773DE7AE62F29135(Object* bpp__Loaded__pf);// 0x39f1908
	void IsLocalCharacter(Actor* bpp__Actor__pf, out bool bpp__IsLocalCharacter__pf);// 0x39f17cc
	void GetGameInstance(out SolarGameInstanceBase* bpp__Output_Get__pf);// 0x39f1450
	void ExecuteUbergraph_BP_CustomPoisonCircle_Template(int bpp__EntryPoint__pf);// 0x39f237c
	void ExecuteUbergraph_BP_CustomPoisonCircle_Template(int bpp__EntryPoint__pf);// 0x39f2420
	void Evnet_ResetMaterial();// 0x39f2360
	void EventShrinkingCircleCompleted();// 0x39f1e94
	void EventNoticeLeaveSafeRing(Actor* bpp__Actor__pf);// 0x39f2184
	void EventNoticeLeavePoisonRing(Actor* bpp__Actor__pf);// 0x39f1dcc
	void EventNoticeEnterSafeRing(Actor* bpp__Actor__pf);// 0x39f20d8
	void EventNoticeEnterPoisonRing(Actor* bpp__Actor__pf);// 0x39f1d20
	void Event_ClientPlayNotif(Actor* bpp__Actor__pf);// 0x39f1a7c
	void DataTrace(int bpp__InInt__pf, Vector bpp__Vector__pf, float bpp__InFloat__pf);// 0x39f150c
	void ClientDrawCircle(float bpp__Radius__pf);// 0x39f1eb0
	void ClearAllAbilities();// 0x39f18ec
	void ActorOutSpace(Actor* bpp__Target__pf);// 0x39f1658
	void ActorEnterSpace(Actor* bpp__Target__pf);// 0x39f1704

--------------------------------
Class: SolarCustomModeCircleSafeArea.SolarCustomModeSafeArea.SolarSafeArea.SolarMapElementBase.Actor.Object
	float SafeAreaRadius;//[Offset: 0x420, Size: 0x4]
	float OriginalPoisonCircleRadius;//[Offset: 0x424, Size: 0x4]
	float CurPoisonCircleRadius;//[Offset: 0x428, Size: 0x4]
	Vector SafeAreaCenterPos;//[Offset: 0x42c, Size: 0xc]
	Vector OriginalLocation;//[Offset: 0x438, Size: 0xc]
	void Init(Vector InSafeAreaCenterPos, float InSafeAreaRadius, float InPoisonCircleRadius, float InShrinkCircleTimeConsuming);// 0x49ca2bc

--------------------------------
Class: SolarCustomModeSafeArea.SolarSafeArea.SolarMapElementBase.Actor.Object
	Actor*[] AffectedActorArr;//[Offset: 0x358, Size: 0x10]
	bool IsPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	Vector NextAreaLocation;//[Offset: 0x36c, Size: 0xc]
	float NextSafeAreaRadius;//[Offset: 0x378, Size: 0x4]
	Vector2D UpdateUIMapSize();// 0x49ca8d8
	void StopPoisonEffect(Actor* Actor);// 0x49caaa4
	void SetBeginAndTargetTime(float InBeginTime, float InTargetTime);// 0x49ca914
	void PlayPoisonEffect(Actor* Actor);// 0x49cab50
	void NotifyLeaveSafeArea(Actor* Actor);// 0x49ca9f8
	bool IsInSafeAreaRange(Vector Pos);// 0x49cad90
	bool IsInPoisonCircleRange(Vector Pos);// 0x49cacd8
	bool GetIsPause();// 0x49cabfc
	void EventShrinkingCircleCompleted();// 0x505573c
	void EventNoticeLeaveSafeRing(Actor* Actor);// 0x505573c
	void EventNoticeLeavePoisonRing(Actor* Actor);// 0x505573c
	void EventNoticeEnterSafeRing(Actor* Actor);// 0x505573c
	void EventNoticeEnterPoisonRing(Actor* Actor);// 0x505573c
	void BroadcastEventSafeAreaUpdate(int NotifIndex);// 0x49cac34

--------------------------------
Class: MiniMapWidget.MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bCanCheckEnemyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	bool bUseAsBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	bool AutoOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 0x1]
	bool OnCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 0x1]
	bool WithIconScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float DeltaTime;//[Offset: 0x394, Size: 0x4]
	float AspectRatio;//[Offset: 0x398, Size: 0x4]
	float MapFOV;//[Offset: 0x39c, Size: 0x4]
	enum CurrentState;//[Offset: 0x3a0, Size: 0x1]
	float AnimRefreshTime;//[Offset: 0x3a4, Size: 0x4]
	float AnimTargetFOV;//[Offset: 0x3a8, Size: 0x4]
	float AnimTime;//[Offset: 0x3ac, Size: 0x4]
	Vector2D MapSize;//[Offset: 0x3b0, Size: 0x8]
	Vector2D RTBackTexSize;//[Offset: 0x3b8, Size: 0x8]
	Anchors CenterAnchors;//[Offset: 0x3c0, Size: 0x10]
	Vector2D IntersectionMarkSlotSize;//[Offset: 0x3d0, Size: 0x8]
	Vector2D SelfNavSlotSize;//[Offset: 0x3d8, Size: 0x8]
	<int,enum> PartnerDirCacheMap;//[Offset: 0x3e0, Size: 0x50]
	<int,PlayerNavWidget*> PlayerNavMap;//[Offset: 0x430, Size: 0x50]
	<int,MarkIconWidget*> PartnerInterSectionMap;//[Offset: 0x4d0, Size: 0x50]
	MapVoiceWidget* MapVoiceLayer;//[Offset: 0x520, Size: 0x8]
	SizeBox* MapFOVSizeBox;//[Offset: 0x528, Size: 0x8]
	CanvasPanel* MapOffset;//[Offset: 0x530, Size: 0x8]
	SolarImage* SolarImageMap;//[Offset: 0x538, Size: 0x8]
	CanvasPanel* ImageFrameLayer;//[Offset: 0x540, Size: 0x8]
	CanvasPanel* MarkerLayer;//[Offset: 0x548, Size: 0x8]
	ScaleBox* MapScale;//[Offset: 0x550, Size: 0x8]
	CanvasPanel* RenderTargetCanvas;//[Offset: 0x558, Size: 0x8]
	SolarImage* Img_EMP;//[Offset: 0x560, Size: 0x8]
	MeshRectangleWidget* IconMeshRectangleWidget;//[Offset: 0x568, Size: 0x8]
	PlayerNavWidget* SelfNav;//[Offset: 0x570, Size: 0x8]
	Vector2D CurrentMapOffset;//[Offset: 0x578, Size: 0x8]
	Vector2D MapIconScale;//[Offset: 0x580, Size: 0x8]
	SolarMapManager* MapMgr;//[Offset: 0x588, Size: 0x8]
	TextureRenderTarget2D* MiniMapBackTexture;//[Offset: 0x590, Size: 0x8]
	bool bBelongToBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	void UpdateVehicleModeMapFOV();// 0x48d11c4
	void UpdatePoisonEffect(float PosX, float PosY, float Radius);// 0x48d1308
	void UpdateMeshWidgetMark(MapMarkBase* InMapMark);// 0x48d0c28
	void UpdateEmp();// 0x48d0e14
	void SetMiniMapFOV(float InTargetFOV, float InPlayTime, bool InWithIconScale);// 0x48d11d8
	void SetMapFOVBySpeed(float InSpeed);// 0x48d1120
	void SetMapFOVByLerp(float InTargetFOV);// 0x48d0ef4
	void SetBelongToBigMap(bool bIsBelongToBigMap);// 0x48d15bc
	void RemoveMeshWidgetMark(MapMarkBase* InMapMark);// 0x48d0ccc
	void RefreshBackTexture();// 0x48d0e28
	void PlayFOVAnim(float InDeltaTime, float InTargetFOV);// 0x48d0f98
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x48d14d0
	void OnReconnect();// 0x48d0e3c
	void InitRenderTexResources();// 0x48d1668
	void IconSizeFormatByFOV(float InFOV);// 0x48d0e50
	void ClearVehicleMarkWidget();// 0x505573c
	void ClearPlayerMarkPoint();// 0x505573c
	void ClearMiniMapMarkWidget();// 0x505573c
	void AnimStateMachine(float InDeltaTime);// 0x48d107c
	void AdjustMapOffset(Vector2D MapLocation);// 0x48d1430
	void AddMeshWidgetMark(MapMarkBase* InMapMark);// 0x48d0d70

--------------------------------
Class: PlayerNavWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetSwitcher* IconSwitcher;//[Offset: 0x320, Size: 0x8]
	CanvasPanel* PlayerNav;//[Offset: 0x328, Size: 0x8]
	CanvasPanel* PlayerOutOfMapNav;//[Offset: 0x330, Size: 0x8]
	Image* FOV;//[Offset: 0x338, Size: 0x8]
	Image* ImageRoleNav;//[Offset: 0x340, Size: 0x8]
	TextBlock* PlayerOrder;//[Offset: 0x348, Size: 0x8]
	void SwitchPlayerNav(bool bOutOfBounds);// 0x48efe00
	void SetBrushResourceObject(Object* InSprite);// 0x48efeac
	void ResetPlayerNav();// 0x505573c
	void ReceivePlayerDead();// 0x505573c
	void OnAllPlayerNavVisibilityChanged(bool bVisible);// 0x48efd54

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x144, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x609fcd4
	void SetActiveWidget(Widget* Widget);// 0x609fc28
	Widget* GetWidgetAtIndex(int Index);// 0x609fb7c
	int GetNumWidgets();// 0x609fdb4
	int GetActiveWidgetIndex();// 0x609fd80
	Widget* GetActiveWidget();// 0x609fb48

--------------------------------
Class: MarkIconWidget.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	FString AtlasPath;//[Offset: 0x360, Size: 0x10]
	FString SpriteType;//[Offset: 0x370, Size: 0x10]
	Image* ImageMarker;//[Offset: 0x380, Size: 0x8]
	void SetTransparent(float TransparentPercent);// 0x48ce254
	void SetMarkerType(enum Type, bool bRefreshSlot, bool bNeedSyncLoadIcon);// 0x48ce2f8

--------------------------------
Class: MapVoiceWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	<int,MarkIconWidget*> VoiceIconMap;//[Offset: 0x320, Size: 0x50]
	void AddPlayerMark(enum Type, int DirectID, float TransparentPercent);// 0x48cdd94

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x158, Size: 0x4]
	float HeightOverride;//[Offset: 0x15c, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x160, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x164, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x168, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x16c, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x170, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x174, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x178, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x178, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x178, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x178, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x178, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x178, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x178, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x178, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x6074b04
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x6074994
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x60748dc
	void SetMinAspectRatio(float InMinAspectRatio);// 0x60746b4
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x6074824
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x607476c
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x6074610
	void SetHeightOverride(float InHeightOverride);// 0x6074a4c
	void ClearWidthOverride();// 0x6074af0
	void ClearMinDesiredWidth();// 0x6074980
	void ClearMinDesiredHeight();// 0x60748c8
	void ClearMinAspectRatio();// 0x60745fc
	void ClearMaxDesiredWidth();// 0x6074810
	void ClearMaxDesiredHeight();// 0x6074758
	void ClearMaxAspectRatio();// 0x60745e8
	void ClearHeightOverride();// 0x6074a38

--------------------------------
Class: SolarImage.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x130, Size: 0x98]
	byte FillType;//[Offset: 0x1c8, Size: 0x1]
	SolarImageProgressInfo ImageProgressInfo;//[Offset: 0x1d0, Size: 0x20]
	delegate BrushDelegate;//[Offset: 0x1f0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x200, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x210, Size: 0x10]
	bool bEnableLocImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	FText ImagePath;//[Offset: 0x228, Size: 0x18]
	int LocTextID;//[Offset: 0x240, Size: 0x4]
	enum PreviewLang;//[Offset: 0x244, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x248, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x258, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x268, Size: 0x10]
	void UpdateImageAsync(int NewLocTextID);// 0x4a5be10
	void UpdateImage(int NewLocTextID);// 0x4a5beb4
	void SetOpacity(float InOpacity);// 0x4a5ceec
	void SetImageProgressInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x4a5cce0
	void SetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x4a5caa4
	void SetImageProgress(float InProgress);// 0x4a5cc3c
	void SetImageFillType(byte InImageFillType);// 0x4a5cda8
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4a5cf90
	void SetBrushTintColor(SlateColor TintColor);// 0x4a5c910
	void SetBrushSize(Vector2D DesiredSize);// 0x4a5ce4c
	void SetBrushResourceObject(Object* ResourceObject);// 0x4a5c86c
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x4a5c2dc
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x4a5c4ec
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x4a5c0b4
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x4a5bf8c
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x4a5c230
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x4a5c3d4
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x4a5c5e4
	void SetBrush(out const SlateBrush InBrush);// 0x4a5c690
	float GetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x4a5cb6c
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x4a5bf58

--------------------------------
Class: SolarImageProgressInfo
	byte ProgressType;//[Offset: 0x0, Size: 0x1]
	byte LineProgressDir;//[Offset: 0x1, Size: 0x1]
	byte QuaterProgressPrivot;//[Offset: 0x2, Size: 0x1]
	byte HalfProgressPrivot;//[Offset: 0x3, Size: 0x1]
	float CircleProgressInitDegree;//[Offset: 0x4, Size: 0x4]
	bool bInvertProgressDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Progress;//[Offset: 0xc, Size: 0x4]
	Material* Material;//[Offset: 0x10, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x141, Size: 0x1]
	byte StretchDirection;//[Offset: 0x142, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x144, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	float IgnoreSlightScaleModificationPercent;//[Offset: 0x14c, Size: 0x4]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x6071ebc
	void SetStretchDirection(byte InStretchDirection);// 0x6071f60
	void SetStretch(byte InStretch);// 0x6072004
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x6071e10

--------------------------------
Class: MeshRectangleWidget.MeshWidgetUWidget.Widget.Visual.Object
	MaterialInterface* BaseMaterial;//[Offset: 0x140, Size: 0x8]
	int NumFloat4PerInstance;//[Offset: 0x148, Size: 0x4]
	void SetInstanceNum(int NewNum);// 0x3ceb138
	void ModifyInstanceNum(int dNum);// 0x3ceb094
	void InitUnitTestProvider();// 0x3ceb1dc

--------------------------------
Class: MeshWidgetUWidget.Widget.Visual.Object

--------------------------------
Class: SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	enum InGameState;//[Offset: 0x4c4, Size: 0x1]
	SCMPlayerState*[] MonsterArray;//[Offset: 0x4e0, Size: 0x10]
	CustomRoomData CustomRoomData;//[Offset: 0x4f0, Size: 0x68]
	bool bCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	GameManagerBase*[] GameManagers;//[Offset: 0x560, Size: 0x10]
	GameDataManager* GameDataManager;//[Offset: 0x570, Size: 0x8]
	GameJobManager* GameJobManager;//[Offset: 0x578, Size: 0x8]
	CGMManagerConfigComponent* ManagerConfigComponent;//[Offset: 0x590, Size: 0x8]
	CGFormula* InsFormula;//[Offset: 0x598, Size: 0x8]
	void SetRoomEnableSwapPos(bool bIsEnabled);// 0x491a698
	void SetRoomEnableInvite(bool bIsEnabled);// 0x491a5ec
	void OnTournamentBattleEnd();// 0x491a5ac
	void OnSidePosInTeamChange(FString SideName);// 0x505573c
	void OnSideListPostChanged();// 0x505573c
	void OnSideListChange(out const SCMSideData[] SideList);// 0x505573c
	void OnRep_InGameState();// 0x491a758
	void OnRep_GameManagerList();// 0x491a598
	void OnRep_GameJobManager();// 0x491a570
	void OnRep_GameDataManager();// 0x491a584
	void OnRep_CustomRoomData();// 0x491a744
	void OnOBPlayerListChange();// 0x505573c
	void OnDataManagerPrepare();// 0x505573c
	void OnCustomRoomDataChange(out const CustomRoomData CustomRoomData);// 0x505573c
	void MultiClientAllManagersOnRepDelegate__DelegateSignature();// 0x505573c
	bool IsInTournament();// 0x491a5c0
	CGMManagerConfigComponent* GetManagerConfigComponent();// 0x491a91c
	CGFormula* GetFormula();// 0x491a8e8
	CustomRoomData GetCustomRoomData();// 0x491a780
	CGMGameplayConfig* GetCGMGameplayConfig();// 0x491a8b4
	void ClearCustomRoomData();// 0x491a76c

--------------------------------
Class: SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	enum BattleEndType;//[Offset: 0x448, Size: 0x1]
	SolarPlayerState*[] PlayersWithTrackingAbility;//[Offset: 0x450, Size: 0x10]
	SpatializeInfoTrack*[] TrackInfos;//[Offset: 0x460, Size: 0x10]
	enum GetBattleEndType();// 0x48f9f40

--------------------------------
Class: SCMSideData
	SCMPlayerState*[] SidePlayerList;//[Offset: 0x0, Size: 0x10]
	SCMJobData[] JobMap;//[Offset: 0x10, Size: 0x10]
	SCMPreJob[] PreJoinPlayerArray;//[Offset: 0x20, Size: 0x10]
	delegate OnPlayerJoinSideEvent;//[Offset: 0x30, Size: 0x10]
	delegate OnPlayerQuitSideEvent;//[Offset: 0x40, Size: 0x10]
	FString SideName;//[Offset: 0x50, Size: 0x10]
	byte TeamID;//[Offset: 0x60, Size: 0x1]
	int AssignableNum;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: SCMJobData
	FString JobName;//[Offset: 0x0, Size: 0x10]
	int MaxCount;//[Offset: 0x10, Size: 0x4]
	int MatchCount;//[Offset: 0x14, Size: 0x4]
	int CurrentMatchCount;//[Offset: 0x18, Size: 0x4]
	SCMPlayerState*[] JobPlayerList;//[Offset: 0x20, Size: 0x10]
	FString[] PreJobPlayerIdArray;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SCMPreJob
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString Side;//[Offset: 0x10, Size: 0x10]
	FString Job;//[Offset: 0x20, Size: 0x10]
	int PosInTeam;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: CustomRoomData
	FString Name;//[Offset: 0x0, Size: 0x10]
	int64 MinPlayerLimit;//[Offset: 0x10, Size: 0x8]
	int64 MaxPlayerLimit;//[Offset: 0x18, Size: 0x8]
	FString OwnerID;//[Offset: 0x20, Size: 0x10]
	FString Passwd;//[Offset: 0x30, Size: 0x10]
	int LevelLimit;//[Offset: 0x40, Size: 0x4]
	int64 ShowID;//[Offset: 0x48, Size: 0x8]
	int64 MaxOBPlayerLimit;//[Offset: 0x50, Size: 0x8]
	bool bIsEnabledSwapPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsEnabledInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bIsEnableTeamJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum RoomType;//[Offset: 0x5b, Size: 0x1]
	TournamentData TournamentData;//[Offset: 0x5c, Size: 0x8]

--------------------------------
Class: TournamentData
	int StartTime;//[Offset: 0x0, Size: 0x4]
	int DelayTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CGMManagerConfigComponent.SolarGameplayConfigComponent.ActorComponent.Object

--------------------------------
Class: GameDataManager.GameManagerBase.Info.Actor.Object
	int[] IntegerValues;//[Offset: 0x228, Size: 0x10]
	float[] FloatValues;//[Offset: 0x238, Size: 0x10]
	byte[] ByteValues;//[Offset: 0x248, Size: 0x10]
	bool[] BoolValues;//[Offset: 0x258, Size: 0x10]
	Vector[] FVectorValues;//[Offset: 0x268, Size: 0x10]
	FString[] FStringValues;//[Offset: 0x278, Size: 0x10]
	SCMHostData GlobalDataMap;//[Offset: 0x2e8, Size: 0x488]
	<FString,SCMHostData> SideDataMap;//[Offset: 0x770, Size: 0x50]
	<FString,SCMHostData> PlayerDataMap;//[Offset: 0x7c0, Size: 0x50]
	SCMHostData SideDataDefaultTemplate;//[Offset: 0x810, Size: 0x488]
	SCMHostData PlayerDataDefaultTemplate;//[Offset: 0xc98, Size: 0x488]
	<FString,Rank*> RanKMap;//[Offset: 0x1120, Size: 0x50]
	DataTable* DataTable;//[Offset: 0x1190, Size: 0x8]
	DataTable* GeneralDataTable;//[Offset: 0x1198, Size: 0x8]
	void RemoveHost(enum HostType, FString HostID);// 0x4892c5c
	void RemoveData(enum HostType, FString HostID, FString DataName, enum DataSetType);// 0x4892d50
	void NotifyRemoveHost(enum HostType, FString HostID);// 0x489296c
	void AddDataByTableRow(FName RowName, out const SCMDataBoardRow InTableRow);// 0x4892a68

--------------------------------
Class: SCMHostData
	HostChangeData DataChangeToGlobal;//[Offset: 0x0, Size: 0xf0]
	HostChangeData DataChangeToSide;//[Offset: 0xf0, Size: 0xf0]
	HostChangeData DataChangeToSelf;//[Offset: 0x1e0, Size: 0xf0]
	<FString,SCMSaveData> DataMap;//[Offset: 0x2d0, Size: 0x50]
	<FString,SCMArrayData> ArrayDataMap;//[Offset: 0x320, Size: 0x50]
	<FString,SCMMapData> MapDataMap;//[Offset: 0x370, Size: 0x50]
	FString Name;//[Offset: 0x470, Size: 0x10]
	enum HostType;//[Offset: 0x480, Size: 0x1]

--------------------------------
Class: HostChangeData
	<FString,enum> DataChangeMap;//[Offset: 0x0, Size: 0x50]
	<FString,SCMChangeDataArray> ArrayChangeMap;//[Offset: 0x50, Size: 0x50]
	<FString,SCMChangeDataMap> MapChangeMap;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: SCMChangeDataArray
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SCMChangeDataMap
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	FString[] ChangeKeyArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SCMSaveData.SCMSaveDataBase

--------------------------------
Class: SCMSaveDataBase
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum RepType;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: SCMArrayData.SCMSaveDataBase

--------------------------------
Class: SCMMapData.SCMSaveDataBase

--------------------------------
Class: SCMDataBoardRow.TableRowBase
	enum Type;//[Offset: 0x8, Size: 0x1]
	enum DataSetType;//[Offset: 0x9, Size: 0x1]
	FString Default;//[Offset: 0x10, Size: 0x10]
	FString[] DefaultArray;//[Offset: 0x20, Size: 0x10]
	<FString,FString> DefaultMap;//[Offset: 0x30, Size: 0x50]
	enum HostType;//[Offset: 0x80, Size: 0x1]
	enum ReplicateType;//[Offset: 0x81, Size: 0x1]
	enum SettleGatherType;//[Offset: 0x82, Size: 0x1]
	enum Rank;//[Offset: 0x83, Size: 0x1]

--------------------------------
Class: Rank.Object
	<uint32,SpecificRankChangeEventMap(MulticastInlineDelegateProperty)> SpecificRankChangeEventMap;//[Offset: 0x28, Size: 0x50]
	SCMRankListMulticast[] RankListChangeMulticasts;//[Offset: 0x78, Size: 0x10]
	enum RankType;//[Offset: 0xa8, Size: 0x1]
	enum HostType;//[Offset: 0xa9, Size: 0x1]

--------------------------------
Class: SCMRankListMulticast
	int BeginRank;//[Offset: 0x0, Size: 0x4]
	int EndRank;//[Offset: 0x4, Size: 0x4]
	delegate RankListChangeMulticast;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GameJobManager.GameManagerBase.Info.Actor.Object
	delegate SideListChangeEvent;//[Offset: 0x228, Size: 0x10]
	<FString,SCMPreJob> PreJobMap;//[Offset: 0x238, Size: 0x50]
	SCMSideData[] SideData;//[Offset: 0x288, Size: 0x10]
	SCMSideData[] AttrData;//[Offset: 0x298, Size: 0x10]
	<FString,uint32> SideIndexMap;//[Offset: 0x2a8, Size: 0x50]
	<FString,SCMPlayerState*> PlayerIndexMap;//[Offset: 0x2f8, Size: 0x50]
	SCMPlayerState*[] OBPlayerList;//[Offset: 0x348, Size: 0x10]
	FString[] PreOBPlayerIDList;//[Offset: 0x358, Size: 0x10]
	DataTable* JobDataTable;//[Offset: 0x380, Size: 0x8]
	SideAttributeSetArray SideAttributeSets;//[Offset: 0x388, Size: 0x120]
	bool UnBindPlayerQuitSideEvent(FString TargetSide, out const delegate InEvent);// 0x48965ec
	bool UnBindPlayerJoinSideEvent(FString TargetSide, out const delegate InEvent);// 0x4896834
	bool SwitchPlayerSideAndJob(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x4897a7c
	bool SwitchPlayerPosInTeam(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x489798c
	bool SwitchOBPlayerAndPlayer(SCMPlayerState* OBPlayer, SCMPlayerState* Player);// 0x48977ec
	void SideListChangeEvent__DelegateSignature(out const SCMSideData[] SideList);// 0x505573c
	void SetTimerToNoticeSideDataChanged();// 0x48962f4
	void ServerSidePosInTeamChange(FString SideName);// 0x489623c
	void RenumberAllPlayerPosInTeam();// 0x48977d8
	bool PreAssignOBToPlayer(FString PlayerId);// 0x4897df4
	bool PreAssignJobToPlayer(FString PlayerId, FString Side, FString Job, int PosInTeam);// 0x4897eb0
	void OnRep_SideDataList();// 0x4896228
	void OnRep_OBPlayerList();// 0x4896214
	void OnOBPlayerListChanged(SCMPlayerState* ChangedPlayer);// 0x4896170
	bool IsPlayerSameTeam(SCMPlayerState* TargetPlayer, FString TargetPlayerID);// 0x4896a7c
	bool IsExistSideJob(FString NewSide, FString JobName);// 0x4897304
	bool IsExistSide(FString NewSide);// 0x4897410
	bool IsEmptyPosInTeam(FString SideName, const int PosInTeam);// 0x4897204
	int[] GetTeamAssignableNumArray();// 0x4896308
	bool GetSidePreJoinPlayerList(FString SideName, out SCMPreJob[] OutPreJoinPlayerList);// 0x4896da4
	bool GetSidePlayerList(FString SideName, out SCMPlayerState*[] OutPlayerList);// 0x4896f14
	bool GetSideJobPlayerList(FString SideName, FString JobName, out SCMPlayerState*[] OutPlayerList);// 0x4896c34
	bool GetSideData(FString InSideName, out SCMSideData outData);// 0x48974cc
	bool GetSideAttributeSet(out SideAttributeSet OutSet, FString InSideName);// 0x4895fd8
	bool GetPreOBPlayerIDList(out FString[] OutPlayerIDList);// 0x48963b8
	SCMPlayerState* GetPlayerByPlayerID(FString InPlayerId);// 0x4896b7c
	bool GetOBPlayerList(out SCMPlayerState*[] OutPlayerList);// 0x48964b8
	bool GetJobDataBySideAndJob(FString NewSide, FString NewJob, out SCMJobData outData);// 0x4897614
	int GetAssignedSideCount();// 0x4896584
	int GetAllSidePlayerNumber();// 0x48965b8
	SCMSideData[] GetAllSideData();// 0x4897034
	bool FindEmptyPosInTeam(FString SideName, out int OutPosInTeam);// 0x48970f0
	bool ChangePlayerToOB(SCMPlayerState* Player);// 0x48978dc
	bool ChangePlayerPosInTeam(SCMPlayerState* Player, int PosInTeam);// 0x4897b6c
	bool ChangePlayerJob(SCMPlayerState* Player, FString NewSide, FString NewJob, int PosInTeam);// 0x4897c60
	bool BindPlayerQuitSideEvent(FString TargetSide, out const delegate InEvent);// 0x4896710
	bool BindPlayerJoinSideEvent(FString TargetSide, out const delegate InEvent);// 0x4896958

--------------------------------
Class: SideAttributeSetArray.FastArraySerializer
	SideAttributeSet[] AttributeSets_Internal;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: BP_DI_DeathBoxA_TreasureBox_C.DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4a0, Size: 0x8]
	StaticMeshComponent* FXBG;//[Offset: 0x4a8, Size: 0x8]
	SceneComponent* VFXUI;//[Offset: 0x4b0, Size: 0x8]
	BP_DeathBoxCountdownExec_C* BP_DeathBoxCountdownExec;//[Offset: 0x4b8, Size: 0x8]
	SceneComponent* Charge_VFX;//[Offset: 0x4c0, Size: 0x8]
	TextRenderComponent* Precent;//[Offset: 0x4c8, Size: 0x8]
	StaticMeshComponent* CB_Idle;//[Offset: 0x4d0, Size: 0x8]
	ParticleSystemComponent*[] ChargeEffects;//[Offset: 0x4d8, Size: 0x10]
	ActorMarkBase* WorldMark;//[Offset: 0x4e8, Size: 0x8]
	bool UnLockResurrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	bool ResurrectionComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 0x1]
	bool CanBuyResurrect(SolarCharacter* InReqCharacter, SCMPlayerState* OwnerPlayer, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue);// 0x505573c
	void OnRep_UnLockResurrection();// 0x505573c
	bool IsSameTeam(byte CharacterTeamID, FString CallFunc_Conv_ByteToString_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x505573c
	void RemoveEffect(SolarCharacter* NewParam, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x505573c
	void Add Effect(SolarCharacter* NewParam, int Temp_int_Array_Index_Variable, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetComponentLocation_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x505573c
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x505573c
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x505573c
	void ReceiveSetUIEnable(bool IsShow);// 0x505573c
	void ReceiveRefreshExtraEnergy(FString Message);// 0x505573c
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x505573c
	void ReceiveEndPlay(byte EndPlayReason);// 0x505573c
	void Event_EnableRestart(bool Enable);// 0x505573c
	void ReceiveBeginPlay();// 0x505573c
	void ExecuteUbergraph_BP_DI_DeathBoxA_TreasureBox(int EntryPoint, const SolarCharacter* K2Node_Event_SolarChar, const SolarCharacter* K2Node_Event_SolarChar, bool K2Node_Event_IsShow, FString K2Node_Event_Message, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_Event_IsShow, byte K2Node_Event_EndPlayReason, bool K2Node_CustomEvent_Enable, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x505573c

--------------------------------
Class: BPC_BuyResurrection_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0xb8, Size: 0x8]
	BP_DI_DeathBoxA_TreasureBox_C* DeathBoxRef;//[Offset: 0xc0, Size: 0x8]
	byte State;//[Offset: 0xc8, Size: 0x1]
	int GoldNum;//[Offset: 0xcc, Size: 0x4]
	int WaitingTime;//[Offset: 0xd0, Size: 0x4]
	float ReturnRatio;//[Offset: 0xd4, Size: 0x4]
	float StartTime;//[Offset: 0xd8, Size: 0x4]
	float[] ReturnRatioList;//[Offset: 0xe0, Size: 0x10]
	int BuyLimitedTime;//[Offset: 0xf0, Size: 0x4]
	delegate NewStateChange;//[Offset: 0xf8, Size: 0x10]
	int NumberOfApplications;//[Offset: 0x108, Size: 0x4]
	int[] PriceList;//[Offset: 0x110, Size: 0x10]
	bool bDeductedOnlyOnceFalg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	int TeammateSalary;//[Offset: 0x124, Size: 0x4]
	int ItemID;//[Offset: 0x128, Size: 0x4]
	SolarCharacter* HelpYourTeammates;//[Offset: 0x130, Size: 0x8]
	int CompLimitedTime;//[Offset: 0x138, Size: 0x4]
	int PurchasesNum;//[Offset: 0x13c, Size: 0x4]
	SolarCharacter* TeammatesCountingDown;//[Offset: 0x140, Size: 0x8]
	SCMPlayerState* WaitingResurrectedPlayer;//[Offset: 0x148, Size: 0x8]
	Vector CharacterFlyOffset;//[Offset: 0x150, Size: 0xc]
	bool DelayFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	TimerHandle DelaySetTimeOutHandle;//[Offset: 0x160, Size: 0x8]
	TimerHandle DelaySetNotBuyHandel;//[Offset: 0x168, Size: 0x8]
	float BP_SI_RebornLine_Life;//[Offset: 0x170, Size: 0x4]
	int SaveTeammatesNum;//[Offset: 0x174, Size: 0x4]
	int ZomborgNum;//[Offset: 0x178, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x180, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x190, Size: 0x10]
	TimerHandle EndJudgmentHander;//[Offset: 0x1a0, Size: 0x8]
	FString[] SavedTeammateNameArr;//[Offset: 0x1a8, Size: 0x10]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x1b8, Size: 0x8]
	int Withholding;//[Offset: 0x1c0, Size: 0x4]
	SolarCharacter* NoneVal;//[Offset: 0x1c8, Size: 0x8]
	int CurZomborg;//[Offset: 0x1d0, Size: 0x4]
	float SelfOpenProgress;//[Offset: 0x1d4, Size: 0x4]
	int SuccessTime;//[Offset: 0x1d8, Size: 0x4]
	bool TimeLimitDoOnceFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	bool BuyResurrectionSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 0x1]
	FString GetModuleName();// 0x505573c
	void OnRep_CompLimitedTime(int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_GreaterEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x505573c
	void OnRep_HelpYourTeammates(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x505573c
	void Get Wait Time Remaining(out int NewParam, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x505573c
	void Judgmenttimeout(out bool IsTimeOut, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x505573c
	void Check Condition(bool DetectMoney, out bool IsSatisfy, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Get_Alive_Team_Player_Num_Num, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x505573c
	SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x505573c
	void On All Teammates Killed(const FString[] Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x505573c
	void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool CallFunc___A_Is_Player_Reviving_Reviving, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x505573c
	void Get the number of purchases(out int PurchasesNum);// 0x505573c
	void Calculate Price And Rebate Ratio(int[] NewLocalVar, int[] NewLocalVar, float CallFunc_Subtract_FloatFloat_ReturnValue, int[] K2Node_MakeArray_Array, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int[] K2Node_MakeArray_Array, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item);// 0x505573c
	void OnRep_State(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_ObjectToText_ReturnValue, bool CallFunc_IsServer_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, FText CallFunc_Format_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_TextToString_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_ReceiveGold_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x505573c
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x505573c
	void ReceiveBeginPlay();// 0x505573c
	void Event_RebirthCharacter(SolarPlayerState* CostPlayer);// 0x505573c
	void Event_SetPlayerEnterOpeningState(bool Opening, SCMPlayerState* TargetPlayer, float Current Progress);// 0x505573c
	void Event_NotifyTeammatesOfDeath(SolarPlayerState* PlayerState);// 0x505573c
	void Event_EnterBuyResurrectionProcess(SolarPlayerState* PlayerState, bool Affordable);// 0x505573c
	void Event_OnSuccessfulPurchase();// 0x505573c
	void Event_EnableBoxRestart(bool UnLockResurrection);// 0x505573c
	void Event_GiveUpResurrection();// 0x505573c
	void Evnet_OnAllTeammatesKilled();// 0x505573c
	void EventApplyResurrectionClick();// 0x505573c
	void Event_SetTeammatesCountingDown(SolarCharacter* TeammatesCountingDown, FString PlayerId);// 0x505573c
	void Notify Server Deduct(SCMPlayerState* CostPlayer);// 0x505573c
	void Event_LeaveWhileWaiting();// 0x505573c
	void Event_CheckAllDeath();// 0x505573c
	void Event_RespondReconnection();// 0x505573c
	void DelaySetTimeOut();// 0x505573c
	void DelaySetNotBuy();// 0x505573c
	void Event_NotifRescueSuccessful(int TeammateSalary);// 0x505573c
	void BuyResurrectionTimeOut();// 0x3aa89b4
	void EndJudgment();// 0x505573c
	void Event_NotificationOverTimeLimit();// 0x505573c
	void OnDeathboxApproachingExecImpl();// 0x505573c
	void Event_NotifyServerDeduct(FString PlayerId);// 0x505573c
	void Event_EnterSetTeammatesCountingDown(SolarCharacter* SolarCharacter, FString PlayerId);// 0x505573c
	void Refund(BP_SCustomPlayerStateBase_C* Player);// 0x505573c
	void Event_SetZomborg();// 0x3aa89b4
	void RestSelfOpenProgress();// 0x505573c
	void Event_SetResurrectionComplete();// 0x505573c
	void StartLimitedTimeCountDown();// 0x505573c
	void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsViewportFocused_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsViewportFocused_ReturnValue, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, SolarPlayerState* K2Node_CustomEvent_CostPlayer, bool K2Node_CustomEvent_Opening, SCMPlayerState* K2Node_CustomEvent_TargetPlayer, float K2Node_CustomEvent_Current_Progress, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarPlayerState* K2Node_CustomEvent_PlayerState, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_ReceiveGold_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SolarPlayerState* K2Node_CustomEvent_PlayerState, bool K2Node_CustomEvent_Affordable, bool K2Node_CustomEvent_UnLockResurrection, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, const enum[] K2Node_MakeArray_Array, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Add_IntInt_ReturnValue, SolarCharacter* K2Node_CustomEvent_TeammatesCountingDown, FString K2Node_CustomEvent_PlayerID, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SCMPlayerState* K2Node_CustomEvent_CostPlayer, FString CallFunc_GetPlayerNameWithoutUID_ReturnValue, FString CallFunc_GetUserID_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, int K2Node_CustomEvent_TeammateSalary, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, FString K2Node_CustomEvent_PlayerID, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SolarCharacter* K2Node_CustomEvent_SolarCharacter, FString K2Node_CustomEvent_PlayerID, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Add_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Character_Custom_Countdown, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_CustomEvent_Player, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_CostGold_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, bool CallFunc_ReceiveGold_ReturnValue, BP_LogicBase_C* K2Node_DynamicCast_AsBP_Logic_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc__S_PlayInEditor_bIsEditor, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Alive_Team_Player_Num_Num, bool CallFunc_LessEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, const FString[] K2Node_MakeArray_Array, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x505573c
	void NewStateChange__DelegateSignature(byte State);// 0x505573c

--------------------------------
Class: UI_BuyResurrectionPanel_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	CanvasPanel* Root;//[Offset: 0x328, Size: 0x8]
	UI_Component_Btn_HUD_C* UI_Component_Btn_HUD;//[Offset: 0x330, Size: 0x8]
	UI_HUD_Notice_BuyResurrection_C* UI_HUD_Notice_BuyResurrection;//[Offset: 0x338, Size: 0x8]
	VerticalBox* VerticalBox_States;//[Offset: 0x340, Size: 0x8]
	<byte,UI_BuyResurrectionItem_C*> ItemMap;//[Offset: 0x348, Size: 0x50]
	int StartTime;//[Offset: 0x398, Size: 0x4]
	float NoticeDuration;//[Offset: 0x39c, Size: 0x4]
	BPC_BuyResurrection_C* BuyComp;//[Offset: 0x3a0, Size: 0x8]
	int ZomborgNum;//[Offset: 0x3a8, Size: 0x4]
	Vector2D ListOffset;//[Offset: 0x3ac, Size: 0x8]
	bool bAlreadyPaid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	bool bWaitPaidRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]
	FString GetModuleName();// 0x505573c
	void Set Btn Vis(bool Show);// 0x505573c
	void Set Btna And Tip Visibility(bool Visibility, Actor* CallFunc_GetOwner_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x505573c
	void Event_PlayCountdownAnim();// 0x505573c
	void Event_Init(BPC_BuyResurrection_C* BuyComp);// 0x505573c
	void Event_OnSuccessfulPurchase();// 0x505573c
	void Event_ConfirmPurchase();// 0x505573c
	void Event_GiveUpResurrection();// 0x505573c
	void EventOnStateChange(byte State);// 0x505573c
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x505573c
	void EventApplyResurrectionClick();// 0x505573c
	void EventRemindTeammates();// 0x505573c
	void Event_RecalculateLocation();// 0x505573c
	void CloseComformWindow();// 0x505573c
	void SetZomborgNum(int ZomborgNum);// 0x505573c
	void ExecuteUbergraph_UI_BuyResurrectionPanel(int EntryPoint, const enum[] Temp_byte_Variable, byte[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, BPC_BuyResurrection_C* K2Node_CustomEvent_BuyComp, int Temp_int_Loop_Counter_Variable, byte K2Node_CustomEvent_State, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Check_Condition_IsSatisfy, int CallFunc_FTrunc_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_FTrunc_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int K2Node_CustomEvent_ZomborgNum, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, byte CallFunc_Array_Get_Item, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, const FString[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, UI_BuyResurrectionItem_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, UI_BuyResurrectionItem_C* CallFunc_Create_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, enum CallFunc_GetVisibility_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, const <FString,FString> Temp_string_Variable, TechDesignUIOperationDispatcher* K2Node_DynamicCast_AsTech_Design_UIOperation_Dispatcher, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetNoticeFormatText_ReturnValue, WidgetTransform CallFunc_GetWidgetRenderTransOnBattleUI_Result, bool CallFunc_GetWidgetRenderTransOnBattleUI_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetCanvasPositionOnBattleUI_Result, bool CallFunc_GetCanvasPositionOnBattleUI_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_SCustomPlayerStateBase_C* K2Node_DynamicCast_AsBP_SCustom_Player_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x505573c

--------------------------------
Class: UI_Component_Btn_HUD_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x258, Size: 0x8]
	WidgetAnimation* Anim_Hold;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Anim_Click;//[Offset: 0x268, Size: 0x8]
	SolarButton* Btn_Common;//[Offset: 0x270, Size: 0x8]
	SolarImage* Img_Btn;//[Offset: 0x278, Size: 0x8]
	SolarImage* Img_Light;//[Offset: 0x280, Size: 0x8]
	SolarImage* Img_Line;//[Offset: 0x288, Size: 0x8]
	SolarImage* img_Mask;//[Offset: 0x290, Size: 0x8]
	SolarImage* Img_Shadow;//[Offset: 0x298, Size: 0x8]
	CanvasPanel* Panel_Press;//[Offset: 0x2a0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x2a8, Size: 0x8]
	SizeBox* Size_Btn;//[Offset: 0x2b0, Size: 0x8]
	SolarTextBlock* Text_Btn;//[Offset: 0x2b8, Size: 0x8]
	NamedSlot* WidgetSlot;//[Offset: 0x2c0, Size: 0x8]
