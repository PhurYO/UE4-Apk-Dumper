Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8]
	Level*[] Levels;//[Offset: 0x138, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 0x8]
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x1f8, Size: 0x8]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x200, Size: 0x50]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x250, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x260, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x648, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x8b8, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x81cfa60
	void HandleTimelineScrubbed();// 0x81cfa94

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x59ef218

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x250, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x254, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x255, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x255, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x255, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x255, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x255, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x255, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x255, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x255, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x256, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x256, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x256, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x256, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x256, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x256, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x256, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x258, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x260, Size: 0x8]
	float WorldToMeters;//[Offset: 0x268, Size: 0x4]
	float KillZ;//[Offset: 0x26c, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x270, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x278, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x27c, Size: 0x4]
	bool bUseFixedStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	float FixedStepFPS;//[Offset: 0x284, Size: 0x4]
	int MaxFixedStepPerTick;//[Offset: 0x288, Size: 0x4]
	float SubFixedStepFPS;//[Offset: 0x28c, Size: 0x4]
	int MaxSubFixedStepPerTick;//[Offset: 0x290, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x298, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2a0, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2a8, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2b0, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2b8, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2bc, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2c8, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2cc, Size: 0x4]
	bool EnableSoftwareOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool EnableShaderLods;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	float ShaderLodTier2Distance;//[Offset: 0x2d4, Size: 0x4]
	float ShaderLodTier3Distance;//[Offset: 0x2d8, Size: 0x4]
	float ShaderLodTier4Distance;//[Offset: 0x2dc, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2e0, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2e8, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x308, Size: 0x24]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x330, Size: 0x8]
	float TimeDilation;//[Offset: 0x338, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x33c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x340, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x344, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x348, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x34c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x350, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x354, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x398, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3a0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3b0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3c0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3c8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3d0, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3d8, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3e8, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x81d3da4

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1]
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x94, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0x98, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 0x40]
	Actor* Owner;//[Offset: 0xe0, Size: 0x8]
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8]
	byte Role;//[Offset: 0xf0, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 0x1]
	int InputPriority;//[Offset: 0xf4, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 0x4]
	int NetTag;//[Offset: 0x104, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 0x4]
	float NetPriority;//[Offset: 0x110, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x118, Size: 0x8]
	Actor*[] Children;//[Offset: 0x120, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 0x10]
	FName[] Layers;//[Offset: 0x150, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 0x8]
	Guid ActorGuid;//[Offset: 0x168, Size: 0x10]
	FName[] Tags;//[Offset: 0x180, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1a8, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x1a9, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x1aa, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x1ab, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x1ac, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x1ad, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x1ae, Size: 0x1]
	delegate OnClicked;//[Offset: 0x1af, Size: 0x1]
	delegate OnReleased;//[Offset: 0x1b0, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x1b1, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x1b2, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x1b3, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x1b4, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x1b5, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x1b6, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x1b7, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x218, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x228, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x7f05008
	void UserConstructionScript();// 0x59ef218
	void TearOff();// 0x7f09ff0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x7f063d0
	void SetTickGroup(byte NewTickGroup);// 0x7f050bc
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x7f05d50
	void SetReplicates(bool bInReplicates);// 0x7f09e74
	void SetReplicateMovement(bool bInReplicateMovement);// 0x7f09dbc
	void SetOwner(Actor* NewOwner);// 0x7f0570c
	void SetNetDormancy(byte NewDormancy);// 0x7f05594
	void SetLifeSpan(float InLifespan);// 0x7f059d8
	void SetAutoDestroyWhenFinished(bool bVal);// 0x7f09f40
	void SetActorTickInterval(float TickInterval);// 0x7f0580c
	void SetActorTickEnabled(bool bEnabled);// 0x7f058ec
	void SetActorScale3D(Vector NewScale3D);// 0x7f08db8
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x7f0742c
	void SetActorHiddenInGame(bool bNewHidden);// 0x7f0733c
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x7f0728c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x7f05e38
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x7f05ee8
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x59ef218
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x59ef218
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x59ef218
	void ReceiveEndPlay(byte EndPlayReason);// 0x59ef218
	void ReceiveDestroyed();// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x59ef218
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x59ef218
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x59ef218
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x59ef218
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x59ef218
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x59ef218
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x59ef218
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x59ef218
	void ReceiveActorEndCursorOver();// 0x59ef218
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x59ef218
	void ReceiveActorBeginCursorOver();// 0x59ef218
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x7f04ea8
	void OnRep_ReplicateMovement();// 0x7f0a00c
	void OnRep_ReplicatedMovement();// 0x7f057bc
	void OnRep_Owner();// 0x7f09f24
	void OnRep_Instigator();// 0x7f09d4c
	void OnRep_AttachmentReplication();// 0x7f09d68
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x7f047e4
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x7f05ca0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x7f052d8
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f07f74
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x7f0906c
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f074d4
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f076c4
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f07874
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f08e60
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f09568
	void K2_OnReset();// 0x59ef218
	void K2_OnEndViewTarget(PlayerController* PC);// 0x59ef218
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x59ef218
	SceneComponent* K2_GetRootComponent();// 0x7f091b4
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x7f04bf8
	Rotator K2_GetActorRotation();// 0x7f09470
	Vector K2_GetActorLocation();// 0x7f09724
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x7f061e0
	void K2_DestroyComponent(ActorComponent* Component);// 0x7f06c30
	void K2_DestroyActor();// 0x7f07250
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x7f06878
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x7f064c0
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x7f066e8
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x7f06aa0
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f08170
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f08360
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f08550
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f08700
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f07a24
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f07c14
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x7f07dc4
	bool IsOverlappingActor(const Actor* Other);// 0x7f0563c
	bool IsChildActor();// 0x7f05548
	bool IsActorTickEnabled();// 0x7f058b4
	bool IsActorBeingDestroyed();// 0x7f05c4c
	bool HasAuthority();// 0x7f0722c
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x7f08a10
	Vector GetVelocity();// 0x7f09174
	Transform GetTransform();// 0x7f0977c
	bool GetTickableWhenPaused();// 0x7f05e00
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x7f08ac0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x7f08c20
	byte GetRemoteRole();// 0x7f09d84
	ChildActorComponent* GetParentComponent();// 0x7f05408
	Actor* GetParentActor();// 0x7f053d4
	Actor* GetOwner();// 0x7f056f0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x7f05a88
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x7f05b48
	byte GetLocalRole();// 0x7f09da0
	float GetLifeSpan();// 0x7f0599c
	Controller* GetInstigatorController();// 0x7f097b8
	Pawn* GetInstigator();// 0x7f097ec
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x7f09820
	float GetInputAxisValue(const FName InputAxisName);// 0x7f09b3c
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x7f099b0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x7f088b0
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x7f08b70
	float GetGameTimeSinceCreation();// 0x7f05c6c
	float GetDotProductTo(const Actor* OtherActor);// 0x7f08960
	float GetDistanceTo(const Actor* OtherActor);// 0x7f08cd0
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x7f04ab4
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x7f049b8
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x7f04cf4
	FName GetAttachParentSocketName();// 0x7f05270
	Actor* GetAttachParentActor();// 0x7f052a4
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x7f05164
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x7f0543c
	Vector GetActorUpVector();// 0x7f093c8
	float GetActorTimeDilation();// 0x7f060f8
	float GetActorTickInterval();// 0x7f057d8
	Vector GetActorScale3D();// 0x7f08d80
	Vector GetActorRightVector();// 0x7f09374
	Vector GetActorRelativeScale3D();// 0x7f073f4
	Vector GetActorForwardVector();// 0x7f0941c
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x7f04da4
	bool GetActorEnableCollision();// 0x7f0726c
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x7f091d0
	void ForceNetUpdate();// 0x7f04fec
	void FlushNetDormancy();// 0x7f05580
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x7f06cd8
	void EnableInput(PlayerController* PlayerController);// 0x7f09c9c
	void DisableInput(PlayerController* PlayerController);// 0x7f09bec
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x7f06320
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x7f05f98
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x7f06048
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x7f06e48
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x7f07014
	bool ActorHasTag(FName Tag);// 0x7f0612c

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x8154084
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x8154a10
	void SetWorldScale3D(Vector NewScale);// 0x8155da8
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x815414c
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x81571d8
	void SetRelativeScale3D(Vector NewScale3D);// 0x8156a60
	void SetMobility(byte NewMobility);// 0x815396c
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x8153f88
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x8153c14
	void ResetRelativeTransform();// 0x8156b08
	void OnRep_Visibility(bool OldValue);// 0x81570d8
	void OnRep_Transform();// 0x81571c4
	void OnRep_AttachSocketName();// 0x8157188
	void OnRep_AttachParent();// 0x81571b0
	void OnRep_AttachChildren();// 0x815719c
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8155bb8
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8155e50
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8153a1c
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8156000
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8156b88
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8156d78
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8153d5c
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8156f28
	Transform K2_GetComponentToWorld();// 0x8155364
	Vector K2_GetComponentScale();// 0x81553d0
	Rotator K2_GetComponentRotation();// 0x8155408
	Vector K2_GetComponentLocation();// 0x8155440
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x815477c
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x8154b0c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x8154d40
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8155478
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8155668
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8155858
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8155a08
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8156700
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x81568b0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x81561b0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x81563a0
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8156550
	bool IsVisible();// 0x8154248
	bool IsSimulatingPhysics(FName BoneName);// 0x8155200
	bool IsAnySimulatingPhysics();// 0x81551c0
	Vector GetUpVector();// 0x81552f4
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x81545b8
	Rotator GetSocketRotation(FName InSocketName);// 0x8154440
	Quat GetSocketQuaternion(FName InSocketName);// 0x8154384
	Vector GetSocketLocation(FName InSocketName);// 0x81544fc
	bool GetShouldUpdatePhysicsVolume();// 0x8157288
	Vector GetRightVector();// 0x81552bc
	Transform GetRelativeTransform();// 0x8156b1c
	PhysicsVolume* GetPhysicsVolume();// 0x8153f54
	void GetParentComponents(out SceneComponent*[] Parents);// 0x81550c8
	int GetNumChildrenComponents();// 0x8155094
	Vector GetForwardVector();// 0x815532c
	Vector GetComponentVelocity();// 0x8154288
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x8154edc
	SceneComponent* GetChildComponent(int ChildIndex);// 0x8154fe4
	FName GetAttachSocketName();// 0x8155188
	SceneComponent* GetAttachParent();// 0x81551a4
	FName[] GetAllSocketNames();// 0x81546cc
	bool DoesSocketExist(FName InSocketName);// 0x81542c8
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x8154910

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0x7f0f114
	void SetTickGroup(byte NewTickGroup);// 0x7f0eb10
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x7f0ef8c
	void SetIsReplicated(bool ShouldReplicate);// 0x7f0eedc
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x7f0ec94
	void SetComponentTickInterval(float TickInterval);// 0x7f0ed3c
	void SetComponentTickEnabled(bool bEnabled);// 0x7f0ee24
	void SetAutoActivate(bool bNewAutoActivate);// 0x7f0f03c
	void SetActive(bool bNewActive, bool bReset);// 0x7f0f130
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x7f0e850
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x7f0e900
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void ReceiveEndPlay(byte EndPlayReason);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void OnRep_IsActive();// 0x7f0f3d4
	void K2_DestroyComponent(Object* Object);// 0x7f0ebb8
	bool IsComponentTickEnabled();// 0x7f0ede4
	bool IsBeingDestroyed();// 0x7f0f3f0
	bool IsActive();// 0x7f0f0f4
	Actor* GetOwner();// 0x7f0f3b8
	float GetComponentTickInterval();// 0x7f0ec60
	void Deactivate();// 0x7f0f230
	bool ComponentHasTag(FName Tag);// 0x7f0f304
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x7f0e9b0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x7f0ea60
	void Activate(bool bReset);// 0x7f0f24c

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x280, Size: 0x4]
	int Priority;//[Offset: 0x284, Size: 0x4]
	float FluidFriction;//[Offset: 0x288, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x248, Size: 0x1]
	Color BrushColor;//[Offset: 0x24c, Size: 0x4]
	int PolyFlags;//[Offset: 0x250, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254, Size: 0x1]
	Model* Brush;//[Offset: 0x258, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x260, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x270, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x448, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x450, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x20c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x20d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x20e, Size: 0x1]
	enum LightmapType;//[Offset: 0x20f, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1]
	bool bDisableShaderLod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 0x1]
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 0x1]
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x217, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x218, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x21a, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x21b, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x21c, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x220, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x228, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x238, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x250, Size: 0x4]
	float TranslucencySortDistanceOffset;//[Offset: 0x254, Size: 0x4]
	int VisibilityId;//[Offset: 0x258, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x260, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x270, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x271, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x272, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x273, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x278, Size: 0x4]
	float BoundsScale;//[Offset: 0x284, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x298, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a8, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 0x150]
	delegate OnComponentHit;//[Offset: 0x418, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x419, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x41a, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x41b, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x41c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x41e, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x41f, Size: 0x1]
	delegate OnClicked;//[Offset: 0x420, Size: 0x1]
	delegate OnReleased;//[Offset: 0x421, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x422, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x423, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x424, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x425, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x440, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x813a17c
	void WakeRigidBody(FName BoneName);// 0x81366a8
	void WakeAllRigidBodies();// 0x813438c
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x8138ac4
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0x8134a18
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x8133a10
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x8135f20
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0x8135e78
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x8135fc8
	void SetSimulatePhysics(bool bSimulate);// 0x8138a0c
	void SetRenderInMainPass(bool bValue);// 0x8134ac8
	void SetRenderCustomDepth(bool bValue);// 0x8134cc8
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x8135dc8
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x81336bc
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x8136b4c
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x8136c88
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x8136dd4
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x81375d4
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x813707c
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x8136f20
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x81371c0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x8136498
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x81363e8
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x8136548
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x8138fdc
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x81390d4
	void SetMassScale(FName BoneName, float InMassScale);// 0x8133fc0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x8133d08
	void SetLinearDamping(float InDamping);// 0x81341e4
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x813a230
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x8136128
	void SetHiddenInSceneCapture(bool bValue);// 0x8134968
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x813a378
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x8136078
	void SetEnableGravity(bool bGravityEnabled);// 0x81342d4
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x813965c
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x8139750
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x8139840
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x813992c
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x8139a20
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x8139b14
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x8139c04
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x8139cf0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x8134b78
	void SetCustomDepthStencilValue(int Value);// 0x8134c20
	void SetCullDistance(float NewCullDistance);// 0x8133614
	void SetConstraintMode(byte ConstraintMode);// 0x813895c
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x813381c
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x813376c
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x8135c14
	void SetCollisionObjectType(byte Channel);// 0x8135b30
	void SetCollisionEnabled(byte NewType);// 0x8135d18
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x8136758
	void SetCastShadow(bool NewCastShadow);// 0x8136338
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x81361d8
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0x8136288
	void SetBoundsScale(float NewBoundsScale);// 0x8139288
	void SetAngularDamping(float InDamping);// 0x81340f8
	void SetAllUseCCD(bool InUseCCD);// 0x8133958
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x813731c
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x81343a8
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x81344ac
	void SetAllMassScale(float InMassScale);// 0x8133e58
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x8133b08
	void PutRigidBodyToSleep(FName BoneName);// 0x8136600
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x813543c
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x8134d78
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x81357dc
	bool K2_IsQueryCollisionEnabled();// 0x8134714
	bool K2_IsPhysicsCollisionEnabled();// 0x81346cc
	bool K2_IsCollisionEnabled();// 0x813475c
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x81350d0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x81395a8
	bool IsOverlappingActor(const Actor* Other);// 0x81394f4
	bool IsGravityEnabled();// 0x8134294
	bool IsAnyRigidBodyAwake();// 0x8133918
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x8139ec0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x813a080
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x8138b8c
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x8137420
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x8137520
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x8136900
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x81369b4
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x8136a80
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x8139330
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x81393f0
	int GetNumMaterials();// 0x813492c
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x8138bc4
	MaterialInterface* GetMaterial(int ElementIndex);// 0x81391d0
	float GetMassScale(FName BoneName);// 0x8133f08
	float GetMass();// 0x8133ccc
	float GetLinearDamping();// 0x81341a8
	Vector GetInertiaTensor(FName BoneName);// 0x8133c10
	bool GetGenerateOverlapEvents();// 0x813a428
	byte GetCollisionResponseToChannel(byte Channel);// 0x8134614
	FName GetCollisionProfileName();// 0x8135be0
	byte GetCollisionObjectType();// 0x81345d8
	byte GetCollisionEnabled();// 0x81347a0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x81347dc
	Vector GetCenterOfMass(FName BoneName);// 0x813684c
	float GetAngularDamping();// 0x81340bc
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x8138cd4
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x8138e20
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x8138f24
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x8139e10
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x8139fd0
	void ClearMoveIgnoreComponents();// 0x8139de4
	void ClearMoveIgnoreActors();// 0x8139fbc
	bool CanCharacterStepUp(Pawn* Pawn);// 0x8133558
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x8137880
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x8137718
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x81379d0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x81380dc
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x8137b20
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x81382c0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x813880c
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x8137d04
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x8137e48
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x8137f8c
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x813856c
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x8138404
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x81386bc

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float Restitution;//[Offset: 0x34, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float Density;//[Offset: 0x3c, Size: 0x4]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8]
	byte SurfaceType;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x80c5998
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x80c5d78
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x80c5cc0
	PhysicalMaterial* GetPhysicalMaterial();// 0x80c5db4
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x80c5b7c
	Material* GetBaseMaterial();// 0x80c5df0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0x14]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0x14]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0x14]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0x14]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0x14]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0x14]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0x14]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0x14]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x18]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0x14]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0x14]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool WriteDepthToTranslucentMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	byte ShadingRate;//[Offset: 0x1ff, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x202, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1]
	byte StencilCompare;//[Offset: 0x204, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x205, Size: 0x1]
	byte RefractionMode;//[Offset: 0x206, Size: 0x1]
	int BlendablePriority;//[Offset: 0x208, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x210, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x214, Size: 0x4]
	Guid StateId;//[Offset: 0x218, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x228, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x260, Size: 0x1d8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x4, Size: 0x8]
	FName ExpressionName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x4, Size: 0x8]
	FName ExpressionName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x150]
	Object*[] ReferencedTextures;//[Offset: 0x150, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x160, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x170, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x180, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x190, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1a0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x1b0, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x1c0, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 0x30]
	float[] ScalarValues;//[Offset: 0xf0, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x100, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x110, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x120, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x130, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10]
	int LODBias;//[Offset: 0x78, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x7c, Size: 0x1]
	byte Filter;//[Offset: 0x7d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x7e, Size: 0x1]
	byte LODGroup;//[Offset: 0x7f, Size: 0x1]
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x84, Size: 0x1]
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4]
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0x178, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0x17c, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	byte AddressX;//[Offset: 0x181, Size: 0x1]
	byte AddressY;//[Offset: 0x182, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0x184, Size: 0x8]
	int Blueprint_GetSizeY();// 0x81b8c28
	int Blueprint_GetSizeX();// 0x81b8c5c

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4]
	int TileSize;//[Offset: 0x2c, Size: 0x4]
	int TileBorderSize;//[Offset: 0x30, Size: 0x4]
	enum MaterialType;//[Offset: 0x34, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	byte LODGroup;//[Offset: 0x40, Size: 0x1]
	int Size;//[Offset: 0x44, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	int GetTileSize();// 0x81478e8
	int GetTileCount();// 0x814791c
	int GetTileBorderSize();// 0x81478b8
	int GetSize();// 0x8147838
	int GetPageTableSize();// 0x8147804

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float PlacementJitter;//[Offset: 0x20, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4]
	int MinLOD;//[Offset: 0x2c, Size: 0x4]
	enum Scaling;//[Offset: 0x30, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	bool HasOccluderDataFromFBX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0xa8, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0xac, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0xb0, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0xc0, Size: 0x4]
	int LightMapResolution;//[Offset: 0xc4, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0xc8, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xcc, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xd0, Size: 0x8]
	int LODForCollision;//[Offset: 0xd8, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdc, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdc, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xdc, Size: 0x1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xdc, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xdc, Size: 0x1]
	enum StatsCategory;//[Offset: 0xdd, Size: 0x1]
	ITStaticMeshExtension* Extension;//[Offset: 0xe0, Size: 0x8]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0x110, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0x130, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x13c, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x148, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x164, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x168, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x178, Size: 0x8]
	bool bUseFBXOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	NavCollisionBase* NavCollision;//[Offset: 0x188, Size: 0x8]
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x81a6b98
	void RemoveSocket(StaticMeshSocket* Socket);// 0x81a6418
	StaticMaterial[] GetStaticMaterials();// 0x81a6cac
	int GetNumSections(int InLOD);// 0x81a6828
	int GetNumLODs();// 0x81a69b0
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x81a6dd8
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x81a6d34
	int GetMaterialIndex(FName MaterialSlotName);// 0x81a6618
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x81a6778
	BoxSphereBounds GetBounds();// 0x81a6944
	Box GetBoundingBox();// 0x81a68d8
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x81a64c0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x81a6af0
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x81a69e4
	void AddSocket(StaticMeshSocket* Socket);// 0x81a6570
	FName AddMaterial(MaterialInterface* Material);// 0x81a66c8

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 0x58]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x150]
	Vector BuildScale3D;//[Offset: 0x280, Size: 0xc]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8]
	byte PhysicsType;//[Offset: 0x30, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1]
	enum SleepFamily;//[Offset: 0x51, Size: 0x1]
	byte DOFMode;//[Offset: 0x52, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x54, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x64, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x6c, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x6d, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x70, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0xa0, Size: 0x4]
	float MassInKgOverride;//[Offset: 0xa4, Size: 0x4]
	float LinearDamping;//[Offset: 0xb0, Size: 0x4]
	float AngularDamping;//[Offset: 0xb4, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0xb8, Size: 0xc]
	Vector COMNudge;//[Offset: 0xc4, Size: 0xc]
	float MassScale;//[Offset: 0xd0, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0xd4, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf0, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x100, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0x108, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0x10c, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0x110, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ITStaticMeshExtension.Object

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x74472ac
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x7446e60
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x74473f0
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x7446f6c

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector position);// 0x7435d6c
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x7433c04
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x7433b0c
	void ReversePolygonFacing(PolygonID PolygonID);// 0x7433a58
	void ReserveNewVertices(int NumberOfNewVertices);// 0x74384b0
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x74381ac
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x74378b4
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x7437238
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x7436bbc
	void ReserveNewEdges(int NumberOfNewEdges);// 0x7437d78
	bool IsVertexValid(VertexID VertexID);// 0x7438254
	bool IsVertexOrphaned(VertexID VertexID);// 0x74368a0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x7437e20
	bool IsTriangleValid(const TriangleID TriangleID);// 0x74372e0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x7434e38
	bool IsPolygonValid(PolygonID PolygonID);// 0x7436c64
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x7436960
	bool IsEmpty();// 0x7438558
	bool IsEdgeValid(EdgeID EdgeID);// 0x743795c
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x7435634
	bool IsEdgeInternal(EdgeID EdgeID);// 0x7435740
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x74364ac
	Vector GetVertexPosition(VertexID VertexID);// 0x7435e70
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x7436798
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x7435cb0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x7435ba8
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x74347cc
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x7433d44
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x7435a90
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x74358bc
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x74362d8
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x7436104
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x7436680
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x7435f30
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x7434b04
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x7434d20
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x7434c1c
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x7434ef8
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x7434fb4
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x74349ec
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x74348d4
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x743430c
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x74344e0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x74346b4
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x7433e4c
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x74341f4
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x74340dc
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x743388c
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x7433f08
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x74363f0
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x74359d4
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x7435800
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x743621c
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x7436048
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x74365c4
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x7434424
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x74345f8
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x7434020
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x74337d0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x7435460
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x743528c
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x7435070
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x7435188
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x743551c
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x7435348
	void Empty();// 0x7438590
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x7437ee0
	void DeleteVertex(VertexID VertexID);// 0x7438314
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x74373a0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x7436a20
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x7436d24
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x7437a1c
	void CreateVertexWithID(VertexID VertexID);// 0x74383c8
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x7437ff8
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x74380f0
	VertexID CreateVertex();// 0x743847c
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x7437578
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x7437730
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x7436efc
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x7436ad4
	PolygonGroupID CreatePolygonGroup();// 0x7436b88
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x74370b4
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x7437b34
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x7437c70
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x74339a4

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Distance;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x54, Size: 0x4]
	int Item;//[Offset: 0x58, Size: 0x4]
	byte ElementIndex;//[Offset: 0x5c, Size: 0x1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x80c44fc
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x80c4604
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x80c4870
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x80c4978
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x80c4be4
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x80c4cec
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x80c423c
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x80c4378
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x80c4448
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x80c46f4
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x80c47c0
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x80c4a68
	float K2_GetScalarParameterValue(FName ParameterName);// 0x80c4b34
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x80c4140
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x80c3ff0
	void CopyInterpParameters(MaterialInstance* Source);// 0x80c4098

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x150]
	Object*[] CachedReferencedTextures;//[Offset: 0x2d8, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x250, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x254, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x258, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x259, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x25a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x260, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x268, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x278, Size: 0x8]
	Controller* Controller;//[Offset: 0x280, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x28c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x298, Size: 0xc]
	void SpawnDefaultController();// 0x8104358
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x81044d0
	void ReceiveUnpossessed(Controller* OldController);// 0x59ef218
	void ReceivePossessed(Controller* NewController);// 0x59ef218
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x810476c
	void OnRep_PlayerState();// 0x81045c8
	void OnRep_Controller();// 0x81045e4
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x8103dc4
	Vector K2_GetMovementInputVector();// 0x8103d8c
	bool IsPlayerControlled();// 0x8104410
	bool IsPawnControlled();// 0x8104654
	bool IsMoveInputIgnored();// 0x8103f08
	bool IsLocallyControlled();// 0x8104450
	bool IsControlled();// 0x810468c
	bool IsBotControlled();// 0x81043d0
	Vector GetPendingMovementInputVector();// 0x81041d0
	Vector GetNavAgentLocation();// 0x8104490
	PawnMovementComponent* GetMovementComponent();// 0x81048ec
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x81046c4
	Vector GetLastMovementInputVector();// 0x8104198
	Rotator GetControlRotation();// 0x8104600
	Controller* GetController();// 0x8104638
	Rotator GetBaseAimRotation();// 0x8104390
	void DetachFromControllerPendingDestroy();// 0x8104374
	Vector ConsumeMovementInputVector();// 0x8104158
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x8104208
	void AddControllerYawInput(float Val);// 0x8103ff8
	void AddControllerRollInput(float Val);// 0x8103f48
	void AddControllerPitchInput(float Val);// 0x81040a8

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x250, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x260, Size: 0x10]
	FName StateName;//[Offset: 0x270, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x278, Size: 0x8]
	Character* Character;//[Offset: 0x288, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x290, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2b0, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	void UnPossess();// 0x7f96be4
	void StopMovement();// 0x7f96bc8
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x7f97254
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x7f96b10
	void SetIgnoreLookInput(bool bNewLookInput);// 0x7f969fc
	void SetControlRotation(out const Rotator NewRotation);// 0x7f97358
	void ResetIgnoreMoveInput();// 0x7f96af4
	void ResetIgnoreLookInput();// 0x7f969e0
	void ResetIgnoreInputFlags();// 0x7f96984
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x59ef218
	void ReceivePossess(Pawn* PossessedPawn);// 0x59ef218
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x59ef218
	void Possess(Pawn* InPawn);// 0x7f96bf8
	void OnRep_PlayerState();// 0x7f970c4
	void OnRep_Pawn();// 0x7f970e0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x7f970fc
	Pawn* K2_GetPawn();// 0x7f96dd8
	bool IsPlayerController();// 0x7f96d3c
	bool IsMoveInputIgnored();// 0x7f96ab4
	bool IsLookInputIgnored();// 0x7f969a0
	bool IsLocalPlayerController();// 0x7f96ce0
	bool IsLocalController();// 0x7f96ca0
	Actor* GetViewTarget();// 0x7f96d9c
	Rotator GetDesiredRotation();// 0x7f96d5c
	Rotator GetControlRotation();// 0x7f97410
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x7f96e0c
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x7f96f54
	PlayerController* CastToPlayerController();// 0x7f97090

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x248, Size: 0x4]
	int PlayerId;//[Offset: 0x24c, Size: 0x4]
	byte Ping;//[Offset: 0x250, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x252, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x252, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x252, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x252, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x252, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x252, Size: 0x1]
	int StartTime;//[Offset: 0x254, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x258, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x268, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x278, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x2a8, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x320, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x59ef218
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x59ef218
	void OnRep_UniqueId();// 0x8127fc8
	void OnRep_Score();// 0x8128038
	void OnRep_PlayerName();// 0x812801c
	void OnRep_PlayerId();// 0x8127fe4
	void OnRep_bIsInactive();// 0x8128000
	bool IsOnlyASpectator();// 0x8127ef8
	FString GetPlayerName();// 0x8127f18

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2a8, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x2b0, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2b8, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2c0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2f0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x320, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x324, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x330, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x340, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x344, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x348, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x34c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x350, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x350, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x350, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x350, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x350, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x350, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x350, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x351, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x351, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x351, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x354, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x358, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x35c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x360, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x364, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x368, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x36c, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x378, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x398, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x3a8, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3b8, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3f0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x430, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x440, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x7f813f4
	void StopJumping();// 0x7f81b54
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x7f8189c
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x7f840fc
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x7f82b60
	void ServerMoveNoBase(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x7f83a08
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x7f83170
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x7f82cd0
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x7f83568
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x7f83cc0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x7f812a4
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x7f8194c
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x7f81564
	void OnRep_RootMotion();// 0x7f81290
	void OnRep_ReplicatedBasedMovement();// 0x7f81c5c
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x7f81c48
	void OnRep_IsCrouched();// 0x7f81b8c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x59ef218
	void OnLanded(out const HitResult Hit);// 0x59ef218
	void OnJumped();// 0x7f81700
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x7f8171c
	void K2_UpdateCustomMovement(float DeltaTime);// 0x59ef218
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x59ef218
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x59ef218
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x59ef218
	void Jump();// 0x7f81b70
	bool IsPlayingRootMotion();// 0x7f81250
	bool IsPlayingNetworkedRootMotionMontage();// 0x7f811e0
	bool IsJumpProvidingForce();// 0x7f81a9c
	bool HasAnyRootMotion();// 0x7f81218
	AnimMontage* GetCurrentMontage();// 0x7f81868
	Vector GetBaseTranslationOffset();// 0x7f81c20
	Rotator GetBaseRotationOffsetRotator();// 0x7f81ba8
	float GetAnimRootMotionTranslationScale();// 0x7f811ac
	void Crouch(bool bClientSimulation);// 0x7f814ac
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x7f825a4
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x7f84010
	void ClientCheatWalk();// 0x7f81398
	void ClientCheatGhost();// 0x7f81360
	void ClientCheatFly();// 0x7f8137c
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x7f81d70
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x7f8225c
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x7f82808
	void ClientAckGoodMove(float TimeStamp);// 0x7f82ab8
	bool CanJumpInternal();// 0x7f81adc
	bool CanJump();// 0x7f81b1c
	bool CanCrouch();// 0x7f813b4
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x7f81c78

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x7f2a7d0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x7f372cc

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x59ef218
	FString GetNotifyName();// 0x7f34f34

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6b0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6b8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x6e8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x6f4, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x730, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x740, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x750, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x8b0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x8b4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8b5, Size: 0x1]
	byte AnimationMode;//[Offset: 0x8b7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b9, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b9, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b9, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b9, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b9, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ba, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c0, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c0, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c0, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c1, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c1, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c1, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c1, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c1, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c1, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c1, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c2, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c2, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c2, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c2, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c2, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c2, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c2, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c2, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c3, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c3, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c3, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c3, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c3, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c3, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8c6, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x8c8, Size: 0x4]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8d0, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x8e0, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x8f0, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x900, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x9d8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x9dc, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9e8, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa40, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xb10, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x8167ba4
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x8166ce8
	void ToggleDisablePostProcessBlueprint();// 0x8168d5c
	void TermBodiesBelow(FName ParentBoneName);// 0x816587c
	void SuspendClothingSimulation();// 0x8166e0c
	void Stop();// 0x8167620
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x8166f24
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x8166a6c
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x8166b1c
	void SetTeleportRotationThreshold(float Threshold);// 0x81665d0
	void SetTeleportDistanceThreshold(float Threshold);// 0x81664f4
	void SetPosition(float InPos, bool bFireNotifies);// 0x81674ec
	void SetPlayRate(float Rate);// 0x8167410
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x8165724
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x816627c
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x81670c0
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x8165674
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x8165f94
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x816618c
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x8168c74
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x81669bc
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x8164acc
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x8164bc8
	void SetClothMaxDistanceScale(float Scale);// 0x8166e48
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x81663c8
	void SetAnimClass(class Object NewClass);// 0x816803c
	void SetAnimationMode(byte InAnimationMode);// 0x81678bc
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x81676e4
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x8164758
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x8166bf0
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x81666ac
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x81668e8
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x8164e9c
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x8164fe4
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x8164d0c
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x81657cc
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x8165414
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x8165524
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x8165278
	void ResumeClothingSimulation();// 0x8166df8
	void ResetClothTeleportMode();// 0x8166dac
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x8167964
	void ResetAllowedAnimCurveEvaluation();// 0x81667b8
	void ResetAllBodiesSimulatePhysics();// 0x8165510
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x816778c
	void Play(bool bLooping);// 0x8167634
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate);// 0x8167208
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x8167cf4
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x8167c4c
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x8165d90
	bool IsPlaying();// 0x81675e8
	bool IsClothingSimulationSuspended();// 0x8166dc0
	bool IsBodyGravityEnabled(FName BoneName);// 0x81660d8
	bool HasValidAnimationInstance();// 0x8167a0c
	float GetTeleportRotationThreshold();// 0x8166678
	float GetTeleportDistanceThreshold();// 0x816659c
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x816874c
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x81680ec
	Vector GetSkeletalCenterOfMass();// 0x8165c54
	AnimInstance* GetPostProcessInstance();// 0x8167fa0
	float GetPosition();// 0x81674b8
	float GetPlayRate();// 0x81673dc
	float GetMorphTarget(FName MorphTargetName);// 0x8166ffc
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x8167af4
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x8167a44
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x8167de4
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x8167ef0
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x816890c
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x816834c
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x8168ac0
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x816854c
	bool GetDisablePostProcessBlueprint();// 0x8168d24
	bool GetDisableAnimCurves();// 0x8166998
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x81645b0
	float GetClothMaxDistanceScale();// 0x8166ef0
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x81664c0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x8165c8c
	AnimInstance* GetAnimInstance();// 0x8167fd4
	class Object GetAnimClass();// 0x8168008
	byte GetAnimationMode();// 0x8167888
	bool GetAllowRigidBodyAnimNode();// 0x8166bcc
	bool GetAllowedAnimCurveEvaluate();// 0x81668c8
	void ForceClothNextUpdateTeleportAndReset();// 0x8166e20
	void ForceClothNextUpdateTeleport();// 0x8166e34
	FName FindConstraintBoneName(int ConstraintIndex);// 0x8164a1c
	void ClearMorphTargets();// 0x81670ac
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x81648e0
	void BindClothToMasterPoseComponent();// 0x8166d98
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x81667cc
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x8165924
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x8165abc
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x816512c

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x478, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x480, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x488, Size: 0x10]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x498, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5a0, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x5a8, Size: 0x4]
	int MinLodModel;//[Offset: 0x5ac, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5b8, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5c8, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5fc, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5fe, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5fe, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5fe, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5fe, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5fe, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ff, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ff, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5ff, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5ff, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5ff, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5ff, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5ff, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5ff, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x600, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x600, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x600, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x600, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x600, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x600, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x601, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x601, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x604, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x618, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x640, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x816fea0
	void UnHideBoneByName(FName BoneName);// 0x816f084
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x816f594
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x816f3c0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x816ee4c
	void ShowAllMaterialSections(int LODIndex);// 0x816eda4
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x816fcc4
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x817026c
	bool SetSkinWeightProfile(FName InProfileName);// 0x816ff5c
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x81700b8
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x8170694
	void SetRenderStatic(bool bNewValue);// 0x816ebf8
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x816fb6c
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x816fa14
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x8170d9c
	void SetMinLOD(int InNewMinLOD);// 0x8170cc0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x816f918
	void SetForcedLOD(int InNewForcedLOD);// 0x8170c18
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x8170a84
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x8170b34
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x81709dc
	bool IsUsingSkinWeightProfile();// 0x816fe64
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x816eca8
	bool IsBoneHiddenByName(FName BoneName);// 0x816efd0
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x816f12c
	int GetVertexOffsetUsage(int LODIndex);// 0x816fdb4
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x8170378
	FName GetSocketBoneName(FName InSocketName);// 0x8170798
	Vector GetRefPosePosition(int BoneIndex);// 0x816f768
	FName GetParentBone(FName BoneName);// 0x81705e4
	int GetNumLODs();// 0x8170d68
	int GetNumBones();// 0x81709a8
	int GetForcedLOD();// 0x8170be4
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x81704dc
	FName GetCurrentSkinWeightProfileName();// 0x816fe84
	FName GetBoneName(int BoneIndex);// 0x8170848
	int GetBoneIndex(FName BoneName);// 0x81708f8
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x816f220
	void ClearVertexColorOverride(int LODIndex);// 0x81701c4
	void ClearSkinWeightProfile();// 0x816ff48
	void ClearSkinWeightOverride(int LODIndex);// 0x8170010
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x816f81c

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x448, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x80cb20c
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x80cb2fc
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x80cb3f0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x80cb534
	FName[] GetMaterialSlotNames();// 0x80cb5f0
	MaterialInterface*[] GetMaterials();// 0x80cb760
	int GetMaterialIndex(FName MaterialSlotName);// 0x80cb6a8

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x160, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 0x10]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 0x10]
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x815f3d8
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x815f12c
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x815f998
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x815f8d8
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x815f7b4
	int NumSockets();// 0x815ed74
	FString[] K2_GetAllMorphTargetNames();// 0x815f2c0
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x815ebc0
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x815ecc4
	Skeleton* GetSkeleton();// 0x815fc0c
	PhysicsAsset* GetShadowPhysicsAsset();// 0x815f6a0
	PhysicsAsset* GetPhysicsAsset();// 0x815f6bc
	NodeMappingContainer*[] GetNodeMappingData();// 0x815f61c
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x815f56c
	MorphTarget*[] GetMorphTargets();// 0x815f4e8
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x815f23c
	SkeletalMaterial[] GetMaterials();// 0x815faac
	SkeletalMeshLODSettings* GetLODSettings();// 0x815f980
	int GetLODNum();// 0x815eba4
	BoxSphereBounds GetImportedBounds();// 0x815fb34
	Object* GetDefaultAnimatingRig();// 0x815f6d8
	BoxSphereBounds GetBounds();// 0x815fba0
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x815eda8
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x815ef74
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x815f07c

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x816d820
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x816d958

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x170, Size: 0x10]
	enum Interpolation;//[Offset: 0x180, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 0x10]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1b0, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 0x10]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 0x10]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 0x10]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10]
	int DefaultValue;//[Offset: 0x78, Size: 0x4]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x6e, Size: 0x1]
	SimpleCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x1c]
	enum SolverType;//[Offset: 0x7c, Size: 0x1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a0, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1c8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1f0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x200, Size: 0x114]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x114]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 0x4]
	float LinearPlasticityThreshold;//[Offset: 0x14, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0x18, Size: 0x4]
	float AngularPlasticityThreshold;//[Offset: 0x1c, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x20, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x3c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x5c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x78, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xc4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1]
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 0x1]
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x114]
	FName ProfileName;//[Offset: 0x114, Size: 0x8]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4]
	int SolverIterations;//[Offset: 0x4, Size: 0x4]
	int JointIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionIterations;//[Offset: 0xc, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]
	bool HasValidSettings();// 0x816c838
	SkeletalMeshLODGroupSettings GetSettingsForLODLevel(const int LODIndex);// 0x816c85c
	int GetNumberOfSettings();// 0x816c804

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x7f19f30
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x7f1b7f4
	Pawn* TryGetPawnOwner();// 0x7f1d5d0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x7f1cc58
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x7f1d440
	void SetRootMotionMode(byte Value);// 0x7f1b3e8
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x7f1d368
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x7f1d290
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x7f1a240
	void SavePoseSnapshot(FName SnapshotName);// 0x7f1d520
	void ResetDynamics(enum InTeleportType);// 0x7f199dc
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x7f1cd4c
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x7f1d004
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x7f1c78c
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x7f1c880
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x7f1be70
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x7f1c22c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x7f1c320
	void Montage_Resume(const AnimMontage* Montage);// 0x7f1c63c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x7f1c974
	void Montage_Pause(const AnimMontage* Montage);// 0x7f1c6e4
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x7f1c45c
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x7f1c54c
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x7f1c0c4
	bool Montage_IsActive(const AnimMontage* Montage);// 0x7f1c178
	float Montage_GetPosition(const AnimMontage* Montage);// 0x7f1bf64
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x7f1bc5c
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x7f1bdbc
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x7f1c014
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x7f1bd0c
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x7f1a028
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x7f1b944
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x7f1b89c
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x7f19b44
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x7f1cb5c
	bool IsAnyMontagePlaying();// 0x7f1bc24
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x7f19ce0
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x7f19ddc
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x7f19a84
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x7f1a948
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x7f1aa40
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x7f1a660
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x7f1a758
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x7f1a850
	bool GetReceiveNotifiesFromLinkedInstances();// 0x7f1d420
	bool GetPropagateNotifiesToLinkedInstances();// 0x7f1d348
	SkeletalMeshComponent* GetOwningComponent();// 0x7f1d228
	Actor* GetOwningActor();// 0x7f1d25c
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x7f1b638
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x7f1b540
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x7f1b744
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x7f1b490
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x7f1ba34
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x7f1bb40
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x7f1ab38
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x7f1ac30
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x7f1ad28
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x7f1aed0
	float GetInstanceMachineWeight(int MachineIndex);// 0x7f1afc8
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x7f1ae20
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x7f1b078
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x7f1b128
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x7f1b1d8
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x7f1b288
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x7f1b338
	float GetCurveValue(FName CurveName);// 0x7f1a5b0
	FName GetCurrentStateName(int MachineIndex);// 0x7f1a334
	AnimMontage* GetCurrentActiveMontage();// 0x7f1bbf0
	void GetAllCurveNames(out FName[] OutNames);// 0x7f1a3e4
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x7f1a4a4
	void ClearMorphTargets();// 0x7f1a22c
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x7f1a120
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x59ef218
	void BlueprintPostEvaluateAnimation();// 0x59ef218
	void BlueprintLinkedAnimationLayersInitialized();// 0x59ef218
	void BlueprintInitializeAnimation();// 0x59ef218
	void BlueprintBeginPlay();// 0x59ef218

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	byte TimelineTickGroup;//[Offset: 0x90, Size: 0x1]
	FName VariableName;//[Offset: 0x94, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xac, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x7f9ad90

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x7f989e4
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x7f98ae8

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x7f9c9e8

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x7f9b2bc
	LinearColor GetLinearColorValue(float InTime);// 0x7f9b42c
	LinearColor GetClampedLinearColorValue(float InTime);// 0x7f9b370

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 0x50]
	void SetNumSubsteps(int NumSubsteps);// 0x7485054
	void SetNumIterations(int NumIterations);// 0x7485104
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x7485288
	void PhysicsAssetUpdated();// 0x7485354
	float GetSimulationTime();// 0x7484fac
	int GetNumSubsteps();// 0x7484fc8
	int GetNumKinematicParticles();// 0x748501c
	int GetNumIterations();// 0x7484fe4
	int GetNumDynamicParticles();// 0x7485000
	int GetNumCloths();// 0x7485038
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x7484ef0
	void EnableGravityOverride(out const Vector InVector);// 0x74851d0
	void DisableGravityOverride();// 0x74851b4
	void ClothConfigUpdated();// 0x7485338

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x59ef218
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x59ef218
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x59ef218
	FString GetNotifyName();// 0x7f35e70

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x386, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3ac, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x980, Size: 0x38]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9b8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa80, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0xac0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x7f8895c
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x7f88a38
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x7f89260
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x7f89428
	void SetGroupsToIgnore(int GroupFlags);// 0x7f894dc
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x7f89584
	void SetGroupsToAvoid(int GroupFlags);// 0x7f89638
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x7f896e0
	void SetAvoidanceGroup(int GroupFlags);// 0x7f89794
	void SetAvoidanceEnabled(bool bEnable);// 0x7f89378
	float K2_GetWalkableFloorZ();// 0x7f88a04
	float K2_GetWalkableFloorAngle();// 0x7f88ae0
	float K2_GetModifiedMaxAcceleration();// 0x7f88f14
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x7f8882c
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x7f8861c
	bool IsWalking();// 0x7f89220
	bool IsWalkable(out const HitResult Hit);// 0x7f88b14
	float GetValidPerchRadius();// 0x7f88bf8
	float GetPerchRadiusThreshold();// 0x7f88c2c
	PrimitiveComponent* GetMovementBase();// 0x7f891d0
	float GetMinAnalogSpeed();// 0x7f88f50
	float GetMaxJumpHeightWithJumpTime();// 0x7f88f8c
	float GetMaxJumpHeight();// 0x7f88fc8
	float GetMaxBrakingDeceleration();// 0x7f88e9c
	float GetMaxAcceleration();// 0x7f88ed8
	Vector GetLastUpdateVelocity();// 0x7f8983c
	Rotator GetLastUpdateRotation();// 0x7f89864
	Vector GetLastUpdateLocation();// 0x7f898a0
	Vector GetImpartedMovementBaseVelocity();// 0x7f89190
	Vector GetCurrentAcceleration();// 0x7f88e64
	Character* GetCharacterOwner();// 0x7f8935c
	float GetAnalogInputModifier();// 0x7f88e30
	void DisableMovement();// 0x7f89204
	void ClearAccumulatedForces();// 0x7f88e14
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7f883d0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x7f89004
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x7f88d10
	void AddForce(Vector Force);// 0x7f88c60

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x81057dc
	bool IsMoveInputIgnored();// 0x8105848
	Vector GetPendingInputVector();// 0x8105900
	Pawn* GetPawnOwner();// 0x8105814
	Vector GetLastInputVector();// 0x81058c8
	Vector ConsumeInputVector();// 0x8105888
	void AddInputVector(Vector WorldVector, bool bForce);// 0x8105938

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x80d5fe4
	void StopActiveMovement();// 0x80d6034
	bool IsSwimming();// 0x80d5ee4
	bool IsMovingOnGround();// 0x80d5f24
	bool IsFlying();// 0x80d5ea4
	bool IsFalling();// 0x80d5f64
	bool IsCrouching();// 0x80d5fa4

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0x80ce2ac
	void SnapUpdatedComponentToPlane();// 0x80cd864
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x80ce110
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x80cdbec
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x80cdd94
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x80cdc9c
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x80cdb34
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x80cde60
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x80ce1c0
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x80cdf10
	float K2_GetModifiedMaxSpeed();// 0x80ce384
	float K2_GetMaxSpeedModifier();// 0x80ce3c0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x80ce2c8
	Vector GetPlaneConstraintOrigin();// 0x80cdab4
	Vector GetPlaneConstraintNormal();// 0x80cdaf4
	enum GetPlaneConstraintAxisSetting();// 0x80cde44
	PhysicsVolume* GetPhysicsVolume();// 0x80ce270
	float GetMaxSpeed();// 0x80ce3fc
	float GetGravityZ();// 0x80ce438
	Vector ConstrainNormalToPlane(Vector Normal);// 0x80cd880
	Vector ConstrainLocationToPlane(Vector Location);// 0x80cd93c
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x80cd9f8

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x460, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x464, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x7f802e0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x7f801e0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x7f800e0
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x7f7fb74
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x7f7fc84
	float GetUnscaledCapsuleRadius();// 0x7f7fdcc
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x7f7fd8c
	float GetUnscaledCapsuleHalfHeight();// 0x7f7fdb0
	float GetShapeScale();// 0x7f7fb34
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x7f7fde8
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x7f7ff28
	float GetScaledCapsuleRadius();// 0x7f800b0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x7f8004c
	float GetScaledCapsuleHalfHeight();// 0x7f8008c

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x448, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x450, Size: 0x8]
	Color ShapeColor;//[Offset: 0x458, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2c0, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c8, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2d0, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d8, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2e0, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e8, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2f4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x30c, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x318, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x328, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x33c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x340, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x34c, Size: 0xc]
	int ClientCap;//[Offset: 0x358, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x360, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x368, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x370, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x378, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f8, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f9, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x438, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x440, Size: 0x8]
	float InputYawScale;//[Offset: 0x454, Size: 0x4]
	float InputPitchScale;//[Offset: 0x458, Size: 0x4]
	float InputRollScale;//[Offset: 0x45c, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x460, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x460, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x460, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x460, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x464, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x468, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x478, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x479, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x47a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x47b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x47c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x480, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x482, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4f8, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x500, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x518, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x570, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x580, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x81197c4
	bool WasInputKeyJustPressed(Key Key);// 0x8119954
	void ToggleSpeaking(bool bInSpeaking);// 0x811eda0
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x811baa0
	void SwitchLevel(FString URL);// 0x811fe8c
	void StopHapticEffect(enum Hand);// 0x811b864
	void StartFire(byte FireModeNum);// 0x811ef10
	void SetVirtualJoystickVisibility(bool bVisible);// 0x8118b04
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x811886c
	void SetName(FString S);// 0x811ff48
	void SetMouseLocation(const int X, const int Y);// 0x811efc0
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x811c6ac
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x811b728
	void SetDisableHaptics(bool bNewDisabled);// 0x811b670
	void SetControllerLightColor(Color Color);// 0x811b5cc
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x81183f4
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x8118734
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x8118630
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x811a080
	void ServerViewPrevPlayer();// 0x811a17c
	void ServerViewNextPlayer();// 0x811a1d8
	void ServerVerifyViewTarget();// 0x811a234
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x811a290
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x811a36c
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x811a448
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x811e82c
	void ServerToggleAILogging();// 0x8119e84
	void ServerShortTimeout();// 0x811a584
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x8120694
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x811a698
	void ServerRestartPlayer();// 0x811a7d4
	void ServerPause();// 0x811a830
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x811a88c
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x811ead8
	void ServerExecRPC(FString Msg);// 0x812034c
	void ServerExec(FString Msg);// 0x8120298
	void ServerCheckClientPossessionReliable();// 0x811a5e0
	void ServerCheckClientPossession();// 0x811a63c
	void ServerChangeName(FString S);// 0x811a964
	void ServerCamera(FName NewMode);// 0x811aa50
	void ServerAcknowledgePossession(Pawn* P);// 0x811ab38
	void SendToConsole(FString Command);// 0x811e23c
	void RestartLevel();// 0x81204f4
	void ResetControllerLightColor();// 0x811b5b8
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x811f0b0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x811b90c
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte action, LatentActionInfo LatentInfo);// 0x811bb90
	void Pause();// 0x8120004
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x811833c
	void LocalTravel(FString URL);// 0x8120438
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x811c048
	bool IsInputKeyDown(Key Key);// 0x8119ae4
	void GetViewportSize(out int SizeX, out int SizeY);// 0x811c7d4
	SpectatorPawn* GetSpectatorPawn();// 0x8118320
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x811904c
	Vector GetInputVectorKeyState(Key Key);// 0x81194a8
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x8119300
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x8118dbc
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x8119164
	float GetInputKeyTimeDown(Key Key);// 0x8118ec0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x8118c6c
	float GetInputAnalogKeyState(Key Key);// 0x8119638
	HUD* GetHUD();// 0x811c7a0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x811f4b8
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x811f68c
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x811f850
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x811fa14
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x811fb9c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x811fd14
	Vector GetFocalLocation();// 0x81182e0
	void FOV(float NewFOV);// 0x8120510
	void EnableCheats();// 0x81205c0
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x811f208
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x811f3a8
	void ConsoleKey(Key Key);// 0x811e2f8
	void ClientWasKicked(const FText KickReason);// 0x811aee4
	void ClientVoiceHandshakeComplete();// 0x811ed84
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x811aff0
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x811b0ac
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x811e484
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x811b288
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x811b424
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x8119ee0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x811be58
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x811c224
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x811c320
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x811c424
	void ClientStartOnlineSession();// 0x811aec8
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x811d5e0
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x811d6d0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x811c4f0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x811c5a0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x81205dc
	void ClientSetHUD(class HUD NewHUDClass);// 0x811c8d8
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x811c988
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x811cad0
	void ClientSetCameraMode(FName NewCamMode);// 0x811cc68
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x811cd18
	void ClientSetBlockOnAsyncLoading();// 0x811cf4c
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x81200d0
	void ClientReturnToMainMenu(FString ReturnReason);// 0x81201dc
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x811adfc
	void ClientRestart(Pawn* NewPawn);// 0x811cf68
	void ClientReset();// 0x811d018
	void ClientRepObjRef(Object* Object);// 0x8120020
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x811ac20
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x811d034
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x811d1c4
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x811d310
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x811d49c
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x811bf50
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x811d860
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x811e658
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x811db64
	void ClientIgnoreMoveInput(bool bIgnore);// 0x811dcb8
	void ClientIgnoreLookInput(bool bIgnore);// 0x811dd70
	void ClientGotoState(FName NewState);// 0x811de28
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x811ded8
	void ClientForceGarbageCollection();// 0x811dfdc
	void ClientFlushLevelStreaming();// 0x811dff8
	void ClientEndOnlineSession();// 0x811aeac
	void ClientEnableNetworkVoice(bool bEnable);// 0x811ee58
	void ClientCommitMapChange();// 0x811e00c
	void ClientClearCameraLensEffects();// 0x811c4d4
	void ClientCapBandwidth(int Cap);// 0x811e028
	void ClientCancelPendingMapChange();// 0x811e0d8
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x811e0f4
	void ClearAudioListenerOverride();// 0x8118720
	void ClearAudioListenerAttenuationOverride();// 0x811861c
	bool CanRestartPlayer();// 0x81185dc
	void Camera(FName NewMode);// 0x8118a54
	void AddYawInput(float Val);// 0x8119d24
	void AddRollInput(float Val);// 0x8119c74
	void AddPitchInput(float Val);// 0x8119dd4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x8118bbc

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10]
	delegate OnVisibilityChanged;//[Offset: 0x168, Size: 0x10]
	Margin Padding;//[Offset: 0x190, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 0x8]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8]
	int Priority;//[Offset: 0x1e0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10]
	void UnregisterInputComponent();// 0x72adc74
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x72af7c8
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x72af530
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x72af720
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x72af488
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x59ef218
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x72adcb0
	void StopListeningForAllInputActions();// 0x72adc9c
	void StopAnimationsAndLatentActions();// 0x72af9b8
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x72ae6b4
	void StopAllAnimations();// 0x72ae6a0
	void SetPositionInViewport(Vector2D position, bool bRemoveDPIScale);// 0x72afdc0
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x72ae178
	void SetPadding(Margin InPadding);// 0x72aeeac
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x72afa48
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x72ae26c
	void SetInputActionPriority(int NewPriority);// 0x72adb18
	void SetInputActionBlocking(bool bShouldBlock);// 0x72ada68
	void SetForegroundColor(SlateColor InForegroundColor);// 0x72aef58
	void SetDesiredSizeInViewport(Vector2D Size);// 0x72afd1c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x72af0f0
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x72ae44c
	void SetAnchorsInViewport(Anchors Anchors);// 0x72afc70
	void SetAlignmentInViewport(Vector2D Alignment);// 0x72afbcc
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x72ae0d0
	void RemoveFromViewport();// 0x72afeb8
	void RegisterInputComponent();// 0x72adc88
	void PreConstruct(bool IsDesignTime);// 0x59ef218
	void PlaySound(SoundBase* SoundToPlay);// 0x72adf60
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x72ae9fc
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x72ae75c
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x72ae8ac
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x72aec78
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x72ae5f0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x59ef218
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x59ef218
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x59ef218
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x59ef218
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x59ef218
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x59ef218
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x59ef218
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x59ef218
	void OnPaint(out PaintContext Context);// 0x59ef218
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x59ef218
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x59ef218
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x59ef218
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x59ef218
	void OnMouseCaptureLost();// 0x59ef218
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x59ef218
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x59ef218
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x59ef218
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x59ef218
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x59ef218
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x59ef218
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x59ef218
	void OnInitialized();// 0x59ef218
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x59ef218
	void OnFocusLost(FocusEvent InFocusEvent);// 0x59ef218
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x59ef218
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x59ef218
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x59ef218
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x59ef218
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x59ef218
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x59ef218
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x72af248
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x72af198
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x59ef218
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x59ef218
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate callback);// 0x72adda4
	bool IsPlayingAnimation();// 0x72adf3c
	bool IsListeningForInputAction(FName ActionName);// 0x72adbc0
	bool IsInViewport();// 0x72afaf0
	bool IsInteractable();// 0x59ef218
	bool IsAnyAnimationPlaying();// 0x72ae360
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x72ae01c
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x72ae398
	Pawn* GetOwningPlayerPawn();// 0x72afa14
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x72af9e0
	bool GetIsVisible();// 0x72afb28
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x72ae540
	Anchors GetAnchorsInViewport();// 0x72afb94
	Vector2D GetAlignmentInViewport();// 0x72afb60
	void FlushAnimations();// 0x72ae008
	void Destruct();// 0x59ef218
	void Construct();// 0x59ef218
	void CancelLatentActions();// 0x72af9cc
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x72af8c0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x72af628
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x72af2f8
	void AddToViewport(int ZOrder);// 0x72aff80
	bool AddToPlayerScreen(int ZOrder);// 0x72afecc

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x72bd480
	void SetUserFocus(PlayerController* PlayerController);// 0x72bcdc4
	void SetToolTipText(out const FText InToolTipText);// 0x72bd700
	void SetToolTip(Widget* Widget);// 0x72bd658
	void SetRenderTranslation(Vector2D Translation);// 0x72bd9a4
	void SetRenderTransformPivot(Vector2D Pivot);// 0x72bd900
	void SetRenderTransformAngle(float Angle);// 0x72bda7c
	void SetRenderTransform(WidgetTransform InTransform);// 0x72bdc6c
	void SetRenderShear(Vector2D Shear);// 0x72bdb24
	void SetRenderScale(Vector2D Scale);// 0x72bdbc8
	void SetRenderOpacity(float InOpacity);// 0x72bd3a4
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x72bc94c
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x72bc75c
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x72bc854
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x72bca40
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x72bcb34
	void SetKeyboardFocus();// 0x72bd058
	void SetIsEnabled(bool bInIsEnabled);// 0x72bd810
	void SetFocus();// 0x72bce6c
	void SetCursor(byte InCursor);// 0x72bd5b0
	void SetClipping(enum InClipping);// 0x72bd2c8
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x72bcc74
	void ResetCursor();// 0x72bd59c
	void RemoveFromParent();// 0x72bc70c
	EventReply OnReply__DelegateSignature();// 0x59ef218
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x59ef218
	bool IsVisible();// 0x72bd564
	bool IsHovered();// 0x72bd1d8
	void InvalidateLayoutAndVolatility();// 0x72bcd9c
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x72bce80
	bool HasUserFocus(PlayerController* PlayerController);// 0x72bcfa4
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x72bd06c
	bool HasMouseCapture();// 0x72bd168
	bool HasKeyboardFocus();// 0x72bd1a0
	bool HasFocusedDescendants();// 0x72bcf34
	bool HasAnyUserFocus();// 0x72bcf6c
	Widget* GetWidget__DelegateSignature();// 0x59ef218
	enum GetVisibility();// 0x72bd530
	Geometry GetTickSpaceGeometry();// 0x72bc69c
	FText GetText__DelegateSignature();// 0x59ef218
	enum GetSlateVisibility__DelegateSignature();// 0x59ef218
	SlateColor GetSlateColor__DelegateSignature();// 0x59ef218
	SlateBrush GetSlateBrush__DelegateSignature();// 0x59ef218
	float GetRenderTransformAngle();// 0x72bda48
	float GetRenderOpacity();// 0x72bd44c
	PanelWidget* GetParent();// 0x72bc728
	Geometry GetPaintSpaceGeometry();// 0x72bc664
	PlayerController* GetOwningPlayer();// 0x72bc5f4
	LocalPlayer* GetOwningLocalPlayer();// 0x72bc5b8
	byte GetMouseCursor__DelegateSignature();// 0x59ef218
	LinearColor GetLinearColor__DelegateSignature();// 0x59ef218
	bool GetIsEnabled();// 0x72bd8c8
	int GetInt32__DelegateSignature();// 0x59ef218
	GameInstance* GetGameInstance();// 0x72bc630
	float GetFloat__DelegateSignature();// 0x59ef218
	Vector2D GetDesiredSize();// 0x72bcd68
	enum GetClipping();// 0x72bd370
	enum GetCheckBoxState__DelegateSignature();// 0x59ef218
	Geometry GetCachedGeometry();// 0x72bc6d4
	bool GetBool__DelegateSignature();// 0x59ef218
	FText GetAccessibleText();// 0x72bc4e8
	FText GetAccessibleSummaryText();// 0x72bc418
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x59ef218
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x59ef218
	void ForceVolatile(bool bForce);// 0x72bd218
	void ForceLayoutPrepass();// 0x72bcdb0

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x72977a4
	bool RemoveChild(Widget* content);// 0x7297640
	bool HasChild(Widget* content);// 0x7297858
	bool HasAnyChildren();// 0x7297608
	int GetChildrenCount();// 0x7297b1c
	int GetChildIndex(const Widget* content);// 0x729790c
	Widget* GetChildAt(int Index);// 0x7297a6c
	Widget*[] GetAllChildren();// 0x72979bc
	void ClearChildren();// 0x72975ec
	PanelSlot* AddChild(Widget* content);// 0x72976f4

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x72bf2fc
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x72bf064
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x72bf254
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x72befbc
	float GetStartTime();// 0x72bf520
	float GetEndTime();// 0x72bf4ec
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x72bf3f4
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x72bf15c

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x6efd150
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x6efd250

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int SequenceID;//[Offset: 0x10, Size: 0x4]
	int ResolveParentIndex;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int[] RowsDisabled;//[Offset: 0x58, Size: 0x10]
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 0x10]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4]
	enum Flags;//[Offset: 0x1c, Size: 0x1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4]
	int RowIndex;//[Offset: 0xa8, Size: 0x4]
	int OverlapPriority;//[Offset: 0xac, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	float StartTime;//[Offset: 0xb4, Size: 0x4]
	float EndTime;//[Offset: 0xb8, Size: 0x4]
	float PrerollTime;//[Offset: 0xbc, Size: 0x4]
	float PostrollTime;//[Offset: 0xc0, Size: 0x4]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2]
	void SetRowIndex(int NewRowIndex);// 0x6efc348
	void SetPreRollFrames(int InPreRollFrames);// 0x6efbff8
	void SetPostRollFrames(int InPostRollFrames);// 0x6efbf28
	void SetOverlapPriority(int NewPriority);// 0x6efc288
	void SetIsLocked(bool bInIsLocked);// 0x6efc0cc
	void SetIsActive(bool bInIsActive);// 0x6efc1a4
	void SetCompletionMode(enum InCompletionMode);// 0x6efc4b8
	void SetBlendType(enum InBlendType);// 0x6efc3ec
	bool IsLocked();// 0x6efc0ac
	bool IsActive();// 0x6efc184
	int GetRowIndex();// 0x6efc32c
	int GetPreRollFrames();// 0x6efbfdc
	int GetPostRollFrames();// 0x6efbf0c
	int GetOverlapPriority();// 0x6efc26c
	enum GetCompletionMode();// 0x6efc55c
	OptionalMovieSceneBlendType GetBlendType();// 0x6efc49c

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum CompletionMode;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4]
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4]
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	FrameNumber Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 0x20]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x58, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 0x4]
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 0x10]
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 0x4]
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 0x4]
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 0x4]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 0x10]
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 0x2]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8]
	uint32 EntityID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 0x4]
	enum Flags;//[Offset: 0x18, Size: 0x1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8]
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2]
	enum Flags;//[Offset: 0x2, Size: 0x1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] Ids;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Geometry

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x260, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x270, Size: 0xe8]
	void SetUserTag(FName InUserTag);// 0x72ac010
	FName GetUserTag();// 0x72ac0b8

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 0x138]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 0x50]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24]
	float Duration;//[Offset: 0x104, Size: 0x4]
	float MaxDistance;//[Offset: 0x108, Size: 0x4]
	float TotalSamples;//[Offset: 0x10c, Size: 0x4]
	float Priority;//[Offset: 0x110, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x78]
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float LFEBleed;//[Offset: 0x10, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 0x4]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 0x40]
	byte OutputTarget;//[Offset: 0x68, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x69, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	enum GainMode;//[Offset: 0x68, Size: 0x1]
	float OutputVolume;//[Offset: 0x6c, Size: 0x4]
	float WetLevel;//[Offset: 0x70, Size: 0x4]
	float DryLevel;//[Offset: 0x74, Size: 0x4]
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x78, Size: 0x10]
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x88, Size: 0x10]
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0x98, Size: 0x10]
	delegate OnSubmixRecordedFileDone;//[Offset: 0xa8, Size: 0x10]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x818db30
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x818e4a0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x818e350
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x818dbd8
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x818e6e8
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x818e3f8
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x818da3c
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x818ddfc
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x818df0c
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x818e240

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x170, Size: 0x4]
	int StreamingPriority;//[Offset: 0x174, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x178, Size: 0x1]
	byte SoundGroup;//[Offset: 0x17a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x17c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17e, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17e, Size: 0x1]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x180, Size: 0x48]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 0x4]
	FString SpokenText;//[Offset: 0x240, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x250, Size: 0x4]
	float Volume;//[Offset: 0x254, Size: 0x4]
	float Pitch;//[Offset: 0x258, Size: 0x4]
	int NumChannels;//[Offset: 0x25c, Size: 0x4]
	int SampleRate;//[Offset: 0x260, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x280, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1]
	enum PitchRouting;//[Offset: 0x41, Size: 0x1]
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1]
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4]
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float QFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float RetriggerTime;//[Offset: 0x8, Size: 0x4]
	float VolumeScale;//[Offset: 0xc, Size: 0x4]
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	enum SendStage;//[Offset: 0x1, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8]
	float SendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4]
	float MinSendDistance;//[Offset: 0x24, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x36c, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x370, Size: 0x4]
	AudioBus* AudioBus;//[Offset: 0x378, Size: 0x8]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x7285378
	void Dragged(out const PointerEvent PointerEvent);// 0x72850b0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x7285214

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x7ff82dc
	bool WasControllerKeyJustPressed(Key Key);// 0x7ff846c
	bool IsControllerKeyDown(Key Key);// 0x7ff85fc
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x7ff7e18
	Vector GetControllerVectorKeyState(Key Key);// 0x7ff7fc0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x7ff7b88
	float GetControllerKeyTimeDown(Key Key);// 0x7ff7c8c
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x7ff7a38
	float GetControllerAnalogKeyState(Key Key);// 0x7ff8150

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x812758c
	void SetBind(FName BindName, FString Command);// 0x812748c
	void InvertAxisKey(const Key AxisKey);// 0x8127308
	void InvertAxis(const FName AxisName);// 0x8127260
	void ClearSmoothing();// 0x812724c

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x7fed5e4
	void ShowTitleSafeArea();// 0x7fed5c8
	void SetConsoleTarget(int PlayerIndex);// 0x7fed518

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10]
	void ReceiveShutdown();// 0x59ef218
	void ReceiveInit();// 0x59ef218
	void HandleTravelError(byte FailureType);// 0x59ef218
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x59ef218
	void DebugRemovePlayer(int ControllerId);// 0x7fd0ca8
	void DebugCreatePlayer(int ControllerId);// 0x7fd0d58

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x248, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x250, Size: 0x8]
	float DefaultFOV;//[Offset: 0x260, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x268, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x270, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2c0, Size: 0x640]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x900, Size: 0x640]
	TViewTarget ViewTarget;//[Offset: 0xf40, Size: 0x650]
	TViewTarget PendingViewTarget;//[Offset: 0x1590, Size: 0x650]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1c10, Size: 0x640]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2250, Size: 0x640]
	CameraModifier*[] ModifierList;//[Offset: 0x2890, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x28a0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x28b0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x28b4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x28c0, Size: 0xc]
	delegate OnAudioFadeChangeEvent;//[Offset: 0x28d0, Size: 0x10]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x28f0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2900, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2908, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2948, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2968, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2978, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2988, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2990, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2990, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2990, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2990, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2991, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2994, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2998, Size: 0x4]
	float ViewYawMin;//[Offset: 0x299c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x29a0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x29a4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x29a8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x29b0, Size: 0x4]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x8115958
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x8116744
	void StopCameraFade();// 0x81160f4
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x8115a48
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x811643c
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x8116640
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x8115b4c
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x8116338
	void StopAllCameraShakes(bool bImmediately);// 0x8116588
	void StopAllCameraAnims(bool bImmediate);// 0x8115990
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x8116848
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x8116a28
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x8116110
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x8115fa8
	void SetGameCameraCutThisFrame();// 0x811596c
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x8116e00
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x8116bdc
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x8115c50
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x81170d8
	void OnPhotographySessionStart();// 0x81170bc
	void OnPhotographySessionEnd();// 0x81170a0
	void OnPhotographyMultiPartCaptureStart();// 0x8117084
	void OnPhotographyMultiPartCaptureEnd();// 0x8117068
	PlayerController* GetOwningPlayerController();// 0x811702c
	float GetFOVAngle();// 0x8116dc4
	Rotator GetCameraRotation();// 0x8116d84
	Vector GetCameraLocation();// 0x8116d44
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x8116ebc
	void ClearCameraLensEffects();// 0x8116bc0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x59ef218
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x8116f74
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x8116c8c

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x630]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x5a0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5e0, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_SSVOFalloff;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_SSVOContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_TS4AONearDistanceThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_TS4AOMidDistanceThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_TS4AOFarDistanceThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AONearRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AOMidRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AOFarRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AOSubScaleRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AONearFalloffSq;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AOMidFalloffSq;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AOFarFalloffSq;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_TS4AONearIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_TS4AOMidIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_TS4AOFarIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_TS4AOSubScaleIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_TS4AOSeparationDist;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	byte BloomMethod;//[Offset: 0x1a, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x1b, Size: 0x1]
	byte TemperatureType;//[Offset: 0x1c, Size: 0x1]
	float WhiteTemp;//[Offset: 0x20, Size: 0x4]
	float WhiteTint;//[Offset: 0x24, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float ToneCurveAmount;//[Offset: 0x180, Size: 0x4]
	float FilmSlope;//[Offset: 0x184, Size: 0x4]
	float FilmToe;//[Offset: 0x188, Size: 0x4]
	float FilmShoulder;//[Offset: 0x18c, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x190, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x194, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1c0, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 0x10]
	float FilmContrast;//[Offset: 0x1f4, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x200, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 0x4]
	float BloomIntensity;//[Offset: 0x21c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x220, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x224, Size: 0x4]
	float Bloom1Size;//[Offset: 0x228, Size: 0x4]
	float Bloom2Size;//[Offset: 0x22c, Size: 0x4]
	float Bloom3Size;//[Offset: 0x230, Size: 0x4]
	float Bloom4Size;//[Offset: 0x234, Size: 0x4]
	float Bloom5Size;//[Offset: 0x238, Size: 0x4]
	float Bloom6Size;//[Offset: 0x23c, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 0x4]
	float CameraISO;//[Offset: 0x304, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x314, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x348, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x34c, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x354, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x368, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x36c, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3f8, Size: 0x4]
	float GrainJitter;//[Offset: 0x3fc, Size: 0x4]
	float GrainIntensity;//[Offset: 0x400, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 0x4]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 0x4]
	float SSVOFalloff;//[Offset: 0x43c, Size: 0x4]
	float SSVOContrast;//[Offset: 0x440, Size: 0x4]
	float TS4AONearDistanceThreshold;//[Offset: 0x444, Size: 0x4]
	float TS4AOMidDistanceThreshold;//[Offset: 0x448, Size: 0x4]
	float TS4AOFarDistanceThreshold;//[Offset: 0x44c, Size: 0x4]
	float TS4AONearRadius;//[Offset: 0x450, Size: 0x4]
	float TS4AOMidRadius;//[Offset: 0x454, Size: 0x4]
	float TS4AOFarRadius;//[Offset: 0x458, Size: 0x4]
	float TS4AOSubScaleRadius;//[Offset: 0x45c, Size: 0x4]
	float TS4AONearFalloffSq;//[Offset: 0x460, Size: 0x4]
	float TS4AOMidFalloffSq;//[Offset: 0x464, Size: 0x4]
	float TS4AOFarFalloffSq;//[Offset: 0x468, Size: 0x4]
	float TS4AONearIntensity;//[Offset: 0x46c, Size: 0x4]
	float TS4AOMidIntensity;//[Offset: 0x470, Size: 0x4]
	float TS4AOFarIntensity;//[Offset: 0x474, Size: 0x4]
	float TS4AOSubScaleIntensity;//[Offset: 0x478, Size: 0x4]
	float TS4AOSeparationDist;//[Offset: 0x47c, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x484, Size: 0x4]
	float RayTracingAOIntensity;//[Offset: 0x488, Size: 0x4]
	float RayTracingAORadius;//[Offset: 0x48c, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x490, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4a0, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x4a4, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4a8, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4ac, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4b0, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4b8, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x4c0, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x4c4, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4c8, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4cc, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4d0, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4d4, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4d8, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x4dc, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4e0, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4e4, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4e8, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ec, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4f0, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4f4, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4f8, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4fc, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x500, Size: 0x4]
	float LPVIntensity;//[Offset: 0x504, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x508, Size: 0x4]
	float LPVSize;//[Offset: 0x50c, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x510, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x514, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x518, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x51c, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x520, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x524, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x528, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x52c, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x530, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x534, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x538, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x53c, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x540, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x544, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x548, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x54c, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x550, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x554, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x555, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x556, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x558, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x55c, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x560, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x564, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x565, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x568, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x56c, Size: 0x4]
	float PathTracingFilterWidth;//[Offset: 0x570, Size: 0x4]
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574, Size: 0x1]
	float PathTracingMaxPathExposure;//[Offset: 0x578, Size: 0x4]
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57c, Size: 0x1]
	float LPVFadeRange;//[Offset: 0x580, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x584, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x588, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x590, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x630]
	PlayerState* PlayerState;//[Offset: 0x640, Size: 0x8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x7f77444
	Actor* GetViewTarget();// 0x7f77408
	void EnableModifier();// 0x7f77334
	void DisableModifier(bool bImmediate);// 0x7f77350
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x59ef218
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x59ef218

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x2a0, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x2a8, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x2b0, Size: 0x30]
	float BaseFOV;//[Offset: 0x2e0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2e8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2f8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x248, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x258, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x268, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x278, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x288, Size: 0x10]
	void ToggleActive();// 0x7fb3880
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x7fb35b4
	void SetTemplate(ParticleSystem* NewTemplate);// 0x7fb3798
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x7fb32e4
	void SetFloatParameter(FName ParameterName, float Param);// 0x7fb36a4
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x7fb34c4
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x7fb33d4
	void OnRep_bCurrentlyActive();// 0x7fb38bc
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x7fb38d8
	bool IsActive();// 0x7fb3848
	void Deactivate();// 0x7fb3894
	void Activate();// 0x7fb38a8

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4]
	float WarmupTime;//[Offset: 0x38, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x80fb0ec

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x448, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x450, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x460, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x471, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x471, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x471, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x471, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x471, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x472, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x472, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x472, Size: 0x1]
	byte LODMethod;//[Offset: 0x47d, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x47e, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x480, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x490, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x4a0, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x4b0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x4c0, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	Vector OldPosition;//[Offset: 0x4d4, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x4e0, Size: 0xc]
	float WarmupTime;//[Offset: 0x4ec, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x4f0, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x4f8, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x500, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x520, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x538, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x590, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x598, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x5a0, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x5a1, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x5a2, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x5d0, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x80fcc50
	void SetTemplate(ParticleSystem* NewTemplate);// 0x80fcfa8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x80fd050
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x80fdb9c
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x80fda54
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x80fdce0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x80fdf6c
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x80fde24
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x80fe0b0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x80fe1f4
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x80fe2ec
	int GetNumActiveParticles();// 0x80fcf74
	MaterialInterface* GetNamedMaterial(FName InName);// 0x80fca98
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x80fd29c
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x80fd140
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x80fd3f0
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x80fd6a0
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x80fd544
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x80fd7f4
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x80fd948
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x80fc8c4
	void EndTrails();// 0x80fcdd8
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x80fcb50
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x80fcdec

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x80fbecc
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x80fb908
	void SetIntParameter(FName ParameterName, int Param);// 0x80fc0c0
	void SetFloatParameter(FName ParameterName, float Param);// 0x80fbfc4
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x80fbb9c
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x80fbdd4
	void SetBoolParameter(FName ParameterName, bool Param);// 0x80fc1bc
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x80fb9c0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x80fbcdc
	void ReleaseToPool();// 0x80fb8ec
	FXSystemAsset* GetFXSystemAsset();// 0x80fbca0

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ShakeScale;//[Offset: 0x2c, Size: 0x4]
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 0x8]
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 0x8]
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x7f78914
	CameraShakePattern* GetRootShakePattern();// 0x7f789bc

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f1, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x1f4, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x1f8, Size: 0x4]
	class CameraShakeBase* CameraShake;//[Offset: 0x200, Size: 0x8]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x7f79144
	void StopAllCameraShakes(bool bImmediately);// 0x7f79094
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x7f79240
	void Start();// 0x7f793c8
	float GetAttenuationFactor(out const Vector Location);// 0x7f78fdc

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	enum PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x7f75c18
	void SetScale(float NewDuration);// 0x7f75ac8
	void SetDuration(float NewDuration);// 0x7f75b70

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x5a0]
	float BasePostProcessBlendWeight;//[Offset: 0x600, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x248, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x250, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x258, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	float AspectRatio;//[Offset: 0x26c, Size: 0x4]
	float FOVAngle;//[Offset: 0x270, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x274, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 0x5a0]
	int GetAutoActivatePlayerIndex();// 0x7f754e4

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f4, Size: 0x4]
	float OrthoWidth;//[Offset: 0x1f8, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x1fc, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x200, Size: 0x4]
	float AspectRatio;//[Offset: 0x204, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x209, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 0x5a0]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x7f767dc
	void SetProjectionMode(byte InProjectionMode);// 0x7f76738
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x7f76694
	void SetOrthoWidth(float InOrthoWidth);// 0x7f76b38
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x7f76a94
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x7f769f0
	void SetFieldOfView(float InFieldOfView);// 0x7f76bdc
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x7f76894
	void SetAspectRatio(float InAspectRatio);// 0x7f7694c
	void RemoveBlendable(interface classNone InBlendableObject);// 0x7f76278
	void OnCameraMeshHiddenChanged();// 0x7f76264
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x7f76524
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x7f763a8

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x2a4, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x2a8, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x2b0, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x2b8, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2c0, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	void TurnAtRate(float Rate);// 0x7fa71b8
	void MoveUp_World(float Val);// 0x7fa7268
	void MoveRight(float Val);// 0x7fa7318
	void MoveForward(float Val);// 0x7fa73c8
	void LookUpAtRate(float Rate);// 0x7fa7108

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x460, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x8194cec
	float GetUnscaledSphereRadius();// 0x8194c88
	float GetShapeScale();// 0x8194c48
	float GetScaledSphereRadius();// 0x8194ca4

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x46c, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x470, Size: 0x4]
	int MinLOD;//[Offset: 0x474, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x478, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x480, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x490, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x494, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x495, Size: 0x1]
	bool bPoolable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x495, Size: 0x1]
	Guid PoolHandle;//[Offset: 0x498, Size: 0x10]
	int OverriddenLightMapRes;//[Offset: 0x4a8, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x4ac, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x4b0, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x4b4, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4b8, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4c8, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4d8, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x81aa69c
	void SetReverseCulling(bool ReverseCulling);// 0x81aa2f0
	void SetForcedLodModel(int NewForcedLodModel);// 0x81aa5f4
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x81aa49c
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x81aa54c
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x81aa758
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x81aa3a0

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x248, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x254, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x260, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x278, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x288, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x298, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x2a0, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x2a8, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2b8, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2c0, Size: 0x8]
	void ShowHUD();// 0x7ff19c0
	void ShowDebugToggleSubCategory(FName Category);// 0x7ff1868
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x7ff17c0
	void ShowDebug(FName DebugType);// 0x7ff1910
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x7ff12c4
	void RemoveAllDebugStrings();// 0x7ff13c0
	void ReceiveHitBoxRelease(const FName BoxName);// 0x59ef218
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x59ef218
	void ReceiveHitBoxClick(const FName BoxName);// 0x59ef218
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x59ef218
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x59ef218
	Vector Project(Vector Location);// 0x7fef934
	void PreviousDebugTarget();// 0x7fef2fc
	void NextDebugTarget();// 0x7fef318
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x7ff10d0
	PlayerController* GetOwningPlayerController();// 0x7fef368
	Pawn* GetOwningPawn();// 0x7fef334
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x7fef564
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x7ff03c0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x7ff059c
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x7ff0e54
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x7ff0a64
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x7fef9e8
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x7fefd28
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x7feff98
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x7ff0c34
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x7fef7a8
	void AddHitBox(Vector2D position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x7fef39c
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x7ff13d4

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x7f79bac
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x7f79cf8
	Vector K2_Project(Vector WorldLocation);// 0x7f79f40
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x7f7a310
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x7f7b130
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x7f7aadc
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x7f79ff4
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x7f7a1b8
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x7f7aee0
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x7f7b420
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x7f7a468
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x7f7a5f4
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x7f79e00

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 0x10]
	void Walk();// 0x7f8dbd8
	void ViewSelf();// 0x7f8d7b4
	void ViewPlayer(FString S);// 0x7f8d6f8
	void ViewClass(class Actor DesiredClass);// 0x7f8d598
	void ViewActor(FName ActorName);// 0x7f8d648
	void UpdateSafeArea();// 0x7f8c920
	void ToggleServerStatReplicatorUpdateStatNet();// 0x7f8c934
	void ToggleServerStatReplicatorClientOverwrite();// 0x7f8c948
	void ToggleDebugCamera();// 0x7f8d36c
	void ToggleAILogging();// 0x7f8d350
	void TestCollisionDistance();// 0x7f8d008
	void Teleport();// 0x7f8dcc0
	void Summon(FString ClassName);// 0x7f8d7ec
	void StreamLevelOut(FName PackageName);// 0x7f8d388
	void StreamLevelIn(FName PackageName);// 0x7f8d4e8
	void SpawnServerStatReplicator();// 0x7f8c970
	void Slomo(float NewTimeDilation);// 0x7f8daf0
	void SetWorldOrigin();// 0x7f8cab8
	void SetMouseSensitivityToDefault();// 0x7f8ca9c
	void ServerToggleAILogging();// 0x7f8d2f4
	void ReceiveInitCheatManager();// 0x59ef218
	void ReceiveEndPlay();// 0x59ef218
	void PlayersOnly();// 0x7f8d7d0
	void OnlyLoadLevel(FName PackageName);// 0x7f8d438
	void LogLoc();// 0x7f8cacc
	void InvertMouse();// 0x7f8ca80
	void God();// 0x7f8dba0
	void Ghost();// 0x7f8dbbc
	void FreezeFrame(float Delay);// 0x7f8dcdc
	void Fly();// 0x7f8dbf4
	void FlushLog();// 0x7f8cae8
	void EnableDebugCamera();// 0x7f8c904
	void DumpVoiceMutingState();// 0x7f8cf98
	void DumpPartyState();// 0x7f8cfd0
	void DumpOnlineSessionState();// 0x7f8cfec
	void DumpChatState();// 0x7f8cfb4
	void DisableDebugCamera();// 0x7f8c8e8
	void DestroyTarget();// 0x7f8da24
	void DestroyServerStatReplicator();// 0x7f8c95c
	void DestroyPawns(class Pawn aClass);// 0x7f8d8a8
	void DestroyAllPawnsExceptTarget();// 0x7f8d958
	void DestroyAll(class Actor aClass);// 0x7f8d974
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x7f8d1e0
	void DebugCapsuleSweepPawn();// 0x7f8d040
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x7f8d078
	void DebugCapsuleSweepClear();// 0x7f8d024
	void DebugCapsuleSweepChannel(byte Channel);// 0x7f8d130
	void DebugCapsuleSweepCapture();// 0x7f8d05c
	void DebugCapsuleSweep();// 0x7f8d2d8
	void DamageTarget(float DamageAmount);// 0x7f8da40
	void CheatScript(FString ScriptName);// 0x7f8c984
	void ChangeSize(float F);// 0x7f8dc10
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x7f8cb04
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x7f8cd78
	void BugIt(FString ScreenShotDescription);// 0x7f8ccbc

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x595, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x595, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x595, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x595, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x595, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x595, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x595, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x595, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x598, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5a0, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5a8, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5b0, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x638, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x640, Size: 0x8]
	float SpeedScale;//[Offset: 0x648, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x64c, Size: 0x4]
	float InitialAccel;//[Offset: 0x650, Size: 0x4]
	float InitialDecel;//[Offset: 0x654, Size: 0x4]
	void ToggleDisplay();// 0x7f9f2e8
	void ShowDebugSelectedInfo();// 0x7f9f2fc
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x7f9f20c
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x59ef218
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x59ef218
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x59ef218
	Actor* GetSelectedActor();// 0x7f9f2b4

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x448, Size: 0x4]
	float FrustumAngle;//[Offset: 0x44c, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x450, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x454, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x458, Size: 0x4]
	Texture* Texture;//[Offset: 0x460, Size: 0x8]

--------------------------------
Class: CheatManagerExtension.Object

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* owningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1510, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1bb0, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x700, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x248, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x258, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x260, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x268, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x270, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x278, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x280, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x288, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x290, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x298, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x2a0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x2a8, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x2b0, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x2b8, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1]
	void StartPlay();// 0x7fd6290
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x7fd55f8
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x7fd54cc
	bool ShouldReset(Actor* ActorToReset);// 0x7fd6154
	void ReturnToMainMenuHost();// 0x7fd611c
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x7fd56f8
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x7fd581c
	void RestartPlayer(Controller* NewPlayer);// 0x7fd5914
	void ResetLevel();// 0x7fd6138
	bool PlayerCanRestart(PlayerController* Player);// 0x7fd59c4
	bool MustSpectate(PlayerController* NewPlayerController);// 0x7fd5fb0
	void K2_PostLogin(PlayerController* NewPlayer);// 0x59ef218
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x59ef218
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x59ef218
	void K2_OnLogout(Controller* ExitingController);// 0x59ef218
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x59ef218
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x7fd5a80
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x7fd53d4
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x7fd5324
	bool HasMatchStarted();// 0x7fd6250
	bool HasMatchEnded();// 0x7fd6210
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x7fd606c
	int GetNumSpectators();// 0x7fd62ac
	int GetNumPlayers();// 0x7fd62e8
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x7fd6324
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x7fd5b88
	Actor* ChoosePlayerStart(Controller* Player);// 0x7fd5c98
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x7fd5d50
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x7fd5eac

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x248, Size: 0x4]
	int MaxPlayers;//[Offset: 0x24c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x250, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x254, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1]
	FName SessionName;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x248, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x250, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x258, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x260, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x274, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x278, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x27c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x7fe8368
	void OnRep_ReplicatedWorldTimeSeconds();// 0x7fe8330
	void OnRep_ReplicatedHasBegunPlay();// 0x7fe834c
	void OnRep_GameModeClass();// 0x7fe8384
	bool HasMatchStarted();// 0x7fe8550
	bool HasMatchEnded();// 0x7fe8510
	bool HasBegunPlay();// 0x7fe8590
	float GetServerWorldTimeSeconds();// 0x7fe85d0
	float GetPlayerStartTime(Controller* Controller);// 0x7fe8458
	float GetPlayerRespawnDelay(Controller* Controller);// 0x7fe83a0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	uint32 Channels;//[Offset: 0x24c, Size: 0x4]
	uint32 InRate;//[Offset: 0x250, Size: 0x4]
	uint32 OutRate;//[Offset: 0x254, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x25c, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x260, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x264, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x268, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x26c, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x270, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x274, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x278, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x27c, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x280, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x284, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x288, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x28c, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x290, Size: 0x4]
	uint32 InPackets;//[Offset: 0x294, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x298, Size: 0x4]
	uint32 InBunches;//[Offset: 0x29c, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x2a0, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x2a4, Size: 0x4]
	uint32 InLoss;//[Offset: 0x2a8, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x2ac, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x2b0, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x2b4, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2b8, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2bc, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2d8, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2dc, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2e0, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2e4, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2e8, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2ec, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2f0, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2f4, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2f8, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2fc, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x300, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x304, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x308, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x248, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x24c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x250, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x254, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x258, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x25c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x260, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x264, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x268, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x270, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x274, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x278, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x27c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x280, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x284, Size: 0x4]
	float MoveRepSize;//[Offset: 0x288, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x28c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x290, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x294, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x298, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x29c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x2a0, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x2a4, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x2a8, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x2ac, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2b0, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x2b4, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2b8, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2bc, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2c0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2c8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2cc, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2d0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2d8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2dc, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2e0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2e4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4]
	float GainHF;//[Offset: 0x30, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float LateDelay;//[Offset: 0x3c, Size: 0x4]
	float DecayTime;//[Offset: 0x40, Size: 0x4]
	float Density;//[Offset: 0x44, Size: 0x4]
	float Diffusion;//[Offset: 0x48, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4]
	float LateGain;//[Offset: 0x54, Size: 0x4]
	float Gain;//[Offset: 0x58, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x248, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x250, Size: 0x8]
	float PlayRate;//[Offset: 0x258, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x260, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x264, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x264, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x264, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x264, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x268, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x270, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x288, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x298, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1]
	float InterpPosition;//[Offset: 0x2ac, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x2b4, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2b8, Size: 0x10]
	delegate OnStop;//[Offset: 0x2c8, Size: 0x10]
	delegate OnPause;//[Offset: 0x2d8, Size: 0x10]
	void Stop();// 0x80c75a4
	void SetPosition(float NewPosition, bool bJump);// 0x80c7470
	void SetLoopingState(bool bNewLooping);// 0x80c739c
	void Reverse();// 0x80c7588
	void Play();// 0x80c75c0
	void Pause();// 0x80c756c
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x80c7244
	void ChangePlaybackDirection();// 0x80c7454

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float TimeStamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x200, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x7f8f3f8

--------------------------------
Class: Interface.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x460, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x59ef218
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x808ac38
	bool RemoteEvent(FName EventName);// 0x808ae20
	void LevelReset();// 0x59ef218

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x250, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x258, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x260, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x448, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1]
	float ScreenSize;//[Offset: 0x454, Size: 0x4]
	float U;//[Offset: 0x458, Size: 0x4]
	float UL;//[Offset: 0x45c, Size: 0x4]
	float V;//[Offset: 0x460, Size: 0x4]
	float VL;//[Offset: 0x464, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x7f54640
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x7f54468
	void SetSprite(Texture2D* NewSprite);// 0x7f547cc

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8]
	LoadAttribute[] LoadAttributes;//[Offset: 0x148, Size: 0x10]
	bool ShouldBeLoaded();// 0x808b8ac
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x808bbf8
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x808bb40
	void SetPriority(int NewPriority);// 0x808b9f0
	void SetLevelLODIndex(int LODIndex);// 0x808ba98
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x808b920
	bool IsStreamingStatePending();// 0x808b7fc
	bool IsLevelVisible();// 0x808b858
	bool IsLevelLoaded();// 0x808b834
	FName GetWorldAssetPackageFName();// 0x808b8ec
	Level* GetLoadedLevel();// 0x808b890
	LevelScriptActor* GetLevelScriptActor();// 0x808b70c
	bool GetIsRequestingUnloadAndRemoval();// 0x808b9d0
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x808b740

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x280, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x291, Size: 0x1]

--------------------------------
Class: LoadAttribute
	FName Category;//[Offset: 0x0, Size: 0x8]
	int Value;//[Offset: 0x8, Size: 0x4]
	<int> Values;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x858, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xa04, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa28, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa40, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x7f53b4c
	int GetObjectCount();// 0x7f53c80
	int GetNewAvoidanceUID();// 0x7f53c4c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x7f53a90

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ODWorldSettings.WorldSettings.Info.Actor.Object
	Vector2D[] LevelBoundaries;//[Offset: 0x3f0, Size: 0x10]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x400, Size: 0x8]
	bool bAreBotsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	GameplayTag MapSoundtrack;//[Offset: 0x40c, Size: 0x8]
	AudioEvent MapAmbience;//[Offset: 0x418, Size: 0x10]
	bool IsActorWithinMainBounds(const Actor* ActorToCheck);// 0x5553ca8
	AkAudioEvent* GetMapAmbienceEvent(bool bGetStopEvent);// 0x5553bec
	int GetEditorStartingSector();// 0x5553bd0

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AudioEvent
	AkAudioEvent* StartEvent;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* StopEvent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x4b74bfc
	float GetMaximumDuration();// 0x4b74bc8
	float GetMaxAttenuationRadius();// 0x4b74c68
	bool GetIsInfinite();// 0x4b74c30

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] userData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]
	FString BankLanguage;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: BP_ODPlayerController_C.ODPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb80, Size: 0x8]
	Vector2D PendingMove;//[Offset: 0xb88, Size: 0x8]
	bool ForceUpdatePendingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]
	bool bPressingLeftFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 0x1]
	bool bPressingRightFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb92, Size: 0x1]
	ODPlayerSettingsSubsystem* PlayerSettings;//[Offset: 0xb98, Size: 0x8]
	bool bPressingAutoAdsLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]
	bool bPressingAutoAdsRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba1, Size: 0x1]
	PostProcessComponent* RivalCameraPPComp;//[Offset: 0xba8, Size: 0x8]
	SkeletalMeshComponent* LastHighlightedKiller;//[Offset: 0xbb0, Size: 0x8]
	byte HelicopterControlType;//[Offset: 0xbb8, Size: 0x1]
	bool bHelicopterControlInvertUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb9, Size: 0x1]
	bool bHelicopterAngleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbba, Size: 0x1]
	byte HelicopterYawControlType;//[Offset: 0xbbb, Size: 0x1]
	byte HelicopterCurveControlType;//[Offset: 0xbbc, Size: 0x1]
	byte HelicopterModeControlType;//[Offset: 0xbbd, Size: 0x1]
	SkeletalMeshComponent* LastHighlightedWeapon;//[Offset: 0xbc0, Size: 0x8]
	void ApplyDeadZone(float RawAxisValue, out float AxisValue, float CallFunc_MapRangeClamped_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue);// 0x59ef218
	void OnSettingsChanged(out const ProfileSettings_BoolProfileSetting InPlayerSetting, ProfileSettings_BoolProfileSetting PlayerSetting, FString ID, ProfileSettings_BoolProfileSetting CallFunc_GetOrAddBoolPlayerSettingById_OutSetting, bool CallFunc_GetOrAddBoolPlayerSettingById_ReturnValue, ProfileSettings_BoolProfileSetting CallFunc_GetOrAddBoolPlayerSettingById_OutSetting, bool CallFunc_GetOrAddBoolPlayerSettingById_ReturnValue, FString CallFunc_GetAutoAdsRightFireButtonId_ReturnValue, FString CallFunc_GetAutoAdsLeftFireButtonId_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x59ef218
	void UpdateFirePress();// 0x59ef218
	void UpdateFireRelease(bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x59ef218
	void ShouldAutoAdsLeft(out bool bValue, FString CallFunc_GetAutoAdsLeftFireButtonId_ReturnValue, ProfileSettings_BoolProfileSetting CallFunc_GetOrAddBoolPlayerSettingById_OutSetting, bool CallFunc_GetOrAddBoolPlayerSettingById_ReturnValue);// 0x59ef218
	void UpdateAutoAdsRelease(bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x59ef218
	void UpdateAutoAdsPress();// 0x59ef218
	void ShouldAutoAdsRight(out bool bValue, FString CallFunc_GetAutoAdsRightFireButtonId_ReturnValue, ProfileSettings_BoolProfileSetting CallFunc_GetOrAddBoolPlayerSettingById_OutSetting, bool CallFunc_GetOrAddBoolPlayerSettingById_ReturnValue);// 0x59ef218
	void TryGetCharacter(out BP_ODCharacter_C* AsBP ODCharacter, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_ODCharacter_C* K2Node_DynamicCast_AsBP_ODCharacter, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	void Get Weapon Component(out SoldierKitComponent* Loadout Component, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, BaseKitComponent* CallFunc_GetKitComponentNonConst_ReturnValue, bool CallFunc_IsValid_ReturnValue, SoldierKitComponent* K2Node_DynamicCast_AsSoldier_Kit_Component, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	void InpActEvt_FireWeapon_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_FireWeapon_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Use_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Sprint_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Use_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Crouch_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Prone_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Jump_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwapToPrimary_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwapToSecondary_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwapToGrenade_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwapToGadget_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwapToMelee_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwitchFireMode_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_ToggleZoom_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwitchView_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SwapWeapons_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Reload_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x59ef218
	void InpActEvt_DEBUG_ForceRevive_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_DEBUG_PingCrosshair_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_DEBUG_PingMap_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_DEBUG_PingSelf_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void InpActEvt_SkipCutscene_K2Node_InputActionEvent(Key Key);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void Reload Clicked();// 0x59ef218
	void Bind Delegates();// 0x59ef218
	void User Updated Settings();// 0x59ef218
	void OnC4PlacePressed();// 0x59ef218
	void Weapon Swap Button Clicked();// 0x59ef218
	void Grenade Swap Button Clicked();// 0x59ef218
	void Gadget Swap Button Clicked();// 0x59ef218
	void Melee Swap Button Pressed();// 0x59ef218
	void Crouch Clicked();// 0x59ef218
	void Jump Clicked();// 0x59ef218
	void Enter Vehicle Clicked();// 0x59ef218
	void Exit Vehicle Clicked();// 0x59ef218
	void Switch View Clicked();// 0x59ef218
	void Zoom Clicked();// 0x59ef218
	void Prone Clicked();// 0x59ef218
	void StandClicked();// 0x59ef218
	void AutoRunClicked();// 0x59ef218
	void VehicleEnterSeatButtonClicked(VehicleSeatComponent* VehicleSeat);// 0x59ef218
	void OOBEnter(float DisplayTime);// 0x59ef218
	void OOBExit();// 0x59ef218
	void OpenParachuteClicked();// 0x59ef218
	void DetachParachuteClicked();// 0x59ef218
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void PrimarySwapButtonClicked();// 0x59ef218
	void SecondarySwapButtonClicked();// 0x59ef218
	void Interact Clicked();// 0x59ef218
	void ReviveSoldier(bool bForceRevive);// 0x59ef218
	void AcceptReviveClicked();// 0x59ef218
	void OnSwitchFireModeClicked();// 0x59ef218
	void LeftFire Pressed();// 0x59ef218
	void RightFire Pressed();// 0x59ef218
	void LeftFire Released();// 0x59ef218
	void RightFire Released();// 0x59ef218
	void Melee Swap Button Released();// 0x59ef218
	void ClearKillCamTargetHighlight(CameraActor* KillCamera);// 0x59ef218
	void SetupKillCamTargetHighlight(CameraActor* KillCamera, SkeletalMeshComponent* TargetMeshToHighlight, SkeletalMeshComponent* WeaponMesh);// 0x59ef218
	void OnC4PlaceReleased();// 0x59ef218
	void InpAxisEvt_MoveForwardJoystick_K2Node_InputAxisEvent(float AxisValue);// 0x59ef218
	void InpAxisEvt_MoveRightJoystick_K2Node_InputAxisEvent(float AxisValue);// 0x59ef218
	void InpAxisEvt_TurnRightJoystick_K2Node_InputAxisEvent(float AxisValue);// 0x59ef218
	void InpAxisEvt_TurnUpJoystick_K2Node_InputAxisEvent(float AxisValue);// 0x59ef218
	void OnTraversalClicked();// 0x59ef218
	void On Cutscene Skip Button Clicked();// 0x59ef218
	void ExecuteUbergraph_BP_ODPlayerController(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, ODPlayerSettingsSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ODPlayerSettingsSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, FString CallFunc_Concat_StrStr_ReturnValue, Key K2Node_InputKeyEvent_Key, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputActionEvent_Key, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, GameInstance* CallFunc_GetGameInstance_ReturnValue, ODGameInstance* K2Node_DynamicCast_AsODGame_Instance, bool K2Node_DynamicCast_bSuccess, ODGlobalUIMessageObject* CallFunc_GetGlobalUIMessageObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsLocalPlayerController_ReturnValue, VehicleSeatComponent* K2Node_CustomEvent_VehicleSeat, float K2Node_CustomEvent_DisplayTime, float K2Node_Event_DeltaSeconds, float CallFunc_VSize2DSquared_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_K2_GetPawn_ReturnValue, ODCharacter* K2Node_DynamicCast_AsODCharacter, bool K2Node_DynamicCast_bSuccess, VehicleSeatComponent* CallFunc_GetVehicleSeatNonConst_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool K2Node_CustomEvent_bForceRevive, BP_ODCharacter_C* K2Node_DynamicCast_AsBP_ODCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_ShouldAutoAdsRight_bValue, bool CallFunc_ShouldAutoAdsLeft_bValue, bool CallFunc_ShouldAutoAdsLeft_bValue, bool CallFunc_ShouldAutoAdsRight_bValue, delegate K2Node_CreateDelegate_OutputDelegate, CameraActor* K2Node_Event_KillCamera, CameraActor* K2Node_Event_KillCamera, SkeletalMeshComponent* K2Node_Event_TargetMeshToHighlight, SkeletalMeshComponent* K2Node_Event_WeaponMesh, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, bool CallFunc_GetIsInADS_ReturnValue, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, bool CallFunc_GetIsInADS_ReturnValue, float K2Node_InputAxisEvent_AxisValue, float K2Node_InputAxisEvent_AxisValue, float CallFunc_ApplyDeadZone_AxisValue, float CallFunc_ApplyDeadZone_AxisValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float K2Node_InputAxisEvent_AxisValue, float K2Node_InputAxisEvent_AxisValue, float CallFunc_ApplyDeadZone_AxisValue, float CallFunc_ApplyDeadZone_AxisValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, const Transform Temp_struct_Variable, BPC_CombatAudioEvents_C* CallFunc_AddComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, enum CallFunc_GetStance_ReturnValue, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_GetStance_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, bool CallFunc_GetIsInADS_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetBlueprintCallstack_ReturnValue, ODCharacter* CallFunc_K2_GetCharacterNonConstSlow_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameInstance* CallFunc_GetGameInstance_ReturnValue, ODGameInstance* K2Node_DynamicCast_AsODGame_Instance, bool K2Node_DynamicCast_bSuccess, ODGlobalUIMessageObject* CallFunc_GetGlobalUIMessageObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsInEditor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_IsInEditor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, ODTutorialGameState* K2Node_DynamicCast_AsODTutorial_Game_State, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x59ef218

--------------------------------
Class: ODPlayerController.PlayerController.Controller.Actor.Object
	ImpactHitResult DebugLastHitResult;//[Offset: 0x638, Size: 0xa0]
	delegate OnClientPredictedWeaponHit;//[Offset: 0x6d8, Size: 0x10]
	delegate OnClientVerifiedWeaponHit;//[Offset: 0x6e8, Size: 0x10]
	delegate OnClientRejectedWeaponHit;//[Offset: 0x6f8, Size: 0x10]
	delegate OnClientPredictedCriticalHit;//[Offset: 0x708, Size: 0x10]
	delegate OnClientVerifiedCriticalHit;//[Offset: 0x718, Size: 0x10]
	delegate OnPossessCharacter;//[Offset: 0x728, Size: 0x10]
	delegate OnPossessPawn;//[Offset: 0x738, Size: 0x10]
	delegate OnPossessVehicleSeat;//[Offset: 0x748, Size: 0x10]
	delegate OnPlayerOutOfBoundsUpdated;//[Offset: 0x758, Size: 0x10]
	delegate OnUpdatePrimaryCharacter;//[Offset: 0x780, Size: 0x10]
	delegate OnUpdatePlayerState;//[Offset: 0x790, Size: 0x10]
	delegate OnPlayerSpawned;//[Offset: 0x7a0, Size: 0x10]
	delegate OnPlayerLogout;//[Offset: 0x7b0, Size: 0x10]
	delegate OnCutsceneSkipped;//[Offset: 0x7c0, Size: 0x10]
	class UserWidget* CombatUIClass;//[Offset: 0x7d0, Size: 0x28]
	class MovementJoystickWidget* PlayerMoveJoystickWidget;//[Offset: 0x7f8, Size: 0x8]
	class JoystickWidget* PlayerAimJoystickWidget;//[Offset: 0x800, Size: 0x8]
	bool bPlayerSettingsAimAssistEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	bool bPlayerSettingsInvertAimYAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 0x1]
	bool bPlayerSettingsInvertAimXAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80a, Size: 0x1]
	float PlayerSettingsBaseAimSensitivityMultiplier;//[Offset: 0x80c, Size: 0x4]
	float PlayerSettingsADSAimSensitivityMultiplier;//[Offset: 0x810, Size: 0x4]
	float PlayerSettingsYawSensitivityMultiplier;//[Offset: 0x814, Size: 0x4]
	float PlayerSettingsPitchSensitivityMultiplier;//[Offset: 0x818, Size: 0x4]
	bool bPlayerSettingsUseGyroHipfire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 0x1]
	float PlayerSettingsGyroHipfireYawSensitivityMultiplier;//[Offset: 0x820, Size: 0x4]
	float PlayerSettingsGyroHipfirePitchSensitivityMultiplier;//[Offset: 0x824, Size: 0x4]
	bool bPlayerSettingsUseGyroADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 0x1]
	float PlayerSettingsGyroADSYawSensitivityMultiplier;//[Offset: 0x82c, Size: 0x4]
	float PlayerSettingsGyroADSPitchSensitivityMultiplier;//[Offset: 0x830, Size: 0x4]
	bool bPlayerSettingsInvertGyroYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 0x1]
	bool bPlayerSettingsInvertGyroPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x835, Size: 0x1]
	float PlayerSettingsGyroSmoothingThreshold;//[Offset: 0x838, Size: 0x4]
	bool bPlayerSettingsUseGyroVehicleControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1]
	float GyroSensitivityScaleFactor;//[Offset: 0x840, Size: 0x4]
	UserWidget* CombatUI;//[Offset: 0x848, Size: 0x8]
	MovementJoystickWidget* MovementJoystickWidget;//[Offset: 0x850, Size: 0x8]
	JoystickWidget* AimJoystickWidget;//[Offset: 0x858, Size: 0x8]
	ODControllerDefaultsDataAsset* ControllerDefaultsDataAsset;//[Offset: 0x860, Size: 0x8]
	PrimaryPawnDeath PrimaryPawnDeath;//[Offset: 0x868, Size: 0x30]
	PrimaryPawnPrespawn PrimaryPawnPrespawn;//[Offset: 0x8a0, Size: 0x40]
	ODCheatManager* ODCheatManager;//[Offset: 0x8e0, Size: 0x8]
	PlayerHUDComponent* PlayerHUD;//[Offset: 0x8e8, Size: 0x8]
	ServerPlayerLoadoutComponent* ServerPlayerLoadoutComponent;//[Offset: 0x8f0, Size: 0x8]
	ServerPlayerAssignmentComponent* ServerPlayerAssignmentComponent;//[Offset: 0x8f8, Size: 0x8]
	AssignmentsCharacterDebugComponent* AssignmentsCharacterDebugComponent;//[Offset: 0x900, Size: 0x8]
	AkComponent* AudioComponent;//[Offset: 0x908, Size: 0x8]
	class Controller* AIControllerClassToSpawn;//[Offset: 0x928, Size: 0x8]
	ODSaveGame* PlayerSaveGame;//[Offset: 0x938, Size: 0x8]
	ODCharacter* PrimaryCharacter;//[Offset: 0x948, Size: 0x8]
	ODCharacter* DeadPrimaryCharacter;//[Offset: 0x950, Size: 0x8]
	VehicleSeatComponent* VehicleSeatComponent;//[Offset: 0x958, Size: 0x8]
	enum CameraState;//[Offset: 0x968, Size: 0x1]
	<enum,AkAudioEvent*> AudioEventForCameraStateTransition;//[Offset: 0x970, Size: 0x50]
	bool bCameraRotationAnimationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	float PrespawnCameraOffsetBehindPlayer;//[Offset: 0x9c4, Size: 0x4]
	Vector PrespawnCameraOffsetToHeadFromPlayerLocation;//[Offset: 0x9c8, Size: 0xc]
	Rotator PrespawnCameraRotation;//[Offset: 0x9d4, Size: 0xc]
	Rotator PrevControlRotation;//[Offset: 0x9f4, Size: 0xc]
	float MaxPhysicsDelayUntilDisconnect;//[Offset: 0xa00, Size: 0x4]
	PlayerInputComponent* PlayerInputComponent;//[Offset: 0xa10, Size: 0x8]
	DamageArbitrationComponent* DamageArbitrationComponent;//[Offset: 0xa18, Size: 0x8]
	DestructionArbitrationComponent* DestructionArbitrationComponent;//[Offset: 0xa20, Size: 0x8]
	BallisticsReplicationActor* BallisticsReplicationActor;//[Offset: 0xa28, Size: 0x8]
	bool bResetAutoRunOnBeginTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	bool bNeedsMapStartSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa32, Size: 0x1]
	bool bIsAutoRunEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa33, Size: 0x1]
	FiringTypePlayerSettings[] PlayerFiringTypeSettings;//[Offset: 0xa38, Size: 0x10]
	interface class None* CurrentPawnInputInterface;//[Offset: 0xaa0, Size: 0x10]
	class UserWidget* AssignmentsDebuggingWidgetClass;//[Offset: 0xb08, Size: 0x8]
	UserWidget* AssignmentsDebuggingWidget;//[Offset: 0xb10, Size: 0x8]
	class UserWidget* GiveEquipmentDebuggingWidgetClass;//[Offset: 0xb18, Size: 0x8]
	UserWidget* GiveEquipmentWidget;//[Offset: 0xb20, Size: 0x8]
	bool bCanUseAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28, Size: 0x1]
	void UpdatePlayerSettings();// 0x550073c
	void UnmarkCurrentObjective();// 0x55007c8
	void SnapToControlRotation(out const Rotator ClientAuthControlRotation);// 0x54ff368
	void SkipCutscene();// 0x54ff68c
	void ShowGiveEquipmentMenu();// 0x54ff07c
	void ShowAssignmentsDebuggingMenu();// 0x54fefdc
	void SetupKillCamTargetHighlight(CameraActor* KillCamera, SkeletalMeshComponent* TargetMeshToHighlight, SkeletalMeshComponent* WeaponMesh);// 0x59ef218
	void SetMoveJoystickEnabled(bool bEnabled);// 0x55002fc
	void SetIsAutoRunEnabled(bool bEnableAutoRun);// 0x54ffa50
	void ServerUpdateSelectedLoadoutIndex(FString SoldierClassName, int InLoadoutIndex);// 0x54fdd3c
	void ServerSkipCutscene();// 0x54ff630
	void ServerSetTimeDilation(float TimeDilation);// 0x54fe154
	void ServerSetMarkedObjective(MarkableObjectiveComponent* Objective);// 0x54fec3c
	void ServerSetIsClientBot(bool bIsBot);// 0x54feb48
	void ServerSetEnableBotVisualDebug(bool bEnableVisualDebug, int BotDebugComponentId);// 0x54fea10
	void ServerRespondToBootcampPrompt(BootcampManager* ManagerToRespondTo, bool bResponse);// 0x54fe8cc
	void ServerOnPrimaryCharacterEndPlay(ODCharacter* InCharacter);// 0x54fdc94
	void ServerOn3DPing(const Vector WorldLocation, Actor* Actor, enum PingType);// 0x54fe23c
	void ServerHandleUpdatedFiringTypeSettings(const FiringTypePlayerSettings[] NewSettings);// 0x54fdf78
	void ServerForceRespawn();// 0x5500d28
	void ServerForceEnterVehicle(ODVehicle* Vehicle);// 0x5500a30
	void ServerEnqueueDestructionCollisionDamage(Actor* DestructibleParent, const int ComponentId, const ODCollisionHit CollisionHit, const int CommandId);// 0x54ff868
	void ServerEnableCheats();// 0x54fed38
	void ServerCommands(const PlayerCommands Commands);// 0x5500b18
	void ServerAttemptSpawnWithProvider(Object* ProviderAsObject);// 0x54ff418
	void ReleasedInput(const GameplayTag Tag);// 0x54fff7c
	void PublishFTUEStepStartedEvent(out const FName TutorialStepID, int StepNum);// 0x54ff0a4
	void PublishFTUEEndedEvent();// 0x54ff090
	void PressedInput(const GameplayTag Tag);// 0x550002c
	void PlayerRequestResponseToBootcampPrompt(BootcampManager* ManagerSendingRequest);// 0x54ff2c0
	void OnSelfPing(enum PingType);// 0x54fe678
	void OnRotationInput(Vector RotationRateInput);// 0x54ffed4
	void OnRep_VehicleSeat(VehicleSeatComponent* PrevVehicleSeatComponent);// 0x54fef2c
	void OnRep_PrimaryPawnPrespawn(out const PrimaryPawnPrespawn LastPrimaryPawnPrespawn);// 0x54fed94
	void OnRep_PrimaryPawnDeath();// 0x54fee70
	void OnRep_PrimaryPawn(ODCharacter* PrevPrimaryCharacter);// 0x54fee84
	void OnRep_ODCheatManager();// 0x54fed24
	void OnPredictedSuccessfulHit(out const Actor*[] HitActors, bool bWasCriticalHit, float PredictedDamage);// 0x54ffd4c
	void OnPlayerWantsSpawn(interface classNone SpawnProvider);// 0x54fe720
	void OnMatchPhaseChanged(enum PreviousMatchState, enum CurrentMatchState);// 0x5500dc0
	void OnFloatSettingUpdated(out const ProfileSettings_FloatRangeProfileSetting Setting, float ComputedValue);// 0x55005ec
	void OnCrosshairPing(enum PingType);// 0x54fe5d0
	void OnBoolSettingUpdated(out const ProfileSettings_BoolProfileSetting Setting);// 0x5500510
	void On3DPing(out const Vector WorldLocation, Actor* Actor, enum PingType);// 0x54fe3c0
	void MovementJoystickInput(out const Vector2D Direction);// 0x5500244
	void MoveInputFinished();// 0x54ff19c
	void MoveInputBegan();// 0x54ff1b0
	void MoveInput(out const Vector2D MoveInput, bool bIsSprinting);// 0x54ff1c4
	void MarkObjective(MarkableObjectiveComponent* Objective);// 0x55007dc
	void LookJoystickInput(out const Vector2D LookInput);// 0x550018c
	void LogCurrentTrackedStats();// 0x54fe034
	void LoadPlayerSettings();// 0x5500714
	ODCharacter* K2_GetCharacterNonConstSlow();// 0x54ff004
	bool IsInAnyVehicle();// 0x5500c4c
	void HandleSelectedLoadoutIndexChanged(FString SoldierClassName, int InLoadoutIndex);// 0x54fde78
	void HandleOnVehicleUpReleased();// 0x54ff6c8
	void HandleOnVehicleUpPressed();// 0x54ff6dc
	void HandleOnVehicleDPadReleased(enum InReleasedButton);// 0x54ff718
	void HandleOnVehicleDPadPressed(enum InPressedButton);// 0x54ff7c0
	void HandleOnVehicleDownReleased();// 0x54ff6a0
	void HandleOnVehicleDownPressed();// 0x54ff6b4
	void HandleOnVehicleBrakeReleased();// 0x54ff6f0
	void HandleOnVehicleBrakePressed();// 0x54ff704
	VehicleSeatComponent* GetVehicleSeatNonConst();// 0x5500750
	ODCharacter* GetPrimaryCharacterNonConst();// 0x550078c
	enum GetPredictedSpawnOutcome();// 0x54fe7e8
	FString GetPlayerId();// 0x5500c70
	bool GetNeedsMapStartSpawn();// 0x5500eb4
	MovementJoystickWidget* GetMovementStickWidgetNonConst();// 0x54ff51c
	ODCameraInfo GetLocalCameraInfo();// 0x55004a0
	BaseKitComponent* GetKitComponentNonConst();// 0x5501090
	bool GetIsAutoRunEnabled();// 0x54ffafc
	GenericTeamId GetGenericTeamId();// 0x5500d84
	CameraComponent* GetCurrentCameraComponent();// 0x550046c
	ODPlayerCameraManager* GetCameraManager();// 0x5500fa8
	ODAIBotAutomatedTestComponent* GetBotAutomatedTestComponentNonConst();// 0x54ffea0
	JoystickWidget* GetAimStickWidgetNonConst();// 0x54ff500
	void GetActorsToIgnore(out Actor*[] ActorsToIgnore);// 0x55003ac
	void EnterVehicle(ODVehicle* Vehicle);// 0x5500980
	void DisconnectPlayer();// 0x54feff0
	void ClientVerifiedSuccessfulHit(const Actor*[] HitActors, bool bWasCriticalHit, float DamageDealt);// 0x54ffbfc
	void ClientUpdateSaturationAnalytics(float ServerPercentSaturated, float ServerRPCBufferOverflowPercent);// 0x54fe048
	void ClientSwitchedTeams(GenericTeamId NewTeam);// 0x5500fdc
	void ClientRejectedHit(const Actor*[] HitActors);// 0x54ffb18
	void ClientOnSpawnRequestFailed(enum SpawnOutcome);// 0x54fe81c
	void ClickedInput(const GameplayTag Tag);// 0x55000dc
	void ClearKillCamTargetHighlight(CameraActor* KillCamera);// 0x59ef218
	void CheckIfPingHit(out const HitResult Hit);// 0x54fe500
	void ChangeNetProfile(out const FName InProfile);// 0x5500ef4
	void BroadcastServerSaturationAnalytics();// 0x54fe140
	void AuthorityForceExitVehicleImmediate(out const Vector WorldLocation, out const Rotator WorldRotation);// 0x5500884
	void AssignPlayerSettingDelegates();// 0x5500728
	void AddFakeTouch(int TouchIndex, out const Vector2D TouchLocation);// 0x54ff538

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: ProfileSettings_BoolProfileSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	bool bValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ProtoMessage

--------------------------------
Class: BP_ODCharacter_C.ODCharacter.Soldier.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd50, Size: 0x8]
	MarkableObjectiveComponent* MarkableObjective;//[Offset: 0xd58, Size: 0x8]
	AIPerceptionStimuliSourceComponent* AIPerceptionStimuliSource;//[Offset: 0xd60, Size: 0x8]
	float Timeline_1_TimeRemaining_A77BEDC842174E37D0394699FA4F5FE9;//[Offset: 0xd68, Size: 0x4]
	byte Timeline_1__Direction_A77BEDC842174E37D0394699FA4F5FE9;//[Offset: 0xd6c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0xd70, Size: 0x8]
	float Timeline_0_TimeRemaining_BCFF068B44A7D266B565AEB393F704B1;//[Offset: 0xd78, Size: 0x4]
	byte Timeline_0__Direction_BCFF068B44A7D266B565AEB393F704B1;//[Offset: 0xd7c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0xd80, Size: 0x8]
	delegate OnPlayerEnterOrExitVehicle;//[Offset: 0xd88, Size: 0x10]
	bool bDisableSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 0x1]
	bool JumpCooldownActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd99, Size: 0x1]
	float JumpCooldownTime;//[Offset: 0xd9c, Size: 0x4]
	bool bScreenFXInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 0x1]
	MaterialInstanceDynamic* PlayerHealthScreenFX;//[Offset: 0xda8, Size: 0x8]
	MaterialInstanceDynamic* PlayerDeathScreenFX;//[Offset: 0xdb0, Size: 0x8]
	MaterialInstanceDynamic* ExplosionScreenFX;//[Offset: 0xdb8, Size: 0x8]
	class MatineeCameraShake* Explosion Hit Camera Shake;//[Offset: 0xdc0, Size: 0x8]
	class MatineeCameraShake* Bullet Hit Camera Shake;//[Offset: 0xdc8, Size: 0x8]
	float Min Speed for Ragdoll Impact Sounds;//[Offset: 0xdd0, Size: 0x4]
	float Min Time Between Ragdoll Impact Sounds;//[Offset: 0xdd4, Size: 0x4]
	CurveFloat* HealthScreenFXCurve;//[Offset: 0xdd8, Size: 0x8]
	CharacterDamagedAudioData DamagedAudioData;//[Offset: 0xde0, Size: 0x18]
	CharacterCollisionAudioData CollisionAudioData;//[Offset: 0xdf8, Size: 0x28]
	SpotParams Ping Spot Info;//[Offset: 0xe20, Size: 0x10]
	AkAudioEvent* Enter Water Audio Event;//[Offset: 0xe30, Size: 0x8]
	AkAudioEvent* Exit Water Audio Event;//[Offset: 0xe38, Size: 0x8]
	AkAudioEvent* Take Damage Audio Event;//[Offset: 0xe40, Size: 0x8]
	AkAudioEvent* Hit Marker Audio Event;//[Offset: 0xe48, Size: 0x8]
	AkAudioEvent* Headshot Audio Event;//[Offset: 0xe50, Size: 0x8]
	AkAudioEvent* Enemy Killed Audio Event;//[Offset: 0xe58, Size: 0x8]
	AkAudioEvent* Stand Audio Event;//[Offset: 0xe60, Size: 0x8]
	AkAudioEvent* Prone Audio Event;//[Offset: 0xe68, Size: 0x8]
	AkAudioEvent* Unprone Audio Event;//[Offset: 0xe70, Size: 0x8]
	AkAudioEvent* Crouch Audio Event;//[Offset: 0xe78, Size: 0x8]
	AkAudioEvent* Uncrouch Audio Event;//[Offset: 0xe80, Size: 0x8]
	bool bFlashbangOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe88, Size: 0x1]
	AkAudioEvent* Player Death Scream Event;//[Offset: 0xe90, Size: 0x8]
	FName GetPingedItemTelemetryId();// 0x59ef218
	FText GetPingedItemName(FString CallFunc_GetPlayerName_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x59ef218
	enum GetAttitudeOverride(out const SquadPing PingDetails, out bool bOutOverrodeAttitude);// 0x59ef218
	FText GetTextForPing(out const SquadPing PingDetails);// 0x59ef218
	MarkableObjectiveComponent* GetMarkableObjectiveComponentNonConst();// 0x59ef218
	void Play Death Scream(bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x59ef218
	void Toggle Block Firing(bool bCanUseEquipment);// 0x59ef218
	void DeactivateScreenFX(out MaterialInstanceDynamic* ScreenFX, interface classNone CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput);// 0x59ef218
	void ActivateScreenFX(out MaterialInstanceDynamic* ScreenFX, interface classNone CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput);// 0x59ef218
	void InitScreenFX(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, interface classNone CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, interface classNone CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput, interface classNone CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x59ef218
	void ClickFireInput();// 0x59ef218
	void GetPlayerPosefromTags(out byte State, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, ODCharacterAnimInstance* K2Node_DynamicCast_AsODCharacter_Anim_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x59ef218
	void GetADSFiringDelay(out float ADSFiringDelay, EquipmentActor* NewLocalVar, float Loc_delay, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, EquipmentActor* CallFunc_GetEquipmentActorNonConst_ReturnValue);// 0x59ef218
	void GetAerialMeshComponent(out SkeletalMeshComponent* NewParam);// 0x59ef218
	void DeactivateClimb(GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue);// 0x59ef218
	void ActivateClimb(GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue);// 0x59ef218
	void HandleDamageTaken(Vector DamageDirection, float DamageTaken, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x59ef218
	void ToggleAutoRun(bool StartAutoRun);// 0x59ef218
	void EnterStand(bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, enum CallFunc_GetStance_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, ODCharacterMovementComponent* CallFunc_GetODCharacterMovementComponentNonConst_ReturnValue, bool CallFunc_CanStandInCurrentPosition_ReturnValue);// 0x59ef218
	void Stand();// 0x59ef218
	void ExitCrouch(bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, ODCharacterMovementComponent* CallFunc_GetODCharacterMovementComponentNonConst_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_CanStandInCurrentPosition_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x59ef218
	void EnterCrouch(bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_K2_PostAudioEvent_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetStance_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x59ef218
	void Exit Prone(bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, ODCharacterMovementComponent* CallFunc_GetODCharacterMovementComponentNonConst_ReturnValue, bool CallFunc_CanStandInCurrentPosition_ReturnValue);// 0x59ef218
	void EnterProne(bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, enum CallFunc_GetStance_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x59ef218
	void Timeline_0__FinishedFunc();// 0x59ef218
	void Timeline_0__UpdateFunc();// 0x59ef218
	void Timeline_1__FinishedFunc();// 0x59ef218
	void Timeline_1__UpdateFunc();// 0x59ef218
	void OnClickedInput(out const GameplayTag Tag);// 0x59ef218
	void OnPressedInput(out const GameplayTag Tag);// 0x59ef218
	void OnReleasedInput(out const GameplayTag Tag);// 0x59ef218
	void ToggleProne();// 0x59ef218
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_PhysicsVolumeChanged__DelegateSignature(PhysicsVolume* NewVolume);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void Bind Delegates();// 0x59ef218
	void TryActivateAerialGadget();// 0x59ef218
	void TryDeactivateAerialGadget();// 0x59ef218
	void Landed();// 0x59ef218
	void HandleFPHitReaction(float Damagee, out const Vector HitLocation, out const Vector HitDirection);// 0x59ef218
	void InitHealthAnchor();// 0x59ef218
	void HandleFPExplosionReaction(float Damagee, out const Vector HitLocation, out const Vector HitDirection);// 0x59ef218
	void OnHealthUpdate(float NewHealth);// 0x59ef218
	void Mesh_OnRagdollHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x59ef218
	void ToggleCanUseEquipment(bool bCanUseEquipment);// 0x59ef218
	void EnableFiring();// 0x59ef218
	void OnWeaponHit(const Actor* HitActor);// 0x59ef218
	void OnHeadshot(const Actor* HitActor);// 0x59ef218
	void OnEnemyKilled(const PlayerState* KillerState, const PlayerState* VictimState, out const PrimaryPawnDeath PawnDeathInfo);// 0x59ef218
	void BndEvt__BP_ODCharacter_SoldierKitComponent_K2Node_ComponentBoundEvent_1_WeaponReloadDelegate__DelegateSignature();// 0x59ef218
	void BndEvt__BP_ODCharacter_SoldierKitComponent_K2Node_ComponentBoundEvent_2_ZoomLevelChangedDelegate__DelegateSignature(byte NewZoomLevel, EquipmentActor* EquipmentActor);// 0x59ef218
	void BndEvt__BP_ODCharacter_SoldierKitComponent_K2Node_ComponentBoundEvent_5_WeaponReloadDelegate__DelegateSignature();// 0x59ef218
	void BndEvt__BP_ODCharacter_HealthComponent_K2Node_ComponentBoundEvent_1_DamageReceivedDelegate__DelegateSignature(out const DamageReceived DamageReceived);// 0x59ef218
	void BndEvt__BP_ODCharacter_CharacterCapsule_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x59ef218
	void OnPinged(out const SquadPing PingDetails);// 0x59ef218
	void OnActorDowned(Actor* DownedActor);// 0x59ef218
	void OnActorRevived(Actor* RevivedActor);// 0x59ef218
	void OnCameraFadeEvent(out const ImpactCameraFade FadeParams);// 0x59ef218
	void SetFlashbangState(bool Enabled);// 0x59ef218
	void ReceiveEndPlay(byte EndPlayReason);// 0x59ef218
	void ExecuteUbergraph_BP_ODCharacter(int EntryPoint, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, const enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, const GameplayTag K2Node_Event_Tag, const GameplayTag K2Node_Event_Tag, const GameplayTag K2Node_Event_Tag, PhysicsVolume* K2Node_ComponentBoundEvent_NewVolume, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, float K2Node_Event_Damagee, const Vector K2Node_Event_HitLocation, const Vector K2Node_Event_HitDirection, bool CallFunc_IsValid_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_Damagee, const Vector K2Node_Event_HitLocation, const Vector K2Node_Event_HitDirection, ODCharacterMovementComponent* CallFunc_GetODCharacterMovementComponentNonConst_ReturnValue, ODCharacterMovementComponent* CallFunc_GetODCharacterMovementComponentNonConst_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_CustomEvent_NewHealth, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PrimitiveComponent* K2Node_Event_HitComponent, Actor* K2Node_Event_OtherActor, PrimitiveComponent* K2Node_Event_OtherComp, Vector K2Node_Event_NormalImpulse, const HitResult K2Node_Event_Hit, bool CallFunc_K2_AttachToComponent_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, PhysicalMaterial* CallFunc_GetPhysicalMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetComponentVelocity_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, enum CallFunc_GetStance_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocalPlayerController_ReturnValue, bool K2Node_CustomEvent_bCanUseEquipment, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, GameplayTag Temp_struct_Variable, MovementAudioEntry CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerHUDComponent* CallFunc_GetLocalPlayerHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_IsClosed_Variable, SurfaceAudioDef CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Actor* K2Node_CustomEvent_HitActor, const Actor* K2Node_CustomEvent_HitActor, const PlayerState* K2Node_CustomEvent_KillerState, const PlayerState* K2Node_CustomEvent_VictimState, const PrimaryPawnDeath K2Node_CustomEvent_PawnDeathInfo, byte K2Node_ComponentBoundEvent_NewZoomLevel, EquipmentActor* K2Node_ComponentBoundEvent_EquipmentActor, EquipmentActor* CallFunc_GetEquipmentActorNonConst_ReturnValue, EquipmentActor* CallFunc_GetEquipmentActorNonConst_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, const DamageReceived K2Node_ComponentBoundEvent_DamageReceived, PrimitiveComponent* K2Node_ComponentBoundEvent_HitComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, Vector K2Node_ComponentBoundEvent_NormalImpulse, const HitResult K2Node_ComponentBoundEvent_Hit, const SquadPing K2Node_Event_PingDetails, byte CallFunc_GetActorAttitudes_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Controller* CallFunc_GetController_ReturnValue, GameplayTag Temp_struct_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioEventParams K2Node_MakeStruct_AudioEventParams, int CallFunc_K2_PostAudioEvent_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, bool CallFunc_NotEqual_IntInt_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioEventParams K2Node_MakeStruct_AudioEventParams, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_Event_DownedActor, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_Event_RevivedActor, const ImpactCameraFade K2Node_CustomEvent_FadeParams, bool K2Node_CustomEvent_Enabled, float CallFunc_Subtract_FloatFloat_ReturnValue, GameplayTag K2Node_Select_Default, float CallFunc_FMax_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, byte K2Node_Event_EndPlayReason);// 0x59ef218
	void OnPlayerEnterOrExitVehicle__DelegateSignature(bool EnteredVehicle);// 0x59ef218

--------------------------------
Class: ODCharacter.Soldier.Pawn.Actor.Object
	ODCharacterCapsule* CharacterCapsule;//[Offset: 0x598, Size: 0x8]
	CharacterAudioPerceptionEvents AudioPerceptionEvents;//[Offset: 0x5a0, Size: 0x18]
	MovementAudioData MovementAudioEventsTable;//[Offset: 0x5b8, Size: 0x58]
	int FidelityLevel;//[Offset: 0x620, Size: 0x4]
	int OverrideAnimUpdateRate;//[Offset: 0x624, Size: 0x4]
	StaticMeshComponent* LeftHandProp;//[Offset: 0x628, Size: 0x8]
	FName LeftHandAtttachSocket;//[Offset: 0x630, Size: 0x8]
	CharacterFidelityLevel[] FidelityLevels;//[Offset: 0x638, Size: 0x10]
	float SignificanceByDistanceRange;//[Offset: 0x648, Size: 0x4]
	float SignificanceFOVTransitionBegin;//[Offset: 0x64c, Size: 0x4]
	float SignificanceByDistanceStart;//[Offset: 0x650, Size: 0x4]
	float SignificanceByDistanceEnd;//[Offset: 0x654, Size: 0x4]
	float SignificanceAngleScale;//[Offset: 0x658, Size: 0x4]
	float FOVMultiplierMax;//[Offset: 0x65c, Size: 0x4]
	float FOVMultiplierMin;//[Offset: 0x660, Size: 0x4]
	float FOVMultiplierSignificanceDistanceThreshold;//[Offset: 0x664, Size: 0x4]
	float LastSignificance;//[Offset: 0x668, Size: 0x4]
	GameplayTag CrouchTag;//[Offset: 0x66c, Size: 0x8]
	GameplayTag ProneTag;//[Offset: 0x674, Size: 0x8]
	GameplayTag FallTag;//[Offset: 0x67c, Size: 0x8]
	GameplayTag JumpTag;//[Offset: 0x684, Size: 0x8]
	GameplayTag StrafeTag;//[Offset: 0x68c, Size: 0x8]
	float MinSpeedToConsiderStrafingTag;//[Offset: 0x698, Size: 0x4]
	FName MeshCollisionProfileName_Alive;//[Offset: 0x69c, Size: 0x8]
	FName MeshCollisionProfileName_Ragdoll;//[Offset: 0x6a4, Size: 0x8]
	enum CurrentAirState;//[Offset: 0x6ac, Size: 0x1]
	enum LastAirState;//[Offset: 0x6ad, Size: 0x1]
	delegate OnFreeFallChanged;//[Offset: 0x6b0, Size: 0x10]
	delegate OnStanceChange;//[Offset: 0x6c0, Size: 0x10]
	delegate OnAerialDeployedChanged;//[Offset: 0x6d0, Size: 0x10]
	delegate OnPickupInteractable;//[Offset: 0x6e0, Size: 0x10]
	delegate OnCameraFade;//[Offset: 0x6f0, Size: 0x10]
	delegate OnJumpedEvent;//[Offset: 0x700, Size: 0x10]
	delegate OnLandedEvent;//[Offset: 0x710, Size: 0x10]
	delegate OnInCombatStateChanged;//[Offset: 0x720, Size: 0x10]
	delegate OnVehicleSeatChanged;//[Offset: 0x730, Size: 0x10]
	delegate OnPointOfViewChanged;//[Offset: 0x758, Size: 0x10]
	delegate OnInteracted;//[Offset: 0x768, Size: 0x10]
	delegate OnInteractionTargetChanged;//[Offset: 0x778, Size: 0x10]
	delegate ODMovementModeChangedDelegate;//[Offset: 0x788, Size: 0x10]
	float ClimbMontageBlendoutTime;//[Offset: 0x798, Size: 0x4]
	CharacterClimbState ClimbState;//[Offset: 0x7a0, Size: 0x20]
	AkRtpc* AerialTurningRTPC;//[Offset: 0x7c0, Size: 0x8]
	delegate OnCharacterReadyForPlay;//[Offset: 0x7f8, Size: 0x10]
	delegate OnCharacterEndPlay;//[Offset: 0x808, Size: 0x10]
	delegate OnEnterVehicle;//[Offset: 0x818, Size: 0x10]
	delegate OnExitVehicle;//[Offset: 0x828, Size: 0x10]
	delegate OnEnterConquestPoint;//[Offset: 0x838, Size: 0x10]
	delegate OnExitConquestPoint;//[Offset: 0x848, Size: 0x10]
	bool bIsSectorTransitioning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]
	GenericUIAnchorComponent* HealthBarAnchor;//[Offset: 0x860, Size: 0x8]
	SoldierKitComponent* SoldierKitComponent;//[Offset: 0x868, Size: 0x8]
	AutofireComponent* AutofireComponent;//[Offset: 0x870, Size: 0x8]
	ITPlayerSpawnDataComponent* SpawnDataComponent;//[Offset: 0x878, Size: 0x8]
	Vector[] SpawnOnSquadmateOffsets;//[Offset: 0x880, Size: 0x10]
	CharacterHealthComponent* HealthComponent;//[Offset: 0x890, Size: 0x8]
	SpottingTargetComponent* SpottingTargetComponent;//[Offset: 0x898, Size: 0x8]
	AimSpottingComponent* AimSpottingComponent;//[Offset: 0x8a0, Size: 0x8]
	HitLocationGroupComponent* HitLocationGroupComponent;//[Offset: 0x8a8, Size: 0x8]
	CharacterCustomizationComponent* CustomizationComponent;//[Offset: 0x8b0, Size: 0x8]
	Vector LeftFootLocation;//[Offset: 0x8b8, Size: 0xc]
	Vector RightFootLocation;//[Offset: 0x8c4, Size: 0xc]
	bool bReadyForPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 0x1]
	bool bCanUseEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 0x1]
	float AnyDamageResistance;//[Offset: 0x8d4, Size: 0x4]
	float RadialDamageResistance;//[Offset: 0x8d8, Size: 0x4]
	float PointDamageResistance;//[Offset: 0x8dc, Size: 0x4]
	float MeleeDamageResistance;//[Offset: 0x8e0, Size: 0x4]
	float FallDamageResistance;//[Offset: 0x8e4, Size: 0x4]
	class DamageType* MeleeDamageType;//[Offset: 0x8e8, Size: 0x8]
	float ThirdPersonHeadScale;//[Offset: 0x8f0, Size: 0x4]
	bool bIsInFreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 0x1]
	enum SoldierClass;//[Offset: 0x8f5, Size: 0x1]
	GameplayTag StatPlayerDeathLocation;//[Offset: 0x8f8, Size: 0x8]
	<OutOfBoundsArea*> OutOfBoundsAreas;//[Offset: 0x900, Size: 0x50]
	float OutOfBoundsTimeOverride;//[Offset: 0x950, Size: 0x4]
	GameplayTag StatPlayerScore;//[Offset: 0x960, Size: 0x8]
	bool bIsInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 0x1]
	bool bKitInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 0x1]
	bool bMovementStanceAllowsEquipmentUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96a, Size: 0x1]
	float MaxInteractionRange;//[Offset: 0x96c, Size: 0x4]
	float InteractionTickInterval;//[Offset: 0x970, Size: 0x4]
	float FidelityTickInterval;//[Offset: 0x974, Size: 0x4]
	ODCameraComponent* FirstPersonCameraComponent;//[Offset: 0x978, Size: 0x8]
	Rotator CameraLocalRotation;//[Offset: 0x980, Size: 0xc]
	CameraRotationModifier CameraRotationAnimation;//[Offset: 0x990, Size: 0x30]
	class ODCharacterAnimInstance* FPAnimInstance;//[Offset: 0x9c0, Size: 0x8]
	class ODCharacterAnimInstance* TPAnimInstance;//[Offset: 0x9c8, Size: 0x8]
	ODCharacterASC* AbilitySystemComponent;//[Offset: 0x9d0, Size: 0x8]
	ODAimAssistTargetableComponent* AimAssistTargetableComponentStand;//[Offset: 0x9d8, Size: 0x8]
	ODAimAssistTargetableComponent* AimAssistTargetableComponentCrouch;//[Offset: 0x9e0, Size: 0x8]
	ODAimAssistTargetableComponent* AimAssistTargetableComponentProne;//[Offset: 0x9e8, Size: 0x8]
	ODAimAssistTargetableComponent* AutofireTargetableComponentStand;//[Offset: 0x9f0, Size: 0x8]
	ODAimAssistTargetableComponent* AutofireTargetableComponentCrouch;//[Offset: 0x9f8, Size: 0x8]
	ODAimAssistTargetableComponent* AutofireTargetableComponentProne;//[Offset: 0xa00, Size: 0x8]
	AkComponent* AudioComponent;//[Offset: 0xa08, Size: 0x8]
	AkAudioEvent* AerialFlightEndedEvent;//[Offset: 0xa10, Size: 0x8]
	SoldierSpecialization*[] Specializations;//[Offset: 0xa18, Size: 0x10]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0xa28, Size: 0x8]
	SkeletalMeshComponent* ActiveMesh;//[Offset: 0xa30, Size: 0x8]
	VATMeshComponent* AerialMesh;//[Offset: 0xa38, Size: 0x8]
	enum PointOfView;//[Offset: 0xa40, Size: 0x1]
	float AltimeterMax;//[Offset: 0xa44, Size: 0x4]
	bool bCanTakeFallDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 0x1]
	float MinMetersForFallDamage;//[Offset: 0xa4c, Size: 0x4]
	float MaxMetersForFallDamage;//[Offset: 0xa50, Size: 0x4]
	CurveFloat* FallDamageCurve;//[Offset: 0xa58, Size: 0x8]
	FName RootBoneName;//[Offset: 0xa60, Size: 0x8]
	FName CameraBoneName;//[Offset: 0xa68, Size: 0x8]
	Rotator LastCameraBoneRotation;//[Offset: 0xa70, Size: 0xc]
	float CameraRollIntensity;//[Offset: 0xa7c, Size: 0x4]
	float bCameraRollEnabled;//[Offset: 0xa80, Size: 0x4]
	FName FullCameraControlSocket;//[Offset: 0xa84, Size: 0x8]
	float CameraRecoilAmount;//[Offset: 0xa90, Size: 0x4]
	float RepAimPitch;//[Offset: 0xa94, Size: 0x4]
	float RepAimYaw;//[Offset: 0xa98, Size: 0x4]
	float ProneEyeHeight;//[Offset: 0xa9c, Size: 0x4]
	float ProneTurnInPlaceConstraintOffset;//[Offset: 0xaa0, Size: 0x4]
	CameraPitchConstraint PitchConstraintsStanding;//[Offset: 0xaa4, Size: 0x8]
	CameraPitchConstraint PitchConstraintsCrouch;//[Offset: 0xaac, Size: 0x8]
	CameraPitchConstraint PitchConstraintsProne;//[Offset: 0xab4, Size: 0x8]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xabc, Size: 0x1]
	bool bIsGliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xabc, Size: 0x1]
	float SprintEndTime;//[Offset: 0xac0, Size: 0x4]
	float MinADSSprintRecoveryTime;//[Offset: 0xac4, Size: 0x4]
	bool bIsAutorunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 0x1]
	Controller* CachedController;//[Offset: 0xad8, Size: 0x8]
	Controller* PrimaryController;//[Offset: 0xae0, Size: 0x8]
	bool bShouldShowOnEnemyRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8, Size: 0x1]
	BlueprintTickFunction BPTickFunction;//[Offset: 0xaf0, Size: 0x30]
	InteractionTickFunction InteractionTickFunction;//[Offset: 0xb20, Size: 0x38]
	CharacterSignificanceFideltyTickFunction FidelityTickFunction;//[Offset: 0xb58, Size: 0x30]
	GameplayAbilityTargetDataHandle AbilityTargetData;//[Offset: 0xb88, Size: 0x28]
	VehicleSeatComponent* VehicleSeatComponent;//[Offset: 0xbb0, Size: 0x8]
	RepVehicleSeatAttachment VehicleSeatAttachment;//[Offset: 0xbb8, Size: 0x20]
	float IsInCombatExpirationDelay;//[Offset: 0xc34, Size: 0x4]
	bool bIsInCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38, Size: 0x1]
	float DeathDuration;//[Offset: 0xc48, Size: 0x4]
	float KilledByVehicleImpulseAmount;//[Offset: 0xc4c, Size: 0x4]
	float MinVelocityToImmediateRagdoll;//[Offset: 0xc50, Size: 0x4]
	float MinRadialDamageForInstantRagdoll;//[Offset: 0xc54, Size: 0x4]
	RepCharacterAnimMontage CharacterMontageToPlay;//[Offset: 0xc58, Size: 0x14]
	bool bDiedInsideVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 0x1]
	PendingReviveInfo PendingRevive;//[Offset: 0xc70, Size: 0x58]
	float DownedDuration;//[Offset: 0xcd0, Size: 0x4]
	CurveFloat* MovementInputCurve;//[Offset: 0xcd8, Size: 0x8]
	bool bRagdollsAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 0x1]
	bool bRagdollState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce1, Size: 0x1]
	float InitialGravityScale;//[Offset: 0xce4, Size: 0x4]
	float PrimaryTickInterval;//[Offset: 0xce8, Size: 0x4]
	float BulletFlybyMaxRadius;//[Offset: 0xcec, Size: 0x4]
	SquadAudioEventLookup* SquadVoiceLines;//[Offset: 0xd00, Size: 0x8]
	SoldierAimComponent* SoldierAimComponent;//[Offset: 0xd08, Size: 0x8]
	SphereComponent* PingSphere;//[Offset: 0xd10, Size: 0x8]
	FName PingSphereCollisionProfileName;//[Offset: 0xd18, Size: 0x8]
	Object* InteractionTarget;//[Offset: 0xd38, Size: 0x8]
	void UpdateOutOfBoundsVolumes();// 0x547df88
	void UpdateMovementTags();// 0x547fbb8
	void UnProne(bool bClientSimulation);// 0x547ea34
	void TriggerAnimationMontage(enum MontageType, float AnimationSpeedScale, out const FName SectionName);// 0x547f26c
	void SwitchToThirdPerson();// 0x547ec54
	void SwitchToFirstPerson();// 0x547ec70
	void SwapSeat(VehicleSeatComponent* VehicleSeat);// 0x547e12c
	void StopSprint();// 0x547ebb4
	void StartSprint();// 0x547ebd0
	bool ShouldBlockTraversalBP();// 0x59ef218
	void SetRagdollEffect(bool UpperBodyEnable, bool LowerBodyEnable, float BlendAmount, bool IgnorePerformanceImplications);// 0x547f4e0
	void SetPointOfView(enum NewPOV);// 0x547eca4
	void SetIsInCombat(bool bNewInCombatState);// 0x547ed84
	void SetIKEnabled(bool bEnabled, float FadeTime);// 0x59ef218
	void SetAutorun(bool bEnabled);// 0x547e984
	void ServerRevive();// 0x547f674
	void ServerRequestRevive(float StartingHealthFraction, Controller* InInstigator, bool bApplyInitialHeal, HealingSource InitialHeal);// 0x547f69c
	void ServerExpireRevive();// 0x547f688
	void RemoveLooseGameplayTag(out const GameplayTag Tag);// 0x547fbcc
	void ReleaseCameraYawConstraints();// 0x547fb70
	void Prone(bool bClientSimulation);// 0x547eae4
	void ProcessMoveInput(out const Vector StickDirection, float Magnitude);// 0x547ffcc
	void PlayHitReact(out const DamageReceived DamageReceived);// 0x547fd70
	void PlayBulletFlybyAudio(out const Vector InLocation, out const Vector InVelocity, const BallisticDefinition* InBallisticDefinition, Pawn* EventInstigator);// 0x547df9c
	void PerformMeleeVictim(ODCharacter* Attacker);// 0x547f430
	void OnRep_VehicleSeatReplication(out const RepVehicleSeatAttachment LastSeatAttachment);// 0x547e718
	void OnRep_Specializations();// 0x547e324
	void OnRep_PendingRevive();// 0x547e444
	void OnRep_IsSprinting();// 0x547e7e4
	void OnRep_IsGliding();// 0x547e7d0
	void OnRep_InCombat();// 0x547e408
	void OnRep_DiedInsideVehicle();// 0x547e458
	void OnRep_CharacterMontageToPlay(out const RepCharacterAnimMontage LastMontage);// 0x547e340
	void OnRep_CharacterClimbState(out const CharacterClimbState OldState);// 0x547fa94
	void OnRep_CachedController();// 0x547e704
	void OnRep_AimYaw();// 0x547df74
	void OnRep_AimPitch();// 0x547df60
	void OnReleasedInput(out const GameplayTag Tag);// 0x59ef218
	void OnPressedInput(out const GameplayTag Tag);// 0x59ef218
	void OnPredictedDeathReversed(Actor* Actor);// 0x547fe5c
	void OnPlayerOutOfBoundsChanged(bool bOutOfBounds, float DisplayTime);// 0x547e46c
	void OnPickupHealthpack();// 0x547ff04
	void OnMovementJoystickInput(out const Vector2D MoveInput);// 0x59ef218
	void OnInCombatExpired();// 0x547e430
	void OnDeactivateClimb();// 0x59ef218
	void OnControllerReplicated();// 0x547e41c
	void OnClickedInput(out const GameplayTag Tag);// 0x59ef218
	void OnActorRevived(Actor* RevivedActor);// 0x547f9c8
	void OnActorDowned(Actor* DownedActor);// 0x547f918
	void OnActorDeath(Actor* DeadActor);// 0x547f868
	void OnActivateClimb(ODClimbableObject* ClimbableObject);// 0x59ef218
	void Mesh_OnRagdollHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x59ef218
	void KitComponent_OnAnyEquipmentUsed(EquipmentActor* UsedEquipment);// 0x547e570
	void K2_OnSubFixedStep(out const PlayerCommandState Command);// 0x59ef218
	void K2_OnPreFixedStep(out const PlayerCommandState Command);// 0x59ef218
	bool IsInCombat();// 0x547ed4c
	bool IsInAnyVehicle();// 0x547f3b8
	bool IsClimbing();// 0x547fb4c
	void Interact(uint32 CommandId);// 0x547e27c
	void InCombatChanged();// 0x547e55c
	void HealthComponent_OnReceiveDamage(out const DamageReceived DamageReceived);// 0x547e618
	void HandleFPHitReaction(float Damagee, out const Vector HitLocation, out const Vector HitDirection);// 0x59ef218
	void HandleFPExplosionReaction(float Damagee, out const Vector HitLocation, out const Vector HitDirection);// 0x59ef218
	VehicleSeatComponent* GetVehicleSeatNonConst();// 0x547f3dc
	ODVehicle* GetVehicleInteractionTarget();// 0x547f110
	enum GetStance();// 0x547ebec
	SpottingTargetComponent* GetSpottingTargetComponentNonConst();// 0x547ff54
	SoldierSpecialization*[] GetSpecializations();// 0x547eef8
	bool GetShouldShowOnEnemyRadar();// 0x547ee6c
	float GetRadialDamageResistance();// 0x547f038
	enum GetPointOfView();// 0x547ec88
	float GetPointDamageResistance();// 0x547f01c
	float GetOutOfBoundsTimeOverride();// 0x547e968
	ODCharacterMovementComponent* GetODCharacterMovementComponentNonConst();// 0x547ec20
	float GetMeleeDamageResistance();// 0x547f000
	float GetMaxInteractionDistance();// 0x547f160
	float GetMaxAltitude();// 0x547f17c
	enum GetLastAnimationMontage();// 0x547f250
	BaseKitComponent* GetKitComponentNonConst();// 0x547ff18
	bool GetIsSprinting();// 0x547eb94
	bool GetIsReadyForPlay();// 0x547ee50
	bool GetIsInADS();// 0x547ee34
	Object* GetInteractionTarget();// 0x547f144
	HitLocationGroupComponent* GetHitLocationGroupComponentNonConst();// 0x547fd34
	float GetHealthPercent();// 0x547f070
	HealthComponent* GetHealthComponentNonConst();// 0x547ff90
	Vector GetHeadScale();// 0x547eea4
	bool GetHadInteractionTarget();// 0x547f0a4
	ODCameraComponent* GetFirstPersonCameraComponent();// 0x547fb84
	float GetFallDamageResistance();// 0x547efe4
	float GetCurrentAltitude();// 0x547f198
	ODClimbableObject* GetClimbableInteractionTarget();// 0x547f0dc
	int GetCharacterLevel();// 0x547eec4
	ODCharacterAnimInstance* GetCharacterAnimInstance();// 0x547f200
	bool GetCanBeUsedForRespawn();// 0x547f3f8
	float GetAnyDamageResistance();// 0x547f054
	AimAssistModifier* GetAimAssistComponentNonConst();// 0x547e92c
	enum GetAerialState();// 0x547f1cc
	SkeletalMeshComponent* GetActiveMesh();// 0x547f234
	bool FindTargets(out ODTargetInfo[] CandidateTargets, float TargetingRadiusDegrees);// 0x547e80c
	void ExitVehicle(uint32 CommandId);// 0x547e1d4
	void DestroyCallback();// 0x547e7f8
	void ClientUnPossessed();// 0x547fa78
	void CharacterCanUseEquipmentChangedDelegate__DelegateSignature(bool bCanUseEquipment);// 0x59ef218
	void BlueprintTick();// 0x59ef218
	void AddLooseGameplayTag(out const GameplayTag Tag);// 0x547fc80

--------------------------------
Class: Soldier.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2b0, Size: 0x8]
	SoldierMovementComponent* CharacterMovement;//[Offset: 0x2b8, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2c0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2c8, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2f8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x328, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x32c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x340, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x350, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x354, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x358, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x35c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x360, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x360, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x360, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x360, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x360, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x360, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x360, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x361, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x361, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x361, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x364, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x368, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x36c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x370, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x374, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x378, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x37c, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x388, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x3a8, Size: 0x10]
	ODRootMotionSourceGroup SavedRootMotion;//[Offset: 0x3b8, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3f0, Size: 0x40]
	ODSimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x430, Size: 0x10]
	ODRepRootMotionMontage RepRootMotion;//[Offset: 0x440, Size: 0x98]
	TraversalMovementState ReplicatedTraversalMovementState;//[Offset: 0x4d8, Size: 0x20]
	bool bReplicatedIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	void UnCrouch(bool bClientSimulation);// 0x5579804
	void StopJumping();// 0x5579f64
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x5579cac
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x55796b4
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x5579d5c
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x5579974
	void OnRep_RootMotion();// 0x55796a0
	void OnRep_ReplicatedBasedMovement();// 0x557a06c
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x557a058
	void OnRep_IsCrouched();// 0x5579f9c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x59ef218
	void OnLanded(out const HitResult Hit);// 0x59ef218
	void OnJumped();// 0x5579b10
	void LaunchSoldier(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5579b2c
	void K2_UpdateCustomMovement(float DeltaTime);// 0x59ef218
	void K2_OnStartProne();// 0x59ef218
	void K2_OnStartCrouch();// 0x59ef218
	void K2_OnMovementModeChanged(enum PrevMovementMode, enum NewMovementMode, enum PrevCustomMode, enum NewCustomMode);// 0x59ef218
	void K2_OnEndProne();// 0x59ef218
	void K2_OnEndCrouch();// 0x59ef218
	void Jump();// 0x5579f80
	bool IsPlayingRootMotion();// 0x5579660
	bool IsPlayingNetworkedRootMotionMontage();// 0x55795f0
	bool IsJumpProvidingForce();// 0x5579eac
	bool HasAnyRootMotion();// 0x5579628
	AnimMontage* GetCurrentMontage();// 0x5579c78
	Vector GetBaseTranslationOffset();// 0x557a030
	Rotator GetBaseRotationOffsetRotator();// 0x5579fb8
	float GetAnimRootMotionTranslationScale();// 0x55795bc
	void Crouch(bool bClientSimulation);// 0x55798bc
	void ClientCheatWalk();// 0x55797a8
	void ClientCheatGhost();// 0x5579770
	void ClientCheatFly();// 0x557978c
	bool CanJumpInternal();// 0x5579eec
	bool CanJump();// 0x5579f2c
	bool CanCrouch();// 0x55797c4
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x557a088

--------------------------------
Class: SquadPing
	Vector PingLocation;//[Offset: 0x0, Size: 0xc]
	Actor* PingedObjective;//[Offset: 0x10, Size: 0x8]
	ODPlayerState* RequestingPlayerState;//[Offset: 0x18, Size: 0x8]
	bool bPingFromSquadLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	byte SquadNumber;//[Offset: 0x21, Size: 0x1]
	enum PingType;//[Offset: 0x22, Size: 0x1]
	int PingFixedStep;//[Offset: 0x24, Size: 0x4]
	bool bWasAcknowledgement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum PingAttitude;//[Offset: 0x29, Size: 0x1]
	PingActor* SpawnedPingActor;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ODPlayerState.PlayerState.Info.Actor.Object
	delegate OnPlayerStateDeathStatusChanged;//[Offset: 0x350, Size: 0x10]
	delegate OnSpotStateMinimapUpdated;//[Offset: 0x360, Size: 0x10]
	delegate OnTeamIdAssigned;//[Offset: 0x370, Size: 0x10]
	delegate OnRefreshDevPlayerName;//[Offset: 0x380, Size: 0x10]
	delegate OnPawnChanged;//[Offset: 0x390, Size: 0x10]
	delegate OnSoldierClassChanged;//[Offset: 0x3a0, Size: 0x10]
	delegate OnKillScored;//[Offset: 0x3b0, Size: 0x10]
	delegate OnKillAssistScored;//[Offset: 0x3c0, Size: 0x10]
	delegate OnTargetSpottedScored;//[Offset: 0x3d0, Size: 0x10]
	delegate OnPlayerRevivedTeammate;//[Offset: 0x3e0, Size: 0x10]
	delegate OnPlayerWasRevived;//[Offset: 0x3f0, Size: 0x10]
	delegate OnPrimaryCharacterChanged;//[Offset: 0x400, Size: 0x10]
	enum PlayerType;//[Offset: 0x410, Size: 0x1]
	int BotDifficulty;//[Offset: 0x414, Size: 0x4]
	byte TeamNumber;//[Offset: 0x418, Size: 0x1]
	Guid MatchId;//[Offset: 0x41c, Size: 0x10]
	enum SoldierClass;//[Offset: 0x42c, Size: 0x1]
	SquadComponent* SquadComponent;//[Offset: 0x430, Size: 0x8]
	VehicleSeatComponent* VehicleSeatComponent;//[Offset: 0x438, Size: 0x8]
	DateTime PlayerLoginTime;//[Offset: 0x440, Size: 0x8]
	EquipmentXPStats StatEquipment;//[Offset: 0x448, Size: 0x50]
	ODScoreManager* ScoreManager;//[Offset: 0x498, Size: 0x8]
	BattlePlayerTelemetryComponent* BattlePlayerTelemetryComponent;//[Offset: 0x4a0, Size: 0x8]
	MinimapLocationInfo MinimapLocationInfo;//[Offset: 0x4b4, Size: 0x18]
	enum PlayerDeathStatus;//[Offset: 0x4cc, Size: 0x1]
	float DefaultOutOfBoundsTime;//[Offset: 0x4d0, Size: 0x4]
	float PrimaryTickInterval;//[Offset: 0x4d4, Size: 0x4]
	float PlayerOutOfBoundsTime;//[Offset: 0x4d8, Size: 0x4]
	int RespawnStatus;//[Offset: 0x4e8, Size: 0x4]
	ODCharacter* PrimaryCharacter;//[Offset: 0x4f0, Size: 0x8]
	void UpdateSoldierClassFromMetaserver();// 0x5515a48
	void SpotStateUpdated(out const SpotParams SpotParams);// 0x55151b8
	void SetPlayerOutOfBounds(bool bIsOutOfBounds);// 0x5515894
	void ServerUpdateSoldierClass(enum NewSoldierClass);// 0x5515960
	void ServerSetClientBotDifficultyLevel(int BotLevel);// 0x551563c
	void ServerRecordKill();// 0x5515748
	void ServerRecordDeath();// 0x551575c
	void RefreshPlayerNameRPC(FString NewName);// 0x5515550
	void OnRep_VehicleSeat(VehicleSeatComponent* PrevVehicleSeatComponent);// 0x5515390
	void OnRep_TeamIdAssigned();// 0x55152ac
	void OnRep_SoldierClass();// 0x5515284
	void OnRep_PlayerTypeChanged();// 0x55152d4
	void OnRep_PlayerOutOfBoundsTime();// 0x55150e8
	void OnRep_PlayerDeathStatus(enum InDeathStatus);// 0x55152e8
	void OnRep_MatchIdAssigned();// 0x5515298
	void OnRep_BotDifficultyChanged();// 0x55152c0
	void OnPrimaryCharacterEndPlay(ODCharacter* Character);// 0x55150fc
	void OnOutOfBoundsTimerElapsed();// 0x55151a4
	bool IsPlayerDowned();// 0x5515508
	bool IsPlayerAlive();// 0x551552c
	bool IsOutOfBounds();// 0x551545c
	bool IsInAnyVehicle();// 0x5515870
	VehicleSeatComponent* GetVehicleSeatNonConst();// 0x5515854
	SquadComponent* GetSquadComponentNonConst();// 0x5515838
	enum GetSoldierClass();// 0x5515944
	bool GetShouldShowOnEnemyRadar();// 0x55154b4
	ODScoreManager* GetScoreManagerNonConst();// 0x5515770
	Vector GetPreviousDeathLocation();// 0x5515724
	float GetPlayerOutOfBoundsTime();// 0x5515440
	float GetMaxOutOfBoundsTime();// 0x5515480
	float GetExactPing();// 0x551578c
	EquipmentXPStats GetEquipmentStats();// 0x55157a8
	enum GetCurrentPlayerDeathStatus();// 0x55154ec

--------------------------------
Class: SpotParams
	bool bShowInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRevealOrientation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bIsMajor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float CustomDuration;//[Offset: 0x4, Size: 0x4]
	float SpotterAdditiveModifier;//[Offset: 0x8, Size: 0x4]
	float SpotterMultiplicativeModifier;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SquadComponent.ActorComponent.Object
	delegate OnSquadUpdated;//[Offset: 0xb0, Size: 0x10]
	delegate OnPingReceived;//[Offset: 0xc0, Size: 0x10]
	SquadManager* CachedSquadManager;//[Offset: 0xd8, Size: 0x8]
	float MaxPingDistance;//[Offset: 0xe0, Size: 0x4]
	float DistanceToTreatAsSamePing;//[Offset: 0xe4, Size: 0x4]
	float MaxTimeToTreatAsSamePing;//[Offset: 0xe8, Size: 0x4]
	float HeatPerPing;//[Offset: 0xec, Size: 0x4]
	float MaxPingHeat;//[Offset: 0xf0, Size: 0x4]
	float PingTickInterval;//[Offset: 0xf4, Size: 0x4]
	<enum,float> PingPersistTimes;//[Offset: 0xf8, Size: 0x50]
	<enum,class ODUIWorldSpaceItemBase> GenericWorldIndicatorTemplates;//[Offset: 0x148, Size: 0x50]
	<enum,class ODUIRadarItem> GenericMinimapTemplates;//[Offset: 0x198, Size: 0x50]
	<enum,GameplayTag> GenericVoiceLineIds;//[Offset: 0x1e8, Size: 0x50]
	<enum,FText> GenericMessageLogText;//[Offset: 0x238, Size: 0x50]
	<enum,GameplayTag> AcknowledgementVoiceLineIds;//[Offset: 0x288, Size: 0x50]
	<enum,FText> AcknowledgementMessageLogText;//[Offset: 0x2d8, Size: 0x50]
	<ODPlayerState*,SquadPing> SquadPings;//[Offset: 0x328, Size: 0x50]
	PingCooldownTickFunction PingCooldownTick;//[Offset: 0x378, Size: 0x30]
	void ServerMakePing(out const Vector WorldLocation, Actor* PingedActor, enum PingType);// 0x5592dcc
	void OnPingActorDestroyed(Actor* DestroyedPingActor, byte Reason);// 0x5592bd4
	bool IsSquadLeader();// 0x559305c
	bool IsInitialized();// 0x5592f28
	byte GetSquadNumber();// 0x5593078
	SquadComponent* GetSquadLeader();// 0x5593028
	SquadComponent*[] GetSquad();// 0x5592f78
	MarkableObjectiveComponent* GetObjectiveNonConst();// 0x5592f44
	float GetMaxPingDistance();// 0x5592f0c
	void ClientReceivePing(SquadPing Ping);// 0x5592cc8

--------------------------------
Class: SquadManager.Actor.Object
	byte MaxPlayersPerSquad;//[Offset: 0x250, Size: 0x1]
	ReplicatedSquadsArray Squads;//[Offset: 0x258, Size: 0x120]
	MarkableObjectiveComponent* LocalMarkedObjective;//[Offset: 0x378, Size: 0x8]
	MarkableObjectiveComponent* LocalCompletedObjective;//[Offset: 0x380, Size: 0x8]
	MarkableObjectiveComponent* GetSquadObjectiveNonConst(byte SquadNumber);// 0x5593a84

--------------------------------
Class: ReplicatedSquadsArray.FastArraySerializer
	ODSquadStruct[] Items;//[Offset: 0x108, Size: 0x10]
	SquadManager* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: ODSquadStruct.FastArraySerializerItem
	byte TeamNumber;//[Offset: 0xc, Size: 0x1]
	byte SquadNumber;//[Offset: 0xd, Size: 0x1]
	SquadComponent* SquadLeader;//[Offset: 0x10, Size: 0x8]
	SquadComponent*[] SquadMembers;//[Offset: 0x18, Size: 0x10]
	MarkableObjectiveComponent* PreviousObjective;//[Offset: 0x28, Size: 0x8]
	MarkableObjectiveComponent* Objective;//[Offset: 0x30, Size: 0x8]
	enum PreviousObjectiveCompletionState;//[Offset: 0x38, Size: 0x1]
	int ObjectiveRepCounter;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MarkableObjectiveComponent.ActorComponent.Object
	delegate OnObjectiveMarkedDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate OnObjectiveUnmarkedDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnObjectiveCompletedDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate OnObjectiveFailedDelegate;//[Offset: 0xe0, Size: 0x10]
	ODMarkableObjectiveSquadState[] SquadStates;//[Offset: 0xf0, Size: 0x10]
	<enum,class ODUIWorldSpaceItemBase> UIAnchorTemplates;//[Offset: 0x100, Size: 0x50]
	<enum,class ODUIRadarItem> UIMinimapTemplates;//[Offset: 0x150, Size: 0x50]
	Texture2D* PingIcon;//[Offset: 0x1a0, Size: 0x8]
	Vector PingAnchorOffset;//[Offset: 0x1a8, Size: 0xc]
	<enum,AttitudeBasedPingInfo> PingResponses;//[Offset: 0x1b8, Size: 0x50]
	bool bIsValidForSquadOrders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	bool bIsConsideredObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	class ODUIWorldSpaceItemBase GetWorldIndicatorTemplateForPing(out const SquadPing Ping);// 0x5411324
	GameplayTag GetVoiceLineIdForPing(out const SquadPing Ping);// 0x54110bc
	FText GetTextForPing(out const SquadPing Ping);// 0x5410f58
	Vector GetPingLocation();// 0x5410f20
	class ODUIRadarItem GetMinimapTemplateForPing(out const SquadPing Ping);// 0x54111b4

--------------------------------
Class: ODMarkableObjectiveSquadState
	byte SquadId;//[Offset: 0x0, Size: 0x1]
	bool bMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ODUIWorldSpaceItemBase.UserWidget.Widget.Visual.Object
	GenericUIAnchorComponent* AnchorComponent;//[Offset: 0x260, Size: 0x8]
	bool ShouldCheckIsAtScreenCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float VisibilityDistance;//[Offset: 0x270, Size: 0x4]
	void SetVisibilityDistance(float Distance);// 0x5549004
	void SetAnchorComponent(GenericUIAnchorComponent* InAnchorComponent);// 0x55490e8
	void OnTeamAttitudeUpdated(byte NewAttitude);// 0x59ef218
	float GetVisibilityDistanceSquared();// 0x5548fcc
	float GetVisibilityDistance();// 0x5548fe8
	Actor* GetPingedOwnerActor();// 0x55490ac

--------------------------------
Class: GenericUIAnchorComponent.SceneComponent.ActorComponent.Object
	class ODUIWorldSpaceItemBase* WidgetClass;//[Offset: 0x1f8, Size: 0x28]
	class ODUIRadarItem* MinimapWidgetClass;//[Offset: 0x220, Size: 0x28]
	Vector2D SlotAlignment;//[Offset: 0x248, Size: 0x8]
	Vector AnchorOffset;//[Offset: 0x250, Size: 0xc]
	bool TestOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool CalculateDistanceSquared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	bool CalculateScreenPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1]
	bool IsOccluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 0x1]
	bool IsAimedAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool ShouldCheckAimedAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	float TargetMaxAimDistance;//[Offset: 0x264, Size: 0x4]
	float DotProductAimThreshold;//[Offset: 0x268, Size: 0x4]
	float DistanceSquared;//[Offset: 0x26c, Size: 0x4]
	bool IsVisibleOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	float OcclusionCheckInterval;//[Offset: 0x274, Size: 0x4]
	delegate OnEndPlay;//[Offset: 0x278, Size: 0x10]
	ODUIWorldSpaceItemBase* WorldIndicatorWidget;//[Offset: 0x298, Size: 0x8]
	ODUIRadarItem* MinimapWidget;//[Offset: 0x2a0, Size: 0x8]
	void UpdateTeamAttitude(byte NewAttitude);// 0x53e7488
	ODUIWorldSpaceItemBase* SpawnWorldIndicatorWidget(ODPlayerController* OwningPlayer);// 0x53e73a8
	ODUIRadarItem* SpawnMinimapWidget(ODPlayerController* OwningPlayer);// 0x53e72f0
	bool ShouldBeRendered();// 0x53e7564
	void SetWidgetClasses(class ODUIWorldSpaceItemBase NewWorldIndicatorWidgetClass, class ODUIRadarItem NewMinimapWidgetClass);// 0x53e759c
	void OnWorldSpaceItemCanvasAvailable();// 0x53e7474
	void OnTeamAttitudeUpdated(byte NewAttitude);// 0x59ef218
	void OnMinimapAvailable();// 0x53e7460
	Vector2D GetScreenPosition();// 0x53e7530

--------------------------------
Class: ODUIRadarItem.UserWidget.Widget.Visual.Object
	Vector2D WidgetSize;//[Offset: 0x260, Size: 0x8]
	Actor* WorldActor;//[Offset: 0x268, Size: 0x8]
	byte SavedTeamId;//[Offset: 0x270, Size: 0x1]
	bool bShouldRotateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	bool bShouldRotateRelativeToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 0x1]
	ODUILocatorBase* RadarLocator;//[Offset: 0x278, Size: 0x8]
	float RadarRadius;//[Offset: 0x280, Size: 0x4]
	bool bIsSpotted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	Widget* RotateWidget;//[Offset: 0x288, Size: 0x8]
	bool bUsingMinimapView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	ODMinimapDefinition* MinimapDefinition;//[Offset: 0x298, Size: 0x8]
	ODPlayerController* CachedPlayerController;//[Offset: 0x2a0, Size: 0x8]
	void UpdateRadarItemPosition(Vector2D position, float Rotation);// 0x59ef218
	void InitItem(GenericUIAnchorComponent* Anchor, ODUILocatorBase* MapLocator, float MapRadius, float MapPixelSize);// 0x59ef218
	void InitForOOBArea(OutOfBoundsArea* OOBArea, ODUILocatorBase* MapLocator, float MapRadius, float MapPixelSize);// 0x59ef218
	void FrameUpdate();// 0x5545004

--------------------------------
Class: ODUILocatorBase.UserWidget.Widget.Visual.Object
	delegate OnChangeDetected;//[Offset: 0x260, Size: 0x10]
	delegate OnSizeChangeDetected;//[Offset: 0x270, Size: 0x10]
	delegate OnLocChangeDetected;//[Offset: 0x280, Size: 0x10]
	Vector2D GlobalTopLeft;//[Offset: 0x290, Size: 0x8]
	Vector2D GlobalSize;//[Offset: 0x298, Size: 0x8]
	Vector2D LocalSize;//[Offset: 0x2a0, Size: 0x8]
	bool ContainsPoint(out const Vector2D GlobalTouchLoc);// 0x55407a8

--------------------------------
Class: OutOfBoundsArea.TriggerVolume.Volume.Brush.Actor.Object
	int OwningSector;//[Offset: 0x280, Size: 0x4]
	int OwningTeam;//[Offset: 0x284, Size: 0x4]
	bool bHardKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bInstantKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	ITGameObjectiveManager* ObjectiveManager;//[Offset: 0x290, Size: 0x8]
	void OnSectorTransitioned(int PreviousSector, int CurrentSector);// 0x55541c0
	void OnOverlapEnd(Actor* OverlappedActor, Actor* OtherActor);// 0x55542b8
	void OnOverlapBegin(Actor* OverlappedActor, Actor* OtherActor);// 0x55543a8
	void GetODCharactersFromActor(out <ODCharacter*> OutCharacters, Actor* InActor);// 0x5554040

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: ITGameObjectiveManager.Actor.Object
	delegate OnGameObjectiveManagerInitialized;//[Offset: 0x258, Size: 0x10]
	delegate OnObjectiveDataArrayUpdated;//[Offset: 0x268, Size: 0x10]
	delegate OnObjectiveArmed;//[Offset: 0x278, Size: 0x10]
	delegate OnObjectiveDestroyed;//[Offset: 0x288, Size: 0x10]
	delegate OnObjectiveDisarmed;//[Offset: 0x298, Size: 0x10]
	delegate OnSectorTransitioned;//[Offset: 0x2a8, Size: 0x10]
	class ITGameObjectiveDelegateSet* DelegateSetClass;//[Offset: 0x2b8, Size: 0x8]
	delegate OnWinningTeamUpdated;//[Offset: 0x2c0, Size: 0x10]
	ITGameObjectiveDelegateSet* DelegateSet;//[Offset: 0x2d0, Size: 0x8]
	<class Object,ITGameRule*> AllGameRules;//[Offset: 0x2d8, Size: 0x50]
	<class Object,ITObjectiveData*> AllObjectiveData;//[Offset: 0x328, Size: 0x50]
	ITObjectiveData*[] ReplicatedObjectiveDataArray;//[Offset: 0x378, Size: 0x10]
	<class Object,ITGameEndCondition*> AllGameEndConditions;//[Offset: 0x388, Size: 0x50]
	class ITGameEndCondition* GameEndReason;//[Offset: 0x3d8, Size: 0x8]
	ITScoringCondition*[] AllScoringConditions;//[Offset: 0x3e0, Size: 0x10]
	ITGameRuleCollection* GameRuleCollection;//[Offset: 0x3f0, Size: 0x8]
	byte NumTeams;//[Offset: 0x3f8, Size: 0x1]
	int CurrentSector;//[Offset: 0x3fc, Size: 0x4]
	GenericTeamId TriggeringTeam;//[Offset: 0x404, Size: 0x1]
	GenericTeamId AttackingTeam;//[Offset: 0x405, Size: 0x1]
	bool bIsInSectorTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 0x1]
	float SectorTransitionEndTime;//[Offset: 0x408, Size: 0x4]
	FName[] SectorMapNames;//[Offset: 0x410, Size: 0x10]
	int CachedWinningTeam;//[Offset: 0x420, Size: 0x4]
	int TotalNumSectors;//[Offset: 0x424, Size: 0x4]
	void TriggerGameEnd(int WinningTeamIndex);// 0x53f8934
	void SetupInitialSector(const int InSector);// 0x53f8c60
	void SetIsInSectorTransition(bool NewInSectorTransition);// 0x53f8b7c
	void OnRep_DelegateSet();// 0x53f88f8
	void OnRep_CurrentSector(const int LastSector);// 0x53f8850
	void OnRep_CachedWinningTeam();// 0x53f8ac8
	void OnRep_AllObjectiveData();// 0x53f890c
	void OnGameEndedWithoutAnAction();// 0x53f8920
	bool IsInSectorTransition();// 0x53f8c28
	bool IsInitialized();// 0x53f8b60
	void IncrementSector(const int TriggeringTeam);// 0x53f9264
	GenericTeamId GetTriggeringTeam();// 0x53f8d04
	int GetSectorCount();// 0x53f8b10
	ITScoringCondition*[] GetScoringConditions();// 0x53f8fc8
	int GetPreviousSector();// 0x53f8d20
	ITObjectiveData* GetObjectiveData(class ITObjectiveData ObjectiveDataClass);// 0x53f8d94
	int GetNumTeams();// 0x53f8c44
	ITGameRule* GetGameRule(class ITGameRule GameRuleClass);// 0x53f910c
	enum GetGameModeType();// 0x53f8a94
	class ITGameEndCondition GetGameEndReason();// 0x53f8d78
	ITGameEndCondition* GetGameEndCondition(class ITGameEndCondition GameEndConditionClass);// 0x53f8f18
	ITGameObjectiveDelegateSet* GetDelegateSet();// 0x53f8b44
	FString GetCurrentSectorName();// 0x53f89dc
	int GetCurrentSector();// 0x53f8d3c
	int GetCachedWinningTeam();// 0x53f8adc
	void GetAllGameRules(out ITGameRule*[] OutArray);// 0x53f904c
	void GetAllGameEndConditions(out ITGameEndCondition*[] OutArray);// 0x53f8e58
	bool GameHasEnded();// 0x53f8d58
	void DecrementSector(const int TriggeringTeam);// 0x53f91bc
	void CleanupAllGameEndConditions();// 0x53f8e44
	void CheckForTransitioningPlayers(bool TransitionStart);// 0x53f87a0

--------------------------------
Class: GenericTeamId
	byte TeamId;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ITGameObjectiveDelegateSet.Actor.Object
	delegate OnPlayerDeath;//[Offset: 0x248, Size: 0x10]
	delegate OnObjectiveSpawned;//[Offset: 0x258, Size: 0x10]
	delegate OnPlayerSpawned;//[Offset: 0x268, Size: 0x10]
	delegate OnGameEnded;//[Offset: 0x278, Size: 0x10]
	void Multicast_PlayerSpawnedEvent(Controller* PlayerController, Pawn* NewPawn, bool bIsRespawn);// 0x53f7ebc
	void Multicast_PlayerDeathEvent(Pawn* DeadPawn);// 0x53f80b8
	void Multicast_ObjectiveSpawnedEvent(Actor* ObjectiveActor);// 0x53f8008
	void Multicast_GameEndedEvent(int WinningTeamIndex);// 0x53f7e0c

--------------------------------
Class: ITScoringCondition.ITGameRule.Object
	int PointValue;//[Offset: 0x40, Size: 0x4]
	delegate OnConditionMet;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: ITGameRule.Object
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int RequiredSector;//[Offset: 0x34, Size: 0x4]
	void SetEnabled(bool bInEnabled);// 0x53fc208
	void OnSectorChanged(int OldSector, int NewSector);// 0x53fc0a0
	void OnPostRulesAddedToObjectiveManager();// 0x53fc198
	void OnEnabledChanged();// 0x53fc1b4
	void OnBeginGame();// 0x53fc2b8
	void Init(ITGameObjectiveManager* InObjectiveManager);// 0x53fc2d4
	int GetRequiredSector();// 0x53fc084
	bool GetEnabled();// 0x53fc1d0

--------------------------------
Class: ITObjectiveData.Object
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bLocalPlayerOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ITGameEndCondition.Object
	delegate OnSectorIncrement;//[Offset: 0x30, Size: 0x10]
	delegate OnSectorDecrement;//[Offset: 0x40, Size: 0x10]
	delegate OnGameEnded;//[Offset: 0x50, Size: 0x10]
	delegate OnGameEndedWithoutAnAction;//[Offset: 0x60, Size: 0x10]
	int TeamSpecificRule;//[Offset: 0x70, Size: 0x4]
	int RequiredSector;//[Offset: 0x8c, Size: 0x4]
	bool SpecifiesWinner();// 0x53ff73c
	void OnSectorChanged(int OldSector, int NewSector);// 0x53ff77c
	void OnPostRulesAddedToObjectiveManager();// 0x53ff890
	void OnBeginGame();// 0x53ff934
	void Init(ITGameObjectiveManager* InObjectiveManger, int InNumTeams);// 0x53ff96c
	void IncrementSector(const int WinningTeam);// 0x53ff68c
	bool HasEndedGame();// 0x53ff510
	int GetWinningTeamIndex();// 0x53ff8c8
	int GetRequiredSector();// 0x53ff4f4
	GenericTeamId GetAttackingTeamId();// 0x53ff4b8
	void EndGameWithoutWinner();// 0x53ff874
	void EndGame(const int WinningTeamIndex);// 0x53ff52c
	void DecrementSector(const int WinningTeam);// 0x53ff5dc
	void Cleanup();// 0x53ff950
	void CalculateWinningTeamIndex();// 0x53ff8ac

--------------------------------
Class: ITGameRuleCollection.DataAsset.Object
	FText GameModeName;//[Offset: 0x30, Size: 0x18]
	enum GameModeType;//[Offset: 0x48, Size: 0x1]
	class ITGameEndCondition[] GameEndConditions;//[Offset: 0x50, Size: 0x10]
	FName[] SectorMapNames;//[Offset: 0x60, Size: 0x10]
	class ITGameRule[] GameRules;//[Offset: 0x70, Size: 0x10]
	class ITObjectiveData[] ExplicitObjectiveData;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ODMinimapDefinition.DataAsset.Object
	Texture2D*[] MapTiles;//[Offset: 0x30, Size: 0x10]
	int MapTileRowCount;//[Offset: 0x40, Size: 0x4]
	int MapTileColumnCount;//[Offset: 0x44, Size: 0x4]
	int MapTilePixelSize;//[Offset: 0x48, Size: 0x4]
	Vector2D MapPixelDimensions;//[Offset: 0x4c, Size: 0x8]
	Vector2D MapWorldSpaceCenter;//[Offset: 0x54, Size: 0x8]
	float MapUnitsPerPixel;//[Offset: 0x5c, Size: 0x4]
	float MapWorldSpaceRotationAngle;//[Offset: 0x60, Size: 0x4]
	Vector2D CommanderCamCenter_LegacyPhones;//[Offset: 0x64, Size: 0x8]
	float CommanderCamScale_LegacyPhones;//[Offset: 0x6c, Size: 0x4]
	float CommanderCamRotationDegrees_LegacyPhones;//[Offset: 0x70, Size: 0x4]
	Vector2D CommanderCamCenter_WidePhones;//[Offset: 0x74, Size: 0x8]
	float CommanderCamScale_WidePhones;//[Offset: 0x7c, Size: 0x4]
	float CommanderCamRotationDegrees_WidePhones;//[Offset: 0x80, Size: 0x4]
	Vector2D CommanderCamCenter_Tablet;//[Offset: 0x84, Size: 0x8]
	float CommanderCamScale_Tablet;//[Offset: 0x8c, Size: 0x4]
	float CommanderCamRotationDegrees_Tablet;//[Offset: 0x90, Size: 0x4]
	float GetMapWorldSpaceRotationAngle();// 0x54e330c
	Vector2D GetMapWorldSpaceCenter();// 0x54e3344
	float GetMapUnitsPerPixel();// 0x54e3328
	Texture2D*[] GetMapTiles();// 0x54e33d0
	int GetMapTileRowCount();// 0x54e33b4
	int GetMapTilePixelSize();// 0x54e337c
	int GetMapTileColumnCount();// 0x54e3398
	Vector2D GetMapPixelDimensions();// 0x54e3360
	float GetCommanderCamScale_WidePhones();// 0x54e3280
	float GetCommanderCamScale_Tablet();// 0x54e322c
	float GetCommanderCamScale_LegacyPhones();// 0x54e32d4
	float GetCommanderCamRotationDegrees_WidePhones();// 0x54e3264
	float GetCommanderCamRotationDegrees_Tablet();// 0x54e3210
	float GetCommanderCamRotationDegrees_LegacyPhones();// 0x54e32b8
	Vector2D GetCommanderCamCenter_WidePhones();// 0x54e329c
	Vector2D GetCommanderCamCenter_Tablet();// 0x54e3248
	Vector2D GetCommanderCamCenter_LegacyPhones();// 0x54e32f0

--------------------------------
Class: AttitudeBasedPingInfo
	<enum,GameplayTag> TagByAttitude;//[Offset: 0x0, Size: 0x50]
	<enum,FText> MessageLogByAttitude;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: PingCooldownTickFunction.TickFunction
	float CurrentHeat;//[Offset: 0x28, Size: 0x4]
	bool bOverheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: VehicleSeatComponent.SceneComponent.ActorComponent.Object
	delegate OnCurrentViewChanged;//[Offset: 0x200, Size: 0x10]
	delegate OnVehicleKitChanged;//[Offset: 0x210, Size: 0x10]
	delegate OnCharacterChanged;//[Offset: 0x220, Size: 0x10]
	delegate OnVehicleSeatBodyYawChanged;//[Offset: 0x230, Size: 0x10]
	delegate OnVehicleTurretYawChanged;//[Offset: 0x240, Size: 0x10]
	delegate OnVehicleTurretPitchChanged;//[Offset: 0x250, Size: 0x10]
	enum SeatType;//[Offset: 0x260, Size: 0x1]
	bool bShouldShowCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	bool bUseCharacterCamera1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1]
	bool bCharacterCanUseOwnEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263, Size: 0x1]
	bool bBouncyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	bool bBindHandsToSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1]
	bool bWantsPrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 0x1]
	FName SteeringWheelBone;//[Offset: 0x268, Size: 0x8]
	bool bUseCharacterForAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	class MovementJoystickWidget* MoveJoystickWidget;//[Offset: 0x278, Size: 0x8]
	class JoystickWidget* AimJoystickWidget;//[Offset: 0x280, Size: 0x8]
	ODPlayerState* PlayerState;//[Offset: 0x288, Size: 0x8]
	Controller* Controller;//[Offset: 0x290, Size: 0x8]
	ODCharacter* Character;//[Offset: 0x298, Size: 0x8]
	ODVehicle* Vehicle;//[Offset: 0x2a0, Size: 0x8]
	VehicleKitComponent* CurrentVehicleKitComponent;//[Offset: 0x2a8, Size: 0x8]
	VehicleKitComponent*[] VehicleKitComponents;//[Offset: 0x2b0, Size: 0x10]
	VehicleCameraControllerComponent* FirstPersonCameraController;//[Offset: 0x2c0, Size: 0x8]
	VehicleCameraControllerComponent* ThirdPersonCameraController;//[Offset: 0x2c8, Size: 0x8]
	enum DefaultCameraView;//[Offset: 0x2d0, Size: 0x1]
	enum CurrentCameraView;//[Offset: 0x2d1, Size: 0x1]
	enum AimingMode;//[Offset: 0x2d2, Size: 0x1]
	float MoveJoystickScale;//[Offset: 0x2d4, Size: 0x4]
	float YawRotationDegreesPerJoystick;//[Offset: 0x2d8, Size: 0x4]
	float SightZeroDistance;//[Offset: 0x2dc, Size: 0x4]
	TurretRotationComponent*[] TurretRotationComponents;//[Offset: 0x2e0, Size: 0x10]
	VehicleSeatFullState* SynchronizedState;//[Offset: 0x2f8, Size: 0x8]
	Quat LastVehicleQuat;//[Offset: 0x300, Size: 0x10]
	ODAimAssistTargetableComponent* AimAssistSeatOverride;//[Offset: 0x310, Size: 0x8]
	bool TryGetLookAtTarget(out Vector OutLookAtTarget);// 0x55b4f24
	VehicleCameraControllerComponent* TryGetCurrentCameraControllerNonConst();// 0x55b5140
	void ToggleView();// 0x55b512c
	void SwapEquipment();// 0x55b4fe0
	void SetTurretSpeedMultiplier(float InTurretSpeedMultiplier);// 0x55b4dd4
	void SetMoveSpeedMultiplier(float InMoveSpeedMultiplier);// 0x55b4e7c
	void SetEquipmentEnabled(bool bInEnabled);// 0x55b4d24
	void SetCurrentVehicleKitComponent(VehicleKitComponent* InVehicleKitComponent);// 0x55b5278
	void SetCameraControllers(VehicleCameraControllerComponent* FirstPersonCameraController, VehicleCameraControllerComponent* ThirdPersonCameraController);// 0x55b5188
	void RemoveVehicleKitComponent(VehicleKitComponent* InVehicleKitComponent);// 0x55b5320
	void RemoveTurretComponent(TurretRotationComponent* InTurretComponent);// 0x55b4bd4
	void RegisterSeatWithVehicle();// 0x55b5528
	void OnRep_PlayerState(ODPlayerState* PrevPlayerState);// 0x55b4968
	void OnRep_Character(ODCharacter* PrevCharacter);// 0x55b4a10
	void OnReleasedInput(out const GameplayTag Tag);// 0x59ef218
	void OnPressedInput(out const GameplayTag Tag);// 0x59ef218
	void OnClickedInput(out const GameplayTag Tag);// 0x59ef218
	void KitComponent_OnAnyEquipmentUsed(EquipmentActor* UsedEquipment);// 0x55b4ac0
	bool K2_GetHasMultipleEquipments();// 0x55b50a4
	EquipmentActor*[] K2_GetAllEquipments();// 0x55b4ff4
	bool HasPlayerState();// 0x55b5504
	bool HasCharacter();// 0x55b54e0
	ODVehicle* GetVehicleNonConst();// 0x55b54c4
	EquipmentActor* GetUIEquipmentNonConst();// 0x55b50dc
	ODPlayerState* GetPlayerStateNonConst();// 0x55b5470
	class MovementJoystickWidget GetOverrideMoveJoystick();// 0x55b4b84
	class JoystickWidget GetOverrideAimJoystick();// 0x55b4b68
	enum GetCurrentCameraView();// 0x55b5110
	Controller* GetControllerNonConst();// 0x55b548c
	ODCharacter* GetCharacterNonConst();// 0x55b54a8
	float GetAimSensitivityMultiplier();// 0x55b4ba0
	void ClearCameraControllers();// 0x55b5174
	void AddVehicleKitComponent(VehicleKitComponent* InVehicleKitComponent);// 0x55b53c8
	void AddTurretComponent(TurretRotationComponent* InTurretComponent);// 0x55b4c7c

--------------------------------
Class: MovementJoystickWidget.JoystickWidget.UserWidget.Widget.Visual.Object
	Vector2D JoystickStartLocation;//[Offset: 0x2d4, Size: 0x8]
	Vector2D CurrentTouchLocation;//[Offset: 0x2dc, Size: 0x8]
	Vector2D ScaledMoveInput;//[Offset: 0x2ec, Size: 0x8]
	float MoveSpeedPercentage;//[Offset: 0x2f4, Size: 0x4]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	ODPlayerController* PlayerController;//[Offset: 0x300, Size: 0x8]

--------------------------------
Class: JoystickWidget.UserWidget.Widget.Visual.Object
	Vector2D RectTopLeftUnit;//[Offset: 0x260, Size: 0x8]
	Vector2D RectSizeUnit;//[Offset: 0x268, Size: 0x8]
	int JoystickIndex;//[Offset: 0x270, Size: 0x4]
	float MaxJoystickDistance;//[Offset: 0x274, Size: 0x4]
	float CenterDeadZonePercentage;//[Offset: 0x278, Size: 0x4]
	enum AxialDeadzoneType;//[Offset: 0x27c, Size: 0x1]
	float DirectionalDeadZonePercentage;//[Offset: 0x280, Size: 0x4]
	float AxialSectorDeadZoneStartPercentage;//[Offset: 0x284, Size: 0x4]
	float MaxAxialSectorDeadZonePercentage;//[Offset: 0x288, Size: 0x4]
	bool bUpdateHUDWhenInCenterDeadzone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float Scale;//[Offset: 0x290, Size: 0x4]
	float CustomizationScale;//[Offset: 0x294, Size: 0x4]
	Box2D Rect;//[Offset: 0x298, Size: 0x14]
	Vector2D ViewportSize;//[Offset: 0x2ac, Size: 0x8]
	int DisplayPPI;//[Offset: 0x2b4, Size: 0x4]
	float EstimatedViewportDiagonalLength;//[Offset: 0x2b8, Size: 0x4]
	PlayerHUDComponent* PlayerHUD;//[Offset: 0x2c8, Size: 0x8]
	void SetUnitRect(out const Vector2D TopLeft, out const Vector2D SizeUnit);// 0x54087c8
	void SetRect();// 0x54088c4
	void SetJoystickMaxDistance(float InMaxDistance);// 0x54080d8
	void SetCustomizationScale(float InScale);// 0x5408034
	void OnTouchInputUpdated(out const Vector2D TouchLocation, int TouchIndex, float WorldTimestamp);// 0x5408300
	void OnTouchInputEnd(out const Vector2D TouchLocation, int TouchIndex, float WorldTimestamp);// 0x54081b8
	void OnTouchInputBegin(out const Vector2D TouchLocation, int TouchIndex, float WorldTimestamp);// 0x5408590
	void OnTouchFirstMove(out const Vector2D TouchLocation, int TouchIndex, float WorldTimestamp);// 0x5408448
	bool IsLocationInsideRect(out const Vector2D TestPoint);// 0x54086d8
	Rectangle2D GetRect();// 0x5408198
	float GetJoystickScale();// 0x540817c
	float GetCustomizationScale();// 0x5408018
	bool DrawDebugDeadzone();// 0x5407fe0

--------------------------------
Class: Rectangle2D
	Vector2D TopLeft;//[Offset: 0x0, Size: 0x8]
	Vector2D BottomRight;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PlayerHUDComponent.ActorComponent.Object
	delegate OnPlayerScoreChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnLeftFireButtonPressed;//[Offset: 0xc0, Size: 0x10]
	delegate OnLeftFireButtonReleased;//[Offset: 0xd0, Size: 0x10]
	delegate OnRightFireButtonPressed;//[Offset: 0xe0, Size: 0x10]
	delegate OnRightFireButtonReleased;//[Offset: 0xf0, Size: 0x10]
	delegate OnAutofireButtonPressed;//[Offset: 0x100, Size: 0x10]
	delegate OnAutofireButtonReleased;//[Offset: 0x110, Size: 0x10]
	delegate OnEquipmentSwapped;//[Offset: 0x120, Size: 0x10]
	delegate OnCanAutofireChanged;//[Offset: 0x130, Size: 0x10]
	delegate OnAutofirePausedChanged;//[Offset: 0x140, Size: 0x10]
	delegate OnPredictedWeaponHit;//[Offset: 0x150, Size: 0x10]
	delegate OnVerifiedWeaponHit;//[Offset: 0x160, Size: 0x10]
	delegate OnRejectedWeaponHit;//[Offset: 0x170, Size: 0x10]
	delegate OnPredictedCriticalHit;//[Offset: 0x180, Size: 0x10]
	delegate OnVerifiedCriticalHit;//[Offset: 0x190, Size: 0x10]
	delegate OnTargetEnteredAutofire;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTargetLeftAutofire;//[Offset: 0x1b0, Size: 0x10]
	delegate OnWeaponSwapButtonClicked;//[Offset: 0x1c0, Size: 0x10]
	delegate OnSwapToPrimaryClicked;//[Offset: 0x1d0, Size: 0x10]
	delegate OnSwapToSecondaryClicked;//[Offset: 0x1e0, Size: 0x10]
	delegate OnInteractClicked;//[Offset: 0x1f0, Size: 0x10]
	delegate OnSwitchFireModeClicked;//[Offset: 0x200, Size: 0x10]
	delegate OnSniperMaskChanged;//[Offset: 0x210, Size: 0x10]
	delegate OnADSStateChanged;//[Offset: 0x220, Size: 0x10]
	delegate OnCooldownStarted;//[Offset: 0x230, Size: 0x10]
	delegate OnCooldownStopped;//[Offset: 0x240, Size: 0x10]
	delegate OnReloadStarted;//[Offset: 0x250, Size: 0x10]
	delegate OnReloadStopped;//[Offset: 0x260, Size: 0x10]
	delegate OnAmmoPickedUp;//[Offset: 0x270, Size: 0x10]
	delegate OnEquipmentGuidedInteractionStart;//[Offset: 0x280, Size: 0x10]
	delegate OnEquipmentGuidedInteractionEnd;//[Offset: 0x290, Size: 0x10]
	delegate OnCanUseEquipmentChanged;//[Offset: 0x2a0, Size: 0x10]
	delegate OnEnableWorldSpaceWidgets;//[Offset: 0x2b0, Size: 0x10]
	delegate OnDisableWorldSpaceWidgets;//[Offset: 0x2c0, Size: 0x10]
	delegate OnWorldSpaceItemCanvasAvailable;//[Offset: 0x2d0, Size: 0x10]
	delegate OnMinimapAvailable;//[Offset: 0x2e0, Size: 0x10]
	delegate OnTutorialClearGoals;//[Offset: 0x2f0, Size: 0x10]
	delegate OnTutorialEnableHUD;//[Offset: 0x300, Size: 0x10]
	delegate OnTutorialDisableHUD;//[Offset: 0x310, Size: 0x10]
	delegate OnTutorialEnableCapturePoints;//[Offset: 0x320, Size: 0x10]
	delegate OnTutorialDisableCapturePoints;//[Offset: 0x330, Size: 0x10]
	delegate OnTutorialPromptDisplayRequested;//[Offset: 0x340, Size: 0x10]
	delegate OnTutorialPromptDismissed;//[Offset: 0x350, Size: 0x10]
	delegate OnForceDismissTutorialPrompt;//[Offset: 0x360, Size: 0x10]
	delegate OnTutorialGoalReceived;//[Offset: 0x370, Size: 0x10]
	delegate OnTutorialGoalCompleted;//[Offset: 0x380, Size: 0x10]
	delegate OnTutorialActionExecuted;//[Offset: 0x390, Size: 0x10]
	delegate OnTutorialItemCreated;//[Offset: 0x3a0, Size: 0x10]
	delegate OnTutorialEnableItemsRequested;//[Offset: 0x3b0, Size: 0x10]
	delegate OnTutorialCutsceneSkipped;//[Offset: 0x3c0, Size: 0x10]
	delegate OnC4TriggerClicked;//[Offset: 0x3d0, Size: 0x10]
	delegate OnC4PlacePressed;//[Offset: 0x3e0, Size: 0x10]
	delegate OnC4PlaceReleased;//[Offset: 0x3f0, Size: 0x10]
	delegate OnSwapToGearClicked;//[Offset: 0x400, Size: 0x10]
	delegate OnSwapToGrenadeClicked;//[Offset: 0x410, Size: 0x10]
	delegate OnMeleePressed;//[Offset: 0x420, Size: 0x10]
	delegate OnMeleeReleased;//[Offset: 0x430, Size: 0x10]
	delegate OnReloadClicked;//[Offset: 0x440, Size: 0x10]
	delegate OnStickGestureStarted;//[Offset: 0x450, Size: 0x10]
	delegate OnStickGestureUpdated;//[Offset: 0x460, Size: 0x10]
	delegate OnStickGestureFinished;//[Offset: 0x470, Size: 0x10]
	delegate OnStickMovementRangesCreated;//[Offset: 0x480, Size: 0x10]
	delegate OnStickScaleChanged;//[Offset: 0x490, Size: 0x10]
	delegate OnAutorunClicked;//[Offset: 0x4a0, Size: 0x10]
	delegate OnMovementJoystickWidgetAdded;//[Offset: 0x4b0, Size: 0x10]
	delegate OnMovementJoystickWidgetRemoved;//[Offset: 0x4c0, Size: 0x10]
	delegate OnAimJoystickWidgetAdded;//[Offset: 0x4d0, Size: 0x10]
	delegate OnAimJoystickWidgetRemoved;//[Offset: 0x4e0, Size: 0x10]
	delegate OnInputStart;//[Offset: 0x4f0, Size: 0x10]
	delegate OnInputFirstMove;//[Offset: 0x500, Size: 0x10]
	delegate OnInputUpdated;//[Offset: 0x510, Size: 0x10]
	delegate OnInputEnd;//[Offset: 0x520, Size: 0x10]
	delegate OnCrouchClicked;//[Offset: 0x530, Size: 0x10]
	delegate OnProneClicked;//[Offset: 0x540, Size: 0x10]
	delegate OnJumpClicked;//[Offset: 0x550, Size: 0x10]
	delegate OnTraversalClicked;//[Offset: 0x560, Size: 0x10]
	delegate OnStandClicked;//[Offset: 0x570, Size: 0x10]
	delegate OnParachuteClicked;//[Offset: 0x580, Size: 0x10]
	delegate OnDetachParachuteClicked;//[Offset: 0x590, Size: 0x10]
	delegate OnAllowedStancesChanged;//[Offset: 0x5a0, Size: 0x10]
	delegate OnEnterVehicleClicked;//[Offset: 0x5b0, Size: 0x10]
	delegate OnExitVehicleClicked;//[Offset: 0x5c0, Size: 0x10]
	delegate OnVehicleDpadPressed;//[Offset: 0x5d0, Size: 0x10]
	delegate OnVehicleDpadReleased;//[Offset: 0x5e0, Size: 0x10]
	delegate OnVehicleBrakePressed;//[Offset: 0x5f0, Size: 0x10]
	delegate OnVehicleBrakeReleased;//[Offset: 0x600, Size: 0x10]
	delegate OnVehicleUpPressed;//[Offset: 0x610, Size: 0x10]
	delegate OnVehicleUpReleased;//[Offset: 0x620, Size: 0x10]
	delegate OnVehicleDownPressed;//[Offset: 0x630, Size: 0x10]
	delegate OnVehicleDownReleased;//[Offset: 0x640, Size: 0x10]
	delegate OnPossessCharacter;//[Offset: 0x650, Size: 0x10]
	delegate OnPossessVehicle;//[Offset: 0x660, Size: 0x10]
	delegate OnUnpossessPawn;//[Offset: 0x670, Size: 0x10]
	delegate OnSwitchViewClicked;//[Offset: 0x680, Size: 0x10]
	delegate OnZoomClicked;//[Offset: 0x690, Size: 0x10]
	delegate OnVehicleBodyYawChanged;//[Offset: 0x6a0, Size: 0x10]
	delegate OnVehicleTurretYawChanged;//[Offset: 0x6b0, Size: 0x10]
	delegate OnVehicleTurretPitchChanged;//[Offset: 0x6c0, Size: 0x10]
	delegate OnVehicleViewChanged;//[Offset: 0x6d0, Size: 0x10]
	delegate OnVehicleEnterSeatButtonClicked;//[Offset: 0x6e0, Size: 0x10]
	delegate OnVehicleEnteredSeat;//[Offset: 0x6f0, Size: 0x10]
	delegate OnProjectileShowIncoming;//[Offset: 0x700, Size: 0x10]
	delegate OnProjectileHideIncoming;//[Offset: 0x710, Size: 0x10]
	delegate OnSpecializationStart;//[Offset: 0x720, Size: 0x10]
	delegate OnSpecializationEnd;//[Offset: 0x730, Size: 0x10]
	delegate ONUIAnchorCreated;//[Offset: 0x740, Size: 0x10]
	delegate OnUIAnchorDestroyed;//[Offset: 0x750, Size: 0x10]
	delegate OnBPUIInitialized;//[Offset: 0x760, Size: 0x10]
	delegate OnLocalPlayerSpawned;//[Offset: 0x770, Size: 0x10]
	delegate OnPlayerKilled;//[Offset: 0x780, Size: 0x10]
	delegate OnLocalPlayerKilledSomeone;//[Offset: 0x790, Size: 0x10]
	delegate OnSettingsButtonClicked;//[Offset: 0x7a0, Size: 0x10]
	delegate OnMailButtonClicked;//[Offset: 0x7b0, Size: 0x10]
	delegate OnMatchScoreClicked;//[Offset: 0x7c0, Size: 0x10]
	delegate OnHealingSourceApplied;//[Offset: 0x7d0, Size: 0x10]
	delegate OnInteractionTypeChanged;//[Offset: 0x7e0, Size: 0x10]
	delegate OnUITimerDisplayRequested;//[Offset: 0x7f0, Size: 0x10]
	delegate OnStopwatchStartRequested;//[Offset: 0x800, Size: 0x10]
	delegate OnStopwatchUpdateRequested;//[Offset: 0x810, Size: 0x10]
	delegate OnStopwatchStopRequested;//[Offset: 0x820, Size: 0x10]
	delegate OnStopwatchClearRequested;//[Offset: 0x830, Size: 0x10]
	delegate OnGoingToCommanderCam;//[Offset: 0x840, Size: 0x10]
	delegate OnReturningFromCommanderCam;//[Offset: 0x850, Size: 0x10]
	delegate OnPlayerWantsRespawn;//[Offset: 0x860, Size: 0x10]
	delegate OnPlayerSpawnStatus;//[Offset: 0x870, Size: 0x10]
	delegate OnPlayerPrimaryPawnChanged;//[Offset: 0x880, Size: 0x10]
	delegate OnReviveRequested;//[Offset: 0x890, Size: 0x10]
	delegate OnReviveExpired;//[Offset: 0x8a0, Size: 0x10]
	delegate OnAcceptReviveClicked;//[Offset: 0x8b0, Size: 0x10]
	delegate OnWorldSpaceItemRemoved;//[Offset: 0x8c0, Size: 0x10]
	delegate OnEnteringOutOfBounds;//[Offset: 0x8d0, Size: 0x10]
	delegate OnExitingOutOfBounds;//[Offset: 0x8e0, Size: 0x10]
	delegate OnObjectiveMarked;//[Offset: 0x8f0, Size: 0x10]
	delegate OnObjectiveStateChanged;//[Offset: 0x900, Size: 0x10]
	delegate OnUpdatedConquestZoneOccupancy;//[Offset: 0x910, Size: 0x10]
	delegate OnArmingStarted;//[Offset: 0x920, Size: 0x10]
	delegate OnArmingFinished;//[Offset: 0x930, Size: 0x10]
	delegate OnDisarmingStarted;//[Offset: 0x940, Size: 0x10]
	delegate OnDisarmingFinished;//[Offset: 0x950, Size: 0x10]
	delegate OnBaseSecured;//[Offset: 0x960, Size: 0x10]
	delegate OnBaseLost;//[Offset: 0x970, Size: 0x10]
	delegate OnTaskReceived;//[Offset: 0x980, Size: 0x10]
	delegate PlayerCameraStateChanged;//[Offset: 0x990, Size: 0x10]
	delegate OnCrosshairPing;//[Offset: 0x9a0, Size: 0x10]
	delegate OnSelfPing;//[Offset: 0x9b0, Size: 0x10]
	delegate OnMapPing;//[Offset: 0x9c0, Size: 0x10]
	delegate OnPingReceived;//[Offset: 0x9d0, Size: 0x10]
	delegate OnGenericObjectiveMessageReceived;//[Offset: 0x9e0, Size: 0x10]
	float CurrentEquipmentAutofireWarmupTime;//[Offset: 0x9f0, Size: 0x4]
	bool bIsSetupForFTUE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 0x1]
	bool bIsInsideConquestPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f5, Size: 0x1]
	ODCharacter* PossessedCharacter;//[Offset: 0x9f8, Size: 0x8]
	VehicleSeatComponent* PossessedVehicleSeat;//[Offset: 0xa00, Size: 0x8]
	EquipmentActor* CurrentEquipment;//[Offset: 0xa08, Size: 0x8]
	VehicleKitComponent* CurrentVehicleKitComponent;//[Offset: 0xa10, Size: 0x8]
	BandolierComponent*[] PreviousBandolierComponents;//[Offset: 0xa18, Size: 0x10]
	Actor* ClosestObjectivePoint;//[Offset: 0xa28, Size: 0x8]
	Actor*[] NearestVisibleObjectivePoints;//[Offset: 0xa30, Size: 0x10]
	class EquipmentHUD* EquipmentHUDClass;//[Offset: 0xa40, Size: 0x8]
	EquipmentHUD*[] EquipmentHuds;//[Offset: 0xa48, Size: 0x10]
	ODPlayerController* OwningController;//[Offset: 0xa58, Size: 0x8]
	ODUIWorldSpaceItemCanvasBase* WorldSpaceItemCanvas;//[Offset: 0xa60, Size: 0x8]
	UserWidget* MinimapWidget;//[Offset: 0xa68, Size: 0x8]
	enum LastInteractionTarget;//[Offset: 0xa70, Size: 0x1]
	float HitMarkerDamageThreshold;//[Offset: 0xa74, Size: 0x4]
	float CriticalHitMarkerDamageThreshold;//[Offset: 0xa78, Size: 0x4]
	TimerHandle RefreshNearestObjectivePointsTimerHandle;//[Offset: 0xa80, Size: 0x8]
	void UnregisterVehicleKitComponents();// 0x55693d0
	void SetWorldSpaceItemCanvas(ODUIWorldSpaceItemCanvasBase* CanvasWidget);// 0x556a494
	void SetMinimapWidget(UserWidget* Minimap);// 0x556a394
	void RespondToBPUIInitialized();// 0x556a380
	void RegisterVehicleKitComponents(VehicleSeatComponent* VehicleSeatComponent);// 0x55693e4
	void RefreshNearestObjectivePoints();// 0x556a558
	void OnVerifiedWeaponHitHandler(out const Actor*[] HitActors, float DealtDamage);// 0x556a024
	void OnVerifiedCriticalHitHandler(out const Actor*[] CriticallyHitActors, float DealtDamage);// 0x5569d18
	void OnVehicleTurretRotationYawChanged(FName TurretID, float Yaw);// 0x5568cd8
	void OnVehicleTurretRotationPitchChanged(FName TurretID, float Yaw);// 0x5568be4
	void OnVehicleSeatViewChanged(enum PointOfView);// 0x5568dcc
	void OnVehicleSeatBodyYawChanged(float Yaw);// 0x5568b3c
	void OnVehicleKitChanged(VehicleKitComponent* VehicleKitComponent);// 0x5569988
	void OnSoldierKitSpawnedEquipmentListChanged();// 0x55690fc
	void OnSoldierKitReadyStatusChanged(bool bIsReady);// 0x5569270
	void OnSoldierKitCanSwapEquipmentChanged(bool bCanSwap);// 0x5569320
	void OnSoldierKitCanAutofireChanged(bool bCanAutofire);// 0x55691c0
	void OnSoldierKitAutofirePausedChanged(bool bAutofirePaused);// 0x5569110
	void OnSoldierKitAmmoPickedUp(out const AmmoPickupHUDInfo Info);// 0x5569020
	void OnRejectedWeaponHitHandler(out const Actor*[] HitActors, float DealtDamage);// 0x5569f20
	void OnReceiveBootcampGoal(out const GameplayTag Goal);// 0x5568a74
	void OnPredictedWeaponHitHandler(out const Actor*[] HitActors, float PredictedDamage);// 0x556a128
	void OnPredictedCriticalHitHandler(out const Actor*[] CriticallyHitActors, float PredictedDamage);// 0x5569e1c
	void OnPlayerUpdateInteractionTarget(Object* InteractableObject, enum NewInteractTargetType);// 0x5569894
	void OnPlayerReceivePing(out const SquadPing Ping, out const FText PingMessage);// 0x55684f0
	void OnPlayerPossessVehicleSeat(VehicleSeatComponent* NewPossessedVehicleSeat);// 0x5569b20
	void OnPlayerPossessCharacter(ODCharacter* NewPossessedCharacter);// 0x5569c70
	void OnPlayerOutOfBoundsUpdated(bool bPlayerIsOutOfBounds, float DisplayTime);// 0x5569a30
	void OnPlayerGetPlayerState(ODPlayerState* NewPlayerState);// 0x5569bc8
	void OnPlayerCharacterDeath(Actor* KilledActor);// 0x5568e74
	void OnPawnEquipWeapon(EquipmentActor* NewEquipment);// 0x556973c
	void OnMatchPhaseChanged(enum PreviousMatchState, enum CurrentMatchState);// 0x556868c
	void OnManagerClassesReplicated();// 0x5568b28
	void OnHealthComponentHealingApplied(out const enum[] ActiveSources, float Amount);// 0x5568f1c
	void OnEquipmentZoomChanged(byte ZoomLevel);// 0x5569694
	void OnEquipmentReloadStart(float TotalReloadTime, float ElapsedTime);// 0x55694a0
	void OnEquipmentReloadEnd();// 0x556948c
	void OnEquipmentCooldownStart(float TotalCooldownTime, float ElapsedTime);// 0x55695a4
	void OnEquipmentCooldownEnd();// 0x5569590
	void OnCompleteBootcampGoal(out const GameplayTag Goal);// 0x55689c0
	void OnClearBootcampGoals(bool bClearCompletedGoalsOnly);// 0x5568910
	void OnCharacterCanUseEquipmentChanged(bool bCanUseEquipment);// 0x55697e4
	void OnCharacterAllowedStancesChanged(bool bAllowStand, bool bAllowCrouch, bool bAllowProne, bool bAllowParachute);// 0x5568780
	void OnAnyPlayerKilledHandler(const PlayerState* KillerState, const PlayerState* VictimState, out const PrimaryPawnDeath PawnDeathInfo);// 0x556a22c
	bool IsMinimapAvailable();// 0x556a43c
	ODUIWorldSpaceItemCanvasBase* GetWorldSpaceItemCanvas();// 0x556a53c
	EquipmentActor* GetSelectedEquipment();// 0x556a660
	VehicleSeatComponent* GetPossessedVehicleSeat();// 0x556a60c
	ODCharacter* GetPossessedCharacter();// 0x556a628
	Actor* GetPingedWorldWidgetActor();// 0x556a460
	Actor*[] GetNearestVisibleObjectivePoints();// 0x556a56c
	EquipmentActor* GetCurrentEquipment();// 0x556a644
	Actor* GetClosestObjectivePoint();// 0x556a5f0

--------------------------------
Class: ODUIWorldSpaceItemCanvasBase.UserWidget.Widget.Visual.Object
	CanvasPanel* PrimaryCanvas;//[Offset: 0x260, Size: 0x8]
	ODUIWorldSpaceItemBase*[] ItemsToTick;//[Offset: 0x268, Size: 0x10]
	ODUIPlayerWidgetBase*[] ActivePlayerWidgets;//[Offset: 0x278, Size: 0x10]
	float ScreenCenterCheckRadiusOffset;//[Offset: 0x288, Size: 0x4]
	int MaxAllyPlayerWidgetsOnScreen;//[Offset: 0x28c, Size: 0x4]
	int MaxEnemyPlayerWidgetsOnScreen;//[Offset: 0x290, Size: 0x4]
	float FullItemUpdatePeriod;//[Offset: 0x294, Size: 0x4]
	float ScreenLimitRefreshPeriod;//[Offset: 0x298, Size: 0x4]
	ODUIWorldSpaceItemBase* NearestScreenCenterItem;//[Offset: 0x2a0, Size: 0x8]
	ODUIPlayerWidgetBase*[] AllyPlayerWidgetsSortedByDistance;//[Offset: 0x2c0, Size: 0x10]
	ODUIPlayerWidgetBase*[] EnemyPlayerWidgetsSortedByDistance;//[Offset: 0x2d0, Size: 0x10]
	void RemoveWorldSpaceItem(ODUIWorldSpaceItemBase* RemovedItem);// 0x55497c8
	void RefreshOnScreenLimitStatus();// 0x5549798
	ODUIWorldSpaceItemBase* GetNearestScreenCenterItem();// 0x55497ac
	CanvasPanelSlot* AddWorldSpaceItem(ODUIWorldSpaceItemBase* NewItem);// 0x5549870

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x727fe64
	void SetSize(Vector2D InSize);// 0x72802c8
	void SetPosition(Vector2D InPosition);// 0x72803a0
	void SetOffsets(Margin InOffset);// 0x72801e8
	void SetMinimum(Vector2D InMinimumAnchors);// 0x727fd8c
	void SetMaximum(Vector2D InMaximumAnchors);// 0x727fce8
	void SetLayout(out const AnchorData InLayoutData);// 0x72804b0
	void SetAutoSize(bool InbAutoSize);// 0x727ff44
	void SetAnchors(Anchors InAnchors);// 0x7280104
	void SetAlignment(Vector2D InAlignment);// 0x7280028
	int GetZOrder();// 0x727fe30
	Vector2D GetSize();// 0x7280294
	Vector2D GetPosition();// 0x728036c
	Margin GetOffsets();// 0x72801b0
	AnchorData GetLayout();// 0x7280444
	bool GetAutoSize();// 0x727ff0c
	Anchors GetAnchors();// 0x72800cc
	Vector2D GetAlignment();// 0x727fff4

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* content);// 0x727f7c4

--------------------------------
Class: ODUIPlayerWidgetBase.ODUIBaseHealthWidget.ODUIWorldSpaceItemBase.UserWidget.Widget.Visual.Object
	float DamageRevealDuration;//[Offset: 0x298, Size: 0x4]
	bool bIsSquadmate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool bCachedIsAimedAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	bool bCachedIsOccluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e, Size: 0x1]
	bool bCachedOnScreenLimitReached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f, Size: 0x1]
	byte CachedDistance;//[Offset: 0x2a0, Size: 0x1]
	ODCharacter* AttachedCharacter;//[Offset: 0x2a8, Size: 0x8]
	byte VisibilityState;//[Offset: 0x2b0, Size: 0x1]
	void SwitchVisibilityState(byte NewState);// 0x59ef218
	void SwitchDownedView(bool bIsDowned);// 0x59ef218
	void SetEnemyVisibilityRange(float CloseVisibilityRange, float FarVisibilityRange);// 0x55444b4
	void SetAllyVisibilityRange(float CloseVisibilityRange, float FarVisibilityRange);// 0x55443c4
	void OnCharacterRevived(Actor* Actor);// 0x554431c
	void OnCharacterDowned(Actor* Actor);// 0x5544274
	void OnCharacterDeath(Actor* Actor);// 0x55441cc
	void OnCharacterDamaged(out const DamageReceived DamageReceived);// 0x55440e0
	void HandlePlayerVisibilitySquadmate();// 0x59ef218
	void HandlePlayerVisibilitySpottedEnemy();// 0x59ef218
	void HandlePlayerVisibilityEnemy();// 0x59ef218
	void HandlePlayerVisibilityAlly();// 0x59ef218
	void AttachCharacter(ODCharacter* CharacterToTrack);// 0x55445a4

--------------------------------
Class: ODUIBaseHealthWidget.ODUIWorldSpaceItemBase.UserWidget.Widget.Visual.Object
	bool bVisPipInReticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	bool bVisIsInFiringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	bool bViewerIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1]
	bool bVisOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 0x1]
	bool bVisIsOverhead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bVisWithinDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	bool bVisSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 0x1]
	bool bIsSpotted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b, Size: 0x1]
	LinearColor TeamColor;//[Offset: 0x27c, Size: 0x10]
	float HealthPercent;//[Offset: 0x28c, Size: 0x4]
	ODPlayerController* CachedPlayerController;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: DamageReceived
	Controller* Instigator;//[Offset: 0x0, Size: 0x8]
	Actor* CauserActor;//[Offset: 0x8, Size: 0x8]
	float Damage;//[Offset: 0x10, Size: 0x4]
	ODDamageType* ODDamageType;//[Offset: 0x18, Size: 0x8]
	Vector_NetQuantize DamageOrigin;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantizeNormal DamageDirection;//[Offset: 0x2c, Size: 0xc]
	bool bIsSelfDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bIsCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bKillingBlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float DamageTimestamp;//[Offset: 0x3c, Size: 0x4]
	byte DamageReceivedCount;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: ODDamageType.DamageType.Object
	<FName,float> DamageArmorMultipliers;//[Offset: 0x40, Size: 0x50]
	enum DamageCategory;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: EquipmentActor.Actor.Object
	delegate OnCanEquipChanged;//[Offset: 0x278, Size: 0x10]
	bool bGunSwayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	float IdleBreathingYawRate;//[Offset: 0x28c, Size: 0x4]
	float IdleBreathingYawMagnitude;//[Offset: 0x290, Size: 0x4]
	float IdleBreathingPitchOffset;//[Offset: 0x294, Size: 0x4]
	float IdleBreathingPitchRate;//[Offset: 0x298, Size: 0x4]
	float IdleBreathingPitchMagnitude;//[Offset: 0x29c, Size: 0x4]
	float GunYawRate;//[Offset: 0x2a0, Size: 0x4]
	float GunYawMag;//[Offset: 0x2a4, Size: 0x4]
	float GunKickMag;//[Offset: 0x2a8, Size: 0x4]
	float GunKickRangeOffset;//[Offset: 0x2ac, Size: 0x4]
	float GunKickPower;//[Offset: 0x2b0, Size: 0x4]
	float GunPushbackRate;//[Offset: 0x2b4, Size: 0x4]
	float GunPushbackMag;//[Offset: 0x2b8, Size: 0x4]
	float GunSwayReturnRate;//[Offset: 0x2bc, Size: 0x4]
	float ADSYawRate;//[Offset: 0x2c0, Size: 0x4]
	float ADSYawMag;//[Offset: 0x2c4, Size: 0x4]
	float ADSKickMag;//[Offset: 0x2c8, Size: 0x4]
	float ADSKickRangeOffset;//[Offset: 0x2cc, Size: 0x4]
	float ADSKickPower;//[Offset: 0x2d0, Size: 0x4]
	float ADSPushbackRate;//[Offset: 0x2d4, Size: 0x4]
	float ADSPushbackMag;//[Offset: 0x2d8, Size: 0x4]
	float ADSSwayReturnRate;//[Offset: 0x2dc, Size: 0x4]
	ODAIEquipmentProperties ODAIEquipmentFeatures;//[Offset: 0x2e0, Size: 0x1]
	delegate OnEquipped;//[Offset: 0x2e8, Size: 0x10]
	delegate OnUnequipped;//[Offset: 0x2f8, Size: 0x10]
	delegate OnFullyInitialized;//[Offset: 0x308, Size: 0x10]
	delegate OnStartUse;//[Offset: 0x318, Size: 0x10]
	delegate OnStopUse;//[Offset: 0x328, Size: 0x10]
	delegate OnCooldownStart;//[Offset: 0x338, Size: 0x10]
	delegate OnCooldownEnd;//[Offset: 0x348, Size: 0x10]
	delegate OnEquipmentUsed;//[Offset: 0x358, Size: 0x10]
	delegate OnEquipmentUsedAlternate;//[Offset: 0x368, Size: 0x10]
	delegate OnReloadStart;//[Offset: 0x378, Size: 0x10]
	delegate OnReloadEnd;//[Offset: 0x388, Size: 0x10]
	delegate OnModifiersUpdated;//[Offset: 0x398, Size: 0x10]
	delegate OnZoomChanged;//[Offset: 0x3a8, Size: 0x10]
	delegate OnActivationLogicChanged;//[Offset: 0x3b8, Size: 0x10]
	delegate OnAnimNotifyThrow;//[Offset: 0x3c8, Size: 0x10]
	SkeletalMeshComponent* OverrideSkeletalMeshComponent;//[Offset: 0x3d8, Size: 0x8]
	BandolierComponent* PrimaryBandolier;//[Offset: 0x3e0, Size: 0x8]
	FName ReloadCheckpointName;//[Offset: 0x3e8, Size: 0x8]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x3f0, Size: 0x8]
	SkeletalMeshComponent* ThirdPersonMesh;//[Offset: 0x3f8, Size: 0x8]
	SkeletalMeshComponent* CharmMesh;//[Offset: 0x400, Size: 0x8]
	EquipmentFidelityLevel[] FidelityLevels;//[Offset: 0x408, Size: 0x10]
	SoftObjectPath MedallionCharmPath;//[Offset: 0x418, Size: 0x18]
	EquipmentPartHidingData[] PartHidingData;//[Offset: 0x430, Size: 0x10]
	ParticleSystemComponent* MuzzleFlashParticleComponent;//[Offset: 0x440, Size: 0x8]
	Vector OverallFPHipfireGunAdjustment;//[Offset: 0x448, Size: 0xc]
	ParticleSystemComponent* LaserSightParticleComponent;//[Offset: 0x458, Size: 0x8]
	EquipmentActorFullState* EquipmentActorState;//[Offset: 0x4a8, Size: 0x8]
	EquipmentStateMachine* EquipmentStateMachine;//[Offset: 0x4b0, Size: 0x8]
	BaseKitComponent* KitComponent;//[Offset: 0x4b8, Size: 0x8]
	AttachmentMeshInfo[] AttachmentMeshInfos;//[Offset: 0x4c0, Size: 0x10]
	MaterialInterface* CharmMaterialCache;//[Offset: 0x500, Size: 0x8]
	SoftObjectPath SkinContentPath;//[Offset: 0x508, Size: 0x18]
	SoftObjectPath CharmContentPath;//[Offset: 0x520, Size: 0x18]
	SkeletalMesh* SkinMesh;//[Offset: 0x538, Size: 0x8]
	MaterialInterface* SkinMaterial;//[Offset: 0x540, Size: 0x8]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	bool bIsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1]
	bool bIsInThrowingAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54b, Size: 0x1]
	int CurrentBurstCount;//[Offset: 0x54c, Size: 0x4]
	byte CumulativeShotCount;//[Offset: 0x550, Size: 0x1]
	<byte,uint16> LocalShotNumToBallisticId;//[Offset: 0x558, Size: 0x50]
	EquipmentSpecialization*[] Specializations;//[Offset: 0x5a8, Size: 0x10]
	AttachmentInstance[] AttachmentInstances;//[Offset: 0x5b8, Size: 0x10]
	int SyncedRNGSeed;//[Offset: 0x5d8, Size: 0x4]
	EquipmentStats* EquipmentStats;//[Offset: 0x5e0, Size: 0x8]
	StanceModifierCollection*[] StanceModifierCollections;//[Offset: 0x5e8, Size: 0x10]
	EquipmentModifierCollection*[] ModifierCollections;//[Offset: 0x5f8, Size: 0x10]
	uint16 UseCount;//[Offset: 0x608, Size: 0x2]
	bool bLoopUseFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60a, Size: 0x1]
	bool bHasKitComponentEverBeenSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60b, Size: 0x1]
	bool bSpecializationsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	bool bCanEverVariableZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60d, Size: 0x1]
	bool bUseBlueprintAmmoRegenFunction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60e, Size: 0x1]
	bool bUseBlueprintCanUseFunction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60e, Size: 0x1]
	bool bUseBlueprintPostUseFunction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60e, Size: 0x1]
	Actor* LockTarget;//[Offset: 0x610, Size: 0x8]
	FName[] EquippedAttachmentIDs;//[Offset: 0x618, Size: 0x10]
	StatTimerManagerComponent* GameStatTimerManager;//[Offset: 0x630, Size: 0x8]
	ODProgressionStatUtils* ProgressionStatUtils;//[Offset: 0x638, Size: 0x8]
	SceneComponent* LastAttachParent;//[Offset: 0x640, Size: 0x8]
	ODAdditionalEquipmentUIStats AdditionalEquipmentUIStats;//[Offset: 0x654, Size: 0xc]
	bool bIsVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	bool bReportUsageForAssignments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	bool bAutoLockPotentialTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 0x1]
	FName EquipmentSightBoneName;//[Offset: 0x674, Size: 0x8]
	float AdsSightDistanceFromCamera;//[Offset: 0x67c, Size: 0x4]
	FName CharmAttachSocket;//[Offset: 0x704, Size: 0x8]
	Vector FPHipfireGunAdjustment;//[Offset: 0x70c, Size: 0xc]
	void UseAmmo(int Amount);// 0x53c851c
	void UpdateTargetingParameters();// 0x53c8830
	void TryInitializeSpecializations();// 0x53c8a2c
	bool TryGetExplosionInfo(out float OuterRadius, out float BaseDamage, out float DamageFloor);// 0x53c9ae8
	void StopUse();// 0x53c9d14
	void StartUse();// 0x53c9d30
	void ShowOwnerSpottedOnEnemyRadar();// 0x53c84a8
	void SetPointOfView(enum PointOfView);// 0x53ca470
	void SetEquipmentAttachmentMeshes(SkeletalMeshComponent* ParentMeshComponent, out const AttachmentMeshInfo[] AttachmentMeshInfos, const enum PointOfView);// 0x53c86e0
	void SetEnabled(bool bInEnabled);// 0x53c9610
	void ResetSpecializations(const bool bReinitialize);// 0x53c9318
	void ReportUseNoiseForBots();// 0x53c84f4
	void RegisterDynamicObserver(enum NotifyWhenMatchesThisValue, out const delegate CalledDelegate);// 0x53caccc
	void PlaySoundAtEquipmentLocation(const AkAudioEvent* SoundEvent);// 0x53c8c78
	void PlayOnUseFX();// 0x53c8d20
	enum OnStateMachineChangeState(enum OldState, enum NewState);// 0x53c8a40
	void OnRep_UseCount();// 0x53c8950
	void OnRep_SkinContentPath(out const SoftObjectPath OldSkin);// 0x53c954c
	void OnRep_LoopFX();// 0x53c8934
	void OnRep_IsEquipped();// 0x53c86cc
	void OnRep_EquipmentStats();// 0x53c86b8
	void OnRep_CharmContentPath(out const SoftObjectPath OldCharm);// 0x53c9488
	void OnHasTrackedBallisticsChanged(bool bHasTrackedBallistics);// 0x53ca8d8
	void OnEquipmentAmmoChanged(int Ammo, EquipmentActor* InEquipment);// 0x53ca7e4
	void NotifyCanEquipChanged();// 0x53ca7d0
	void MakeReloadCheckpoint();// 0x53ca254
	bool KitComponentAllowsUse();// 0x53ca760
	void K2_TickRegenerateAmmo(float DeltaSeconds);// 0x59ef218
	bool K2_ShouldIgnoreTargetableActor(const Actor* TargetableActor, out const interface classNone TargetableInterface, bool bIsFriendly);// 0x53cab64
	void K2_ProcessEquipmentInput(out const PlayerCommandState Command, out const EquipmentStateMachineInput EquipmentInput, float DeltaTime);// 0x59ef218
	void K2_PostUse(int TimesUsed);// 0x53c8610
	void K2_GetCustomLaunchLocationAndDirection(out Vector OutOrigin, out Vector OutDirection);// 0x53caa60
	bool K2_CanUse();// 0x53ca988
	bool IsReloading();// 0x53c9150
	bool IsInitialized();// 0x53c9de8
	bool IsInCooldownState();// 0x53c90b0
	bool IsGunSwayEnabled();// 0x53c9ee8
	bool IsAttachmentIDEquipped(out const FName AttachmentID);// 0x53c9258
	void IncrementUseCount();// 0x53c8508
	void IncrementBurstCount();// 0x53c85c4
	bool InADS();// 0x53c9f04
	float GetUseAnimTimeScale();// 0x53ca090
	float GetUIStatHipfireRange(float MinDispersionRangeDeg);// 0x53c97e0
	float GetTotalReloadTime();// 0x53c911c
	float GetThrowAnimTimeScale();// 0x53ca0f8
	SkeletalMesh* GetThirdPersonMesh();// 0x53ca268
	float GetSwapOutAnimTimeScale();// 0x53ca194
	float GetSwapInAnimTimeScale();// 0x53ca1c8
	AkAudioEvent* GetSoundEvent(out const EquipmentSoundEvents SoundEvents, bool bIsSuppressed);// 0x53c8b54
	void GetSniperMaskTexture(out Texture2D* OutTexture);// 0x53c9188
	float GetRemainingCooldownTime();// 0x53c907c
	FName GetReloadCheckpointName();// 0x53ca1fc
	float GetReloadAnimTimeScale();// 0x53ca160
	float GetPreThrowAnimTimeScale();// 0x53ca12c
	Actor* GetPotentialTarget();// 0x53c8e70
	Actor* GetPotentialLockTarget();// 0x53c8e34
	float GetPotentialDamageForAILogic(out const Vector Origin, out ImpactHitResult HitResult);// 0x53c9958
	Pawn* GetOwningPawnNonConst();// 0x53c9d80
	Controller* GetOwningControllerNonConst();// 0x53c9d4c
	Vector GetOverallFPHipfireGunAdjustment();// 0x53c9008
	float GetMoveSpeedMultiplier();// 0x53c9cac
	BaseKitComponent* GetKitComponentNonConst();// 0x53c9db4
	bool GetIsVFXSuppressed();// 0x53c9e78
	bool GetIsFiring();// 0x53c9f98
	bool GetIsEquipped();// 0x53c9f7c
	bool GetIsAudioSuppressed();// 0x53c9eb0
	bool GetIdealCameraScopeDistanceAndScaleForFOV(const float InFOV, out float OutIdealDistance, out float OutScaleValue);// 0x53c8ea4
	EquipmentADSDefinition GetEquipmentZoomLevel();// 0x53c9e24
	void GetEquipmentUIStats(out float[] OutEquipmentUIStats);// 0x53c9898
	EquipmentStats* GetEquipmentStatsNonConst();// 0x53c9c58
	EquipmentStateMachine* GetEquipmentStateMachineNonConst();// 0x53c9c74
	FText GetEquipmentName();// 0x53ca2a4
	FName GetEquipmentID();// 0x53ca43c
	FName GetEquipmentContentID();// 0x53ca408
	float GetElapsedReloadTime();// 0x53c90e8
	float GetElapsedCooldownTime();// 0x53c9048
	float GetDeployAnimTimeScale();// 0x53ca0c4
	bool GetDamageUIStats(out float OutBaseDamage, out float OutDamageFloor);// 0x53c96c0
	class ODDamageType GetDamageTypeForAILogic();// 0x53c9aac
	int GetCurrentBurstCount();// 0x53c9c90
	float GetCameraToScopeSocketDistance();// 0x53c902c
	Vector GetBallisticSpawnLocation();// 0x53ca664
	enum GetActiveActivationLogic();// 0x53ca05c
	bool ExecuteEquipmentAction();// 0x53c85d8
	bool EquipmentAllowsUse(bool bAllowUseDuringFiring);// 0x53ca6a4
	void EquipAttachmentsByID(out const FName[] AttachmentIDs);// 0x53c93c8
	void EquipAttachments(out EquipmentSpecialization*[] OutModifiers);// 0x53c896c
	void DropMagazine(out const FName BoneName, out const Vector DesiredVelocity);// 0x53c8d34
	bool DoesUseShowUpOnRadar();// 0x53c84bc
	bool Detonate();// 0x53c9ce0
	int CustomUse();// 0x53c8b3c
	void ClientSyncRNGSeed(int SeedNumber);// 0x53c884c
	void ClearReloadCheckpoint();// 0x53ca218
	void ChangeActivationLogic(enum NewActivationLogic);// 0x53c9fb4
	bool CanUse(bool bAllowUseDuringFiring);// 0x53ca9a4
	bool CanEquip();// 0x53ca798
	void Attach(SceneComponent* AttachmentComponent, enum PointOfView, out const FName BoneName);// 0x53ca518
	bool AllowAutoADS();// 0x53c9f3c
	void AbortUse();// 0x53c9cf8

--------------------------------
Class: ODAIEquipmentProperties
	enum ODAIEquipmentDefinition;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: BandolierComponent.ActorComponent.Object
	delegate OnAmmoCountChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnReserveAmmoCountChanged;//[Offset: 0xc0, Size: 0x10]
	bool bAllowPickups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	int RemainingClipAmmo;//[Offset: 0x11c, Size: 0x4]
	int ReserveAmmo;//[Offset: 0x120, Size: 0x4]
	EquipmentActor* OwningEquipment;//[Offset: 0x128, Size: 0x8]
	class PhysicalMagazine* PhysicalMagazineClass;//[Offset: 0x140, Size: 0x8]
	int UseAmmo(int NumUses);// 0x5396bac
	void TickAmmoRegen(float DeltaSeconds);// 0x5396704
	void SetReserveMagazines(byte NumMagazines);// 0x5396b04
	void ServerForceReloadClip();// 0x5396c5c
	void OnRep_RemainingClipAmmo();// 0x5396444
	void MulticastForceUpdateClipAmmo(int NewAmmoCount);// 0x5396460
	bool IsTotallyEmpty();// 0x53968c4
	bool IsCurrentClipFull();// 0x5396934
	bool IsCurrentClipEmpty();// 0x53968fc
	byte GiveReserveMagazines(byte NumMagazinesToGrant);// 0x5396a54
	int GiveReserveBullets(int NumBulletsToGrant);// 0x53969a4
	int GetReserveAmmo();// 0x5396854
	int GetMaxClipAmmo();// 0x539688c
	bool GetHasInfiniteMagazines();// 0x53967e4
	bool GetHasBottomlessClip();// 0x539681c
	bool GetEnableAmmoRegen();// 0x53967ac
	int GetCurrentClipAmmo();// 0x5396870
	void DropMagazine(out const FName BoneName, out const Vector DesiredVelocity);// 0x5396604
	void CheckAmmoRegenPossible(int NewCount, EquipmentActor* Equipment);// 0x5396510
	bool CanReload();// 0x539696c

--------------------------------
Class: PhysicalMagazine.Actor.Object
	void PostFixedStep(int FixedStepCount);// 0x555a13c
	void Initialize(out const Vector DesiredVelocity, const EquipmentActor* EquipmentActor);// 0x59ef218
	Transform GetVisualTickTransform();// 0x555a1e4

--------------------------------
Class: ODPropertyModifierSet.Object
	ODPropertyModifierGroup*[] ModifiedPropertyGroups;//[Offset: 0x28, Size: 0x10]
	uint32 ModifierIdIndex;//[Offset: 0x38, Size: 0x4]
	static void UpdatePropertyModifierGroupOnTarget(Object* Target, out const ODPropertyModifierHandle ModifierHandle);// 0x551b8ac
	static void SetScalarOnPropertyModifier(Object* Target, out const ODPropertyModifierHandle ModifierHandle, const float Scalar);// 0x551b76c
	static bool RemovePropertyModifierFromTarget(Object* Target, out const ODPropertyModifierHandle ModifierHandle);// 0x551ba4c
	static bool RemoveAllPropertyModifiersFromTarget(Object* Target);// 0x551b9a0
	static ODPropertyModifierHandle ApplyPropertyModifierToTarget(Object* Target, ODPropertyModifierInfo Info, Object* Instigator);// 0x551bb54

--------------------------------
Class: ODPropertyModifierGroup.Object
	Object* TargetObject;//[Offset: 0x28, Size: 0x8]
	AttributeChain(FieldPathProperty)[] AttributeChain;//[Offset: 0x30, Size: 0x10]
	int[] ArrayIndices;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ODPropertyModifierHandle

--------------------------------
Class: ODPropertyModifierInfo
	enum ModifierType;//[Offset: 0x0, Size: 0x1]
	enum SupportedType;//[Offset: 0x1, Size: 0x1]
	AttributeChain(FieldPathProperty)[] AttributeChain;//[Offset: 0x8, Size: 0x10]
	class Object* AttributeOwner;//[Offset: 0x18, Size: 0x8]
	int[] ArrayIndices;//[Offset: 0x20, Size: 0x10]
	Object* PropertyOwner;//[Offset: 0x30, Size: 0x8]
	bool bLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bBooleanValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float FloatValue;//[Offset: 0x3c, Size: 0x4]
	int64 IntValue;//[Offset: 0x40, Size: 0x8]
	Object* AssetValue;//[Offset: 0x48, Size: 0x8]
	float BooleanLerpThresholdValue;//[Offset: 0x50, Size: 0x4]
	float FloatLerpTargetValue;//[Offset: 0x54, Size: 0x4]
	int64 IntLerpTargetValue;//[Offset: 0x58, Size: 0x8]
	int16 Priority;//[Offset: 0x60, Size: 0x2]
	FString AttributePath;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: EquipmentFidelityLevel
	float AnimUpdateRate;//[Offset: 0x0, Size: 0x4]
	int MinSkeletalLOD;//[Offset: 0x4, Size: 0x4]
	float MeshTickInterval;//[Offset: 0x8, Size: 0x4]
	bool bAnimInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bStaticAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float CharmAnimUpdateRate;//[Offset: 0x10, Size: 0x4]
	bool bRenderCharms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bStaticCharm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]

--------------------------------
Class: EquipmentPartHidingData
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	bool bApplyToAllMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	<byte> MaterialIndicesToModify;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: EquipmentActorFullState.Object
	int CurrentRandomSeed;//[Offset: 0x28, Size: 0x4]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bIsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	byte CurrentBurstCount;//[Offset: 0x2f, Size: 0x1]
	byte CumulativeShotCount;//[Offset: 0x30, Size: 0x1]
	BandolierState BandolierState;//[Offset: 0x32, Size: 0x6]
	EquipmentStateMachineState EquipmentStateMachineState;//[Offset: 0x38, Size: 0x38]
	EquipmentActionFullState* EquipmentActionState;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BandolierState
	uint16 CurrentAmmo;//[Offset: 0x0, Size: 0x2]
	uint16 ReserveAmmo;//[Offset: 0x2, Size: 0x2]
	byte AmmoRegenCounter;//[Offset: 0x4, Size: 0x1]
	byte CurrentRegenProgress;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: EquipmentStateMachineState
	enum CurrentState;//[Offset: 0x0, Size: 0x1]
	enum NextState;//[Offset: 0x1, Size: 0x1]
	float EndStateTime;//[Offset: 0x4, Size: 0x4]
	float CurrentStateTime;//[Offset: 0x8, Size: 0x4]
	float RemainingTime;//[Offset: 0xc, Size: 0x4]
	bool bIsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bNeedsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bFirePendingBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bFiredAtLeastOnceSinceLastIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bHasConsumedFireInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bHasConsumedAltFireInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bSwappedInSinceLastIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	bool bIsInitialReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1]
	int LatestConsumedCommandId;//[Offset: 0x18, Size: 0x4]
	int MaxCommandId;//[Offset: 0x1c, Size: 0x4]
	int[] BufferedCommandIds;//[Offset: 0x20, Size: 0x10]
	EquipmentStateMachineInput PrevInput;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: EquipmentStateMachineInput
	bool bIsFireClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bIsFirePressed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bIsFireReleased;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bIsAltFireClicked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bIsAltFirePressed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bIsAltFireReleased;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bIsReloadClicked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bIsADSClicked;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: EquipmentActionFullState.Object

--------------------------------
Class: EquipmentStateMachine.Object
	delegate OnAnyStateChangedDelegate;//[Offset: 0x188, Size: 0x10]
	enum CurrentState;//[Offset: 0x198, Size: 0x1]
	enum NextState;//[Offset: 0x199, Size: 0x1]
	float EndStateTime;//[Offset: 0x19c, Size: 0x4]
	float CurrentStateTime;//[Offset: 0x1a0, Size: 0x4]
	float RemainingTime;//[Offset: 0x1a4, Size: 0x4]
	EquipmentStats* Definition;//[Offset: 0x1a8, Size: 0x8]
	EquipmentActor* Equipment;//[Offset: 0x1b0, Size: 0x8]
	bool bIsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool bNeedsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	bool bFirePendingBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 0x1]
	bool bInAdsAtBoltActionDelayStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb, Size: 0x1]
	bool bBoltActionForceBlockAds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	bool bFiredAtLeastOnceSinceLastIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 0x1]
	bool bHasStartedFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1be, Size: 0x1]
	bool bSwappedInSinceLastIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 0x1]
	bool bShouldRestartAutomaticFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3, Size: 0x1]
	bool bIsInitialReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 0x1]
	bool bWasClipEmptyAtReloadStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 0x1]
	void RegisterDynamicObserver(enum NotifyWhenMatchesThisValue, out const delegate CalledDelegate);// 0x53d5ba4

--------------------------------
Class: EquipmentStats.InstancedData.DataAsset.Object
	bool bIsCombatWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bCanHeal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bCanReplenishAmmo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bProvidesVision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	float SprintDelayTime;//[Offset: 0x5c, Size: 0x4]
	float SprintADSRecoveryTime;//[Offset: 0x60, Size: 0x4]
	float SprintFireStartingDelayTime;//[Offset: 0x64, Size: 0x4]
	EquipmentUseProperties PrimaryUseProperties;//[Offset: 0x68, Size: 0x130]
	bool bTriggerPrimaryUseFromAlternateFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	bool bStartAltUseAnimationOnPreAltFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	bool bStartUseAnimationOnPreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 0x1]
	EquipmentDelay AltUseDelay;//[Offset: 0x19c, Size: 0x8]
	enum AutofireTargetType;//[Offset: 0x1a4, Size: 0x1]
	bool bAltContinuousFireNeedsNewInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a5, Size: 0x1]
	enum SpawnOrigin;//[Offset: 0x1a6, Size: 0x1]
	AutofireProperties AutoFire;//[Offset: 0x1a8, Size: 0x60]
	bool bShowFireModeSwitchUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	bool bForceUseAutofire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	float SwapInEquipmentTime;//[Offset: 0x20c, Size: 0x4]
	float SwapOutEquipmentTime;//[Offset: 0x210, Size: 0x4]
	float DisableZoomOnSwapTime;//[Offset: 0x214, Size: 0x4]
	EquipmentADSDefinition[] ADSZoomLevels;//[Offset: 0x218, Size: 0x10]
	bool bIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	EquipmentActor* OwningEquipment;//[Offset: 0x230, Size: 0x8]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x238, Size: 0x8]
	bool UsesAutofire();// 0x53db020
	bool ShouldAutoSwapToLastEquipment();// 0x53db0f0
	void SetActivationLogic(enum NewActivationLogic);// 0x53da844
	void OnRep_PrimaryUseProps(out const EquipmentUseProperties PrevPrimaryUseProperties);// 0x53da618
	bool IsCombatWeapon();// 0x53db050
	float GetTimeBetweenPrimaryUses();// 0x53da93c
	enum GetTargetingLogic();// 0x53da828
	float GetSwapZoomDelayTime();// 0x53da95c
	float GetSwapOutTime();// 0x53da978
	float GetSwapInTime();// 0x53da994
	float GetSprintRecoveryTime();// 0x53da760
	float GetSprintFireStartingDelayTime();// 0x53da728
	float GetSprintADSRecoveryTime();// 0x53da744
	GameplayTagContainer GetPrimaryUseBlockedTags();// 0x53da77c
	float GetPrimaryPreDelayUseTime();// 0x53da920
	float GetPrimaryPostDelayUseTime();// 0x53da904
	int GetPrimaryMagazineSize();// 0x53db0d4
	int GetPrimaryBandolierSize();// 0x53db0b8
	BandolierProperties GetPrimaryBandolier();// 0x53db08c
	EquipmentAction* GetPrimaryBallisticLauncherNonConst();// 0x53db070
	bool GetIsVFXSuppressed();// 0x53da6e8
	bool GetIsAudioSuppressed();// 0x53da708
	bool GetForceUseAutofire();// 0x53da9b0
	float GetAutofireWindDownDelayFactor(bool bInADS);// 0x53dac20
	float GetAutofireWarmupTimeForTargetDistance(const float TargetDistance, bool bInADS);// 0x53dab1c
	bool GetAutofireUsesPartialVisibility();// 0x53dafe8
	enum GetAutofireTargetType();// 0x53da80c
	float GetAutofireMaxRange(bool bInADS);// 0x53dad98
	float GetAutofireLeniency(bool bInADS);// 0x53dae54
	bool GetAutofireIsEnabled(bool bInADS);// 0x53daf10
	bool GetAutofireInterruptsWindupOnLeavingTarget();// 0x53dafcc
	float GetAutofireDispersionReactivationTime(bool bInADS);// 0x53dacdc
	bool GetAutofireAllowsDirectHits();// 0x53db004
	enum GetActivationLogic();// 0x53da8e8
	bool AutofireShouldDeactivateForDispersionAngle(const float TargetDistance, const float DispersionDegrees, bool bInADS);// 0x53da9cc

--------------------------------
Class: InstancedData.DataAsset.Object
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	void SetIsReplicated(bool bShouldReplicate);// 0x53f4e4c

--------------------------------
Class: EquipmentUseProperties
	enum ActivationLogic;//[Offset: 0x0, Size: 0x1]
	float RoundsPerMinute;//[Offset: 0x4, Size: 0x4]
	EquipmentDelay UseDelay;//[Offset: 0x8, Size: 0x8]
	bool bAbortUsageIfInputReleaseDuringPreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bUseImmediatelyAfterEquip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bSwapToPrimaryAfterUse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bUnZoomInSwapIn;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bUnZoomInReload;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bContinuousFireNeedsNewInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bFireOnRelease;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bFireOnZoomRelease;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bHoldBoltActionUntilFireRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bHoldBoltActionUntilZoomRelease;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bForceBoltActionOnFireTrigger;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bPerformBoltActionOnFinalRound;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bUnZoomOnBoltAction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bDelayBoltActionUntilInHipfire;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	EquipmentDelay BoltActionDelay;//[Offset: 0x14, Size: 0x8]
	byte BurstLength;//[Offset: 0x1c, Size: 0x1]
	float BurstsPerMinute;//[Offset: 0x20, Size: 0x4]
	float ThrowTime;//[Offset: 0x24, Size: 0x4]
	float FireInputBufferTime;//[Offset: 0x28, Size: 0x4]
	float ReloadInputBufferTime;//[Offset: 0x2c, Size: 0x4]
	enum TargetingLogic;//[Offset: 0x30, Size: 0x1]
	BandolierProperties Bandolier;//[Offset: 0x38, Size: 0x50]
	GameplayTagContainer BlockedTags;//[Offset: 0x88, Size: 0x20]
	EquipmentAction* Launcher;//[Offset: 0xa8, Size: 0x8]
	bool bShowsUpOnRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseSuppressedAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bUseSuppressedVFX;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bOverrideTracerFX;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	float RadarSpotTime;//[Offset: 0xb4, Size: 0x4]
	TracerFXProperties TracerFXOverride;//[Offset: 0xb8, Size: 0x70]
	float MinTimeBetweenBursts;//[Offset: 0x128, Size: 0x4]
	bool bCanEquipWhenOutOfAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bActiveBallisticsAllowEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]

--------------------------------
Class: EquipmentDelay
	float PreDelayTime;//[Offset: 0x0, Size: 0x4]
	float PostDelayTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BandolierProperties
	int UseCount;//[Offset: 0x0, Size: 0x4]
	ReloadData ReloadData;//[Offset: 0x4, Size: 0x24]
	byte StartingMagazineCount;//[Offset: 0x28, Size: 0x1]
	byte MaxMagazineCount;//[Offset: 0x29, Size: 0x1]
	bool bCountCurrentAmmoAsReserve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 0x1]
	bool bInfiniteMagazines;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a, Size: 0x1]
	bool bAutoSwapWhenOutOfUses;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a, Size: 0x1]
	bool bBottomlessClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a, Size: 0x1]
	bool bEnableAmmoRegen;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a, Size: 0x1]
	bool bAlwaysRegenIntoCurrentAmmo;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a, Size: 0x1]
	bool bRegenIntoReserveWhenFull;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a, Size: 0x1]
	bool bRegenIntoCurrentAmmoWhenEmpty;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a, Size: 0x1]
	float SecondsPerMagazineRegen;//[Offset: 0x2c, Size: 0x4]
	int BulletsPerRegen;//[Offset: 0x30, Size: 0x4]
	float RegenSpeedUpMultiplier;//[Offset: 0x34, Size: 0x4]
	int BulletsPerPickup;//[Offset: 0x38, Size: 0x4]
	AkAudioEvent* ReloadAudioStartEvent;//[Offset: 0x40, Size: 0x8]
	AkAudioEvent* ReloadAudioEndEvent;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: ReloadData
	enum ReloadType;//[Offset: 0x0, Size: 0x1]
	float ReloadTime;//[Offset: 0x4, Size: 0x4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bClosedBolt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float ReloadTimeTactical;//[Offset: 0xc, Size: 0x4]
	EquipmentDelay LoopExtraReloadDelay;//[Offset: 0x10, Size: 0x8]
	int ForcedReloadAmount;//[Offset: 0x18, Size: 0x4]
	float ReloadSpeed;//[Offset: 0x1c, Size: 0x4]
	float ReloadThreshold;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: EquipmentAction.Object
	class MatineeCameraShake* CameraShake;//[Offset: 0x28, Size: 0x8]
	float CameraShakeScale;//[Offset: 0x30, Size: 0x4]
	EquipmentActor* OwningEquipment;//[Offset: 0x38, Size: 0x8]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	void UnregisterImpactResultDelegate(Object* Owner);// 0x53c74a0
	void UnregisterDamageResultDelegate(Object* Owner);// 0x53c72e8
	void RegisterImpactResultDelegate(Object* Owner, out const delegate Delegate);// 0x53c7548
	void RegisterDamageResultDelegate(Object* Owner, out const delegate Delegate);// 0x53c7390
	bool IsInitialized();// 0x53c7658
	void GetBoneDamageModifiers(out DamageProperties PropertiesToUpdate);// 0x53c7674

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xa8, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0xac, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0xb0, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0xb4, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0xd8, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0xfc, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x108, Size: 0x4]
	float AnimScale;//[Offset: 0x10c, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x110, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x114, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x118, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x120, Size: 0x8]
	CameraAnimationSequence* AnimSequence;//[Offset: 0x128, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	float OscillatorTimeRemaining;//[Offset: 0x134, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x138, Size: 0x8]
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x180, Size: 0x8]
	static MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x4be6b2c
	static MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x4be6d48
	void ReceiveStopShake(bool bImmediately);// 0x59ef218
	void ReceivePlayShake(float Scale);// 0x59ef218
	bool ReceiveIsFinished();// 0x4be6f18
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x59ef218

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28]
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28]
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50]

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 0x8]
	float PlayRate;//[Offset: 0x30, Size: 0x4]
	float Scale;//[Offset: 0x34, Size: 0x4]
	float BlendInTime;//[Offset: 0x38, Size: 0x4]
	float BlendOutTime;//[Offset: 0x3c, Size: 0x4]
	float RandomSegmentDuration;//[Offset: 0x40, Size: 0x4]
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0x48, Size: 0x8]
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x2d0, Size: 0x8]
	MovieSceneSequence* Sequence;//[Offset: 0x2d8, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e0, Size: 0xe8]

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	float AspectRatio;//[Offset: 0x38, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x5a0]
	float PostProcessBlendWeight;//[Offset: 0x5e0, Size: 0x4]
	CameraFilmbackSettings Filmback;//[Offset: 0x5e4, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x5f0, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x608, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x660, Size: 0x4]
	float CurrentAperture;//[Offset: 0x664, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x668, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: DamageProperties
	<enum,float> PerBoneDamageModifiers;//[Offset: 0x0, Size: 0x50]
	float BaseDamage;//[Offset: 0x50, Size: 0x4]
	float DamageFloor;//[Offset: 0x54, Size: 0x4]
	class ODDamageType* DamageType;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: TracerFXProperties
	FXSystemAsset* TracerParticle;//[Offset: 0x0, Size: 0x8]
	Vector TracerParticleScale;//[Offset: 0x8, Size: 0xc]
	Vector TracerParticleOffset;//[Offset: 0x14, Size: 0xc]
	float InitialForwardOffset;//[Offset: 0x20, Size: 0x4]
	float TracerPercentage;//[Offset: 0x24, Size: 0x4]
	Vector TracerScale;//[Offset: 0x28, Size: 0xc]
	StaticMesh* TracerMesh;//[Offset: 0x38, Size: 0x8]
	Vector TracerOffset;//[Offset: 0x40, Size: 0xc]
	Rotator TracerOffsetRotation;//[Offset: 0x4c, Size: 0xc]
	MaterialInterface* TracerMaterial;//[Offset: 0x58, Size: 0x8]
	CurveVector* TracerScaleCurve;//[Offset: 0x60, Size: 0x8]
	CurveLinearColor* TracerColorCurve;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: AutofireProperties
	bool bAutofireAllowsDirectHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutofireUsesPartialVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutofireInterruptsWindupOnLeavingTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bHipUsesAutofire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	float HipMaxDistance;//[Offset: 0x4, Size: 0x4]
	float HipLeniency;//[Offset: 0x8, Size: 0x4]
	float HipMinimumDelay;//[Offset: 0xc, Size: 0x4]
	float HipMaximumDelay;//[Offset: 0x10, Size: 0x4]
	float HipMinimumDelayDistance;//[Offset: 0x14, Size: 0x4]
	float HipMaximumDelayDistance;//[Offset: 0x18, Size: 0x4]
	float HipWindDownDelayFactor;//[Offset: 0x1c, Size: 0x4]
	bool bHipAutofireDeactivatesForDispersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float HipDispersionDistanceThreshold;//[Offset: 0x24, Size: 0x4]
	float HipDispersionReactivationTime;//[Offset: 0x28, Size: 0x4]
	bool bADSUsesAutofire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	float ADSMaxDistance;//[Offset: 0x30, Size: 0x4]
	float ADSLeniency;//[Offset: 0x34, Size: 0x4]
	float ADSMinimumDelay;//[Offset: 0x38, Size: 0x4]
	float ADSMaximumDelay;//[Offset: 0x3c, Size: 0x4]
	float ADSMinimumDelayDistance;//[Offset: 0x40, Size: 0x4]
	float ADSMaximumDelayDistance;//[Offset: 0x44, Size: 0x4]
	float ADSWindDownDelayFactor;//[Offset: 0x48, Size: 0x4]
	bool bADSAutofireDeactivatesForDispersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float ADSDispersionDistanceThreshold;//[Offset: 0x50, Size: 0x4]
	float ADSDispersionReactivationTime;//[Offset: 0x54, Size: 0x4]
	float WindDownGracePeriodBeforeFiring;//[Offset: 0x58, Size: 0x4]
	float WindDownGracePeriodWhileFiring;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: EquipmentADSDefinition
	ZoomLevelDefinition* ZoomLevelDefinition;//[Offset: 0x0, Size: 0x8]
	ScopeSwayDefinition* ScopeSwayDefinition;//[Offset: 0x8, Size: 0x8]
	ZoomFOVDefinition* ZoomFOVDefinition;//[Offset: 0x10, Size: 0x8]
	float MovementSpeedModifier;//[Offset: 0x18, Size: 0x4]
	AkAudioEvent* AdsAudioEvent;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ZoomLevelDefinition.DataAsset.Object
	CameraActionParams CameraAdjustmentParams;//[Offset: 0x30, Size: 0x28]
	float FireDelayForAutoADS;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: CameraActionParams
	byte BlendFunction;//[Offset: 0x0, Size: 0x1]
	float BlendRate;//[Offset: 0x4, Size: 0x4]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	float MinimumBlendTime;//[Offset: 0xc, Size: 0x4]
	float BlendExponent;//[Offset: 0x10, Size: 0x4]
	Vector TrackTargetCenterOffset;//[Offset: 0x14, Size: 0xc]
	FName TrackTargetFocusBoneName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ScopeSwayDefinition.DataAsset.Object
	float PitchCycleAmplitude;//[Offset: 0x30, Size: 0x4]
	float PitchCyclePeriod;//[Offset: 0x34, Size: 0x4]
	float YawCycleAmplitude;//[Offset: 0x38, Size: 0x4]
	float YawCyclePeriod;//[Offset: 0x3c, Size: 0x4]
	bool bDisableSwayAfterShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float SwayDisableTime;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: ZoomFOVDefinition.DataAsset.Object
	float AimSensitivityMultiplier;//[Offset: 0x30, Size: 0x4]
	bool bResetToDefaultFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float WorldFOV;//[Offset: 0x38, Size: 0x4]
	float MaxVariableFOV;//[Offset: 0x3c, Size: 0x4]
	float WorldFOVMagnification;//[Offset: 0x40, Size: 0x4]
	float MaxVariableFOVMagnification;//[Offset: 0x44, Size: 0x4]
	bool bPauseTargetFOVWhenFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bEnableDollyZoomCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	float VariableFOVDollyZoomSceneWidth;//[Offset: 0x4c, Size: 0x4]
	float VariableFOVDollyZoomCameraToOpticOffset;//[Offset: 0x50, Size: 0x4]
	float VariableFOVDollyZoomCameraToOpticScale;//[Offset: 0x54, Size: 0x4]
	float TimeUntilTargetFOVResumes;//[Offset: 0x58, Size: 0x4]
	float ScreenshakeScale;//[Offset: 0x5c, Size: 0x4]
	float BlendDegreesPerSecond;//[Offset: 0x60, Size: 0x4]
	float MinimumBlendTime;//[Offset: 0x64, Size: 0x4]
	byte BlendFunction;//[Offset: 0x68, Size: 0x1]
	float BlendExponent;//[Offset: 0x6c, Size: 0x4]
	bool bEnableMultiDirectionSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	VariableFOVCastOffset[] VariableFOVSamplingCastDirections;//[Offset: 0x78, Size: 0x10]
	byte SamplingOutlierExclusionLevel;//[Offset: 0x88, Size: 0x1]
	byte SampleRate;//[Offset: 0x89, Size: 0x1]
	byte RaycastCollisionChannel;//[Offset: 0x8a, Size: 0x1]
	float SphereCastRadius;//[Offset: 0x8c, Size: 0x4]
	float MinDistance;//[Offset: 0x90, Size: 0x4]
	float MaxDistance;//[Offset: 0x94, Size: 0x4]
	float MinPercentageChange;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: VariableFOVCastOffset
	float PitchDistance;//[Offset: 0x0, Size: 0x4]
	float RollDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BaseKitComponent.ActorComponent.Object
	delegate OnEquipmentCreated;//[Offset: 0xd8, Size: 0x10]
	delegate OnAnyEquipmentUsed;//[Offset: 0xe8, Size: 0x10]
	delegate OnAnyEquipmentAltUsed;//[Offset: 0xf8, Size: 0x10]
	delegate OnAnyEquipmentStartUse;//[Offset: 0x108, Size: 0x10]
	delegate OnAnyEquipmentStopUse;//[Offset: 0x118, Size: 0x10]
	delegate OnAnyWeaponReloadStart;//[Offset: 0x128, Size: 0x10]
	delegate OnAnyWeaponReloadEnd;//[Offset: 0x138, Size: 0x10]
	delegate OnInputLockTargetChanged;//[Offset: 0x148, Size: 0x10]
	delegate OnEquipmentStateChanged;//[Offset: 0x158, Size: 0x10]
	delegate OnInputSubFixedStep;//[Offset: 0x168, Size: 0x10]
	delegate OnZoomLevelChangedEvent;//[Offset: 0x178, Size: 0x10]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x188, Size: 0x8]
	float AmmoRegenBasePlayerMultiplier;//[Offset: 0x190, Size: 0x4]
	AbilitySystemComponent* OwningAbilitySystem;//[Offset: 0x198, Size: 0x8]
	ADSStateMachine* ADSStateMachine;//[Offset: 0x1a0, Size: 0x8]
	Pawn* OwnerPawn;//[Offset: 0x1a8, Size: 0x8]
	HealthComponent* CachedOwnerHealthComponent;//[Offset: 0x1b0, Size: 0x8]
	EquipmentActor* CurrentEquipment;//[Offset: 0x1b8, Size: 0x8]
	EquipmentActor* RepCurrentEquipment;//[Offset: 0x1c0, Size: 0x8]
	Actor* InputLockTarget;//[Offset: 0x1d0, Size: 0x8]
	Actor* FinalLockTarget;//[Offset: 0x1d8, Size: 0x8]
	bool bFireInputPressedLastFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bCanUseAnyEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	int AmmoRegenSpeedUpCounter;//[Offset: 0x1e4, Size: 0x4]
	float DefaultFOV;//[Offset: 0x1e8, Size: 0x4]
	bool ShouldUseAutoADS();// 0x5398064
	void SetInputLockTarget(Actor* LockTarget);// 0x5397a08
	void SetFirePressed();// 0x5397b2c
	void SetCanUseAnyEquipment(bool bInCanUseEquipment);// 0x5397b80
	void ReturnToHipfire();// 0x53981d0
	void RemoveAmmoRegenSpeedUpSource();// 0x5397acc
	void OnWeaponReloadStart(float TotalReloadTime, float ElapsedTime);// 0x5397c54
	void OnWeaponReloadEnd();// 0x5397c38
	void OnUseAnyEquipmentAlt(EquipmentActor* EquipmentActor);// 0x5397e0c
	void OnUseAnyEquipment(EquipmentActor* EquipmentActor);// 0x5397ebc
	void OnRep_CurrentEquipment(EquipmentActor* OldEquipment);// 0x5397820
	void OnEquipmentStopUse();// 0x5397d44
	void OnEquipmentStartUse();// 0x5397da8
	int K2_GetZoomLevel();// 0x53980e4
	bool IsAmmoRegenSpedUp();// 0x5397af4
	bool IsADSBlocked();// 0x53980a4
	bool HasZoomLevel(byte NewZoomLevel);// 0x539811c
	Actor* GetInputLockTarget();// 0x53979d4
	EquipmentActor* GetEquipmentActorNonConst();// 0x5397ab0
	void GetCameraLocationAndDirection(out Vector OutLocation, out Vector OutDirection);// 0x53978d0
	EquipmentActor* CreateEquipment(out const EquipmentLoadoutData EquipmentLoadoutData);// 0x5397f6c
	void ClearZoomLevel();// 0x53981e4
	bool CanUseAnyEquipment();// 0x5397b40
	void AddAmmoRegenSpeedUpSource();// 0x5397ae0

--------------------------------
Class: EquipmentLoadoutData
	class EquipmentActor* EquipmentClass;//[Offset: 0x0, Size: 0x28]
	FName[] AttachmentIDs;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath EquipmentSkin;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath EquipmentCharm;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x2f0, Size: 0x4]
	float IncomingDuration;//[Offset: 0x2f4, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x318, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x328, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x398, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3d0, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3d8, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x3f0, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x540, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x750, Size: 0x30]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x788, Size: 0x28]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x850, Size: 0x478]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc8, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xdf0, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1040, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1178, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11f0, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x3919094
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x391919c
	void TargetConfirm();// 0x3918824
	void TargetCancel();// 0x3918808
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x3918840
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x391bdf8
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x391c104
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x3917350
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x3917b28
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x3917eac
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x3918028
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x3918424
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x3918634
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x3917cd4
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x3917dc0
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x3918f18
	void ServerPrintDebug_Request();// 0x3919038
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x39170f0
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x3916238
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x39164a0
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x3916370
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x3916e74
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x3918930
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x391c7b8
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x391c8fc
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x391b2a8
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x391b1b0
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x391afc0
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x391b0b8
	void OnRep_ServerDebugString();// 0x3918da4
	void OnRep_ReplicatedAnimMontage();// 0x3916670
	void OnRep_OwningActor();// 0x39187f4
	void OnRep_ClientDebugString();// 0x3918dc0
	void OnRep_ActivateAbilities();// 0x3917cb8
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x391a158
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x391a800
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x3919388
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x391a4d0
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x391ac80
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x391aa64
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x3919700
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x3919a30
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x3919c0c
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x3919f3c
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x391c4a8
	GameplayEffectContextHandle MakeEffectContext();// 0x391c354
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x391cc98
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x39192cc
	bool GetUserAbilityActivationInhibited();// 0x39188f8
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x391bb98
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x391c208
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x391b3a0
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x391b4dc
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x391729c
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x39182ec
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x3918ddc
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x3916fd8
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x3916d5c
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x391668c
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x3916b64
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x3916c5c
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x391b91c
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x391b6e8
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x391cb2c
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x391ca0c
	void AbilityConfirmOrCancel__DelegateSignature();// 0x59ef218
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x59ef218

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x838f7bc
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x838f50c

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x838d52c
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x59ef218
	void EndTask();// 0x838d518

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x250, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2e0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2e8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2f8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x300, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x310, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x318, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x340, Size: 0x8]
	void ConfirmTargeting();// 0x394a6b4
	void CancelTargeting();// 0x394a698

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x18]
	GameplayEventData CurrentEventData;//[Offset: 0xf0, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a0, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a1, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1a8, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b0, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c0, Size: 0x8]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x1c8, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x1e8, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x208, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x228, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x248, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x268, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x288, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2a8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x2c8, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x308, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x328, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bIsAbilityEnding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x393f370
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x393f2a4
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x393e884
	void RemoveGrantedByEffect();// 0x393ed00
	void MontageStop(float OverrideBlendOutTime);// 0x393cc7c
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x393cd24
	void MontageJumpToSection(FName SectionName);// 0x393ce14
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x393cb20
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x393cbf8
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x393f4cc
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x59ef218
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x393d1b0
	void K2_OnEndAbility(bool bWasCancelled);// 0x59ef218
	bool K2_HasAuthority();// 0x393f45c
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x393d6b4
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x393d890
	void K2_EndAbility();// 0x393e868
	void K2_CommitExecute();// 0x59ef218
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x393f08c
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x393f150
	bool K2_CommitAbility();// 0x393f264
	bool K2_CheckAbilityCost();// 0x393f00c
	bool K2_CheckAbilityCooldown();// 0x393f04c
	void K2_CancelAbility();// 0x393f35c
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, const GameplayAbilitySpecHandle Handle, out GameplayTagContainer RelevantTags);// 0x59ef218
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x393dddc
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x393e590
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x393d260
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x393d488
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x59ef218
	void K2_ActivateAbility();// 0x59ef218
	bool IsLocallyControlled();// 0x393f494
	void InvalidateClientPredictionKey();// 0x393ed1c
	Object* GetSourceObject_BP(GameplayAbilitySpecHandle Handle, out const GameplayAbilityActorInfo ActorInfo);// 0x393ed30
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x393fbac
	Actor* GetOwningActorFromActorInfo();// 0x393fc14
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x393fa2c
	Object* GetCurrentSourceObject();// 0x393ee50
	AnimMontage* GetCurrentMontage();// 0x393efd8
	float GetCooldownTimeRemaining();// 0x393f428
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x393f6a4
	Actor* GetAvatarActorFromActorInfo();// 0x393fbe0
	GameplayAbilityActorInfo GetActorInfo();// 0x393fc48
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x393fb78
	int GetAbilityLevel_BP(GameplayAbilitySpecHandle Handle, out const GameplayAbilityActorInfo ActorInfo);// 0x393ee84
	int GetAbilityLevel();// 0x393efa4
	void EndTaskByInstanceName(FName InstanceName);// 0x393d00c
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x393cebc
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x393d0b4
	void CancelTaskByInstanceName(FName InstanceName);// 0x393cf64
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x393da68
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x393db64
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x393dca0
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x393e1d0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x393e71c

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PredictionKey
	PackageMap* PredictiveConnection;//[Offset: 0x0, Size: 0x8]
	int16 Current;//[Offset: 0x8, Size: 0x2]
	int16 Base;//[Offset: 0xa, Size: 0x2]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1e0]
	ScalableFloat Period;//[Offset: 0x218, Size: 0x28]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x241, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x248, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x258, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x268, Size: 0x28]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x2b0, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x2c0, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x2d8, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2e8, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x300, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x310, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x318, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x378, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x3d8, Size: 0x40]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x418, Size: 0x40]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x458, Size: 0x40]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x498, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4f8, Size: 0x40]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x538, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x690, Size: 0x150]
	enum StackingType;//[Offset: 0x7e1, Size: 0x1]
	int StackLimitCount;//[Offset: 0x7e4, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x7e8, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x7e9, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x7ea, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7f0, Size: 0x10]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x28]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x30, Size: 0x110]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x140, Size: 0x90]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x1d0, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]
	DataRegistryType RegistryType;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DataRegistryType
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x28]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x28]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x50, Size: 0x28]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x78, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xb8, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xc8, Size: 0x1]
	enum FinalChannel;//[Offset: 0xc9, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xd0, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xf0, Size: 0x20]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x28]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x30, Size: 0x28]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x58, Size: 0x28]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x3965324

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x28]
	int InputID;//[Offset: 0x30, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x34, Size: 0x1]
	Object* SourceObject;//[Offset: 0x38, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x28]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x68, Size: 0x1e0]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x248, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x250, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x290, Size: 0x40]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GameplayTagRequirements
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x3963724

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1e0]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x230, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x238, Size: 0x40]
	GameplayTagRequirements TargetTags;//[Offset: 0x278, Size: 0x40]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x3962660

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]
	bool bReplicateLocationWhenUsingMinimalRepProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x248, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x258, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x260, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x59ef218
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x59ef218
	void OnValidTargetChanged(bool bNewValue);// 0x59ef218
	void OnTargetingAnActor(bool bNewValue);// 0x59ef218
	void OnParametersInitialized();// 0x59ef218
	void FaceTowardSource(bool bFaceIn2D);// 0x394c914

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x18]
	GameplayTagContainer DynamicAbilityTags;//[Offset: 0x48, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x68, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x78, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x10]
	byte SectionIdToPlay;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x10]
	GameplayAbility* AnimatingAbility;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x130, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x450, Size: 0x10]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x10]
	float StartServerWorldTime;//[Offset: 0x2c0, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2c4, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2c8, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x10]
	GameplayCueParameters Parameters;//[Offset: 0x28, Size: 0xc0]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x10]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x18, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: ADSStateMachine.Object
	BaseKitComponent* OwningKitComponent;//[Offset: 0x90, Size: 0x8]
	bool bManualADSInputBuffered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bWantsManualADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bWantsAutoADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	bool bSkipADSWindDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1]
	byte CurrentADSZoomLevel;//[Offset: 0x9c, Size: 0x1]

--------------------------------
Class: HealthComponent.ActorComponent.Object
	delegate OnHealthUpdatedDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnReceiveDamage;//[Offset: 0xd0, Size: 0x10]
	delegate OnReceivePredictedDamage;//[Offset: 0xe0, Size: 0x10]
	delegate OnDeathDelegate;//[Offset: 0x100, Size: 0x10]
	delegate OnHealingApplied;//[Offset: 0x110, Size: 0x10]
	float StartingHealth;//[Offset: 0x120, Size: 0x4]
	float MaxHealth;//[Offset: 0x124, Size: 0x4]
	float MinHealth;//[Offset: 0x128, Size: 0x4]
	HealthComponentReplicatedState RepState;//[Offset: 0x130, Size: 0x58]
	HealthComponentReplicatedState LastRepState;//[Offset: 0x188, Size: 0x58]
	float MinimumDamagePercentForAssist;//[Offset: 0x1e0, Size: 0x4]
	float MinimumDamagePercentForAssistCountsAsKill;//[Offset: 0x1e4, Size: 0x4]
	bool bScoreDamageAsPercentageOfMaxHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool bCanEverRegenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	bool bCanRegenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 0x1]
	GameplayTag DamageArmorType;//[Offset: 0x1ec, Size: 0x8]
	<enum,HealingTickFunction> HealingTickSources;//[Offset: 0x1f8, Size: 0x50]
	bool[] ClientHealingActive;//[Offset: 0x248, Size: 0x10]
	float DefaultHealingPause;//[Offset: 0x258, Size: 0x4]
	float SpawnInvulnerabilityDuration;//[Offset: 0x25c, Size: 0x4]
	HealingSource[] SelfHealingSources;//[Offset: 0x260, Size: 0x10]
	<Controller*,AssistRecord> ServerAssistHistory;//[Offset: 0x270, Size: 0x50]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x2c0, Size: 0x8]
	DamageReceived[] PredictedDamage;//[Offset: 0x2d0, Size: 0x10]
	void SetCanBeDamaged(bool bCanBeDamaged);// 0x53ecfc0
	bool ServerStopHealing(out const HealingSource InSource);// 0x53ec8c4
	void ServerStartHealOverTime(out const HealingSource InSource, Controller* Instigator, float InitialDelay);// 0x53ec9cc
	void ServerSetMinHealth(float NewMinimumHealth);// 0x53ecb74
	void ServerSetHealth(float NewHealth);// 0x53ec7f8
	void ServerResetHealth();// 0x53ec8a8
	void ServerKill(Controller* InstigatorController, bool bKillEvenIfUnkillable, bool bNoRevive);// 0x53ecc1c
	void ServerInterruptAllHealing();// 0x53ec9b8
	void ServerHeal(float DeltaHealth);// 0x53ec748
	void ServerClearMinHealth();// 0x53ecb60
	void RepredictHealth();// 0x53ec5e0
	void OnRep_State();// 0x53ec5f4
	bool IsMinHealthThresholdSet(float MinThreshold);// 0x53ed0e0
	bool IsKillable();// 0x53ed0a8
	bool IsAlivePredictable();// 0x53ec670
	bool IsAlive();// 0x53ecf80
	static bool IsActorAliveWithHealthComponent(Actor* Actor, bool bWasHealthComponentAddedInBlueprint);// 0x53ecd84
	float GetSpawnInvulnerabilityDuration();// 0x53ecd68
	float GetPredictedHealthPercent();// 0x53ec63c
	float GetPredictedHealth();// 0x53ec608
	float GetMaxHealth();// 0x53ed194
	DamageReceived GetLastDamageReceivedPredictable();// 0x53ec6b0
	DamageReceived GetLastDamageReceived();// 0x53ec700
	float GetHealthPercent();// 0x53ed1cc
	static HealthComponent* GetHealthComponentFromActorNonConst(Actor* Actor, bool bWasHealthSystemAddedInBlueprint);// 0x53ece84
	float GetCurrentHealth();// 0x53ed1b0
	bool CanRegenerate();// 0x53ecb44
	bool CanBeDamaged();// 0x53ed070

--------------------------------
Class: HealthComponentReplicatedState
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	DamageReceived LastDamageReceived;//[Offset: 0x8, Size: 0x48]

--------------------------------
Class: HealingTickFunction.TickFunction
	HealthComponent* Target;//[Offset: 0x28, Size: 0x8]
	HealingSource[] Sources;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: HealingSource
	enum SourceType;//[Offset: 0x0, Size: 0x1]
	bool bUnlimitedHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float TotalHealAmount;//[Offset: 0x4, Size: 0x4]
	float HealPerTick;//[Offset: 0x8, Size: 0x4]
	float TickIntervalSeconds;//[Offset: 0xc, Size: 0x4]
	float HealRemaining;//[Offset: 0x10, Size: 0x4]
	float MinHealthCutoffFraction;//[Offset: 0x14, Size: 0x4]
	float MaxHealFraction;//[Offset: 0x18, Size: 0x4]
	bool bCanBePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float PauseLength;//[Offset: 0x20, Size: 0x4]
	float PauseRemaining;//[Offset: 0x24, Size: 0x4]
	bool bAddScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float PointsHealedPerScoreEvent;//[Offset: 0x2c, Size: 0x4]
	float UnscoredHealPoints;//[Offset: 0x30, Size: 0x4]
	ODPlayerState* InstigatorPlayerState;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AssistRecord
	float Damage;//[Offset: 0x0, Size: 0x4]
	EquipmentStatInfo[] WeaponHistory;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: EquipmentStatInfo
	class Actor* EquipmentClass;//[Offset: 0x0, Size: 0x8]
	GameplayTag EquipmentStatTag;//[Offset: 0x8, Size: 0x8]
	FName EquipmentAssetId;//[Offset: 0x10, Size: 0x8]
	float EquipmentBodyDamageDone;//[Offset: 0x18, Size: 0x4]
	int EquipmentBodyShots;//[Offset: 0x1c, Size: 0x4]
	float EquipmentHeadshotDamageDone;//[Offset: 0x20, Size: 0x4]
	int EquipmentHeadshots;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AttachmentMeshInfo
	EquipmentAttachmentDefinition* AttachmentDefinition;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* Mesh;//[Offset: 0x8, Size: 0x8]
	FName Socket;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: EquipmentAttachmentDefinition.DataAsset.Object
	EquipmentModifierCollection*[] EquipmentSpecializationCollections;//[Offset: 0x30, Size: 0x10]
	StanceModifierCollection*[] StanceModifierCollections;//[Offset: 0x40, Size: 0x10]
	AttachmentMeshData[] MeshData;//[Offset: 0x50, Size: 0x10]
	Texture2D* SniperMaskTexture2D;//[Offset: 0x60, Size: 0x28]
	Vector OverallGunPositionAdjustment;//[Offset: 0x88, Size: 0xc]
	ParticleSystem* LaserSightParticleSystem;//[Offset: 0x98, Size: 0x8]
	float LaserMaxDistance;//[Offset: 0xa0, Size: 0x4]
	FName LaserSightConvergenceSocket;//[Offset: 0xa4, Size: 0x8]
	float LaserSightConvergenceDistance;//[Offset: 0xac, Size: 0x4]
	enum AttachmentCategory;//[Offset: 0xb0, Size: 0x1]
	FName ID;//[Offset: 0xb4, Size: 0x8]
	FName SightSocketName;//[Offset: 0xbc, Size: 0x8]
	float AdsSightDistanceFromCamera;//[Offset: 0xc4, Size: 0x4]
	FName GunswaySocketName;//[Offset: 0xc8, Size: 0x8]
	FName BallisticSpawnSocketName;//[Offset: 0xd0, Size: 0x8]
	FName LaserSightSocketName;//[Offset: 0xd8, Size: 0x8]
	AnimSequenceBase* CustomHandPoseSequence;//[Offset: 0xe0, Size: 0x8]
	bool bIsUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	EquipmentUIData UIData;//[Offset: 0xf0, Size: 0x70]
	EquipmentUIData GetUIData();// 0x53d220c
	FName GetAttachmentID();// 0x53d232c
	enum GetAttachmentCategory();// 0x53d2348

--------------------------------
Class: EquipmentUIData.TableRowBase
	FText DisplayName;//[Offset: 0x8, Size: 0x18]
	Texture2D* Icon;//[Offset: 0x20, Size: 0x8]
	Vector2D IconUsedPixelSize;//[Offset: 0x28, Size: 0x8]
	Texture2D* RenderedIcon;//[Offset: 0x30, Size: 0x8]
	Vector2D RenderedIconUsedPixelSize;//[Offset: 0x38, Size: 0x8]
	Texture2D* ReticleFirstPersonImage;//[Offset: 0x40, Size: 0x8]
	Vector2D ReticleFirstPersonImagePixelSize;//[Offset: 0x48, Size: 0x8]
	Texture2D* ReticleThirdPersonImage;//[Offset: 0x50, Size: 0x8]
	Vector2D ReticleThirdPersonImagePixelSize;//[Offset: 0x58, Size: 0x8]
	bool bShowCooldownIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	enum EquipmentClassification;//[Offset: 0x61, Size: 0x1]
	bool bDisplayReserveAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bPreventIconFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	enum EquipmentFiringType;//[Offset: 0x64, Size: 0x1]
	int ItemDisplayLevel;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: EquipmentModifierCollection.Object
	EquipmentModifier*[] EquipmentModifiers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: EquipmentModifier.EquipmentSpecialization.Specialization.Object
	int UnlockType;//[Offset: 0x60, Size: 0x4]
	<enum> UnlockStates;//[Offset: 0x68, Size: 0x50]
	<enum> UnlockFireModes;//[Offset: 0xb8, Size: 0x50]
	<enum> UnlockToggleWhenClickedInputs;//[Offset: 0x108, Size: 0x50]
	<enum> UnlockOnlyWhilePressedInputs;//[Offset: 0x158, Size: 0x50]
	enum ZoomLevelComparison;//[Offset: 0x1a8, Size: 0x1]
	byte UnlockZoomLevel;//[Offset: 0x1a9, Size: 0x1]
	enum VelocityComparison;//[Offset: 0x1aa, Size: 0x1]
	Vector UnlockVelocity;//[Offset: 0x1ac, Size: 0xc]
	ODGameplayTagRequirements UnlockTags;//[Offset: 0x1b8, Size: 0x48]
	void StartSubFixedStepListener();// 0x53d3854
	void RemoveSubFixedStepListener();// 0x53d3840
	void OnSubFixedStep(out const PlayerCommandState Command);// 0x53d3774
	void OnSoldierVelocityChanged(float DeltaTime, Vector InitialLocation, Vector InitialVelocity);// 0x53d348c
	void OnPlayerPoseTagChanged(const GameplayTag ChangedTag, int NewTagCount);// 0x53d3390
	enum OnExitState(enum OldState, enum NewState);// 0x53d3868
	void OnEquipmentZoomLevelChanged(byte NewZoomLevel);// 0x53d35c8
	void OnEquipmentActivationLogicChanged(enum OldLogic, enum NewLogic);// 0x53d3678
	enum OnEnterState(enum OldState, enum TargetState);// 0x53d396c

--------------------------------
Class: EquipmentSpecialization.Specialization.Object
	EquipmentActor* OwningEquipment;//[Offset: 0x58, Size: 0x8]
	void RegisterDynamicObserver(enum NotifyWhenMatchesThisValue, out const delegate CalledDelegate);// 0x53d55a0
	void InitializeSpecialization(EquipmentActor* EquipmentActor);// 0x59ef218

--------------------------------
Class: Specialization.Object
	delegate OnActivationStatusChanged;//[Offset: 0x28, Size: 0x10]
	byte Priority;//[Offset: 0x38, Size: 0x1]
	bool bOnlyActivateServerSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bRepActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bIsPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	Controller* OwningController;//[Offset: 0x40, Size: 0x8]
	ActorComponent* OwningActorComponent;//[Offset: 0x48, Size: 0x8]
	void StartSpecialization();// 0x558dcdc
	void SetUpCustomTrigger();// 0x59ef218
	void ResumeSpecialization();// 0x558dc90
	void PauseSpecialization();// 0x558dcac
	void OnRep_Active();// 0x558dbe4
	void K2_StartSpecialization();// 0x59ef218
	void K2_EndSpecialization();// 0x59ef218
	bool IsSpecializationActive();// 0x558dc34
	bool IsInitialized();// 0x558dc74
	Actor* GetOwner();// 0x558dc00
	Object* GetModificationTarget();// 0x558dcf0
	void EndSpecialization();// 0x558dcc8

--------------------------------
Class: ODGameplayTagRequirements.GameplayTagRequirements
	bool bTreatRequiredTagsAsOr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: PlayerCommandState
	PlayerInputState ClickedInputs;//[Offset: 0x0, Size: 0x4]
	PlayerInputState PressedInputs;//[Offset: 0x4, Size: 0x4]
	VehicleSeatComponent* SwapSeat;//[Offset: 0x8, Size: 0x8]
	AxisPlayerCommandState MoveInput;//[Offset: 0x10, Size: 0x2]
	uint32 CommandId;//[Offset: 0x14, Size: 0x4]
	uint32 NetworkRedundancyCount;//[Offset: 0x18, Size: 0x4]
	uint32 ServerFixedStepCount;//[Offset: 0x1c, Size: 0x4]
	bool bHasClientAuthControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Rotator ClientAuthControlRotation;//[Offset: 0x24, Size: 0xc]
	enum PlayerPredictionState;//[Offset: 0x30, Size: 0x1]
	enum FixedStepType;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PlayerInputState
	uint32 InputStateFlags;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AxisPlayerCommandState
	int8 X;//[Offset: 0x0, Size: 0x1]
	int8 Y;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: StanceModifierCollection.DataAsset.Object
	StanceModifier*[] StanceModifiers;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StanceModifier.EquipmentSpecialization.Specialization.Object
	ODGameplayTagRequirements ModifierStances;//[Offset: 0x60, Size: 0x48]
	bool bUseMovementSpeedAsModifierScalar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bInvertModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float TimeToApply;//[Offset: 0xac, Size: 0x4]
	float CurrentModifierScalar;//[Offset: 0xb0, Size: 0x4]
	float CurrentApplicationTime;//[Offset: 0xb4, Size: 0x4]
	TimerHandle NextUpdateHandle;//[Offset: 0xb8, Size: 0x8]
	Vector LastVelocity;//[Offset: 0xc0, Size: 0xc]
	bool bInSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bIsOwnerDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	PawnMovementComponent* CachedMovementComponent;//[Offset: 0xd0, Size: 0x8]
	Vector CachedVelocity;//[Offset: 0xd8, Size: 0xc]
	void UpdateMovement(float DeltaTime, Vector InitialLocation, Vector InitialVelocity);// 0x55944b4
	void UnlockTimer();// 0x55941bc
	void OnVehicleSeatChanged(VehicleSeatComponent* OldSeat, VehicleSeatComponent* NewSeat);// 0x5594380
	void OnStanceExited();// 0x5594470
	void OnStanceEntered();// 0x5594484
	void OnPlayerPoseTagChanged(const GameplayTag ChangedTag, int NewTagCount);// 0x55941e4
	void OnOwnerDeath(Actor* DeadOwner);// 0x55942d8
	void OnModifierScalarChanged();// 0x5594498
	void CheckRequirements();// 0x55941d0

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AttachmentMeshData
	SkeletalMesh* Mesh;//[Offset: 0x0, Size: 0x8]
	FName OverrideSocketName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttachmentInstance
	SkeletalMeshComponent*[] AttachmentMeshes;//[Offset: 0x0, Size: 0x10]
	EquipmentAttachmentDefinition* AttachmentDefinition;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: StatTimerManagerComponent.ActorComponent.Object
	void StopTimersForPlayer(const PlayerState* PlayerState);// 0x55a03a0
	void StopTimer(StatTimerHandle Handle);// 0x55a05ac
	void StopAllTimers();// 0x55a0448
	void StartTimer(StatTimerHandle Handle);// 0x55a0654
	void ResetTimer(StatTimerHandle Handle);// 0x55a045c
	void RemoveTimer(StatTimerHandle Handle);// 0x55a06fc
	void PauseTimer(StatTimerHandle Handle);// 0x55a0504
	float GetStatTimerSecondsElapsed(StatTimerHandle Handle);// 0x55a089c
	StatTimerHandle AddTimer(PlayerState* PlayerState, GameplayTag TimeStatTag);// 0x55a07a4

--------------------------------
Class: StatTimerHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ODProgressionStatUtils.Object
	static void ParseTag(out const GameplayTag EquipmentGameplayTag, out EquipmentGameplayStatTags OutEquipmentGameplayStatTags);// 0x5519f38

--------------------------------
Class: EquipmentGameplayStatTags
	GameplayTag KillTag;//[Offset: 0x0, Size: 0x8]
	GameplayTag AssistTag;//[Offset: 0x8, Size: 0x8]
	GameplayTag EquippedSecondsTag;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ODAdditionalEquipmentUIStats
	float AimedAccuracy;//[Offset: 0x0, Size: 0x4]
	float Recoil;//[Offset: 0x4, Size: 0x4]
	float Mobility;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: EquipmentSoundEvents.TableRowBase
	AkAudioEvent* NormalSFX;//[Offset: 0x8, Size: 0x8]
	float NormalSFXRange;//[Offset: 0x10, Size: 0x4]
	AkAudioEvent* SuppressedSFX;//[Offset: 0x18, Size: 0x8]
	float SuppressedSFXRange;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ImpactHitResult.HitResult
	bool bCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	Vector ImpactVelocity;//[Offset: 0x8c, Size: 0xc]
	float ImpactImpulse;//[Offset: 0x98, Size: 0x4]
	bool bForcePhysicsImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]

--------------------------------
Class: VehicleKitComponent.BaseKitComponent.ActorComponent.Object
	class EquipmentActor* EquipmentActorToEquip;//[Offset: 0x200, Size: 0x8]
	ODVehicle* Vehicle;//[Offset: 0x208, Size: 0x8]
	VehicleSeatComponent* VehicleSeatComponent;//[Offset: 0x210, Size: 0x8]
	TurretRotationComponent*[] TurretComponents;//[Offset: 0x218, Size: 0x10]
	ComponentReference TurretSceneComponent;//[Offset: 0x228, Size: 0x28]
	FName WeaponSocketName;//[Offset: 0x250, Size: 0x8]
	void RemoveTurretComponent(TurretRotationComponent* InTurretComponent);// 0x55b3e64
	ODVehicle* GetVehicleNonConst();// 0x55b3e0c
	Controller* GetOwningControllerNonConst();// 0x55b3e28
	void AddTurretComponent(TurretRotationComponent* InTurretComponent);// 0x55b3f0c

--------------------------------
Class: ODVehicle.ODVehicleBase.Pawn.Actor.Object
	GenericUIAnchorComponent* HealthBarAnchor;//[Offset: 0x410, Size: 0x8]
	delegate VehicleSeatCharacterChanged;//[Offset: 0x418, Size: 0x10]
	delegate VehicleSeatPlayerStateChanged;//[Offset: 0x428, Size: 0x10]
	delegate TeamChanged;//[Offset: 0x438, Size: 0x10]
	delegate OnVehicleDeath;//[Offset: 0x448, Size: 0x10]
	delegate OnVehicleHonk;//[Offset: 0x458, Size: 0x10]
	ODCharacterASC* AbilitySystemComponent;//[Offset: 0x468, Size: 0x8]
	VehicleSkeletalMeshComponent* SkeletonMeshComponent;//[Offset: 0x470, Size: 0x8]
	AkComponent* AudioComponent;//[Offset: 0x478, Size: 0x8]
	ODAimAssistTargetableComponent* AimAssistTargetableComponent;//[Offset: 0x480, Size: 0x8]
	ODAimAssistTargetableComponent* AutofireTargetableComponent;//[Offset: 0x488, Size: 0x8]
	enum TargetableType;//[Offset: 0x490, Size: 0x1]
	VehicleHealthComponent* HealthComponent;//[Offset: 0x498, Size: 0x8]
	SpottingTargetComponent* SpottingTargetComponent;//[Offset: 0x4a0, Size: 0x8]
	MarkableVehicleObjectiveComponent* MarkableObjectiveComponent;//[Offset: 0x4a8, Size: 0x8]
	float MaxInteractionDistance;//[Offset: 0x4b0, Size: 0x4]
	Vector CenterOffset;//[Offset: 0x4b4, Size: 0xc]
	NavAgentProperties NavAgentProps;//[Offset: 0x4c0, Size: 0x30]
	Box ExitVehicleBorder;//[Offset: 0x4f0, Size: 0x1c]
	float ExitVehicleHeight;//[Offset: 0x50c, Size: 0x4]
	bool bBulletsGivePhysicsImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool bBulletsGivePhysicsImpulseWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	bool bExplosionsGivePhysicsImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512, Size: 0x1]
	bool bExplosionsGivePhysicsImpulseWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x513, Size: 0x1]
	float OutOfBoundsTimeOverride;//[Offset: 0x514, Size: 0x4]
	float VehicleKillSpeed;//[Offset: 0x518, Size: 0x4]
	bool bSpotWhenPinged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 0x1]
	SpotParams PingSpotParams;//[Offset: 0x520, Size: 0x10]
	bool bMarkAsSquadObjectiveWhenPinged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	TimerHandle VehicleDeathTimerHandle;//[Offset: 0x538, Size: 0x8]
	VehicleSeatComponent*[] VehicleSeatComponents;//[Offset: 0x558, Size: 0x10]
	class UserWidget* VehicleHUD;//[Offset: 0x568, Size: 0x8]
	FName ViewSwitchGroup;//[Offset: 0x57c, Size: 0x8]
	FName ViewFirstSwitchState;//[Offset: 0x584, Size: 0x8]
	FName ViewThirdSwitchState;//[Offset: 0x58c, Size: 0x8]
	FString TelemetryId;//[Offset: 0x598, Size: 0x10]
	enum VehicleType;//[Offset: 0x5a8, Size: 0x1]
	GenericTeamId TeamId;//[Offset: 0x5a9, Size: 0x1]
	int LastServerMoveFixedStepCount;//[Offset: 0x5ac, Size: 0x4]
	CurveFloat* UpAngleToDamageMultiplier;//[Offset: 0x5b0, Size: 0x8]
	CurveFloat* ForwardAngleToDamageMultiplier;//[Offset: 0x5b8, Size: 0x8]
	enum DamageMultiplierType;//[Offset: 0x5c0, Size: 0x1]
	float GoodHitMinimumDirectionalMultiplier;//[Offset: 0x5c4, Size: 0x4]
	float GreatHitMinimumDirectionalMultiplier;//[Offset: 0x5c8, Size: 0x4]
	enum ArmorClass;//[Offset: 0x5cc, Size: 0x1]
	ODAIPawnVehicleRVOComponent* PawnVehicleRVOComponent;//[Offset: 0x5d0, Size: 0x8]
	ITPlayerSpawnDataComponent* SpawnDataComponent;//[Offset: 0x5d8, Size: 0x8]
	Vector[] SpawnOnFullVehicleLocationOffsets;//[Offset: 0x5e0, Size: 0x10]
	float TimeOfSpawn;//[Offset: 0x5f0, Size: 0x4]
	Vector PlaceOfSpawn;//[Offset: 0x5f4, Size: 0xc]
	bool bHasEverBeenPossessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	float MaxDistanceFromSpawnToBeConsideredAtSpawn;//[Offset: 0x604, Size: 0x4]
	bool bIsHonking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	bool bRepIsHonking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x609, Size: 0x1]
	CollisionDamageData CollisionDamageData;//[Offset: 0x610, Size: 0x48]
	int FidelityLevel;//[Offset: 0x658, Size: 0x4]
	int FidelityBucketWeight;//[Offset: 0x65c, Size: 0x4]
	VehicleFidelityLevel[] FidelityLevels;//[Offset: 0x660, Size: 0x10]
	float SignificanceByDistanceRange;//[Offset: 0x670, Size: 0x4]
	float SignificanceFOVTransitionBegin;//[Offset: 0x674, Size: 0x4]
	float SignificanceByDistanceStart;//[Offset: 0x678, Size: 0x4]
	float SignificanceByDistanceEnd;//[Offset: 0x67c, Size: 0x4]
	float SignificanceAngleScale;//[Offset: 0x680, Size: 0x4]
	float FOVMultiplierMax;//[Offset: 0x684, Size: 0x4]
	float FOVMultiplierMin;//[Offset: 0x688, Size: 0x4]
	float FOVMultiplierSignificanceDistanceThreshold;//[Offset: 0x68c, Size: 0x4]
	float LastSignificance;//[Offset: 0x690, Size: 0x4]
	int MaximumWheelFidelityLevel;//[Offset: 0x694, Size: 0x4]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x698, Size: 0x8]
	SkeletalMesh* VehicleDeathMesh;//[Offset: 0x6a0, Size: 0x8]
	float VehicleDeathTime;//[Offset: 0x6a8, Size: 0x4]
	enum DriverHUDType;//[Offset: 0x6c0, Size: 0x1]
	bool bUseSinglePassengerNameOnVehicleWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 0x1]
	Texture2D* VehicleIcon;//[Offset: 0x6c8, Size: 0x8]
	void UpdateCharacterCollision();// 0x554be44
	void TurnBodyToYaw(const float TargetYaw, const float ScaleValue, const float SlowDistance);// 0x554c710
	void SpawnDestroyedVehicle();// 0x59ef218
	bool ShouldApplyDriftForceToWheel(const WheelComponent* WheelComponent, float InRelativeVelocityY, out const Vector MoveInput);// 0x554bcec
	void SetTurretSpeedMultiplier(float TurretSpeedMultiplier);// 0x554b3cc
	void SetMoveSpeedMultiplier(float MoveSpeedMultiplier);// 0x554b474
	void SetEquipmentEnabled(bool bInEnabled);// 0x554b31c
	void SetChassisComponent(ChassisComponent* InChassisComponent);// 0x554c8f4
	void OnVehicleSettingsLoaded();// 0x554b2b4
	void OnVehicleSeatControllerChanged_Implementation(VehicleSeatComponent* VehicleSeatComponent);// 0x59ef218
	void OnVehicleDeathEnd();// 0x554c4fc
	void OnVehicleDeathBegin();// 0x554c518
	void OnVehicleComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x554b774
	void OnVehicleComponentBeginOverlap(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x554b530
	void OnTurnBody(Rotator Rotation);// 0x59ef218
	void OnTerrainDestruction(float ImpactMagnitude);// 0x59ef218
	void OnSetIsHonking(bool bNewIsHonking);// 0x59ef218
	void OnRep_IsHonking();// 0x554b960
	void OnRep_HasEverBeenPossessed();// 0x554b51c
	void OnReleasedInput(out const GameplayTag Tag);// 0x59ef218
	void OnPostInitialize();// 0x59ef218
	void OnDriverHUDModeChanged(out const ProfileSettings_RadioProfileSetting PlayerSetting);// 0x554b1d8
	void OnClickedInput(out const GameplayTag Tag);// 0x59ef218
	void OnActorDeath(Actor* DeadActor);// 0x554c5ac
	bool IsCharacterInVehicle(const ODCharacter* Character);// 0x554c31c
	bool IsAlive();// 0x554c2c8
	void InitializeChassisComponent();// 0x59ef218
	void HealthComponent_OnReceiveDamage(out const DamageReceived DamageReceived);// 0x554b99c
	bool HasUnoccupiedSeat();// 0x554c488
	bool HasMovedFromSpawnLocation();// 0x554c290
	bool HasBegunPlay();// 0x554b974
	enum GetVehicleType();// 0x554c300
	VehicleSeatComponent*[] GetVehicleSeatsNonConst();// 0x554c3d0
	class UserWidget GetVehicleHUD();// 0x554b2c8
	float GetVehicleDeathTime();// 0x554b2e4
	SkeletalMesh* GetVehicleDeathMeshNonConst();// 0x554b300
	float GetTimeOfSpawn();// 0x554ba88
	Vector GetTargetCenter();// 0x554c250
	SpottingTargetComponent* GetSpottingTargetComponentNonConst();// 0x554c698
	bool GetShouldPreferRightExit(VehicleSeatComponent* VehicleSeat);// 0x59ef218
	Vector GetPredictedVisualVelocity();// 0x554c15c
	PlayerHUDComponent* GetPlayerHudNonConst();// 0x554c534
	float GetOutOfBoundsTimeOverride();// 0x554be58
	int GetNumOccupiedSeats();// 0x554c454
	MarkableObjectiveComponent* GetMarkableObjectiveComponentNonConst_Implementation();// 0x554c65c
	HealthComponent* GetHealthComponentNonConst();// 0x554c6d4
	bool GetHasEverBeenPossessed();// 0x554be74
	enum GetDriverHUDType();// 0x554baa4
	VehicleSeatComponent* GetBestUnoccupiedSeat();// 0x554c4c0
	void ClientUnPossessed();// 0x554c590
	bool CanEnterVehicle(const ODCharacter* Character);// 0x554c19c
	void CalculateWheelFrictionState(WheelComponent* WheelComponent, float InRelativeVelocityX, float InRelativeVelocityY, out const Vector WheelPerpDirectionProjectedNormal, out const Vector VelocityForFriction, float DeltaTime);// 0x554bac0
	void AutonomousTickPose(SkeletalMeshComponent* SkeletalMeshComponent, float DeltaTime);// 0x554be90
	void ApplyDestructionCollisionDamage(Actor* DestructibleParent, int DestructibleComponentId, out const Vector ImpactNormal, float InDamage, out const Vector ImpactLocation);// 0x554bf84
	bool ApplyClientInputSettings(out PlayerCommandState CommandState, ODPlayerController* PlayerController);// 0x59ef218
	void AddTurnInput(Vector TurnInput);// 0x554c84c

--------------------------------
Class: ODVehicleBase.Pawn.Actor.Object
	delegate VehicleSeatControllerChanged;//[Offset: 0x2b8, Size: 0x10]
	EquipmentUIData VehicleUIData;//[Offset: 0x2c8, Size: 0x70]
	GameplayTag StatTag;//[Offset: 0x338, Size: 0x8]
	ChassisComponent* ChassisComponent;//[Offset: 0x340, Size: 0x8]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x348, Size: 0x8]
	VehicleSeatComponent* DriverSeatComponent;//[Offset: 0x350, Size: 0x8]
	ODCharacter* DriverCharacter;//[Offset: 0x358, Size: 0x8]
	enum VehicleGroundedState;//[Offset: 0x360, Size: 0x1]
	FName ID;//[Offset: 0x364, Size: 0x8]
	FName ContentId;//[Offset: 0x36c, Size: 0x8]
	FText LocalizedName;//[Offset: 0x378, Size: 0x18]
	void OnVehicleLanded(float TimeSpentInAir);// 0x59ef218
	void OnPrimitiveComponentCollision(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, out const Vector NormalImpulse, out const Vector ImpactLocation);// 0x55507d4
	void OnChassisPreFixedStep();// 0x59ef218
	void MulticastOnHasLanded(float TimeInAir);// 0x55509b4
	FText GetVehicleLocalizedName();// 0x5550670
	FName GetVehicleID();// 0x5550740
	enum GetGroundedState();// 0x5550760
	VehicleSeatComponent* GetDriverSeatNonConst();// 0x555077c
	ChassisComponent* GetChassisComponent();// 0x55507b8

--------------------------------
Class: ChassisComponent.ActorComponent.Object
	ChassisMovementState ChassisMovementState;//[Offset: 0xb0, Size: 0x50]
	ChassisComponentSimulation* Simulation;//[Offset: 0x100, Size: 0x8]
	ChassisComponentSynchronization* Synchronization;//[Offset: 0x108, Size: 0x8]
	ChassisFullState* SynchronizedState;//[Offset: 0x110, Size: 0x8]
	ChassisComponentPrediction* Prediction;//[Offset: 0x118, Size: 0x8]
	ODVehicleBase* VehicleOwner;//[Offset: 0x120, Size: 0x8]
	WheelComponent*[] WheelComponents;//[Offset: 0x150, Size: 0x10]
	VisualWheelComponent*[] VisualWheelComponents;//[Offset: 0x160, Size: 0x10]
	bool bShareWheelHitResultForVisualWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	float ChassisComponentGravity;//[Offset: 0x174, Size: 0x4]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	enum StabilizationType;//[Offset: 0x179, Size: 0x1]
	bool bRegulateRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	bool bRegulatePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b, Size: 0x1]
	StabilizationData RollStabilizationData;//[Offset: 0x17c, Size: 0xc]
	StabilizationData PitchStabilizationData;//[Offset: 0x188, Size: 0xc]
	float HeavyLandingAirborneTime;//[Offset: 0x194, Size: 0x4]
	float HeavyLandingResetTime;//[Offset: 0x198, Size: 0x4]
	float TimeSpentAirborne;//[Offset: 0x19c, Size: 0x4]
	float HeavyLandingTimer;//[Offset: 0x1a0, Size: 0x4]
	bool bTrackHeavyLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	float MoveSpeedMultiplier;//[Offset: 0x1a8, Size: 0x4]
	bool bIsChassisStuck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	float StuckVelocityThreshold;//[Offset: 0x1bc, Size: 0x4]
	float StuckPitchAmount;//[Offset: 0x1c0, Size: 0x4]
	float StuckRollAmount;//[Offset: 0x1c4, Size: 0x4]
	float LocalSimulationBoundingBoxExtent;//[Offset: 0x1d0, Size: 0x4]
	float SimulationTime;//[Offset: 0x1d4, Size: 0x4]
	bool bIsPredictingLocally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	int FidelityThresholdVisualWheels;//[Offset: 0x1dc, Size: 0x4]
	float WheelBase;//[Offset: 0x1e0, Size: 0x4]
	float TrackWidth;//[Offset: 0x1e4, Size: 0x4]
	void UsePressedInput(out const PlayerCommandState Command);// 0x53b23d0
	void UseMoveInput(out const Vector2D MoveInput);// 0x53b2554
	void UseLookInput(out const Vector2D LookInput);// 0x53b249c
	void UpdateSimulationType();// 0x53b2710
	bool ShouldUseWheelComponentHitResultIfAvailable();// 0x53b1e3c
	void SetWheelBase(float InWheelBase);// 0x53b1c4c
	void SetTrackWidth(float InTrackWidth);// 0x53b1ba8
	void SetIsVehiclePredictingLocally(bool bSetVehiclePredicting);// 0x53b1d28
	void ServerOnPreFixedStep(int FixedStepCount);// 0x53b27d4
	void ServerOnPostFixedStep(int FixedStepCount);// 0x53b2724
	void RemoveWheelComponent(WheelComponent* WheelComponent);// 0x53b2280
	void RemoveVisualWheelComponent(VisualWheelComponent* VisualWheelComponent);// 0x53b2114
	void OnVehicleSeatControllerChanged(VehicleSeatComponent* VehicleSeat, Controller* PlayerController, Controller* OldController);// 0x53b19fc
	void OnUpdateMesh();// 0x53b1e0c
	void OnSyncronizedMoveStateUpdated(out ChassisMovementState OldMovementState, out ChassisMovementState NewMovementState);// 0x53b18f0
	bool IsInHeavyLanding();// 0x53b1e20
	void InitializeWheelComponents();// 0x53b1e90
	void InitializeVisualWheelComponents();// 0x53b1e74
	WheelComponent*[] GetWheelComponents();// 0x53b2090
	WheelComponent* GetWheelComponentByIndex(int InWheelIndex);// 0x53b1eac
	float GetWheelBase();// 0x53b1b8c
	int GetVisualWheelFidelityThreshold();// 0x53b1cf0
	VisualWheelComponent*[] GetVisualWheelComponents();// 0x53b200c
	VisualWheelComponent* GetVisualWheelComponentByIndex(int InWheelIndex);// 0x53b1f5c
	Vector GetVelocity();// 0x53b2684
	ODVehicleBase* GetVehicleOwner();// 0x53b26f4
	float GetTrackWidth();// 0x53b1b70
	Vector GetPredictedVisualVelocity();// 0x53b26bc
	int GetNumberOfWheels();// 0x53b2264
	float GetNormalizedChassisSpeed();// 0x53b1dd8
	bool GetIsVehiclePredictingLocally();// 0x53b1d0c
	bool GetIsStuck();// 0x53b1b54
	float GetCurrentSteerAmount();// 0x53b18d4
	float GetChassisComponentGravity();// 0x53b1b38
	bool GetAudioIsAccelerating();// 0x53b260c
	Vector GetAngularVelocity();// 0x53b264c
	void AddWheelComponent(WheelComponent* WheelComponent);// 0x53b2328
	void AddVisualWheelComponent(VisualWheelComponent* VisualWheelComponent);// 0x53b21bc

--------------------------------
Class: ChassisMovementState
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Location;//[Offset: 0x10, Size: 0xc]
	Vector LinearVelocity;//[Offset: 0x1c, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0x28, Size: 0xc]
	float WheelSteerRotation;//[Offset: 0x34, Size: 0x4]
	int FixedStepCount;//[Offset: 0x38, Size: 0x4]
	ChassisComponent* Owner;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ChassisComponentSimulation.Object

--------------------------------
Class: ChassisComponentSynchronization.ChassisComponentSimulation.Object
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x80, Size: 0x8]
	ChassisComponent* ChassisComponent;//[Offset: 0x88, Size: 0x8]
	ChassisMovementState PrevChassisMovementState;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: ChassisFullState.Object
	ChassisMovementState ChassisMovementState;//[Offset: 0x30, Size: 0x50]
	void OnRep_ChassisMovementState(out ChassisMovementState OldMovementState);// 0x53b406c

--------------------------------
Class: ChassisComponentPrediction.ChassisComponentSimulation.Object
	ChassisComponent* ChassisComponent;//[Offset: 0x28, Size: 0x8]
	ChassisMovementState Correction;//[Offset: 0x30, Size: 0x50]
	bool bHasCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int CorrectionFixedStepCount;//[Offset: 0x84, Size: 0x4]
	ChassisMovementState PrevChassisMovementState;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: WheelComponent.WheelComponentBase.SceneComponent.ActorComponent.Object
	int WheelId;//[Offset: 0x2c0, Size: 0x4]
	enum WheelVehicleSide;//[Offset: 0x2c4, Size: 0x1]
	float SpringConstant;//[Offset: 0x2c8, Size: 0x4]
	float Damping;//[Offset: 0x2cc, Size: 0x4]
	float SuspensionOriginOffset;//[Offset: 0x2d0, Size: 0x4]
	bool bContactStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	float Stiffness;//[Offset: 0x2dc, Size: 0x4]
	float HeavyLandingModifier;//[Offset: 0x2e0, Size: 0x4]
	float SpringDistribution;//[Offset: 0x2e4, Size: 0x4]
	float ProgressiveStartRatio;//[Offset: 0x2e8, Size: 0x4]
	float ProgressiveExponent;//[Offset: 0x2ec, Size: 0x4]
	bool bSteersVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bDoesSteeringUseAckermann;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	float AckermannPercentage;//[Offset: 0x2f4, Size: 0x4]
	bool bDoesCalculateFrictionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	float TotalLongitudinalFrictionScale;//[Offset: 0x2fc, Size: 0x4]
	float TotalLateralFrictionScale;//[Offset: 0x300, Size: 0x4]
	float AngularVelocityMinSlipCondition;//[Offset: 0x304, Size: 0x4]
	float SideSlipAngleMaxSlipCondition;//[Offset: 0x308, Size: 0x4]
	float WheelVelocitySideMinSlipCondition;//[Offset: 0x30c, Size: 0x4]
	float WheelVelocitySideMinDriftCondition;//[Offset: 0x310, Size: 0x4]
	float WheelSlipRatioMaxSlipCondition;//[Offset: 0x314, Size: 0x4]
	float LongitudinalSlipFactor;//[Offset: 0x318, Size: 0x4]
	float LateralSlipFactor;//[Offset: 0x31c, Size: 0x4]
	float SlipDriftForceFactor;//[Offset: 0x320, Size: 0x4]
	float MinDriftWheelVelocity;//[Offset: 0x324, Size: 0x4]
	float MinTurnDriftInput;//[Offset: 0x328, Size: 0x4]
	bool bApplyWheelResistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	float MaxRotationalInertiaValue;//[Offset: 0x330, Size: 0x4]
	float LowChassisVelocityWheelFrictionAccelerationThreshold;//[Offset: 0x334, Size: 0x4]
	float WheelSpinFrictionAccelerationThreshold;//[Offset: 0x338, Size: 0x4]
	enum FrictionState;//[Offset: 0x33c, Size: 0x1]
	WheelData* WheelData;//[Offset: 0x340, Size: 0x8]
	float CompressionFactor;//[Offset: 0x348, Size: 0x4]
	Vector SpringForce;//[Offset: 0x34c, Size: 0xc]
	Vector LastContactNormal;//[Offset: 0x358, Size: 0xc]
	float SideSlipAngle;//[Offset: 0x364, Size: 0x4]
	float SideSlipAmount;//[Offset: 0x368, Size: 0x4]
	float SlipRatio;//[Offset: 0x36c, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x370, Size: 0x1]
	WheelFullState* SynchronizedState;//[Offset: 0x378, Size: 0x8]
	WheelFullState* PredictedState;//[Offset: 0x380, Size: 0x8]
	WheelFullState* DisplayedState;//[Offset: 0x388, Size: 0x8]
	float WheelLoadDistributionPercent;//[Offset: 0x398, Size: 0x4]
	float LongitudinalFrictionMultiplier;//[Offset: 0x39c, Size: 0x4]
	float LateralFrictionMultiplier;//[Offset: 0x3a0, Size: 0x4]
	float TotalFrictionForceX;//[Offset: 0x3a4, Size: 0x4]
	float TotalFrictionForceY;//[Offset: 0x3a8, Size: 0x4]
	float PreviousFrictionForceX;//[Offset: 0x3ac, Size: 0x4]
	float PreviousFrictionForceY;//[Offset: 0x3b0, Size: 0x4]
	float WheelFrictionDeltaVelocity;//[Offset: 0x3b4, Size: 0x4]
	SceneComponent* WheelStrutComponent;//[Offset: 0x3b8, Size: 0x8]
	Vector CachedStrutRelativeLocation;//[Offset: 0x3c0, Size: 0xc]
	float GetTotalFrictionForceY();// 0x55bc3b4
	float GetTotalFrictionForceX();// 0x55bc3d0
	float GetSpinVelocity();// 0x55bc424
	float GetPreviousFrictionForceY();// 0x55bc37c
	float GetPreviousFrictionForceX();// 0x55bc398
	byte GetLastHitSurfaceMaterial();// 0x55bc3ec
	enum GetFrictionState();// 0x55bc408
	void AssignWheelStrut(SceneComponent* InWheelStrut);// 0x55bc2d4

--------------------------------
Class: WheelComponentBase.SceneComponent.ActorComponent.Object
	int WheelIndex;//[Offset: 0x200, Size: 0x4]
	Vector CachedRelativeLocation;//[Offset: 0x204, Size: 0xc]
	float SuspensionLength;//[Offset: 0x210, Size: 0x4]
	float MaxSuspensionLength;//[Offset: 0x214, Size: 0x4]
	float SafetyGroundDistance;//[Offset: 0x218, Size: 0x4]
	FName RotationBoneName;//[Offset: 0x21c, Size: 0x8]
	FName TranslationBoneName;//[Offset: 0x224, Size: 0x8]
	ODVehicle* OwningVehicle;//[Offset: 0x230, Size: 0x8]
	HitResult LastHitResult;//[Offset: 0x238, Size: 0x88]

--------------------------------
Class: WheelData.DataAsset.Object
	float Radius;//[Offset: 0x30, Size: 0x4]
	float Mass;//[Offset: 0x34, Size: 0x4]
	float TotalFrictionX;//[Offset: 0x38, Size: 0x4]
	float TotalFrictionY;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* TotalFrictionXOverVelocity;//[Offset: 0x40, Size: 0x8]
	CurveFloat* TotalFrictionYOverVelocity;//[Offset: 0x48, Size: 0x8]
	float MaxFrictionX;//[Offset: 0x50, Size: 0x4]
	float MaxFrictionY;//[Offset: 0x54, Size: 0x4]
	float SlopeGripMinAngle;//[Offset: 0x58, Size: 0x4]
	float SlopeGripMaxAngle;//[Offset: 0x5c, Size: 0x4]
	float BrakeFrictionMultiplier;//[Offset: 0x60, Size: 0x4]
	bool bUseContactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float MaxDriveAcceleration;//[Offset: 0x68, Size: 0x4]
	float MaxReverseAcceleration;//[Offset: 0x6c, Size: 0x4]
	float MaxAutoBrakeAcceleration;//[Offset: 0x70, Size: 0x4]
	float MaxBrakeAcceleration;//[Offset: 0x74, Size: 0x4]
	CurveFloat* MaxDriveAccelerationOverMaxSpeed;//[Offset: 0x78, Size: 0x8]
	CurveFloat* WheelResistanceCoefficientOverVelocity;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: WheelFullState.Object
	float SpinVelocity;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: VisualWheelComponent.WheelComponentBase.SceneComponent.ActorComponent.Object
	VisualWheelTickFunction VisualWheelTickFunction;//[Offset: 0x2c0, Size: 0x30]
	float VisualWheelTickInterval;//[Offset: 0x2f0, Size: 0x4]
	FName OriginBoneName;//[Offset: 0x2f4, Size: 0x8]
	bool bShowWheelSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool DoesWheelUpdateWithSteering();// 0x55b78d4

--------------------------------
Class: VisualWheelTickFunction.TickFunction
	VisualWheelComponent* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: StabilizationData
	float ErrorThreshold;//[Offset: 0x0, Size: 0x4]
	float StabilizationMultiplier;//[Offset: 0x4, Size: 0x4]
	float ErrorStrength;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ODCharacterASC.ODAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object

--------------------------------
Class: ODAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	delegate OnTagAdded;//[Offset: 0x1308, Size: 0x10]
	delegate OnTagRemoved;//[Offset: 0x1318, Size: 0x10]

--------------------------------
Class: VehicleSkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x218, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1]
	float OuterRadius;//[Offset: 0x21c, Size: 0x4]
	float InnerRadius;//[Offset: 0x220, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x228, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x230, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x240, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x244, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x248, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x24c, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x250, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x254, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x258, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x260, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x264, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x4b76860
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x4b76638
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x4b76a80
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x4b769d0
	void SetOutputBusVolume(float BusVolume);// 0x4b76434
	void SetListeners(out const AkComponent*[] Listeners);// 0x4b76910
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x4b775b4
	void SetEarlyReflectionsVolume(float SendVolume);// 0x4b764dc
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x4b76584
	void SetAttenuationScalingFactor(float Value);// 0x4b7638c
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x4b76c74
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4b77294
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4b77448
	int PostAkEventByName(FString in_EventName);// 0x4b76dc8
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4b76e84
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4b77084
	float GetAttenuationRadius();// 0x4b76358

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x1f8, Size: 0x8]
	FString EventName;//[Offset: 0x200, Size: 0x10]
	void Stop();// 0x4b7d420
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString Rtpc);// 0x4b7d224
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x4b7d990
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x4b7dc48
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4b7d43c
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x4b7d734
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString Rtpc, int PlayingID);// 0x4b7cf8c

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	FString MediaName;//[Offset: 0x30, Size: 0x10]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Object*[] userData;//[Offset: 0x48, Size: 0x10]
	FString Language;//[Offset: 0x58, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FString Language;//[Offset: 0x30, Size: 0x10]
	FString AssetPlatform;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: ODAimAssistTargetableComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float OffsetCorrectionNudge;//[Offset: 0x470, Size: 0x4]
	Vector InnerBoxOriginOffset;//[Offset: 0x474, Size: 0xc]
	Vector OuterBoxOriginOffset;//[Offset: 0x480, Size: 0xc]
	float InnerBoxRangeXScale;//[Offset: 0x48c, Size: 0x4]
	float InnerBoxRangeYScale;//[Offset: 0x490, Size: 0x4]
	float InnerBoxRangeZScale;//[Offset: 0x494, Size: 0x4]
	float OuterBoxRangeXScale;//[Offset: 0x498, Size: 0x4]
	float OuterBoxRangeYScale;//[Offset: 0x49c, Size: 0x4]
	float OuterBoxRangeZScale;//[Offset: 0x4a0, Size: 0x4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x460, Size: 0xc]
	float LineThickness;//[Offset: 0x46c, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x7f70118
	Vector GetUnscaledBoxExtent();// 0x7f700bc
	Vector GetScaledBoxExtent();// 0x7f700e0

--------------------------------
Class: VehicleHealthComponent.HealthComponent.ActorComponent.Object
	delegate OnStunStateChanged;//[Offset: 0x2e8, Size: 0x10]
	delegate OnHealthStateChanged;//[Offset: 0x2f8, Size: 0x10]
	enum VehicleHealthState;//[Offset: 0x308, Size: 0x1]
	enum StunState;//[Offset: 0x309, Size: 0x1]
	bool bDoExplosivesTriggerStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1]
	ODVehicle* OwnerVehicle;//[Offset: 0x310, Size: 0x8]
	HealthStatePercent[] HealthStatePercents;//[Offset: 0x318, Size: 0x10]
	TimerHandle StunTimerHandle;//[Offset: 0x328, Size: 0x8]
	float StunDuration;//[Offset: 0x330, Size: 0x4]
	void SetStunState(enum InStunState);// 0x55b04c8
	void OnRep_VehicleStunState();// 0x55b03f0
	void OnRep_VehicleHealthState(enum PrevVehicleHealthState);// 0x55b0404
	enum GetVehicleHealthState();// 0x55b0570
	enum GetStunState();// 0x55b04ac
	void ClearStunState();// 0x55b03dc

--------------------------------
Class: HealthStatePercent
	enum HealthState;//[Offset: 0x0, Size: 0x1]
	float HealthPercent;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SpottingTargetComponent.ActorComponent.Object
	delegate OnSpotStateUpdated;//[Offset: 0xb8, Size: 0x10]
	SpotParams CurrentSpot;//[Offset: 0xc8, Size: 0x10]
	float RespotBufferTime;//[Offset: 0xd8, Size: 0x4]
	float MinorSpotDuration;//[Offset: 0xdc, Size: 0x4]
	float MajorSpotDuration;//[Offset: 0xe0, Size: 0x4]
	<Controller*,SpotInfo> Spots;//[Offset: 0xe8, Size: 0x50]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x138, Size: 0x8]
	void ServerSpot(out const SpotParams Info, Controller* Instigator);// 0x5590dfc
	void OnSpotExpired(Controller* Instigator);// 0x5590d54
	void OnRep_CurrentSpot();// 0x5590c98
	void OnActorDowned(Actor* DownedActor);// 0x5590cac

--------------------------------
Class: SpotInfo
	SpotParams Params;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MarkableVehicleObjectiveComponent.MarkableObjectiveComponent.ActorComponent.Object
	void OnReceiveDamage(out const DamageReceived DamageReceived);// 0x5412ab8
	void OnDeathDelegate(Actor* KilledActor);// 0x5412a10

--------------------------------
Class: ODAIPawnVehicleRVOComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	float RVOAvoidanceRadius;//[Offset: 0x144, Size: 0x4]
	float RVOAvoidanceRadiusForConsideration;//[Offset: 0x148, Size: 0x4]
	float RVOAvoidanceHeight;//[Offset: 0x14c, Size: 0x4]
	int AvoidanceUID;//[Offset: 0x150, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x154, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x158, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x15c, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: ITPlayerSpawnDataComponent.ActorComponent.Object
	delegate PlayerSpawnedDelegate;//[Offset: 0xb0, Size: 0x10]
	SpawnMetadata SpawnMetadata;//[Offset: 0xc0, Size: 0x90]
	ITGameObjectiveManager* ObjectiveManager;//[Offset: 0x150, Size: 0x8]
	class ITRespawnButtonWidget* RespawnButtonWidget;//[Offset: 0x178, Size: 0x28]
	void RegisterWithSpawnData();// 0x5403d70
	ITRespawnButtonWidget* CreateRespawnWidget();// 0x5403d84

--------------------------------
Class: SpawnMetadata
	bool bIsRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsAutomaticSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	GenericTeamId Team;//[Offset: 0x2, Size: 0x1]
	TransformScore[] SpawnPoints;//[Offset: 0x8, Size: 0x10]
	float NavSearchRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TransformScore
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	float Score;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ITRespawnButtonWidget.UserWidget.Widget.Visual.Object
	delegate OnRespawnClicked;//[Offset: 0x260, Size: 0x10]
	void SetSelected(bool bSelected);// 0x59ef218
	void Init(Object* WidgetDataContext);// 0x5404c84

--------------------------------
Class: CollisionDamageData
	byte CollisionSelfDamageResponseFlags;//[Offset: 0x0, Size: 0x1]
	float DestructionDamage;//[Offset: 0x4, Size: 0x4]
	float MinDestructionDamageThreshold;//[Offset: 0x8, Size: 0x4]
	float CharacterDamage;//[Offset: 0xc, Size: 0x4]
	float MinCharacterDamageThreshold;//[Offset: 0x10, Size: 0x4]
	float VehicleDamage;//[Offset: 0x14, Size: 0x4]
	byte VehicleDamageArmorType;//[Offset: 0x18, Size: 0x1]
	bool bDamagesNeutralVehicles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bDamagesNeutralCharacters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	float SelfImpactDamage;//[Offset: 0x1c, Size: 0x4]
	float SelfImpactDamageThreshold;//[Offset: 0x20, Size: 0x4]
	float SelfImpactForwardDeviation;//[Offset: 0x24, Size: 0x4]
	CurveFloat* SpeedSquaredToDamageMultiplierCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* SelfImpactDamageMultiplierCurve;//[Offset: 0x30, Size: 0x8]
	class DamageType* VehicleCollisionDamageType;//[Offset: 0x38, Size: 0x8]
	bool bApplyTurnToCollisionImpactAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: VehicleFidelityLevel
	float ActorTickInterval;//[Offset: 0x0, Size: 0x4]
	float HostileMovementTickInterval;//[Offset: 0x4, Size: 0x4]
	float FriendMovementTickInterval;//[Offset: 0x8, Size: 0x4]
	int MinSkeletalLOD;//[Offset: 0xc, Size: 0x4]
	bool bForceSetSkeletalLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool AudioEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ProfileSettings_RadioProfileSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	int SelectedValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TurretRotationComponent.SceneComponent.ActorComponent.Object
	delegate RotationChangedDelegate;//[Offset: 0x1f8, Size: 0x10]
	bool bApplyYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	bool bApplyPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	FName TurretID;//[Offset: 0x20c, Size: 0x8]
	TurretAimingData TPAimingData;//[Offset: 0x218, Size: 0x20]
	TurretAimingData FPAimingData;//[Offset: 0x238, Size: 0x20]
	TurretRotation TurretRotation;//[Offset: 0x258, Size: 0x8]
	VehicleSeatComponent* VehicleSeatComponent;//[Offset: 0x260, Size: 0x8]
	float TurretSpeedMultiplier;//[Offset: 0x268, Size: 0x4]
	FName BoneName;//[Offset: 0x26c, Size: 0x8]
	int TurretIndex;//[Offset: 0x274, Size: 0x4]
	void SetVehicleSeatComponent(VehicleSeatComponent* InVehicleSeatComponent);// 0x55aba44
	void OnRep_Rotation();// 0x55aba18
	void ClearVehicleSeatComponent();// 0x55aba2c

--------------------------------
Class: TurretAimingData
	float InterpolationSpeed;//[Offset: 0x0, Size: 0x4]
	float MaxYawPerSecond;//[Offset: 0x4, Size: 0x4]
	float MaxPitchPerSecond;//[Offset: 0x8, Size: 0x4]
	float MaxPitch;//[Offset: 0xc, Size: 0x4]
	float MinPitch;//[Offset: 0x10, Size: 0x4]
	CurveFloat* YawToMinPitch;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TurretRotation
	float Yaw;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8]
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8]
	FString PathToComponent;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: EquipmentHUD.Object
	delegate OnEquipmentChanged;//[Offset: 0x28, Size: 0x10]
	delegate OnAmmoChanged;//[Offset: 0x38, Size: 0x10]
	delegate OnReserveAmmoChanged;//[Offset: 0x48, Size: 0x10]
	delegate OnCanSwapChanged;//[Offset: 0x58, Size: 0x10]
	delegate OnAmmoRegenProgressUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnAmmoRegenRateUpdate;//[Offset: 0x78, Size: 0x10]
	delegate OnAmmoRegenSuppliedMag;//[Offset: 0x88, Size: 0x10]
	EquipmentActor* Equipment;//[Offset: 0x98, Size: 0x8]
	void SetEquipment(EquipmentActor* InEquipment);// 0x53d2ae8
	void OnEquipmentReserveAmmoChanged(int ReserveAmmo, EquipmentActor* InEquipment);// 0x53d28ec
	void OnEquipmentCanEquipChanged();// 0x53d2ad4
	void OnEquipmentAmmoChanged(int CurrentAmmo, EquipmentActor* InEquipment);// 0x53d29e0
	void K2_UnregisterEquipmentDelegates(EquipmentActor* InEquipment);// 0x59ef218
	void K2_RegisterEquipmentDelegates(EquipmentActor* InEquipment);// 0x59ef218
	EquipmentActor* GetEquipment();// 0x53d2b90

--------------------------------
Class: AmmoPickupHUDInfo
	byte[] MagazinesRestored;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PrimaryPawnDeath
	PlayerState* KilledByPlayerState;//[Offset: 0x0, Size: 0x8]
	FName Causer;//[Offset: 0x8, Size: 0x8]
	int DeathCount;//[Offset: 0x10, Size: 0x4]
	Texture2D* Icon;//[Offset: 0x18, Size: 0x8]
	Vector2D IconUsedPixelSize;//[Offset: 0x20, Size: 0x8]
	bool bPreventIconFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bWasCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: VehicleCameraControllerComponent.SceneComponent.ActorComponent.Object
	ODVehicle* VehicleOwner;//[Offset: 0x1f8, Size: 0x8]
	ODCameraComponent* CameraComponent;//[Offset: 0x200, Size: 0x8]
	enum VehicleFollowMode;//[Offset: 0x208, Size: 0x1]
	VehicleSeatComponent* VehicleSeat;//[Offset: 0x210, Size: 0x8]
	VehicleSpringArmComponent* SpringArm;//[Offset: 0x218, Size: 0x8]
	float SpringLengthOffsetBase;//[Offset: 0x224, Size: 0x4]
	CurveFloat* SpeedToStringArmOffset;//[Offset: 0x228, Size: 0x8]
	float SpringLengthMin;//[Offset: 0x230, Size: 0x4]
	float SpringLengthMax;//[Offset: 0x234, Size: 0x4]
	float SpringLengthMaxSpeed;//[Offset: 0x238, Size: 0x4]
	Rotator DeltaInputRotation;//[Offset: 0x23c, Size: 0xc]
	Vector2D DeltaMoveInput;//[Offset: 0x254, Size: 0x8]
	float PitchSpeed;//[Offset: 0x25c, Size: 0x4]
	float YawSpeed;//[Offset: 0x260, Size: 0x4]
	enum CameraRotationMode;//[Offset: 0x264, Size: 0x1]
	enum RotationSpace;//[Offset: 0x265, Size: 0x1]
	CameraConstraintData CameraConstraintData;//[Offset: 0x268, Size: 0x20]
	Quat LastVehicleQuat;//[Offset: 0x290, Size: 0x10]
	bool bIsLookPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bStabalizeWhileLookPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	Vector CameraOffsetForFiring;//[Offset: 0x2a4, Size: 0xc]
	void SetSpringArm(VehicleSpringArmComponent* InSpringArm);// 0x55af110
	void SetCameraComponent(ODCameraComponent* InCameraComponent);// 0x55af1cc
	Rotator GetControlRotation();// 0x55af274
	void GetCameraLocationAndDirection(out Vector OutLocation, out Vector OutDirection);// 0x55af000
	void ClearSpringArm();// 0x55af0fc
	void ClearCameraComponent();// 0x55af1b8

--------------------------------
Class: ODCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float ViewPitchMin;//[Offset: 0x810, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x814, Size: 0x4]
	float ViewYawMin;//[Offset: 0x818, Size: 0x4]
	float ViewYawMax;//[Offset: 0x81c, Size: 0x4]
	float ViewRollMin;//[Offset: 0x820, Size: 0x4]
	float ViewRollMax;//[Offset: 0x824, Size: 0x4]
	float AimSensitivityMultiplier;//[Offset: 0x828, Size: 0x4]
	float ScreenshakeMultiplier;//[Offset: 0x82c, Size: 0x4]
	float ADSToVariableFOVTransitionTime;//[Offset: 0x830, Size: 0x4]
	float OriginalCameraFOV;//[Offset: 0x834, Size: 0x4]
	Transform AdditiveCameraAnimation;//[Offset: 0x840, Size: 0x30]
	void SetScreenshakeMultiplier(float NewScreenshakeMultiplier);// 0x5478c70
	void SetOriginalFOV(float NewFOV);// 0x5478ee8
	void SetAimSensitivityMultiplier(float NewSensitivityMultiplier);// 0x5478e44
	void ResetZoomFOVToDefault(out const CameraActionParams Params);// 0x5478d18
	float GetViewYawMin();// 0x5478bec
	float GetViewYawMax();// 0x5478bd0
	float GetViewRollMin();// 0x5478bb4
	float GetViewRollMax();// 0x5478b98
	float GetViewPitchMin();// 0x5478c24
	float GetViewPitchMax();// 0x5478c08
	float GetTargetFOV();// 0x5478fa8
	float GetScreenshakeMultiplier();// 0x5478c40
	float GetOriginalFOV();// 0x5478f8c
	float GetCurrentMagnificationLevel();// 0x5478fdc
	float GetAimSensitivtyMultiplierForCurrentFOV();// 0x5478e10
	void ClearScreenshakeMultiplier();// 0x5478c5c
	void ClearAimSensitivityLevel();// 0x5478df4

--------------------------------
Class: VehicleSpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x210, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x214, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x220, Size: 0xc]
	float ProbeSize;//[Offset: 0x22c, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x230, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x231, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x231, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x231, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x231, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x231, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x231, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x231, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x231, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x234, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x238, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x23c, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x240, Size: 0x4]
	Rotator GetTargetRotation();// 0x55b6c44
	Vector GetTargetLocation();// 0x55b6c0c

--------------------------------
Class: CameraConstraintData
	bool bApplyPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bApplyYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float MaxPitch;//[Offset: 0x4, Size: 0x4]
	float MinPitch;//[Offset: 0x8, Size: 0x4]
	float MaxYaw;//[Offset: 0xc, Size: 0x4]
	float MinYaw;//[Offset: 0x10, Size: 0x4]
	bool bShouldResetCameraRotationOnViewChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bDoesCameraResetOverTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float DegreesPerSecondToRecenter;//[Offset: 0x18, Size: 0x4]
	bool bLockCameraResetWhenTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: VehicleSeatFullState.Object
	VehicleSeatMinimalState State;//[Offset: 0x28, Size: 0x10]
	enum CurrentCameraView;//[Offset: 0x38, Size: 0x1]
	BaseKitFullState*[] KitStates;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: VehicleSeatMinimalState
	VehicleKitComponent* CurrentVehicleKitComponent;//[Offset: 0x0, Size: 0x8]
	VehicleSeatComponent* Owner;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BaseKitFullState.Object
	bool bFireInputPressedLastFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bCanUseAnyEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int AmmoRegenSpeedUpCounter;//[Offset: 0x2c, Size: 0x4]
	float DefaultFOV;//[Offset: 0x30, Size: 0x4]
	EquipmentActor* CurrentEquipment;//[Offset: 0x38, Size: 0x8]
	EquipmentActorFullState* CurrentEquipmentActorState;//[Offset: 0x40, Size: 0x8]
	ADSStateMachineState ADSStateMachineState;//[Offset: 0x48, Size: 0x14]
	Actor* InputLockTarget;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: ADSStateMachineState.StateMachineState
	bool bManualADSInputBuffered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bWantsManualADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool bWantsAutoADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bSkipADSWindDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	byte CurrentADSZoomLevel;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: StateMachineState
	int LastStateIndex;//[Offset: 0x0, Size: 0x4]
	int CurrentStateIndex;//[Offset: 0x4, Size: 0x4]
	float TimeInCurrentState;//[Offset: 0x8, Size: 0x4]
	bool bIsPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: DateTime

--------------------------------
Class: EquipmentXPStats
	<GameplayTag,FName> TagToContentIDMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ODScoreManager.ActorComponent.Object
	delegate OnScoreSessionBegin;//[Offset: 0xb0, Size: 0x10]
	delegate OnScoreSessionEnd;//[Offset: 0xc0, Size: 0x10]
	delegate OnScoreSessionEventAdded;//[Offset: 0xd0, Size: 0x10]
	delegate OnScoreSessionEventUpdated;//[Offset: 0xe0, Size: 0x10]
	delegate OnScoreEvent;//[Offset: 0xf0, Size: 0x10]
	float ScoreSessionLengthInSeconds;//[Offset: 0x100, Size: 0x4]
	FText UnavailablePlayerNameText;//[Offset: 0x108, Size: 0x18]
	GameplayTag StatPlayerScore;//[Offset: 0x120, Size: 0x8]
	GameplayTag StatPlayerDeathLocation;//[Offset: 0x128, Size: 0x8]
	DataTable* ScoreEventsTable;//[Offset: 0x130, Size: 0x8]
	float MultiKillIntervalSeconds;//[Offset: 0x138, Size: 0x4]
	int PlayerKillCount;//[Offset: 0x13c, Size: 0x4]
	int PlayerDeathCount;//[Offset: 0x140, Size: 0x4]
	float PlayerScore;//[Offset: 0x144, Size: 0x4]
	RepScoreEventStats CurrentScoreEventStats;//[Offset: 0x150, Size: 0x88]
	RepSimpleScoreEvent[] CurrentSimpleScoreEvents;//[Offset: 0x260, Size: 0x10]
	ODPlayerState* OwnerPlayerState;//[Offset: 0x2b0, Size: 0x8]
	ODProgressionStatUtils* ProgressionStatUtils;//[Offset: 0x2b8, Size: 0x8]
	void TrackPlayerStats(enum ScoreEventEnum);// 0x5525818
	void TestScoreEvent(FString TestDisplayName, float TestPointValue, bool bIsTestHighValueEvent, Texture2D* TestEventIcon, bool bTestEventDisplaysRibbon, Texture2D* TestRibbonIcon, FString OptionalTestUserName);// 0x5526264
	void TestExistingScoreEvent(FString ExistingEventKey, FString OptionalTestUserName);// 0x55264ec
	void ServerIncrementKillCount();// 0x55265f8
	void ServerIncrementDeathCount();// 0x552660c
	void ServerActivateSimpleScoreEvent(ScoreEvent ScoreEvent, const float OptionalScoreOverride);// 0x5525aa8
	void ServerActivateScoreEvent(enum ScoreEventEnum, const Actor* OptionalCauser, const float OptionalScoreOverride);// 0x5525968
	void ScoreTargetSpotted();// 0x5525cec
	void ScoreSquadSpawnOnYou();// 0x5525c60
	void ScoreSpotAssist(const Actor* Causer);// 0x5525d00
	void ScoreResupplyAlly();// 0x5525c74
	void ScorePoints(float PointValue);// 0x55258c0
	void ScoreKillAssist(out const AssistRecord AssistRecord, bool bCountsAsKill);// 0x5525f90
	void ScoreKill(const Actor* Causer, float TimeStamp, out const UniqueNetIdRepl VictimNetId);// 0x55260a0
	void ScoreHeadshotKill(const Actor* Causer);// 0x5525ee8
	void ScoreExplosiveDestroyed();// 0x5525c88
	void ScoreEquipmentDestroyed();// 0x5525c9c
	void ScoreDamage(const Actor* DamageRecipient, const float DamageAmount, const Actor* Causer);// 0x5525da8
	void ScoreConquestCaptureTenth();// 0x5525cc4
	void ScoreConquestCaptureNeutralized();// 0x5525cb0
	void ScoreConquestCaptured();// 0x5525cd8
	void OnRep_PlayerScore();// 0x55257dc
	void OnRep_PlayerKillCount();// 0x5525804
	void OnRep_PlayerDeathCount();// 0x55257f0
	void OnRep_CurrentSimpleScoreEvents();// 0x55257b4
	void OnRep_CurrentScoreEventStats();// 0x55257c8

--------------------------------
Class: RepScoreEventStats
	int16 BasicEventStats;//[Offset: 0x0, Size: 0x2]
	UniqueNetIdRepl[] KillEventStats;//[Offset: 0x38, Size: 0x10]
	float[] CharacterDamageEventStats;//[Offset: 0x48, Size: 0x10]
	float[] VehicleDamageEventStats;//[Offset: 0x58, Size: 0x10]
	float[] KillAssistEventStats;//[Offset: 0x68, Size: 0x10]
	float[] KillAssistCountsAsKillEventStats;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: RepSimpleScoreEvent
	FString EventKeyString;//[Offset: 0x0, Size: 0x10]
	float ScoreOverride;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ScoreEvent.TableRowBase
	FName EventIdentifier;//[Offset: 0x8, Size: 0x8]
	FString DisplayName;//[Offset: 0x10, Size: 0x10]
	float PointValue;//[Offset: 0x20, Size: 0x4]
	Color DisplayColor;//[Offset: 0x24, Size: 0x4]
	Color MessageColor;//[Offset: 0x28, Size: 0x4]
	bool IsHighValueEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Texture2D* EventIcon;//[Offset: 0x30, Size: 0x8]
	bool EventDisplaysRibbon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Texture2D* RibbonIcon;//[Offset: 0x40, Size: 0x8]
	bool bReplacesPreviousEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FName EventToReplace;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: BattlePlayerTelemetryComponent.ActorComponent.Object
	ODPlayerState* OwningPlayerState;//[Offset: 0xb0, Size: 0x8]
	ODPlayerController* OwningController;//[Offset: 0xb8, Size: 0x8]
	VehicleSeatComponent* PossessedVehicleSeat;//[Offset: 0xc0, Size: 0x8]
	ODCharacter* PossessedCharacter;//[Offset: 0xc8, Size: 0x8]
	ODCharacter* PrimaryCharacter;//[Offset: 0xd0, Size: 0x8]
	VehicleKitComponent* CurrentVehicleKitComponent;//[Offset: 0xd8, Size: 0x8]
	EquipmentActor* CurrentEquipment;//[Offset: 0xe0, Size: 0x8]
	class EquipmentActor* CurrentEquipmentClass;//[Offset: 0xe8, Size: 0x8]
	int PlayerKillAssistCount;//[Offset: 0xf0, Size: 0x4]
	float PlayerDamageDealt;//[Offset: 0xf4, Size: 0x4]
	float PlayerDamageReceived;//[Offset: 0xf8, Size: 0x4]
	int64 PlayerHeadshotsHit;//[Offset: 0x100, Size: 0x8]
	int64 PlayerBulletsHit;//[Offset: 0x108, Size: 0x8]
	int64 PlayerBulletsFired;//[Offset: 0x110, Size: 0x8]
	int64 PlayerRevivesGranted;//[Offset: 0x118, Size: 0x8]
	int64 PlayerRevivesReceived;//[Offset: 0x120, Size: 0x8]
	float PlayerSecondsOnConquestPoints;//[Offset: 0x128, Size: 0x4]
	float PlayerSecondsInCombat;//[Offset: 0x130, Size: 0x4]
	float FirstEnterCombatTimeSeconds;//[Offset: 0x138, Size: 0x4]
	float LastSpawnTimeSeconds;//[Offset: 0x13c, Size: 0x4]
	<class EquipmentActor,int> EquipmentClassToUseCount;//[Offset: 0x140, Size: 0x50]
	<class Actor,CauserDamageTelemetry> CauserClassToDamageTelemetry;//[Offset: 0x190, Size: 0x50]
	int DeathCount;//[Offset: 0x210, Size: 0x4]
	BattleServerTelemetryComponent* BattleServerTelemetryComponent;//[Offset: 0x218, Size: 0x8]
	FString UniqueCycleId;//[Offset: 0x228, Size: 0x10]
	void UpdateVehicleDistanceTraveled(int FixedStepCount);// 0x539f9e4
	void OnVehicleHonk();// 0x539f8d4
	void OnUpdatePrimaryCharacterPlayer(ODCharacter* ODCharacter);// 0x53a0228
	void OnUpdatePrimaryCharacterBot(ODCharacter* ODCharacter);// 0x53a0180
	void OnScoreEvent(out const ScoreEvent ScoreEvent);// 0x539f8e8
	void OnRevivedTeammate();// 0x539fe50
	void OnRevived();// 0x539fe3c
	void OnPrimaryCharacterDeath(Actor* KilledActor);// 0x539fc14
	void OnPossessVehicleSeat(VehicleSeatComponent* VehicleSeatComponent);// 0x53a02d0
	void OnPossessCharacter(ODCharacter* ODCharacter);// 0x53a0378
	void OnKillScored();// 0x539ff74
	void OnKillAssistScored(out const AssistRecord AssistRecord, bool bCountsAsKill);// 0x539fe64
	void OnInCombatChangedShared(bool bIsInCombat);// 0x539fa8c
	void OnInCombatChangedPlayer(bool bIsInCombat);// 0x539fb3c
	void OnExitVehicle(out const VehicleExitEvent VehicleExitEvent);// 0x539fcbc
	void OnExitConquestPoint();// 0x539fbec
	void OnEnterVehicle(out const VehicleEnterEvent VehicleEnterEvent);// 0x539fd7c
	void OnEnterConquestPoint();// 0x539fc00
	void OnCurrentVehicleKitComponentChanged(VehicleKitComponent* VehicleKitComponent);// 0x53a00d8
	void OnCurrentEquipmentUsed(EquipmentActor* EquipmentActor);// 0x539ff88
	void OnCurrentEquipmentChanged(EquipmentActor* EquipmentActor);// 0x53a0030

--------------------------------
Class: CauserDamageTelemetry

--------------------------------
Class: BattleServerTelemetryComponent.ActorComponent.Object
	void SendSectorStartEvent();// 0x53a1484
	void SendSectorCapturedEvent();// 0x53a1470
	void SendPlayersPositionEvent();// 0x53a145c
	void OnVehicleDamaged(out const VehicleDamagedEvent VehicleDamagedEvent);// 0x53a1188
	void OnRushMComDisarmed(FString MComId, FString PlayerId);// 0x53a15a4
	void OnRushMComDestroyed(FString MComId, FString PlayerId);// 0x53a1498
	void OnRushMComArmed(FString MComId, FString PlayerId);// 0x53a16b0
	void OnPlayerSpawned(out const PlayerSpawnedEvent PlayerSpawnedEvent);// 0x53a0f70
	void OnMatchStateChanged(enum PreviousPhase, enum CurrentPhase);// 0x53a1368
	void OnConquestPointSpawned(ODConquestPoint* ConquestPoint);// 0x53a10e0
	void OnConquestPointCaptured(ODConquestPoint* ConquestPoint);// 0x53a1038
	void OnCharacterDamaged(out const CharacterDamagedEvent CharacterDamagedEvent);// 0x53a1278

--------------------------------
Class: VehicleDamagedEvent
	ODVehicle* VictimODVehicle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerSpawnedEvent
	Pawn* PrimaryPawn;//[Offset: 0x0, Size: 0x8]
	Actor* SpawnDataProvider;//[Offset: 0x8, Size: 0x8]
	Controller* PlayerToSpawn;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ODConquestPoint.Actor.Object
	ODConquestPointResponder*[] ConquestPointResponders;//[Offset: 0x270, Size: 0x10]
	delegate OnTeamOwnershipChanged;//[Offset: 0x280, Size: 0x10]
	delegate OnConquestPointCaptured;//[Offset: 0x290, Size: 0x10]
	delegate OnPawnEnteredConquestPoint;//[Offset: 0x2a0, Size: 0x10]
	delegate OnPawnExitedConquestPoint;//[Offset: 0x2b0, Size: 0x10]
	delegate OnInfluencerListChanged;//[Offset: 0x2c0, Size: 0x10]
	ODTriggerVolume*[] CollisionVolumes;//[Offset: 0x300, Size: 0x10]
	class ODCharacter* ODCharacterClass;//[Offset: 0x310, Size: 0x8]
	int OwningTeam;//[Offset: 0x318, Size: 0x4]
	int[] TeamCounts;//[Offset: 0x320, Size: 0x10]
	float[] TeamInfluence;//[Offset: 0x330, Size: 0x10]
	float TimeToStartInfluenceReset;//[Offset: 0x350, Size: 0x4]
	float InfluenceLossMultiplier;//[Offset: 0x354, Size: 0x4]
	float InfluenceResetDuration;//[Offset: 0x358, Size: 0x4]
	float InfluenceUpdateStartTime;//[Offset: 0x35c, Size: 0x4]
	float InfluenceUpdateEndTime;//[Offset: 0x360, Size: 0x4]
	float InfluenceUpdateTeamStartCount;//[Offset: 0x364, Size: 0x4]
	float InfluenceUpdateTeamEndCount;//[Offset: 0x368, Size: 0x4]
	float InfluencePointAwardScalar;//[Offset: 0x36c, Size: 0x4]
	int InfluencePointAwardIncrement;//[Offset: 0x370, Size: 0x4]
	bool bMarkAsSquadObjectiveWhenPinged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	FName PlayerStartTag;//[Offset: 0x378, Size: 0x8]
	bool bIsValidSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	ConquestInfluencersArray InfluencerTeams;//[Offset: 0x388, Size: 0x18]
	ODCharacter*[] TeamlessInfluencers;//[Offset: 0x3a0, Size: 0x10]
	PlayerStartArray[] TeamPlayerSpawns;//[Offset: 0x3b0, Size: 0x10]
	PlayerStartArray AnyTeamPlayerSpawns;//[Offset: 0x3c0, Size: 0x10]
	<PlayerStart*> AllPlayerStarts;//[Offset: 0x3d0, Size: 0x50]
	ITPlayerSpawnDataComponent* SpawnDataComponent;//[Offset: 0x420, Size: 0x8]
	MarkableConquestObjectiveComponent* MarkableObjectiveComponent;//[Offset: 0x428, Size: 0x8]
	ODOnlineGameStateBase* CachedGameState;//[Offset: 0x438, Size: 0x8]
	void UpdatePointInfluence(float DeltaTime);// 0x549e50c
	void SetOwningTeam(int NewTeamOwner);// 0x549edac
	void OnVehicleSeatCharacterChanged(VehicleSeatComponent* VehicleSeat, ODCharacter* Character);// 0x549ea24
	void OnTriggerEndOverlap(Actor* OverlappedActor, Actor* OtherActor);// 0x549e670
	void OnTriggerBeginOverlap(Actor* OverlappedActor, Actor* OtherActor);// 0x549e760
	void OnRep_OwningTeam();// 0x549ea10
	void OnRep_InfluencerTeams();// 0x549e9fc
	void OnInfluencerEndPlay(Actor* Actor, byte EndPlayReason);// 0x549e850
	void OnAnyPlayerKilledHandler(const PlayerState* KillerState, const PlayerState* VictimState, out const PrimaryPawnDeath PawnDeathInfo);// 0x549eb14
	bool IsUnowned();// 0x549ed88
	bool IsOverlappingTriggers(const Actor* OtherActor);// 0x549e5bc
	void GrantConquestPlayerScore(int TeamIndex, enum Condition);// 0x549e360
	Vector GetSpawnProviderLocation();// 0x549ed48
	FName GetPlayerStartTag();// 0x549ec68
	float GetInfluenceForTeam(byte TeamId);// 0x549ec84
	FString DumpState();// 0x549e944
	void DecayInfluence(float DeltaTime);// 0x549e45c
	void CollectPlayerSpawns();// 0x549ed34
	void CheckForIntermediateScoring(int TeamIndex);// 0x549e2b0

--------------------------------
Class: ODConquestPointResponder.Actor.Object
	void K2_ConquestPointInfluenceChanged(out const GenericTeamId TeamId, float TeamInfluence, float DeltaChange, int NumCaptors);// 0x59ef218
	void K2_ConquestPointCaptured(out const GenericTeamId NewTeam, out const GenericTeamId OldTeam);// 0x59ef218
	void ConquestPointInfluenceChanged(out const GenericTeamId TeamId, float TeamInfluence, float DeltaChange, int NumCaptors);// 0x549dd3c
	void ConquestPointCaptured(out const GenericTeamId NewTeam, out const GenericTeamId OldTeam);// 0x549dc28

--------------------------------
Class: ODTriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: ConquestInfluencersArray
	ConquestInfluencersTeam[] Teams;//[Offset: 0x0, Size: 0x10]
	int UpdateCount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ConquestInfluencersTeam
	ODCharacter*[] Influencers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PlayerStartArray
	PlayerStart*[] PlayerSpawns;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x26c, Size: 0x8]

--------------------------------
Class: MarkableConquestObjectiveComponent.MarkableObjectiveComponent.ActorComponent.Object
	int KillsToCompleteObjective;//[Offset: 0x2b0, Size: 0x4]
	void OnTeamOwnershipChanged(int NewOwner, int OldOwner);// 0x5410754
	int GetKillsBySquad(byte SquadNumber);// 0x5410844

--------------------------------
Class: ODOnlineGameStateBase.GameState.GameStateBase.Info.Actor.Object
	Guid CurrentGameSessionIdentifier;//[Offset: 0x2b8, Size: 0x10]
	class ITGameObjectiveManager* ObjectiveManagerClass;//[Offset: 0x310, Size: 0x28]
	ITGameRuleCollection* GameRuleCollection;//[Offset: 0x338, Size: 0x8]
	<class MatchModificationBase,GenericTeamId> MatchModifications;//[Offset: 0x340, Size: 0x50]
	int ServerPhaseRemainingTime;//[Offset: 0x390, Size: 0x4]
	TimerHandle PhaseRemainingTimeHandleOverride;//[Offset: 0x398, Size: 0x8]
	int MaxPlayers;//[Offset: 0x3a0, Size: 0x4]
	byte[] TeamScores;//[Offset: 0x3a8, Size: 0x10]
	enum CurrentMatchPhase;//[Offset: 0x3b8, Size: 0x1]
	enum PreviousMatchPhase;//[Offset: 0x3b9, Size: 0x1]
	delegate OnScoreChanged;//[Offset: 0x3c0, Size: 0x10]
	delegate OnMatchPhaseChanged;//[Offset: 0x3d0, Size: 0x10]
	delegate OnPlayerStateJoined;//[Offset: 0x3e0, Size: 0x10]
	delegate OnPlayerStateRemoved;//[Offset: 0x3f0, Size: 0x10]
	delegate OnAnyPlayerKilled;//[Offset: 0x400, Size: 0x10]
	delegate OnObjectiveManagerAvailable;//[Offset: 0x410, Size: 0x10]
	delegate OnAllManagersReplicated;//[Offset: 0x420, Size: 0x10]
	delegate ServerOnAllManagersCreated;//[Offset: 0x430, Size: 0x10]
	delegate ServerGameStateBeginPlay;//[Offset: 0x440, Size: 0x10]
	delegate OnAnyBootcampTargetHit;//[Offset: 0x450, Size: 0x10]
	delegate OnPlayerCountUpdated;//[Offset: 0x490, Size: 0x10]
	class Actor[] ManagerClassesToSpawn;//[Offset: 0x4a0, Size: 0x10]
	bool bCanPlayGameInAnyPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	ITGameObjectiveManager* ObjectiveManager;//[Offset: 0x4b8, Size: 0x8]
	SquadManager* CachedSquadManager;//[Offset: 0x4c0, Size: 0x8]
	StatSystem* GameStatSystem;//[Offset: 0x4c8, Size: 0x8]
	class StatSystem* StatSystemClass;//[Offset: 0x4d0, Size: 0x8]
	Actor*[] SpawnedManagers;//[Offset: 0x4d8, Size: 0x10]
	float LastUsedServerTimeSec;//[Offset: 0x4e8, Size: 0x4]
	float MaxServerDeltaTime;//[Offset: 0x4ec, Size: 0x4]
	float ServerTimeDelay;//[Offset: 0x4f0, Size: 0x4]
	int NumPlayers;//[Offset: 0x4f4, Size: 0x4]
	bool bAllowFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool bGameModeTracksXP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	bool bIsBootcampMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fa, Size: 0x1]
	bool bUIStartsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fb, Size: 0x1]
	enum StartingCameraState;//[Offset: 0x4fc, Size: 0x1]
	bool bHideLoadoutButtons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fd, Size: 0x1]
	bool ServerHaveManagersBeenCreated();// 0x54f3c40
	void OnRep_TeamScores();// 0x54f3bf4
	void OnRep_SpawnedManagers();// 0x54f384c
	void OnRep_ObjectiveManager();// 0x54f3860
	void OnRep_NumPlayers();// 0x54f3b38
	void OnRep_CurrentMatchPhase(enum PreviousGamePhase);// 0x54f3b4c
	void OnRep_CurrentGameSessionIdentifier();// 0x54f40a8
	void OnBootcampAnyTargetHit(BootcampTarget* Target, out const Vector HitLocation, float DamageTaken, enum HitType, PlayerState* HitInstigator);// 0x54f3964
	void MulticastShowFeedDeath(PlayerState* InstigatorPlayerState, PlayerState* DeadPlayerState, const PrimaryPawnDeath PawnDeathInfo);// 0x54f3d08
	static bool IsCurrentStateValidForGameplay(const Object* WorldContextObject);// 0x54f3e58
	enum GetStartingCameraState();// 0x54f3c08
	SquadManager* GetSquadManagerNonConst();// 0x54f3f04
	int GetRemainingTimeInCurrentPhase();// 0x54f3f3c
	ITGameObjectiveManager* GetObjectiveManager();// 0x54f3f20
	int GetNumPlayers();// 0x54f3cb8
	bool GetMusicDisabled();// 0x54f3c80
	static void GetManager(const Object* WorldContextObject, class Actor ActorClass, out Actor* OutActor);// 0x54f3f70
	bool GetIsBootcampMode();// 0x54f3c64
	bool GetGameModeTracksXP();// 0x54f3cec
	bool GetAllowFriendlyFire();// 0x54f3c24
	static byte GetActorAttitudes(const Actor* First, const Actor* Second);// 0x54f3874

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x294, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x29c, Size: 0x8]
	int ElapsedTime;//[Offset: 0x2a4, Size: 0x4]
	void OnRep_MatchState();// 0x7fe7edc
	void OnRep_ElapsedTime();// 0x7fe7ec0

--------------------------------
Class: BootcampTarget.Actor.Object
	delegate OnTargetHit;//[Offset: 0x258, Size: 0x10]
	HitLocationGroupComponent* HitLocationGroupComponent;//[Offset: 0x268, Size: 0x8]
	Vector HitLocation;//[Offset: 0x270, Size: 0xc]
	enum HitType;//[Offset: 0x27c, Size: 0x1]
	void SetTargetHighlighted(bool bShouldBeHighlighted);// 0x59ef218
	void OnTargetTakeDamage(out const Vector DamageLocation, float DamageAmount, enum HitEffectiveness, PlayerState* InstigatorPlayerState);// 0x53ab810
	void OnReceiveRadialDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Vector Origin, HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x53ab268
	void OnReceivePointDamage(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Vector DamageHitLocation, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, const DamageType* DamageType, Actor* DamageCauser);// 0x53ab510
	void OnReceiveAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x53ab08c
	void MulticastOnTargetTakeDamage(const Vector DamageLocation, float DamageAmount, enum HitEffectiveness, PlayerState* InstigatorPlayerState);// 0x53aaefc

--------------------------------
Class: HitLocationGroupComponent.ActorComponent.Object
	<enum,HitLocationGroup> HitLocationGroupMap;//[Offset: 0xb0, Size: 0x50]
	enum GetHitLocationGroupType(const FName InBoneName);// 0x53ef114

--------------------------------
Class: HitLocationGroup
	<FName> BoneNames;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MatchModificationBase.Info.Actor.Object
	GenericTeamId Team;//[Offset: 0x248, Size: 0x1]
	bool bDependenciesLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1]
	void OnModificationInitialized();// 0x59ef218

--------------------------------
Class: StatSystem.Actor.Object
	delegate OnStatAdded;//[Offset: 0x248, Size: 0x10]
	GameplayTagContainer AllValidClientStats;//[Offset: 0x258, Size: 0x20]
	StatTimerManagerComponent* StatTimerManagerComponent;//[Offset: 0x278, Size: 0x8]
	Stat[] ReplicatedClientStats;//[Offset: 0x280, Size: 0x10]
	void OnRep_ReplicatedClientStats();// 0x559516c
	void CallStatAddedDelegate();// 0x5595158

--------------------------------
Class: Stat
	int64 TimeStamp;//[Offset: 0x0, Size: 0x8]
	GameplayTag Category;//[Offset: 0x8, Size: 0x8]
	PlayerState* StatOwner;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CharacterDamagedEvent
	ODCharacter* VictimODCharacter;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: VehicleExitEvent
	VehicleSeatComponent* VehicleSeatComponent;//[Offset: 0x8, Size: 0x8]
	float TimeSinceSpawn;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VehicleEnterEvent
	enum Type;//[Offset: 0x0, Size: 0x1]
	VehicleSeatComponent* VehicleSeatComponent;//[Offset: 0x8, Size: 0x8]
	float TimeSinceSpawn;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MinimapLocationInfo
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal ForwardVector;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: PingActor.Actor.Object
	GenericUIAnchorComponent* UIAnchorComponent;//[Offset: 0x248, Size: 0x8]
	SquadPing AssociatedPing;//[Offset: 0x250, Size: 0x38]
	FText AssociatedPingMessage;//[Offset: 0x288, Size: 0x18]
	class ODUIWorldSpaceItemBase* UIWorldIndicatorWidget;//[Offset: 0x2a0, Size: 0x8]
	class ODUIRadarItem* UIMinimapWidget;//[Offset: 0x2a8, Size: 0x8]
	bool bDependenciesLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GenericUIAnchorComponent* GetUIAnchorNonConst();// 0x555cca8
	FText GetAssociatedPingMessage();// 0x555cbc8
	SquadPing GetAssociatedPing();// 0x555cc7c

--------------------------------
Class: AudioEventParams
	byte NetworkMode;//[Offset: 0x0, Size: 0x1]
	byte Priority;//[Offset: 0x1, Size: 0x1]
	float ReserveTime;//[Offset: 0x4, Size: 0x4]
	BotHearingParams BotHearingParams;//[Offset: 0x8, Size: 0x14]
	int CallbackMask;//[Offset: 0x1c, Size: 0x4]
	AkExternalSourceInfo[] ExternalSources;//[Offset: 0x20, Size: 0x10]
	FString EventNameFallback;//[Offset: 0x30, Size: 0x10]
	delegate PostEventCallback;//[Offset: 0x40, Size: 0x10]
	AkSwitchValue*[] Switches;//[Offset: 0x50, Size: 0x10]
	RtpcParams[] Rtpcs;//[Offset: 0x60, Size: 0x10]
	Actor* Causer;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BotHearingParams
	float Loudness;//[Offset: 0x0, Size: 0x4]
	Vector LocationOverride;//[Offset: 0x4, Size: 0xc]
	float HearingRange;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: RtpcParams
	AkRtpc* Rtpc;//[Offset: 0x0, Size: 0x8]
	float Value;//[Offset: 0x8, Size: 0x4]
	int InterpolationTimeMs;//[Offset: 0xc, Size: 0x4]
	FString RtpcId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AudioSubsystem.WorldSubsystem.Subsystem.Object
	SquadAudioEventLookup* GenericSquadVoiceIdTable;//[Offset: 0x30, Size: 0x8]
	UIAudioEventLookup* UIAudioIdTable;//[Offset: 0x38, Size: 0x8]
	AnnouncerAudioEventLookup* GenericAnnouncerVoiceIdTable;//[Offset: 0x40, Size: 0x8]
	AudioStateLookup* AudioStateTable;//[Offset: 0x48, Size: 0x8]
	bool bIsTearingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	void RequestSetAudioSwitch(Object* OwningObject, FString SwitchGroup, FString SwitchState, float Delay);// 0x53834f4
	void RequestSetAudioState(GameplayTag State);// 0x538344c
	uint32 PostAudioEventFromInterfaceObject(AkAudioEvent* AkEvent, Object* OwningObject, out const AudioEventParams Params);// 0x53827e4
	uint32 PostAudioEventFromAkObject(AkComponent* AudioObject, AkAudioEvent* AkEvent, out const AudioEventParams Params);// 0x53825a4
	uint32 PostAudioEvent(AkAudioEvent* AkEvent, Object* AudioOrigin, AudioEventParams Params);// 0x5383698
	int PlayUIFeedback(GameplayTag UIFeedbackId, out const AudioEventParams Params);// 0x5382a24
	int PlaySquadVoiceLine(GameplayTag VoiceLineId, ODCharacter* Speaker);// 0x5382e0c
	int PlayMovementAudio(Pawn* MovingPawn, out const MovementAudioData MovementAudio, enum EventType, byte Surface, AudioEventParams Params);// 0x5382f04
	int PlayAnnouncerAudio(GameplayTag VoiceLineId, out const AudioEventParams Params);// 0x5382c18
	int K2_PostAudioEvent(AkAudioEvent* AkEvent, Object* AudioSource, AudioEventParams Params);// 0x538216c

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: SquadAudioEventLookup.AudioEventLookup.AudioLookup.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: AudioEventLookup.AudioLookup.PrimaryDataAsset.DataAsset.Object
	<GameplayTag,AkAudioEvent*> AudioEvents;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: AudioLookup.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: UIAudioEventLookup.AudioEventLookup.AudioLookup.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: AnnouncerAudioEventLookup.AudioEventLookup.AudioLookup.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: AudioStateLookup.AudioLookup.PrimaryDataAsset.DataAsset.Object
	<GameplayTag,AkStateValue*> AudioStates;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: AkStateValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: MovementAudioData.TableRowBase
	<enum,MovementAudioEntry> AudioEvents;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: MovementAudioEntry
	<byte,SurfaceAudioDef> EventsBySurface;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SurfaceAudioDef
	AkAudioEvent* AudioEvent;//[Offset: 0x0, Size: 0x8]
	float AIHearingRange;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ODCharacterCapsule.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	<enum,ODCapsuleShape> CapsulePoses;//[Offset: 0x468, Size: 0x50]
	float CapsuleStanceChangeWiggle;//[Offset: 0x4b8, Size: 0x4]
	enum CurrentPose;//[Offset: 0x4bc, Size: 0x1]
	Vector OriginalBaseTranslationOffset;//[Offset: 0x4c0, Size: 0xc]
	Quat OriginalBaseRotationOffset;//[Offset: 0x4d0, Size: 0x10]
	enum GetCurrentPose();// 0x5488b88
	bool CanEnterPose(enum Pose);// 0x5488ba4

--------------------------------
Class: ODCapsuleShape
	Vector CapsuleOffsetFromOrigin;//[Offset: 0x0, Size: 0xc]
	Vector MeshOffsetFromOrigin;//[Offset: 0xc, Size: 0xc]
	float Radius;//[Offset: 0x18, Size: 0x4]
	float Length;//[Offset: 0x1c, Size: 0x4]
	FName CollisionProfileName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CharacterAudioPerceptionEvents
	float FootstepSprintAudioRange;//[Offset: 0x0, Size: 0x4]
	float FootstepStandAudioRange;//[Offset: 0x4, Size: 0x4]
	float FootstepCrouchAudioRange;//[Offset: 0x8, Size: 0x4]
	float FootstepProneAudioRange;//[Offset: 0xc, Size: 0x4]
	float LandAudioRange;//[Offset: 0x10, Size: 0x4]
	float SwimmingAudioRange;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CharacterFidelityLevel
	float MinimumSignificance;//[Offset: 0x0, Size: 0x4]
	float ActorTickInterval;//[Offset: 0x4, Size: 0x4]
	float HostileMovementTickInterval;//[Offset: 0x8, Size: 0x4]
	float FriendMovementTickInterval;//[Offset: 0xc, Size: 0x4]
	float AnimUpdateRate;//[Offset: 0x10, Size: 0x4]
	int MinSkeletalLOD;//[Offset: 0x14, Size: 0x4]
	bool AnimInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool StaticAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool AudioEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bRagdollsAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bFootstepsAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bAccurateFootstepFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: CharacterClimbState
	ODClimbableObject* ClimbingObject;//[Offset: 0x0, Size: 0x8]
	bool bKeepClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bShouldIdleClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bGoingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	Vector StartingLocation;//[Offset: 0xc, Size: 0xc]
	bool bJumpedOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float DesiredClimbRate;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ODClimbableObject.Actor.Object
	SceneComponent* ClimbRoot;//[Offset: 0x250, Size: 0x8]
	BoxComponent* ActivationTrigger;//[Offset: 0x258, Size: 0x8]
	SceneComponent* TopMountBeginLocation;//[Offset: 0x260, Size: 0x8]
	SceneComponent* BottomMountBeginLocation;//[Offset: 0x268, Size: 0x8]
	Vector JumpOnMountOffsets;//[Offset: 0x270, Size: 0xc]
	float ClimbViewLeftYawRangeInDegrees;//[Offset: 0x27c, Size: 0x4]
	float ClimbViewRightYawRangeInDegrees;//[Offset: 0x280, Size: 0x4]
	CameraPitchConstraint ClimbPitchConstraint;//[Offset: 0x284, Size: 0x8]
	float LadderHeight;//[Offset: 0x28c, Size: 0x4]
	float TopClimboutTweak;//[Offset: 0x290, Size: 0x4]
	float BottomClimboutTweak;//[Offset: 0x294, Size: 0x4]
	float TopLerpTime;//[Offset: 0x298, Size: 0x4]
	float BottomLerpTime;//[Offset: 0x29c, Size: 0x4]
	bool bAllowInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	float MaxInteractionDistance;//[Offset: 0x2a4, Size: 0x4]
	bool bAllowTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	void UpdateClimbState(ODCharacter* Character);// 0x549c7ec
	void ActivationTrigger_OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x549c894

--------------------------------
Class: CameraPitchConstraint
	float LookUpRangeInDegrees;//[Offset: 0x0, Size: 0x4]
	float LookDownRangeInDegrees;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BallisticDefinition.InstancedData.DataAsset.Object
	StaticMesh* ProjectileMesh;//[Offset: 0x40, Size: 0x8]
	Transform MeshAdjustment;//[Offset: 0x50, Size: 0x30]
	bool bRotateToFaceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bShowVisualsAfterSimulationEnds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bDeactivateVisualsIfFirstTraceImpacts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	float PhysicsImpactImpulse;//[Offset: 0x84, Size: 0x4]
	bool bSyncClientsUsingEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bClientAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool bIsLargeProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	float ProjectileWidth;//[Offset: 0x8c, Size: 0x4]
	ODCommonProjectileProperties CommonProps;//[Offset: 0x90, Size: 0x8]
	ProjectileFlightSolver* FlightSolver;//[Offset: 0x98, Size: 0x8]
	BallisticImpactSolver* ImpactSolver;//[Offset: 0xa0, Size: 0x8]
	BallisticDestroyer* Destroyer;//[Offset: 0xa8, Size: 0x8]
	bool bDestroyOnTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float DragSimple;//[Offset: 0xb4, Size: 0x4]
	ScalableFloat GravityScale;//[Offset: 0xb8, Size: 0x28]
	float Lifetime;//[Offset: 0xe0, Size: 0x4]
	TracerFXProperties TracerFXProps;//[Offset: 0xe8, Size: 0x70]
	float TracerConvergenceTime;//[Offset: 0x158, Size: 0x4]
	AkAudioEvent* LoopingSoundEvent;//[Offset: 0x160, Size: 0x8]
	bool bDontPlayFlybyEffectsIfHitIsPredicted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	AkAudioEvent* BulletFlybyEvent;//[Offset: 0x170, Size: 0x8]
	AkRtpc* BulletFlybyLocationRTPC;//[Offset: 0x178, Size: 0x8]
	AkRtpc* BulletFlybyDistanceRTPC;//[Offset: 0x180, Size: 0x8]
	class MatineeCameraShake* BulletFlybyCameraShake;//[Offset: 0x188, Size: 0x8]
	float BulletFlybyCameraShakeScale;//[Offset: 0x190, Size: 0x4]
	bool bTrackInHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	float GetTracerConvergenceTime();// 0x538a5e0
	float GetProjectileWidth();// 0x538a5fc
	float GetBulletGravityScale();// 0x538a618

--------------------------------
Class: ODCommonProjectileProperties
	int Version;//[Offset: 0x0, Size: 0x4]
	float ProjectileWidth;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ProjectileFlightSolver.Object
	Object* LatestContextObject;//[Offset: 0x28, Size: 0x8]
	static Vector CalculateGravityAndDragAcceleration(const Object* WorldContextObject, out const BallisticParams InBallisticParams, const float GravityScale, const float DragCoefficient);// 0x556fa80
	Vector CalculateAccelerationAndVelocity(const Object* WorldContextObject, out BallisticParams InOutParams, const float GravityScale, const float DragCoefficient, const Actor* LockTarget);// 0x556fc44

--------------------------------
Class: BallisticParams
	Vector CurrentPosition;//[Offset: 0x0, Size: 0xc]
	Vector CurrentVelocity;//[Offset: 0xc, Size: 0xc]
	Quat CurrentRotation;//[Offset: 0x20, Size: 0x10]
	Vector CurrentAngularVelocity;//[Offset: 0x30, Size: 0xc]
	float TotalSimulationTime;//[Offset: 0x3c, Size: 0x4]
	int LastCalculatedFixedStep;//[Offset: 0x40, Size: 0x4]
	float DamageFraction;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: BallisticImpactSolver.Object
	float GetPotentialDamageForAILogic(out const Vector Origin, out ImpactHitResult HitResult);// 0x538d2ec
	class ODDamageType GetDamageTypeForAILogic();// 0x538d440
	enum GetBallisticParamsAfterImpact(out const ImpactHitResult HitResult, out const BallisticParams InBallisticParams, out const DamageOrigin DamageOrigin, out BallisticParams OutDeflectionParams);// 0x538d5b0
	static void DestroyBallistic(BallisticsManager* BallisticsManager, int ProjectileId, bool bImmediately);// 0x538d47c

--------------------------------
Class: DamageOrigin
	Controller* InstigatorPlayer;//[Offset: 0x0, Size: 0x8]
	Pawn* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Causer;//[Offset: 0x10, Size: 0x8]
	Vector Location;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BallisticsManager.WorldSubsystem.Subsystem.Object
	BallisticsReplicationActor* ClientReplicationActor;//[Offset: 0x40, Size: 0x8]
	BallisticsReplicationActor*[] ServerReplicationActors;//[Offset: 0x48, Size: 0x10]
	<StaticMesh*,MeshComponentsByMaterial> StaticMeshToMeshInstance;//[Offset: 0x70, Size: 0x50]
	AkComponent*[] AudioComponentPool;//[Offset: 0xc0, Size: 0x10]
	<uint16,ActorProjectile*> ActorProjectiles;//[Offset: 0xe0, Size: 0x50]
	BallisticBody[] AllBallistics;//[Offset: 0x1d8, Size: 0x10]
	ODClientAuthBallisticDestroyInfo[] ClientAuthDestroyInfos;//[Offset: 0x1e8, Size: 0x10]
	<Object*> VisualLogBallisticHelpers;//[Offset: 0x268, Size: 0x50]
	delegate OnBallisticRemoved;//[Offset: 0x2b8, Size: 0x10]
	void SetRemainingProjectileLifetime(int BallisticId, float NewRemainingLifetime);// 0x5390b98
	static bool PredictProjectilePath(const Object* WorldContextObject, out PredictProjectilePathResult OutPredictResult, out const ODBulletFireMessage FireMessage, bool bTracePath, byte MaxNumHits, bool bTraceComplex, out const Actor*[] ActorsToIgnore, float MaxSimTime);// 0x5390184
	void NotifyBallisticDidDamage(int BallisticId, Actor* Target, float Damage);// 0x539050c
	int K2_Fire(out ODBulletFireMessage Msg);// 0x5390f58
	static void K2_CreateFireMessage(const Object* WorldContextObject, out ODBulletFireMessage OutMsg, const BallisticDefinition* BallisticDef, Controller* ShotInstigator, out const Vector Origin, out const Vector Velocity, Actor* ShotCauser, Actor* PotentialTarget, const Actor* IgnoreActor, float LifetimeOverride);// 0x538fdd8
	bool IsBallisticReportingDamage(int BallisticId);// 0x539064c
	bool HasBallisticDamagedActor(int BallisticId, Actor* Actor);// 0x53907f4
	float GetRemainingProjectileLifetime(int BallisticId);// 0x5390ae8
	bool GetLastProjectileImpact(int BallisticId, out BallisticParams OutParams);// 0x53909a8
	bool GetBallisticParametersById(int BallisticId, out BallisticParams OutParams);// 0x5390e18
	Vector GetBallisticOriginById(int BallisticId);// 0x53908f4
	void BallisticRemovedDelegate__DelegateSignature(int ProjectileId, const BallisticDefinition* BallisticDef, out const DamageOrigin DamageOrigin);// 0x59ef218
	void AttachBallisticToPrimitive(int BallisticId, PrimitiveComponent* Primitive, FName BoneName, out const Quat Rotation);// 0x5390c8c
	void AddDamagedActorForBallistic(int BallisticId, Actor* Actor);// 0x5390700

--------------------------------
Class: BallisticsReplicationActor.Actor.Object
	BallisticsManager* BallisticsManager;//[Offset: 0x248, Size: 0x8]
	<uint16,ReplicatedBallisticData> ReplicatedBallisticMap;//[Offset: 0x250, Size: 0x50]
	<BallisticDefinition*,ODBulletFireMessageArray> PendingMessagesByType;//[Offset: 0x2a0, Size: 0x50]
	float MinTimeBetweenReliableSends;//[Offset: 0x2f0, Size: 0x4]
	void ServerSetMaxProjectilesPerFrame(byte NewMax);// 0x5394d30
	void ServerSendClientAuthBallisticDestruction(const ODClientAuthBallisticDestroyInfo Info);// 0x53948e8
	void ServerReadyToReceiveBallistics();// 0x5394cd4
	void ServerAckBallistics(const uint16[] EventIds);// 0x53949f8
	void ClientUpdateReliableBallistics(int CurrentServerFixedStep, const ODReliableBallisticsArray inArray);// 0x5394ae4
	void ClientFireBullets(const ODBulletFireMessageArray Info);// 0x5394c18

--------------------------------
Class: ODClientAuthBallisticDestroyInfo
	Actor* Causer;//[Offset: 0x0, Size: 0x8]
	ODClientAuthBallisticHitInfo[] PotentialHits;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ODClientAuthBallisticHitInfo
	Actor* HitActor;//[Offset: 0x0, Size: 0x8]
	float Distance;//[Offset: 0x8, Size: 0x4]
	bool bCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ODReliableBallisticsArray
	BallisticsReplicationActor* ReplicationActor;//[Offset: 0x0, Size: 0x8]
	ReplicatedBallisticData[] Ballistics;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ReplicatedBallisticData
	ReplicatedBallisticEvent[] Events;//[Offset: 0x0, Size: 0x10]
	ODBulletFireMessage FireMessage;//[Offset: 0x20, Size: 0xa0]
	BallisticAttachmentParams AttachmentParams;//[Offset: 0xc0, Size: 0x40]

--------------------------------
Class: ReplicatedBallisticEvent
	enum NetState;//[Offset: 0x2, Size: 0x1]
	int ServerFixedStep;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize InitialPosition;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: ODBulletFireMessage
	ODNetPartyId PartyId;//[Offset: 0x0, Size: 0x4]
	bool bOverrideLifetime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	float Lifetime;//[Offset: 0x8, Size: 0x4]
	BallisticDefinition* BallisticDef;//[Offset: 0x10, Size: 0x8]
	Vector_NetQuantize Origin;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantize Velocity;//[Offset: 0x24, Size: 0xc]
	Quat Rotation;//[Offset: 0x30, Size: 0x10]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize VisualOrigin;//[Offset: 0x4c, Size: 0xc]
	Vector VisualDirection;//[Offset: 0x58, Size: 0xc]
	Controller* InstigatorPlayer;//[Offset: 0x68, Size: 0x8]
	Pawn* Instigator;//[Offset: 0x70, Size: 0x8]
	Actor* Causer;//[Offset: 0x78, Size: 0x8]
	Actor* LockTarget;//[Offset: 0x80, Size: 0x8]
	Actor* IgnoreActor;//[Offset: 0x88, Size: 0x8]
	bool bVisualOriginSameAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bReplicateVisualOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]

--------------------------------
Class: ODNetPartyId
	int PartyId;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BallisticAttachmentParams
	bool bIsAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	PrimitiveComponent* Primitive;//[Offset: 0x8, Size: 0x8]
	FName BoneName;//[Offset: 0x10, Size: 0x8]
	Vector_NetQuantize100 LocalPosition;//[Offset: 0x18, Size: 0xc]
	Rotator LocalRotation;//[Offset: 0x24, Size: 0xc]
	ODDestructibleParent* Destructible;//[Offset: 0x30, Size: 0x8]
	int BrickIndex;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ODDestructibleParent.Actor.Object
	bool bIsPrepared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	ODLightweightComponentsHolder LightweightComponentsHolder;//[Offset: 0x268, Size: 0x18]
	SceneComponent* DestructionParentRootComponent;//[Offset: 0x280, Size: 0x8]
	ODDestructionWeldedIslandData[] ReplicatedWeldedIslandsData;//[Offset: 0x288, Size: 0x10]
	ODDestructionWeldedIsland[] WeldedIslands;//[Offset: 0x298, Size: 0x10]
	delegate BrickReceiveTriggerEvent;//[Offset: 0x2a8, Size: 0x10]
	delegate DestroyedStateChanged;//[Offset: 0x2b8, Size: 0x10]
	ODDestructionDecorator* WorkingDecorator;//[Offset: 0x2e0, Size: 0x8]
	float[] BrickDamagesTaken;//[Offset: 0x2e8, Size: 0x10]
	FName[] BrickStates;//[Offset: 0x2f8, Size: 0x10]
	FName[] LastBrickStates;//[Offset: 0x308, Size: 0x10]
	ODDestructionBrick*[] SortedBricks;//[Offset: 0x318, Size: 0x10]
	ODDestructionClass* DestructionClass;//[Offset: 0x420, Size: 0x8]
	ODDestructionCollisionProperties* DestructionCollisionProperties;//[Offset: 0x428, Size: 0x8]
	AkAudioEvent* DefaultAudioEvent;//[Offset: 0x430, Size: 0x8]
	FName ImpactStrengthRTPC;//[Offset: 0x438, Size: 0x8]
	FName MassRTPC;//[Offset: 0x440, Size: 0x8]
	uint32 DefaultSmallImpactThreshold;//[Offset: 0x448, Size: 0x4]
	uint32 DefaultLargeImpactThreshold;//[Offset: 0x44c, Size: 0x4]
	AkAudioEvent* GenericSmallImpactSound;//[Offset: 0x450, Size: 0x8]
	AkAudioEvent* GenericLargeImpactSound;//[Offset: 0x458, Size: 0x8]
	<byte,AkAudioEvent*> DefaultSmallImpactSounds;//[Offset: 0x460, Size: 0x50]
	<byte,AkAudioEvent*> DefaultLargeImpactSounds;//[Offset: 0x4b0, Size: 0x50]
	ODDestructionVertexAnimation[] VertexAnimations;//[Offset: 0x500, Size: 0x10]
	<int,ODDestructionPhysicsImpulse> CachedPhysicsImpulses;//[Offset: 0x520, Size: 0x50]
	ODLightweightComponentRef[] LightweightGroupRefs;//[Offset: 0x570, Size: 0x10]
	ODLightweightComponentRef[] LightweightBrickRefs;//[Offset: 0x580, Size: 0x10]
	ODLightweightComponentRef[] LightweightDecoratorRefs;//[Offset: 0x590, Size: 0x10]
	void SwapStaticMeshAndMaterial(const int BrickIndex, StaticMesh* StaticMesh, out const MaterialInterface*[] Materials);// 0x54aeffc
	void SwapStaticMesh(const int BrickIndex, StaticMesh* StaticMesh);// 0x54af154
	void SetMaterialScalarParam(const int BrickIndex, int MaterialIndex, FName ParameterName, float ParameterValue);// 0x54aec04
	void SetBrickDestroyed(const int BrickIndex, bool Destroyed);// 0x54ae780
	void ProcessDestruction(int BrickIndex);// 0x54af508
	ParticleSystemComponent* PlayParticleEffect(const int BrickIndex, ParticleSystem* InParticleSystem, out const Transform RelativeTransform);// 0x54ae9ec
	NiagaraComponent* PlayNiagaraVFX(const int BrickIndex, NiagaraSystem* InNiagaraSystem, Transform RelativeTransform);// 0x54ae878
	void PlayCosmeticEffects(const int BrickIndex, bool bWithOrigin, Vector DamageOrigin);// 0x54ae638
	void PlayCameraShake(const int BrickIndex, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x54aed8c
	void PlayAudioEvent(AkAudioEvent* AudioEvent, int DestroyedCount, Vector Location);// 0x59ef218
	void PlayAudio(const int BrickIndex, AkAudioEvent* AudioEvent);// 0x54ae450
	void OnRep_WeldedIslands(out const ODDestructionWeldedIslandData[] PreviousWeldedIslandsData);// 0x54ae14c
	void OnRep_BrickStateUpdate();// 0x54adf94
	void OnRep_BrickDamagesTaken();// 0x54adfa8
	void OnDestructibleBrickPhysicsHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x54af79c
	void OnDestructibleBrickHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x54af5b0
	void OnBricksDestroyed(int DestroyedCount);// 0x59ef218
	void MulticastBrickStateChange(int BrickIndex, FName FromState, FName ToState, enum TriggerType);// 0x54adfbc
	void MulticastApplyPhysicsImpulse(int BrickIndex, const Vector InImpulse, const Vector InLocation);// 0x54af3d0
	void HideAllComponents(const int BrickIndex);// 0x54aeb5c
	StaticMeshComponent* GetProminentMeshComponentNonConst(const int BrickIndex);// 0x54ae3a0
	ODLightweightComponentRef[] GetLightweightBrickRefsNonConst();// 0x54af30c
	ODLightweightComponentRef[] GetLightweightBrickRefsConst();// 0x54af248
	ODDestructionClass* GetDestructionClass();// 0x54afa30
	static int GetBrickIdFromPrimitiveComponent(const PrimitiveComponent* Primitive);// 0x54af988
	float GetBrickFullHealth(int BrickIndex);// 0x54ae240
	float GetBrickCurrentHealth(int BrickIndex);// 0x54ae2f0
	void ApplyDamage(const int BrickIndex, const float DamageAmount, class DamageType DamageTypeClass, Controller* InstigatorPlayer);// 0x54afa64
	void ActivatePhysicsChunk(const int BrickIndex, Controller* InstigatorPlayer);// 0x54ae544

--------------------------------
Class: ODLightweightComponentsHolder

--------------------------------
Class: ODDestructionWeldedIslandData
	int[] BrickIds;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ODDestructionWeldedIsland
	int ParentBrickIndex;//[Offset: 0x0, Size: 0x4]
	int[] WeldedBrickIds;//[Offset: 0x8, Size: 0x10]
	RigidBodyState PrevMovementState;//[Offset: 0x30, Size: 0x40]
	RigidBodyState CurMovementState;//[Offset: 0x70, Size: 0x40]

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 position;//[Offset: 0x0, Size: 0xc]
	Quat Quaternion;//[Offset: 0x10, Size: 0x10]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 0xc]
	byte Flags;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ODDestructionDecorator.SceneComponent.ActorComponent.Object
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	ODDestructionCollectionState[] DisplayConditions;//[Offset: 0x1f8, Size: 0x10]

--------------------------------
Class: ODDestructionCollectionState
	ODDestructionPieceState[] Pieces;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ODDestructionPieceState
	ODDestructionBrick* Piece;//[Offset: 0x0, Size: 0x8]
	int BrickIndex;//[Offset: 0x8, Size: 0x4]
	bool bDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ODDestructionBrick.SceneComponent.ActorComponent.Object

--------------------------------
Class: ODDestructionClass.DataAsset.Object
	bool bContributeToBuildingCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	<enum,DamageRelationProperties> DamageProperties;//[Offset: 0x38, Size: 0x50]
	<class DamageType,DamageRelationProperties> DamagePropertiesOverride;//[Offset: 0x88, Size: 0x50]

--------------------------------
Class: DamageRelationProperties
	float DamageProtectionMultiplier;//[Offset: 0x0, Size: 0x4]
	float DamagePenetrationMultiplier;//[Offset: 0x4, Size: 0x4]
	bool bUseCalculatedDamageForDamageProtectionThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float DamageProtectionThreshold;//[Offset: 0xc, Size: 0x4]
	float ExplosionCoverDamageModifier;//[Offset: 0x10, Size: 0x4]
	bool bInflictsDemolitionDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bAllowClientDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	bool bDestroyOnPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1]

--------------------------------
Class: ODDestructionCollisionProperties.DataAsset.Object
	<enum,DestructionPhysicsProperties> VehicleProperties;//[Offset: 0x30, Size: 0x50]
	float CharacterMinImpactSpeedThreshold;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: DestructionPhysicsProperties
	float MinImpactSpeedThreshold;//[Offset: 0x0, Size: 0x4]
	float SpeedReduction;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 0x8]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 0x10]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 0x10]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 0x10]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 0x10]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 0x8]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 0x8]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 0x218]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 0xc8]
	Box FixedBounds;//[Offset: 0x388, Size: 0x1c]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float WarmupTime;//[Offset: 0x3a8, Size: 0x4]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 0x4]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 0x4]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 0x10]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 0x4]
	enum CullReaction;//[Offset: 0x2c, Size: 0x4]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 0x8]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 0x10]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 0x10]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 0x10]
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x70, Size: 0x8]
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x78, Size: 0x10]
	Guid PerfBaselineVersion;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	float MaxDistance;//[Offset: 0x34, Size: 0x4]
	int MaxInstances;//[Offset: 0x38, Size: 0x4]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4]
	float MaxGlobalBudgetUsage;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 0x4]
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int MinInt;//[Offset: 0xc, Size: 0x4]
	int MaxInt;//[Offset: 0x10, Size: 0x4]
	float MinFloat;//[Offset: 0x14, Size: 0x4]
	float MaxFloat;//[Offset: 0x18, Size: 0x4]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 0x4]
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 0x8]
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 0x8]
	NiagaraSystem* System;//[Offset: 0x40, Size: 0x28]
	bool OnTickTest();// 0x4878ecc
	void OnOwnerTick(float DeltaTime);// 0x4878d68
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0x4878e18
	void OnBeginTest();// 0x4878f0c
	NiagaraSystem* GetSystem();// 0x4878d34

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 0x4]
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 0x4]
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 0x4]
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x248, Size: 0x8]
	TextRenderComponent* Label;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x448, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x460, Size: 0x8]
	Font* Font;//[Offset: 0x468, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x470, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x471, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x474, Size: 0x4]
	float XScale;//[Offset: 0x478, Size: 0x4]
	float YScale;//[Offset: 0x47c, Size: 0x4]
	float WorldSize;//[Offset: 0x480, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x484, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x488, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x48c, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	void SetYScale(float Value);// 0x81b4510
	void SetXScale(float Value);// 0x81b45b8
	void SetWorldSize(float Value);// 0x81b4318
	void SetVertSpacingAdjust(float Value);// 0x81b43c0
	void SetVerticalAlignment(byte Value);// 0x81b4704
	void SetTextRenderColor(Color Value);// 0x81b4660
	void SetTextMaterial(MaterialInterface* Material);// 0x81b48fc
	void SetText(FString Value);// 0x81b4ab4
	void SetHorizSpacingAdjust(float Value);// 0x81b4468
	void SetHorizontalAlignment(byte Value);// 0x81b47ac
	void SetFont(Font* Value);// 0x81b4854
	void K2_SetText(out const FText Value);// 0x81b49a4
	Vector GetTextWorldSize();// 0x81b42a8
	Vector GetTextLocalSize();// 0x81b42e0

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]
	bool bOverrideGlobalBudgetCullingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10]
	FName IdName;//[Offset: 0x10, Size: 0x8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName Name;//[Offset: 0x1c, Size: 0x8]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int RandomSeed;//[Offset: 0x2c, Size: 0x4]
	enum AllocationMode;//[Offset: 0x30, Size: 0x1]
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28]
	enum SimTarget;//[Offset: 0x88, Size: 0x1]
	Box FixedBounds;//[Offset: 0x8c, Size: 0x1c]
	int MinDetailLevel;//[Offset: 0xa8, Size: 0x4]
	int MaxDetailLevel;//[Offset: 0xac, Size: 0x4]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 0x14]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 0x30]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 0x10]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 0x1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 0x4]
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 0x4]
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 0x4]
	<uint32> SpawnStages;//[Offset: 0x118, Size: 0x50]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 0x1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 0x10]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 0x10]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 0x10]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 0x10]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 0x8]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1]
	Guid UsageId;//[Offset: 0x2c, Size: 0x10]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x78]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 0x98]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 0x10]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 0x58]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1c8, Size: 0xf0]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x2b8, Size: 0x10]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2c8, Size: 0x10]
	void RaiseOnGPUCompilationComplete();// 0x487ccd8

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10]
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10]
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 0x4]
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 0x4]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 0x10]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2]
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2]
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2]
	uint16 DestSize;//[Offset: 0x6, Size: 0x2]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]
	int SrcOffset;//[Offset: 0x20, Size: 0x4]
	int DestOffset;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10]
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10]
	Guid ScriptVersionID;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 0x10]
	int NumTempRegisters;//[Offset: 0x20, Size: 0x4]
	int NumUserPtrs;//[Offset: 0x24, Size: 0x4]
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x28, Size: 0x10]
	byte[] ScriptLiterals;//[Offset: 0x38, Size: 0x10]
	NiagaraVariable[] Attributes;//[Offset: 0x48, Size: 0x10]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x58, Size: 0x1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x60, Size: 0x10]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x70, Size: 0x10]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x90, Size: 0x10]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xa0, Size: 0x10]
	NiagaraStatScope[] StatScopes;//[Offset: 0xb0, Size: 0x10]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xc0, Size: 0x10]
	enum LastCompileStatus;//[Offset: 0xd0, Size: 0x1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xd8, Size: 0x10]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 0x20]
	FString StringValue;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName OwnerName;//[Offset: 0x8, Size: 0x8]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10]
	int NumOutputs;//[Offset: 0x20, Size: 0x4]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8]
	FName Value;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum Type;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8]
	FName FriendlyName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10]
	FString DIClassName;//[Offset: 0x10, Size: 0x10]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8]
	FName IterationSource;//[Offset: 0x8, Size: 0x8]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 0x10]
	int MinStage;//[Offset: 0x28, Size: 0x4]
	int MaxStage;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8]
	Guid CompileId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x78]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0x48748e4
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0x48747dc
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0x48749e0
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0x48745dc
	void SetIntParameter(FString InVariableName, int InValue);// 0x4874ad8
	void SetFloatParameter(FString InVariableName, float InValue);// 0x4874bd8
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0x48746e0
	void SetBoolParameter(FString InVariableName, bool InValue);// 0x4874cd8
	Vector GetVectorParameter(FString InVariableName);// 0x4875020
	Vector4 GetVector4Parameter(FString InVariableName);// 0x4874f60
	Vector2D GetVector2DParameter(FString InVariableName);// 0x48750e0
	Quat GetQuatParameter(FString InVariableName);// 0x4874ea0
	int GetIntParameter(FString InVariableName);// 0x487519c
	float GetFloatParameter(FString InVariableName);// 0x4875258
	LinearColor GetColorParameter(FString InVariableName);// 0x4874de0
	bool GetBoolParameter(FString InVariableName);// 0x4875314

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8]
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4]
	FName ID;//[Offset: 0x4, Size: 0x8]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc]
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 0x4]
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 0x4]
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 0x4]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	enum SimTarget;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 0x4]
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 0x4]
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10]
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10]
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10]
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10]
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10]
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4]
	float Medium;//[Offset: 0x4, Size: 0x4]
	float High;//[Offset: 0x8, Size: 0x4]
	float Epic;//[Offset: 0xc, Size: 0x4]
	float Cine;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30]
	int SortOrderHint;//[Offset: 0x58, Size: 0x4]
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 0x4]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1]
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 0x4]
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 0x4]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10]
	FName SourceEventName;//[Offset: 0x44, Size: 0x8]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8]
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x78]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 0x40]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 0x40]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 0x40]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 0x10]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x448, Size: 0x8]
	enum TickBehavior;//[Offset: 0x450, Size: 0x1]
	int RandomSeedOffset;//[Offset: 0x454, Size: 0x4]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x458, Size: 0xc8]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54d, Size: 0x1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54d, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54d, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54d, Size: 0x1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x550, Size: 0x4]
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x558, Size: 0x10]
	delegate OnSystemFinished;//[Offset: 0x570, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x580, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x588, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x590, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x591, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x592, Size: 0x1]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0x4850a80
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0x4850698
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0x48504b4
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0x484f908
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0x4850884
	void SetVariableObject(FName InVariableName, Object* Object);// 0x484fae8
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0x484f9f8
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0x4850c84
	void SetVariableInt(FName InVariableName, int InValue);// 0x48500cc
	void SetVariableFloat(FName InVariableName, float InValue);// 0x48502c0
	void SetVariableBool(FName InVariableName, bool InValue);// 0x484fec8
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0x484fcd8
	void SetTickBehavior(enum NewTickBehavior);// 0x4850f60
	void SetSeekDelta(float InSeekDelta);// 0x485127c
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0x484f48c
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0x4850e9c
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0x484f014
	void SetPaused(bool bInPaused);// 0x484f1f8
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0x4850b7c
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0x4850788
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0x48505a0
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0x485097c
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0x484fbd8
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0x4850d7c
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0x48501c0
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0x48503b4
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0x484ffc4
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0x484fdc8
	void SetMaxSimTime(float InMaxTime);// 0x48510b8
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0x4851194
	void SetGpuComputeDebug(bool bEnableDebug);// 0x4851668
	void SetForceSolo(bool bInForceSolo);// 0x4851738
	void SetDesiredAge(float InDesiredAge);// 0x48514b0
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0x4851358
	void SetAutoDestroy(bool bInAutoDestroy);// 0x4851008
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0x4851804
	void SetAllowScalability(bool bAllow);// 0x484ef20
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0x485158c
	void SeekToDesiredAge(float InDesiredAge);// 0x4851408
	void ResetSystem();// 0x484f550
	void ReinitializeSystem();// 0x484f53c
	bool IsPaused();// 0x484f1c0
	void InitForPerformanceBaseline();// 0x484efd0
	enum GetTickBehavior();// 0x4850f44
	float GetSeekDelta();// 0x4851324
	int GetRandomSeedOffset();// 0x4850e80
	bool GetPreviewLODDistanceEnabled();// 0x484effc
	float GetPreviewLODDistance();// 0x484efe4
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0x484f564
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0x484f6b8
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0x484f80c
	float GetMaxSimTime();// 0x4851160
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0x4851244
	bool GetForceSolo();// 0x4851718
	float GetDesiredAge();// 0x4851558
	NiagaraDataInterface* GetDataInterface(FString Name);// 0x484f104
	NiagaraSystem* GetAsset();// 0x48517e8
	enum GetAgeUpdateMode();// 0x4851634
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0x484f2a8
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0x484f398

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	uint32 MaterialSubIndex;//[Offset: 0x8, Size: 0x4]
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ODDestructionVertexAnimation
	ODVertexAnimationAsset* Asset;//[Offset: 0x0, Size: 0x8]
	ODDestructionVertexAnimationConfig config;//[Offset: 0x8, Size: 0x1]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	ODDestructionVertexAnimationMaskData[] MaskData;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ODVertexAnimationAsset.DataAsset.Object
	StaticMesh* FracturedMesh;//[Offset: 0x30, Size: 0x8]
	ODVertexAnimationSimulation[] Simulations;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ODVertexAnimationSimulation
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ODDestructionVertexAnimationConfig
	bool bMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEnableSinking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ODDestructionVertexAnimationMaskData
	byte[] Data;//[Offset: 0x0, Size: 0x10]
	uint32 FractureCount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ODDestructionPhysicsImpulse

--------------------------------
Class: ODLightweightComponentRef
	interface class None* HolderOwner;//[Offset: 0x0, Size: 0x10]
	int Offset;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ODBulletFireMessageArray
	ODBulletFireMessage[] messages;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MeshComponentsByMaterial
	<MaterialInterface*,InstancedStaticMeshComponent*> MaterialToMeshComponent;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4f0, Size: 0x10]
	int NumCustomDataFloats;//[Offset: 0x500, Size: 0x4]
	float[] PerInstanceSMCustomData;//[Offset: 0x508, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x518, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x51c, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x520, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x528, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x580, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x588, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x7ffb90c
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x7ffbca0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x7ffb2a0
	bool RemoveInstance(int InstanceIndex);// 0x7ffb3e0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x7ffbb28
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x7ffb0f4
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x7ffaf94
	int GetInstanceCount();// 0x7ffb390
	void ClearInstances();// 0x7ffb3c4
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x7ffb700
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x7ffb49c
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x7ffbe44
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x7ffbf28
	int AddInstance(out const Transform InstanceTransform);// 0x7ffc090

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: ActorProjectile.Actor.Object
	delegate K2_OnSpawned;//[Offset: 0x280, Size: 0x10]
	delegate K2_OnDespawned;//[Offset: 0x2a8, Size: 0x10]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x2e8, Size: 0x8]
	ODCommonProjectileProperties CommonProps;//[Offset: 0x2f0, Size: 0x8]
	bool bDestroyOnLifetimeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bUseCustomVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	bool bSupportsRollback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]
	ProjectileFlightSolver* FlightSolver;//[Offset: 0x300, Size: 0x8]
	BallisticImpactSolver* ImpactSolver;//[Offset: 0x308, Size: 0x8]
	BallisticDestroyer* Destroyer;//[Offset: 0x310, Size: 0x8]
	byte TraceChannel;//[Offset: 0x318, Size: 0x1]
	CollisionShape_K2 CollisionShape;//[Offset: 0x31c, Size: 0x18]
	bool bLocationInterpolationActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	bool bRotationInterpolationActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	Vector InterpolationInitialLocation;//[Offset: 0x338, Size: 0xc]
	Quat InterpolationInitialRotation;//[Offset: 0x350, Size: 0x10]
	Vector InterpolationTargetLocation;//[Offset: 0x360, Size: 0xc]
	Quat InterpolationTargetRotation;//[Offset: 0x370, Size: 0x10]
	float InterpolationAlpha;//[Offset: 0x380, Size: 0x4]
	ActorProjectileParams ReplicatedParams;//[Offset: 0x390, Size: 0x70]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool bAllowPredictiveDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	int ProjectileId;//[Offset: 0x404, Size: 0x4]
	byte CumulativeShotNum;//[Offset: 0x408, Size: 0x1]
	Actor* LockTarget;//[Offset: 0x40c, Size: 0x8]
	DamageOrigin DamageOrigin;//[Offset: 0x414, Size: 0x24]
	GenericTeamId Team;//[Offset: 0x438, Size: 0x1]
	int LastFixedStep;//[Offset: 0x43c, Size: 0x4]
	float LastSpawnTime;//[Offset: 0x440, Size: 0x4]
	Actor*[] DamagedActors;//[Offset: 0x448, Size: 0x10]
	Vector Velocity;//[Offset: 0x458, Size: 0xc]
	ImpactHitResult LastImpact;//[Offset: 0x464, Size: 0xa0]
	BallisticParams ParamsAtLastImpact;//[Offset: 0x510, Size: 0x50]
	void Update(float DeltaSeconds);// 0x536d608
	void SpawnDynamicDelegate__DelegateSignature(ActorProjectile* Projectile);// 0x59ef218
	static void SpawnActorProjectile(const Object* WorldContextObject, class ActorProjectile ProjectileClass, out const Transform SpawnTransform, out const Vector Velocity, Pawn* PawnInstigator, out const DamageOrigin DamageOrigin, Actor* LockTarget, byte CumulativeShotNum, out ActorProjectile* OutProjectile);// 0x536e9e8
	void SetStateFromBallisticParams(out const BallisticParams InParams);// 0x536e728
	void SetProjectileVelocity(Vector NewVelocity);// 0x536d1f4
	void SetInterpolationTargetRotation(Quat NewTargetRotation);// 0x536d0a4
	void SetInterpolationTargetLocation(Vector NewTargetLocation);// 0x536d14c
	static bool PredictProjectilePath(const Object* WorldContextObject, class ActorProjectile ProjectileClass, out PredictProjectilePathResult OutPredictResult, out const ActorProjectileParams InitialParams, byte MaxNumHits, float MaxSimTime);// 0x536e23c
	void PerformSimulationStep(const Object* WorldContextObject, out const ActorProjectileParams InitialActorParams, out const BallisticParams StartStepBallisticParams, float DeltaSeconds, out BallisticParams EndStepBallisticParams, out HitResult[] OutHits, out bool bStopSimulation, out Vector OutTraceEnd);// 0x536d2a4
	void OnSpawn(out const ActorProjectileParams Params, bool bFromLaunch);// 0x536dde0
	void OnRep_StartParams();// 0x536cab0
	void OnProjectileDestroyed(Vector Location, Rotator Direction, Vector InVelocity, byte SurfaceHit);// 0x536db94
	void OnLifetimeExpired();// 0x59ef218
	void OnDespawn(bool bQuiet);// 0x536dd28
	void Multicast_DestroyProjectile(Vector Location, Rotator Direction, Vector InVelocity, byte SurfaceHit);// 0x536cac4
	bool IsReportingDamage();// 0x536e1ec
	bool HasDamagedActor(Actor* Actor);// 0x536e548
	enum HandleHitResult(out const HitResult Hit);// 0x536d6b8
	float GetTimeSinceSpawn();// 0x536ca7c
	Vector GetProjectileVelocity();// 0x536d064
	float GetPotentialDamageForAILogic(out const Vector Origin, out ImpactHitResult HitResult);// 0x536deec
	bool GetParamsAtLastImpact(out BallisticParams OutParams);// 0x536e81c
	Vector GetOrigin();// 0x536e5fc
	bool GetLastImpactSurfaceType(out byte OutSurfaceType);// 0x536cf9c
	bool GetLastImpact(out ImpactHitResult OutHitResult);// 0x536ce98
	ActorProjectileParams GetInitialActorProjectileParams();// 0x536ca3c
	bool GetExplosionInfo(out float OuterRadius, out float BaseDamage, out float DamageFloor);// 0x536e07c
	class ODDamageType GetDamageTypeForAILogic();// 0x536e040
	void GetBallisticParams(out BallisticParams OutParams);// 0x536e634
	void GetActorProjectileParams(out ActorProjectileParams Params);// 0x536dadc
	void DoTrace(const Object* WorldContextObject, out const ActorProjectileParams InitialActorParams, out const BallisticParams BallisticParams, float DeltaSeconds, out HitResult[] OutHits, out Vector OutTraceEnd);// 0x536d798
	void DestroyProjectile();// 0x536e924
	void Despawn(bool bQuiet);// 0x536e938
	void BroadcastImpactDelegate();// 0x536cd4c
	void BroadcastDamageDelegate(Actor* Target, float Damage);// 0x536cc58
	void AttachToPrimitive(PrimitiveComponent* Primitive, FName BoneName, out const Quat Rotation);// 0x59ef218
	void ApplyImpactSolver(out const ImpactHitResult HitResult, enum SolveResult);// 0x536cd60
	void AddDamagedActor(Actor* Actor);// 0x536e4a0
	void AddAccelerationToVelocity(float DeltaSeconds);// 0x536da2c

--------------------------------
Class: BallisticDestroyer.Object
	float GetPotentialDamageForAILogic(out const Vector Origin, out ImpactHitResult HitResult);// 0x538aba8
	class ODDamageType GetDamageTypeForAILogic();// 0x538acfc
	void Execute(const Object* WorldContextObject, int ProjectileId, DamageOrigin DamageOrigin, ImpactHitResult HitResult);// 0x538ad38

--------------------------------
Class: CollisionShape_K2
	enum ShapeType;//[Offset: 0x0, Size: 0x1]
	float Radius;//[Offset: 0x4, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x8, Size: 0xc]
	float HalfHeight;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ActorProjectileParams
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int ProjectileId;//[Offset: 0x4, Size: 0x4]
	byte CumulativeShotNum;//[Offset: 0x8, Size: 0x1]
	Vector_NetQuantize10 Location;//[Offset: 0xc, Size: 0xc]
	Quat Rotation;//[Offset: 0x20, Size: 0x10]
	Vector_NetQuantize Velocity;//[Offset: 0x30, Size: 0xc]
	Actor* LockTarget;//[Offset: 0x3c, Size: 0x8]
	DamageOrigin DamageOrigin;//[Offset: 0x44, Size: 0x24]
	GenericTeamId Team;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c]
	HitResult HitResult;//[Offset: 0x2c, Size: 0x88]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BallisticBody
	BallisticsManager* BallisticsManager;//[Offset: 0x10, Size: 0x8]
	BallisticDefinition* BallisticDef;//[Offset: 0x18, Size: 0x8]
	delegate OnRemovedDelegate;//[Offset: 0x50, Size: 0x10]
	BallisticAttachmentParams AttachmentParams;//[Offset: 0x310, Size: 0x40]

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 0x10]
	void UnregisterFromSense(class AISense SenseClass);// 0x869cd88
	void UnregisterFromPerceptionSystem();// 0x869ce30
	void RegisterWithPerceptionSystem();// 0x869ceec
	void RegisterForSense(class AISense SenseClass);// 0x869ce44

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x869f7c0
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x869f8a0
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x869f680
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x869f3e0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x869f4d4

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x86a42f8
	void AIIgnorePlayers();// 0x86a4314

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x70, Size: 0x10]
	BTService*[] Services;//[Offset: 0x80, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]
	bool bUseConsoleVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	FString ConsoleVariableName;//[Offset: 0x58, Size: 0x10]
	bool bCanAbortTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x70, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x6c, Size: 0x4]
	float RandomDeviation;//[Offset: 0x70, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6b, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x86aa8a0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x86aaae0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x86aa998

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString Reason);// 0x86af5a8
	void StartLogic();// 0x86af680
	void RestartLogic();// 0x86af664
	bool IsRunning();// 0x86af568
	bool IsPaused();// 0x86af528

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x86abea0
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x86ac090
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x86abda8
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x86ac6c4
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x86abf98
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x86ac3dc
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x86ac2e4
	void SetValueAsEnum(out const FName KeyName, byte enumValue);// 0x86ac4d4
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x86ac5cc
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x86ac1e4
	bool IsVectorValueSet(out const FName KeyName);// 0x86abce8
	Vector GetValueAsVector(out const FName KeyName);// 0x86ac87c
	FString GetValueAsString(out const FName KeyName);// 0x86ac9f8
	Rotator GetValueAsRotator(out const FName KeyName);// 0x86ac7bc
	Object* GetValueAsObject(out const FName KeyName);// 0x86aceb0
	FName GetValueAsName(out const FName KeyName);// 0x86ac93c
	int GetValueAsInt(out const FName KeyName);// 0x86acc7c
	float GetValueAsFloat(out const FName KeyName);// 0x86acbc0
	byte GetValueAsEnum(out const FName KeyName);// 0x86acd38
	class Object GetValueAsClass(out const FName KeyName);// 0x86acdf4
	bool GetValueAsBool(out const FName KeyName);// 0x86acb00
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x86abac0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x86abbd4
	void ClearValue(out const FName KeyName);// 0x86aba0c

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f8, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f8, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f8, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f8, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x300, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x308, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x310, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x318, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x320, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x328, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x330, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x338, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x8699b6c
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x8699a1c
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x86995b4
	void SetMoveBlockDetection(bool bEnable);// 0x8699d34
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x8699c78
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x59ef218
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x8699694
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x8699e88
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x869a15c
	void K2_SetFocus(Actor* NewFocus);// 0x86997d8
	void K2_SetFocalPoint(Vector FP);// 0x8699880
	void K2_ClearFocus();// 0x8699790
	bool HasPartialPath();// 0x8699e1c
	PathFollowingComponent* GetPathFollowingComponent();// 0x8699678
	byte GetMoveStatus();// 0x8699e54
	Vector GetImmediateMoveDestination();// 0x8699de4
	Actor* GetFocusActor();// 0x86997a4
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x8699928
	Vector GetFocalPoint();// 0x86999e4
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x869965c
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x8699ac4

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x86ce988
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x86cea9c
	Vector GetPathDestination();// 0x86cea30
	byte GetPathActionType();// 0x86cea68

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x250, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x258, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2d1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2d4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2d8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3e8, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x869be94
	void RequestStimuliListenerUpdate();// 0x869c5b0
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x869c5c4
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x869c3d0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x869c4dc
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x869c0ac
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x869c1b8
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x869c2c4
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x869bf90
	void ForgetAll();// 0x869c59c

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x86d0720
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* action, byte Priority);// 0x86d086c
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x86d05c0
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x86d0670

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x86cf3b4
	void Finish(byte WithResult);// 0x86cf214
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x86cf2c4

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x86c56d8

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x86c403c
	Vector[] GetResultsAsLocations();// 0x86c4130
	Actor*[] GetResultsAsActors();// 0x86c41e0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x86c4290
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x86c435c
	float GetItemScore(int ItemIndex);// 0x86c4428
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x59ef218

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestId, byte MovementResult);// 0x8697894

--------------------------------
Class: AIRequestID
	uint32 RequestId;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x86ce0f0
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x86cd710
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x86cd564
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x86cdd24
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x86cdf14
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x86cd844
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x86cdab4

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x81bcb00
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x81bc260
	void SetTimelineLengthMode(byte NewLengthMode);// 0x81bc528
	void SetTimelineLength(float NewLength);// 0x81bc5d0
	void SetPlayRate(float NewRate);// 0x81bc788
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x81bc94c
	void SetNewTime(float NewTime);// 0x81bc6ac
	void SetLooping(bool bNewLooping);// 0x81bc868
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x81bc170
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x81bc478
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x81bc350
	void ReverseFromEnd();// 0x81bcb14
	void Reverse();// 0x81bcb28
	void PlayFromStart();// 0x81bcb3c
	void Play();// 0x81bcb50
	void OnRep_Timeline();// 0x81bc15c
	bool IsReversing();// 0x81bca90
	bool IsPlaying();// 0x81bcac8
	bool IsLooping();// 0x81bc830
	float GetTimelineLength();// 0x81bc678
	float GetPlayRate();// 0x81bc754
	float GetPlaybackPosition();// 0x81bc918
	bool GetIgnoreTimeDilation();// 0x81bc440

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: SoldierKitComponent.BaseKitComponent.ActorComponent.Object
	delegate OnEquipmentChanged;//[Offset: 0x200, Size: 0x10]
	delegate OnReadyStatusChanged;//[Offset: 0x210, Size: 0x10]
	delegate OnCanSwapChanged;//[Offset: 0x220, Size: 0x10]
	delegate OnCanAutofireChanged;//[Offset: 0x230, Size: 0x10]
	delegate OnAutofirePausedChanged;//[Offset: 0x240, Size: 0x10]
	delegate OnSpawnedEquipmentListChanged;//[Offset: 0x250, Size: 0x10]
	delegate OnAmmoPickedUp;//[Offset: 0x260, Size: 0x10]
	delegate OnSwapStateChanged;//[Offset: 0x270, Size: 0x10]
	delegate OnEquipmentHandlingStateChanged;//[Offset: 0x280, Size: 0x10]
	GameplayAbilitySpecHandle[] GearAbilities;//[Offset: 0x290, Size: 0x10]
	EquipmentActor*[] SpawnedEquipmentList;//[Offset: 0x2b0, Size: 0x10]
	<EquipmentActor*> OriginalLoadoutSet;//[Offset: 0x2c0, Size: 0x50]
	byte NumSpawnedEquipment;//[Offset: 0x310, Size: 0x1]
	enum CurrentEquipmentType;//[Offset: 0x311, Size: 0x1]
	<enum> AllowedSprintStates;//[Offset: 0x318, Size: 0x50]
	BipodProperties BipodProperties;//[Offset: 0x368, Size: 0x58]
	LoadoutData* PlayerLoadout;//[Offset: 0x3c0, Size: 0x8]
	EquipmentLoadoutData[] CurrentEquipmentList;//[Offset: 0x3c8, Size: 0x10]
	class PickupData[] PickupsToSpawnOnDeath;//[Offset: 0x3d8, Size: 0x10]
	class KitPickupData* DroppedKitPickupSubclass;//[Offset: 0x3e8, Size: 0x8]
	SoldierEquipmentStateMachine* SwapStateMachine;//[Offset: 0x3f0, Size: 0x8]
	ODCharacter* OwningCharacter;//[Offset: 0x3f8, Size: 0x8]
	Vector CameraFireOffsets;//[Offset: 0x400, Size: 0xc]
	enum SwapState;//[Offset: 0x438, Size: 0x1]
	enum EquipmentHandlingState;//[Offset: 0x439, Size: 0x1]
	bool bSpawnKitPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 0x1]
	bool bAllWeaponsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 0x1]
	float LastSwapTime;//[Offset: 0x43c, Size: 0x4]
	bool bDeleteCurrentEquipmentAfterSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool SwapInSecondary();// 0x557cf44
	bool SwapInPrimary();// 0x557cf7c
	bool SwapInMelee();// 0x557ce2c
	bool SwapInGun();// 0x557cf0c
	bool SwapInGrenade();// 0x557ce64
	bool SwapInGadget();// 0x557ce9c
	bool SwapGuns();// 0x557ced4
	void SetEquipmentHandlingState(enum NewEquipmentHandlingState);// 0x557cc40
	bool ServerReplaceEquipment(enum Slot, EquipmentActor* Replacement, bool bImmediatelySwapTo);// 0x557d13c
	void OnSwapStateMachineSwapStateChanged(enum SwapState);// 0x557c8d4
	void OnStateUpdate(enum OldState, enum NewState);// 0x557cd38
	void OnRepSwapState();// 0x557c8c0
	void OnRepEquipmentHandlingState();// 0x557c7b8
	void OnRep_SpawnedWeapons(out const EquipmentActor*[] PrevSpawnedWeapons);// 0x557c9a4
	void OnRep_NumSpawnedEquipment();// 0x557c990
	void OnEquipmentStateMachineStateChanged(enum OldEquipmentState, enum NewEquipmentState);// 0x557c7cc
	void OnEquipmentReload();// 0x557c97c
	void OnCharacterStanceChanged();// 0x557cb54
	void OnCharacterSeatChanged(VehicleSeatComponent* OldSeat, VehicleSeatComponent* NewSeat);// 0x557ca64
	enum GetSwapState();// 0x557cd04
	EquipmentActor*[] GetSpawnedEquipmentList();// 0x557d0b8
	EquipmentActor* GetSecondaryEquipment();// 0x557d050
	EquipmentActor* GetPrimaryEquipment();// 0x557d084
	EquipmentActor* GetMelee();// 0x557cfb4
	EquipmentActor* GetGrenade();// 0x557cfe8
	EquipmentActor* GetGadget();// 0x557d01c
	enum GetEquipmentHandlingState();// 0x557cce8
	void ClientNotifyAmmoPickedUp(const AmmoPickupHUDInfo Info);// 0x557cb68

--------------------------------
Class: BipodProperties
	Vector MaxVelocity;//[Offset: 0x0, Size: 0xc]
	float ActivationDelay;//[Offset: 0xc, Size: 0x4]
	float DeactivationDelay;//[Offset: 0x10, Size: 0x4]
	GameplayTagContainer SkipMovementCheckStates;//[Offset: 0x18, Size: 0x20]
	byte SampleRate;//[Offset: 0x38, Size: 0x1]
	byte RaycastCollisionChannel;//[Offset: 0x39, Size: 0x1]
	byte NumberOfRaycasts;//[Offset: 0x3a, Size: 0x1]
	float AngleBetweenRaycasts;//[Offset: 0x3c, Size: 0x4]
	float RaycastLength;//[Offset: 0x40, Size: 0x4]
	byte NumberOfDetectedRaycasts;//[Offset: 0x44, Size: 0x1]
	float ForwardOffset;//[Offset: 0x48, Size: 0x4]
	float EyeObstructionBoxHeight;//[Offset: 0x4c, Size: 0x4]
	float EyeObstructionBoxWidth;//[Offset: 0x50, Size: 0x4]
	float EyeObstructionBoxDistance;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: LoadoutData.DataAsset.Object
	FText ClassDisplayName;//[Offset: 0x30, Size: 0x18]
	GunEntry[] Guns;//[Offset: 0x48, Size: 0x10]
	GadgetEntry Gear;//[Offset: 0x58, Size: 0x28]
	GadgetEntry Grenade;//[Offset: 0x80, Size: 0x28]
	MeleeEntry Melee;//[Offset: 0xa8, Size: 0x28]
	class SoldierSpecialization* Specialization;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: GunEntry
	class EquipmentActor* GunActorClass;//[Offset: 0x0, Size: 0x28]
	FName[] AttachmentsToEquip;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GadgetEntry
	class EquipmentActor* GadgetActorClass;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: MeleeEntry
	class EquipmentActor* MeleeActorClass;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: SoldierSpecialization.Specialization.Object
	enum TriggerType;//[Offset: 0x50, Size: 0x1]
	class EquipmentActor* EquipmentTrigger;//[Offset: 0x58, Size: 0x28]
	ODCharacter* Soldier;//[Offset: 0x80, Size: 0x8]
	EquipmentActor* CurrentEquipment;//[Offset: 0x88, Size: 0x8]
	float Duration;//[Offset: 0x90, Size: 0x4]
	FName ID;//[Offset: 0xa0, Size: 0x8]
	SoldierSpecializationUIData UIData;//[Offset: 0xa8, Size: 0x28]
	void StartSpecializationFromEquipmentUse(EquipmentActor* EquipmentUsed);// 0x558b4cc
	void OnEquipmentChanged(EquipmentActor* NewEquipment);// 0x558b424
	void InitializeSpecialization(ODCharacter* OurSoldier);// 0x59ef218
	SoldierSpecializationUIData GetUIData();// 0x558b570

--------------------------------
Class: SoldierSpecializationUIData
	FText DisplayName;//[Offset: 0x0, Size: 0x18]
	IconUIData IconUIData;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: IconUIData
	Texture2D* Icon;//[Offset: 0x0, Size: 0x8]
	Vector2D IconUsedPixelSize;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PickupData.Object
	SkeletalMesh* PickupMesh;//[Offset: 0x48, Size: 0x8]
	Transform PickupTransform;//[Offset: 0x50, Size: 0x30]
	GenericUIAnchorComponent* UIAnchorTemplate;//[Offset: 0x80, Size: 0x8]
	enum TriggerShape;//[Offset: 0x88, Size: 0x1]
	Vector HalfExtents;//[Offset: 0x8c, Size: 0xc]
	float Radius;//[Offset: 0x98, Size: 0x4]
	float HalfHeight;//[Offset: 0x9c, Size: 0x4]
	bool bDrawDebugCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bDespawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float DespawnTime;//[Offset: 0xa4, Size: 0x4]
	enum PickupType;//[Offset: 0xa8, Size: 0x1]
	enum ActivationCondition;//[Offset: 0xa9, Size: 0x1]
	float PickupTime;//[Offset: 0xac, Size: 0x4]
	float ImpulseMagnitude;//[Offset: 0xb0, Size: 0x4]
	float ImpulsePitchAmount;//[Offset: 0xb4, Size: 0x4]
	float ImpulsePitchVariation;//[Offset: 0xb8, Size: 0x4]
	void OnRep_PickupMesh();// 0x555c060
	SkeletalMesh* GetSkeletalMesh();// 0x555c16c
	float GetPickupTime();// 0x555c090
	Transform GetMeshRelativeTransform();// 0x555c0f8
	float GetDespawnTime();// 0x555c0ac
	bool GetDespawns();// 0x555c0dc
	enum GetActivationCondition();// 0x555c074
	bool CanPickup(const Actor* InActor);// 0x555c358
	static bool AddPickupToActorByClass(class PickupData PickupClass, Actor* InActor);// 0x555c1a8
	bool AddPickupToActor(Actor* InActor);// 0x555c29c

--------------------------------
Class: KitPickupData.PickupData.Object
	class EquipmentActor* StoredEquipmentClass;//[Offset: 0xc0, Size: 0x8]
	int ReadyUseCount;//[Offset: 0xc8, Size: 0x4]
	int ReserveUseCount;//[Offset: 0xcc, Size: 0x4]
	FName[] EquippedAttachmentIDs;//[Offset: 0xd0, Size: 0x10]
	void OnRep_StoredEquipmentClass();// 0x5409268

--------------------------------
Class: SoldierEquipmentStateMachine.Object
	delegate OnSwapStateChanged;//[Offset: 0xb8, Size: 0x10]
	EquipmentActor* CurrentEquipment;//[Offset: 0xc8, Size: 0x8]
	EquipmentActor* NextEquipment;//[Offset: 0xd0, Size: 0x8]
	EquipmentActor* EquipmentToDrop;//[Offset: 0xd8, Size: 0x8]
	float EndStateTime;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: AutofireComponent.ActorComponent.Object
	delegate OnAutofireStart;//[Offset: 0xb8, Size: 0x10]
	delegate OnAutofireStop;//[Offset: 0xc8, Size: 0x10]
	Pawn* OwnerPawn;//[Offset: 0xd8, Size: 0x8]
	BaseKitComponent* CurrentKit;//[Offset: 0xe0, Size: 0x8]
	Controller* CachedController;//[Offset: 0xe8, Size: 0x8]
	EquipmentStats* CachedEquipmentStats;//[Offset: 0xf0, Size: 0x8]
	DispersiveBallisticEquipmentAction* CachedDispersiveBallisticLauncher;//[Offset: 0xf8, Size: 0x8]
	SoldierAimComponent* CachedSoldierAimComponent;//[Offset: 0x108, Size: 0x8]
	<enum,bool> ProfileAutofireWeaponTypeSettings;//[Offset: 0x140, Size: 0x50]
	<FString,enum> ProfileAutofireWeaponTypeSettingIDs;//[Offset: 0x190, Size: 0x50]
	Actor* CurrentAutofireTarget;//[Offset: 0x1f4, Size: 0x8]
	void UpdateAutofireTimer(const EquipmentActor* EquipmentActor);// 0x538438c
	void TryRestartAutofire(EquipmentActor* NewEquipmentActor);// 0x5384a7c
	void TickAutofire();// 0x53845c4
	void StopAutofire();// 0x5384434
	void StartAutofire();// 0x53845b0
	void ShutDownAutofire();// 0x5384a68
	void SetCanUseAutofire(bool bInCanUseAutoFire);// 0x5384910
	enum SemiAutoWeaponFired(enum OldState, enum NewState);// 0x53840dc
	void ResetAutofireStoppedByDispersion();// 0x5384378
	void PressFireInput();// 0x53841d8
	void OnOffToggleSettingUpdated(out const ProfileSettings_OnOffToggleProfileSetting Setting);// 0x53846b4
	void OnKitInput(out const PlayerCommandState Command);// 0x5384200
	void OnDeath(Actor* DeadActor);// 0x53849c0
	void OnBoolSettingUpdated(out const ProfileSettings_BoolProfileSetting Setting);// 0x53845d8
	void OnAutofireTimerEnd();// 0x53841ec
	void LoadCustomAutofireSettings();// 0x53848a4
	void LoadCustomAutofireSetting(FString SettingId, enum WeaponType);// 0x53847a4
	void InitializeSettings();// 0x53848cc
	void InitializeAutofire();// 0x53848e0
	bool GetCanUseAutofire();// 0x53848f4
	void CheckUnpauseAutofire();// 0x5384448
	bool CheckPauseAutofire(const EquipmentActor* CurrentEquipment, float TargetDistance, bool bUseADSValues);// 0x538445c
	bool CheckEquipmentTypeAllowsAutofire(const EquipmentActor* EquipmentActor);// 0x53842c4
	void AssignAutofireSettingDelegates();// 0x5384790
	void ApplyProfileAutofireSettings();// 0x53848b8

--------------------------------
Class: ProfileSettings_OnOffToggleProfileSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	enum Value;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: DispersiveBallisticEquipmentAction.BallisticEquipmentAction.LaunchEquipmentAction.EquipmentAction.Object
	DispersionProperties BaseDispersion;//[Offset: 0x228, Size: 0x40]
	DispersionProperties ADSDispersion;//[Offset: 0x268, Size: 0x40]
	bool bDoVisualCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	float VisualCheckCastLength;//[Offset: 0x2ac, Size: 0x4]
	DispersionTickFunction DispersionTick;//[Offset: 0x2b0, Size: 0x30]
	bool bUseADSDispersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	float DispersionAngle;//[Offset: 0x2e4, Size: 0x4]
	bool bShotFiredSinceLastUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bFirstShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	float TimeSinceShotFired;//[Offset: 0x2ec, Size: 0x4]
	float TimeInIdle;//[Offset: 0x2f0, Size: 0x4]
	bool bIsEquipmentIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x2f8, Size: 0x8]
	enum OnIdleStop(enum OldState, enum NewState);// 0x53c59cc
	enum OnIdleStart(enum OldState, enum IdleState);// 0x53c5ac8
	enum OnFired(enum OldState, enum FireState);// 0x53c5bc4
	void OnADSChanged(byte NewZoomLevel);// 0x53c5cc0
	bool IsDispersionAngleMinimum();// 0x53c5da0
	bool IsDispersionAngleMaximum();// 0x53c5d68
	Rotator GetRandomNewDispersionDeviation();// 0x53c5ee8
	float GetNextDispersionAngle(float MinimumTimeBetweenShots);// 0x53c5dd8
	DispersionProperties GetDispersionProperties();// 0x53c5ea4
	float GetDispersionAngle();// 0x53c5e88

--------------------------------
Class: BallisticEquipmentAction.LaunchEquipmentAction.EquipmentAction.Object
	delegate HasTrackedBallisticsChanged;//[Offset: 0x138, Size: 0x10]
	float MuzzleVelocity;//[Offset: 0x148, Size: 0x4]
	float AdditionalUpwardsVelocity;//[Offset: 0x14c, Size: 0x4]
	RecoilProperties Recoil;//[Offset: 0x150, Size: 0x48]
	float CriticalBoneDamageModifier;//[Offset: 0x198, Size: 0x4]
	float DamageReductionPerEnemyPenetration;//[Offset: 0x19c, Size: 0x4]
	byte MaxActiveUses;//[Offset: 0x1a0, Size: 0x1]
	class BallisticDefinition* BallisticDefinitionClass;//[Offset: 0x1a8, Size: 0x28]
	BallisticDefinition* BallisticDefinitionAsset;//[Offset: 0x1d0, Size: 0x8]
	bool bShouldTargetFriendliesInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bHasTrackedBallistics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	BallisticEquipmentActionFullState* EquipmentActionState;//[Offset: 0x200, Size: 0x8]
	void PlayCameraShake(Controller* InstigatorController);// 0x538ba1c
	void OnRep_HasTrackedBallistics();// 0x538b914
	void OnBallisticsRemoved(uint16 BallisticId);// 0x538b928
	bool LaunchWithCustomLocation(float LifetimeOverride, bool bPlayCameraShake, bool bOverrideLocation, Vector Location, bool bOverrideDirection, Vector Direction, bool bOverrideVisualLocation, Vector VisualLocation);// 0x538bac4
	void K2_PredictFireMessage(out ODBulletFireMessage OutMsg, EquipmentActor* EquipmentActor, const Actor* IgnoreActor, float LifetimeOverride);// 0x538bdb8
	bool HasTrackedBallistics();// 0x538b9e4
	RecoilProperties GetRecoilProperties();// 0x538bfe4
	float GetDamageReductionPerEnemyPenetration();// 0x538bfac
	float GetCriticalBoneDamageModifier();// 0x538bfc8
	void DestroyAllTrackedBallistics();// 0x538b9d0

--------------------------------
Class: LaunchEquipmentAction.EquipmentAction.Object
	delegate GetLaunchedProjectileRotation;//[Offset: 0x118, Size: 0x10]
	delegate GetLaunchedProjectileAngularVelocity;//[Offset: 0x128, Size: 0x10]
	bool PredictProjectilePath(out PredictProjectilePathResult OutPredictResult, bool bTracePath, byte MaxNumHits, bool bTraceComplex, out const Actor*[] ActorsToIgnore, float MaxSimTime);// 0x5409b20
	static bool GetShotOriginAndDirectionFromMuzzleSocket(const EquipmentActor* EquipmentActor, out Vector OutBallisticOrigin, out Vector OutBallisticDirection);// 0x5409758
	float GetProjectileLifetime();// 0x5409ae4
	float GetMuzzleVelocity();// 0x5409aa8
	void GetLineOfAimOriginAndDirection(out Vector OutBallisticOrigin, out Vector OutBallisticDirection);// 0x54099a4
	Quat GetLaunchedProjectileRotationDelegate__DelegateSignature();// 0x59ef218
	Vector GetLaunchedProjectileAngularVelocityDelegate__DelegateSignature();// 0x59ef218
	void GetFXOriginAndDirection(out Vector OutBallisticOrigin, out Vector OutBallisticDirection);// 0x54098a0

--------------------------------
Class: DispersionProperties
	float MinDispersionAngle;//[Offset: 0x0, Size: 0x4]
	float MaxDispersionAngle;//[Offset: 0x4, Size: 0x4]
	float IncreasePerShot;//[Offset: 0x8, Size: 0x4]
	float DecreaseCoefficient;//[Offset: 0xc, Size: 0x4]
	float DecreaseExponent;//[Offset: 0x10, Size: 0x4]
	float DecreaseOffset;//[Offset: 0x14, Size: 0x4]
	float FirstShotIncreaseMultiplier;//[Offset: 0x18, Size: 0x4]
	float IdleDecreaseCoefficient;//[Offset: 0x1c, Size: 0x4]
	float IdleDecreaseExponent;//[Offset: 0x20, Size: 0x4]
	float IdleDecreaseOffset;//[Offset: 0x24, Size: 0x4]
	float IdleTime;//[Offset: 0x28, Size: 0x4]
	float NotFiringDecreaseCoefficient;//[Offset: 0x2c, Size: 0x4]
	float NotFiringDecreaseExponent;//[Offset: 0x30, Size: 0x4]
	float NotFiringDecreaseOffset;//[Offset: 0x34, Size: 0x4]
	float DistributionExponent;//[Offset: 0x38, Size: 0x4]
	byte SimulationRateHz;//[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: DispersionTickFunction.TickFunction
	DispersiveBallisticEquipmentAction* Owner;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RecoilProperties
	float VerticalRecoil;//[Offset: 0x0, Size: 0x4]
	float MaxVerticalRecoil;//[Offset: 0x4, Size: 0x4]
	float FirstShotMultiplierVerticalRecoil;//[Offset: 0x8, Size: 0x4]
	float RecoilDirection;//[Offset: 0xc, Size: 0x4]
	float RecoilVariation;//[Offset: 0x10, Size: 0x4]
	float MaxHorizontalRecoil;//[Offset: 0x14, Size: 0x4]
	float RecoilDecreaseFactor;//[Offset: 0x18, Size: 0x4]
	float RecoilDecreaseExponent;//[Offset: 0x1c, Size: 0x4]
	float RecoilDecreaseTimeExponent;//[Offset: 0x20, Size: 0x4]
	float RecoilDecreaseNorm;//[Offset: 0x24, Size: 0x4]
	float RecoilDecreaseOffset;//[Offset: 0x28, Size: 0x4]
	float RecoilDuration;//[Offset: 0x2c, Size: 0x4]
	float ShootingRecoilDecreaseScale;//[Offset: 0x30, Size: 0x4]
	int AimInputCompensation;//[Offset: 0x34, Size: 0x4]
	bool bResetRecoilBetweenShots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bAllowCameraRecoil;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float RecoilCameraSpringSpringConstant;//[Offset: 0x3c, Size: 0x4]
	float RecoilCameraSpringSpringDamping;//[Offset: 0x40, Size: 0x4]
	float RecoilCameraSpringDampingExponent;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: BallisticEquipmentActionFullState.EquipmentActionFullState.Object
	uint16[] ActiveBallisticIds;//[Offset: 0x28, Size: 0x10]
	bool bHasTrackedBallistics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SoldierAimComponent.ActorComponent.Object
	float BasePitch;//[Offset: 0xb8, Size: 0x4]
	float BaseYaw;//[Offset: 0xbc, Size: 0x4]
	float MinAimPitch;//[Offset: 0xc0, Size: 0x4]
	float MaxAimPitch;//[Offset: 0xc4, Size: 0x4]
	float MinAimYaw;//[Offset: 0xc8, Size: 0x4]
	float MaxAimYaw;//[Offset: 0xcc, Size: 0x4]
	bool bHasYawConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	AimModifier*[] AimModifierStack;//[Offset: 0xd8, Size: 0x10]
	class RecoilAimModifier* RecoilModifierClass;//[Offset: 0xe8, Size: 0x8]
	class ScopeSwayAimModifier* ScopeSwayModifierClass;//[Offset: 0xf0, Size: 0x8]
	ODCharacter* OwnerCharacter;//[Offset: 0xf8, Size: 0x8]
	RecoilAimModifier* RecoilAimModifier;//[Offset: 0x100, Size: 0x8]
	AimAssistModifier* AimAssistModifier;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: AimModifier.Object
	float Priority;//[Offset: 0x30, Size: 0x4]
	float MaxAimYawDegrees;//[Offset: 0x34, Size: 0x4]
	float MaxAimPitchDegrees;//[Offset: 0x38, Size: 0x4]
	bool bWantsFixedStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	byte SimulationRateHz;//[Offset: 0x3d, Size: 0x1]
	int AimInputCompensationMode;//[Offset: 0x40, Size: 0x4]
	Controller* OurController;//[Offset: 0x48, Size: 0x8]
	Rotator AimOffset;//[Offset: 0x50, Size: 0xc]
	Vector2D InputCorrection;//[Offset: 0x5c, Size: 0x8]
	Rotator RotationDelta;//[Offset: 0x64, Size: 0xc]
	void SetTickEnabled(bool bInEnabled);// 0x5373a38

--------------------------------
Class: RecoilAimModifier.AimModifier.Object
	float RecoilDecreaseBase;//[Offset: 0xac, Size: 0x4]
	float RecoilDecreaseExponent;//[Offset: 0xb0, Size: 0x4]
	float RecoilDecreaseOffsetDegrees;//[Offset: 0xb4, Size: 0x4]
	float RecoilDecreaseFactor;//[Offset: 0xb8, Size: 0x4]
	float RecoilDecreaseTimeExponent;//[Offset: 0xbc, Size: 0x4]
	float RecoilDecreaseScale;//[Offset: 0xc0, Size: 0x4]
	float TimeSinceRecoilStarted;//[Offset: 0xc4, Size: 0x4]
	float ShootingRecoilDecreaseScale;//[Offset: 0xc8, Size: 0x4]
	float PendingRecoilTime;//[Offset: 0xcc, Size: 0x4]
	float RemainingPendingRecoilTime;//[Offset: 0xd0, Size: 0x4]
	float CompensationMultiplier;//[Offset: 0xd4, Size: 0x4]
	float RecoilDirection;//[Offset: 0xe8, Size: 0x4]
	float RecoilVariation;//[Offset: 0xec, Size: 0x4]
	float VerticalRecoilRadians;//[Offset: 0xf0, Size: 0x4]
	float RecoilDuration;//[Offset: 0xf4, Size: 0x4]
	BaseKitComponent* KitComponent;//[Offset: 0xf8, Size: 0x8]
	EquipmentActor* ActiveEquipment;//[Offset: 0x100, Size: 0x8]
	BallisticEquipmentAction* Launcher;//[Offset: 0x108, Size: 0x8]
	bool bFiredShotSinceLastUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bApplyCameraRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bResetRecoilBetweenShots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	CameraSpring CameraRecoilSpring;//[Offset: 0x114, Size: 0x30]
	void SetRecoil(out const Rotator Recoil, float ApplyOverTime);// 0x5571c54
	enum ResetShotRecoil(enum OldState, enum NewState);// 0x557191c
	void ResetRecoil();// 0x5571c40
	enum OnFired(enum OldState, enum FireState);// 0x5571a18
	void OnEquipmentModifiersUpdated(const Specialization* Specialization);// 0x5571874
	void OnEquipmentChanged(EquipmentActor* NewEquipment);// 0x5571b14
	bool IsResting();// 0x5571e3c
	float GetRecoilYaw();// 0x5571c24
	float GetRecoilPitch();// 0x5571c08
	Rotator GetRecoil();// 0x5571be4
	CameraSpring GetCameraRecoil();// 0x5571bbc
	void DecreaseRecoilOverTime(float DeltaTime);// 0x55717cc
	void AddRecoil(out const Rotator Recoil, float ApplyOverTime);// 0x5571d48

--------------------------------
Class: CameraSpring
	Rotator CurrentRotation;//[Offset: 0x0, Size: 0xc]
	Rotator RestingRotation;//[Offset: 0xc, Size: 0xc]
	Vector CurrentVelocity;//[Offset: 0x18, Size: 0xc]
	float SpringConstant;//[Offset: 0x24, Size: 0x4]
	float SpringDamping;//[Offset: 0x28, Size: 0x4]
	float DampingExponent;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ScopeSwayAimModifier.AimModifier.Object
	BaseKitComponent* LoadoutComponent;//[Offset: 0xb0, Size: 0x8]
	EquipmentActor* ActiveEquipment;//[Offset: 0xb8, Size: 0x8]
	bool bFiredShotSinceLastUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	ScopeSwayDefinition* CurrentScopeSway;//[Offset: 0xe0, Size: 0x8]
	void OnZoomLevelChanged(byte NewZoomLevel);// 0x557278c
	enum OnFired(enum OldState, enum FireState);// 0x5572834
	void OnEquipmentModifiersUpdated(const Specialization* Specialization);// 0x55726e4
	void OnEquipmentChanged(EquipmentActor* NewEquipment);// 0x5572930

--------------------------------
Class: AimAssistModifier.AimModifier.Object
	float MinimumTargetSearchInterval;//[Offset: 0xac, Size: 0x4]
	float AverageInputCalculationInterval;//[Offset: 0xb0, Size: 0x4]
	float MaximumTargetingAngleHip;//[Offset: 0xb4, Size: 0x4]
	float MaximumTargetingAngleADS;//[Offset: 0xb8, Size: 0x4]
	bool bMagnetismEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bOvershootProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bDeactivateOvershootProtectionForRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	bool bCanShootThroughFriendlies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1]
	bool bCanUseAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	ODTargetInfo PotentialTarget;//[Offset: 0xc8, Size: 0xd8]
	HitResult TargetHitResult;//[Offset: 0x1a8, Size: 0x88]
	bool bScoredDirectHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	float AimAssistValue;//[Offset: 0x234, Size: 0x4]
	float AimAssistTolerance;//[Offset: 0x238, Size: 0x4]
	Vector2D AimAssistMagnetismInputDirection;//[Offset: 0x254, Size: 0x8]
	float OvershootProtectionInputScaleFactor;//[Offset: 0x25c, Size: 0x4]
	float AutofireValue;//[Offset: 0x264, Size: 0x4]
	float CSVMagnetismMinDistance;//[Offset: 0x268, Size: 0x4]
	float CSVMagnetismMaxDistance;//[Offset: 0x26c, Size: 0x4]
	float CSVMagnetismMaxAddedDegreesPerSecond;//[Offset: 0x270, Size: 0x4]
	float CSVMagnetismMaximumAngle;//[Offset: 0x274, Size: 0x4]
	float CSVMagnetismADSFactor;//[Offset: 0x278, Size: 0x4]
	float CSVMagnetismFadeInTimeSeconds;//[Offset: 0x27c, Size: 0x4]
	float CSVMagnetismAutoReactivateTime;//[Offset: 0x280, Size: 0x4]
	float CSVOvershootProtectionInputScaleFactorOuterBox;//[Offset: 0x284, Size: 0x4]
	float CSVOvershootProtectionInputScaleFactorInnerBox;//[Offset: 0x288, Size: 0x4]
	float CSVOvershootProtectionMinimumAngle;//[Offset: 0x28c, Size: 0x4]
	bool CSVAimAssistRecoilCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool CSVAimAssistTargetLeadingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	float CSVAimAssistDeactivateUpperThresholdRotationDegreesPerSecond;//[Offset: 0x294, Size: 0x4]
	float CSVAimAssistAngularVelocityAveragingWindowDuration;//[Offset: 0x298, Size: 0x4]
	float CSVAimAssistDeactivateAtPlayerVelocitySquared;//[Offset: 0x29c, Size: 0x4]
	float CSVAimAssistProneMultiplier;//[Offset: 0x2a0, Size: 0x4]
	float CSVAimAssistCrouchMultiplier;//[Offset: 0x2a4, Size: 0x4]
	bool CSVAimAssistAllowsDirectHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	float CSVAimAssistReferenceDistance;//[Offset: 0x2ac, Size: 0x4]
	float CSVAimAssistDistanceScaleFactor;//[Offset: 0x2b0, Size: 0x4]
	float CSVAutofireReferenceDistance;//[Offset: 0x2b4, Size: 0x4]
	float CSVAutofireDistanceScaleFactor;//[Offset: 0x2b8, Size: 0x4]
	Pawn* CachedPawn;//[Offset: 0x2f0, Size: 0x8]
	Controller* CachedController;//[Offset: 0x2f8, Size: 0x8]
	ODCharacter* CachedODCharacter;//[Offset: 0x300, Size: 0x8]
	BaseKitComponent* CachedKitComponent;//[Offset: 0x310, Size: 0x8]
	EquipmentActor* CachedEquipment;//[Offset: 0x318, Size: 0x8]
	BallisticEquipmentAction* CachedEquipmentLauncher;//[Offset: 0x320, Size: 0x8]
	ODTargetInfo[] CurrentCandidateTargets;//[Offset: 0x330, Size: 0x10]
	void SetCanUseAimAssist(bool bInCanUseAimAssist);// 0x53724d4
	bool GetCanUseAimAssist();// 0x5372580

--------------------------------
Class: ODTargetInfo
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8]
	Box AimAssistInnerWorldBoundingBox;//[Offset: 0x8, Size: 0x1c]
	Box AimAssistOuterWorldBoundingBox;//[Offset: 0x24, Size: 0x1c]
	Box2D AimAssistInnerScreenBoundingBox;//[Offset: 0x40, Size: 0x14]
	Box AutofireInnerWorldBoundingBox;//[Offset: 0x68, Size: 0x1c]
	Box AutofireOuterWorldBoundingBox;//[Offset: 0x84, Size: 0x1c]
	Box2D AutofireInnerScreenBoundingBox;//[Offset: 0xa0, Size: 0x14]
	Box2D AutofireOuterScreenBoundingBox;//[Offset: 0xb4, Size: 0x14]
	float AimAssistSquaredDistanceToScreenCenter;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: CharacterHealthComponent.HealthComponent.ActorComponent.Object
	delegate OnRevivedDelegate;//[Offset: 0x2e8, Size: 0x10]
	delegate OnPreDownedDelegate;//[Offset: 0x2f8, Size: 0x10]
	delegate OnDownedDelegate;//[Offset: 0x308, Size: 0x10]
	enum HealthState;//[Offset: 0x318, Size: 0x1]
	bool bAllowRevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]
	Controller* ReviveInstigator;//[Offset: 0x320, Size: 0x8]
	void UpdateDelegates(enum BroadcastState);// 0x53b1100
	void ServerSetHealthState(enum NewState);// 0x53b11a8
	void OnRep_HealthState(enum LastState);// 0x53b1050

--------------------------------
Class: AimSpottingComponent.ActorComponent.Object
	delegate OnAimSpottingTargetChanged;//[Offset: 0xb8, Size: 0x10]
	delegate OnAimMarkableObjectiveChanged;//[Offset: 0xc8, Size: 0x10]
	float MaxSpotDistance;//[Offset: 0xd8, Size: 0x4]
	float SweepRadius;//[Offset: 0xdc, Size: 0x4]
	float TimeToSpot;//[Offset: 0xe0, Size: 0x4]
	bool bRequireADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	byte TraceChannel;//[Offset: 0xe5, Size: 0x1]
	SpotParams SpotParams;//[Offset: 0xe8, Size: 0x10]
	Pawn* OwnerPawn;//[Offset: 0xf8, Size: 0x8]
	BaseKitComponent* KitComponent;//[Offset: 0x100, Size: 0x8]
	SpottingTargetComponent* CurrentSpottingTarget;//[Offset: 0x108, Size: 0x8]
	float AimSpotStartTime;//[Offset: 0x110, Size: 0x4]
	float MaxConquestMarkDistance;//[Offset: 0x198, Size: 0x4]
	float MaxAngleToMarkConquestObjective;//[Offset: 0x19c, Size: 0x4]
	MarkableObjectiveComponent* CurrentAimedObjective;//[Offset: 0x1a0, Size: 0x8]
	float SpottingAdditiveModifier;//[Offset: 0x1b8, Size: 0x4]
	float SpottingMultiplicativeModifier;//[Offset: 0x1bc, Size: 0x4]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x1c0, Size: 0x8]
	void OnRep_CurrentTarget();// 0x5373e74
	void OnRep_CurrentAimedObjective();// 0x5373e60
	void OnDeath(Actor* DeadActor);// 0x5373e88

--------------------------------
Class: CharacterCustomizationComponent.ActorComponent.Object
	CharacterCometics DefaultCharacterCosmetics;//[Offset: 0xb0, Size: 0x30]
	CharacterCometics CharacterCosmetics;//[Offset: 0xe0, Size: 0x30]
	CharacterCometics ProcessedCosmetics;//[Offset: 0x110, Size: 0x30]
	SkeletalMeshComponent*[] AttachedMeshes;//[Offset: 0x140, Size: 0x10]
	class EquipmentActor* MeleeEquipmentActorClass;//[Offset: 0x150, Size: 0x28]
	void SetCosmetics(FString SoldierSkinContentId, FString GloveSkinContentId, FString BackpackSkinContentId);// 0x53b0618
	void OnRep_CharacterCosmetics();// 0x53b0604

--------------------------------
Class: CharacterCometics
	FString SoldierSkinContentId;//[Offset: 0x0, Size: 0x10]
	FString BackpackSkinContentId;//[Offset: 0x10, Size: 0x10]
	FString GloveSkinContentId;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CameraRotationModifier
	enum Modifier;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ODCharacterAnimInstance.AnimInstance.Object
	SoldierKitComponent* LoadoutComponent;//[Offset: 0x2c0, Size: 0x8]
	float AimYaw;//[Offset: 0x2c8, Size: 0x4]
	float AimPitch;//[Offset: 0x2cc, Size: 0x4]
	Vector OverallFPHipfireGunAdjustment;//[Offset: 0x2d0, Size: 0xc]
	Rotator IntegratedGunSwing;//[Offset: 0x2dc, Size: 0xc]
	float GunLagYawRotationScale;//[Offset: 0x2e8, Size: 0x4]
	float GunLagPitchRotationScale;//[Offset: 0x2ec, Size: 0x4]
	float GunLagIntegrationScale;//[Offset: 0x2f0, Size: 0x4]
	float GunLagYawRollScale;//[Offset: 0x2f4, Size: 0x4]
	float GunLagPitchClampMin;//[Offset: 0x2f8, Size: 0x4]
	float GunLagPitchClampMax;//[Offset: 0x2fc, Size: 0x4]
	float GunLagYawClampMin;//[Offset: 0x300, Size: 0x4]
	float GunLagYawClampMax;//[Offset: 0x304, Size: 0x4]
	byte ServerAnimFrameSkipRateWhenSignificant;//[Offset: 0x308, Size: 0x1]
	byte ServerAnimFrameSkipRateWhenNotSignificant;//[Offset: 0x309, Size: 0x1]
	Transform ADSSocketAdjustment;//[Offset: 0x310, Size: 0x30]
	Vector ADSCameraOffsetFromHandle;//[Offset: 0x340, Size: 0xc]
	float ADSAlpha;//[Offset: 0x34c, Size: 0x4]
	float HideEquipmentPartsAdsAlpha;//[Offset: 0x350, Size: 0x4]
	bool bIsHidingEquipmentParts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	float VehicleSteerAxis;//[Offset: 0x358, Size: 0x4]
	Rotator PreviousControlRotator;//[Offset: 0x35c, Size: 0xc]
	Rotator CurrentControlRotator;//[Offset: 0x368, Size: 0xc]
	Rotator RotationSpeed;//[Offset: 0x374, Size: 0xc]
	FName GunSwayPivotSocketName;//[Offset: 0x380, Size: 0x8]
	Vector FPAimPivot;//[Offset: 0x388, Size: 0xc]
	Vector FPNegativeAimPivot;//[Offset: 0x394, Size: 0xc]
	<enum,Vector> FPAimPivotsByPose;//[Offset: 0x3a0, Size: 0x50]
	Rotator FPAimRotation;//[Offset: 0x3f0, Size: 0xc]
	Rotator FPGunSway;//[Offset: 0x3fc, Size: 0xc]
	Vector FPGunSwayTranslate;//[Offset: 0x408, Size: 0xc]
	Vector FPGunKickback;//[Offset: 0x414, Size: 0xc]
	Vector FPFinalGunTranslateAdjustments;//[Offset: 0x420, Size: 0xc]
	Rotator FPFinalGunRotationAdjustments;//[Offset: 0x42c, Size: 0xc]
	float ActiveFiringTimer;//[Offset: 0x438, Size: 0x4]
	float IdleMovementTimer;//[Offset: 0x43c, Size: 0x4]
	enum AirState;//[Offset: 0x440, Size: 0x1]
	bool bWeaponUsesIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x441, Size: 0x1]
	bool bIsInADS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x441, Size: 0x1]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x441, Size: 0x1]
	bool bIsStartingSprintFire;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x441, Size: 0x1]
	bool bFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x441, Size: 0x1]
	bool bParachuteDeployed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x441, Size: 0x1]
	bool bSprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x441, Size: 0x1]
	bool bWeaponDetonate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x441, Size: 0x1]
	bool bReloadingEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x442, Size: 0x1]
	bool bDontShuffleOnFirstPerson;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x442, Size: 0x1]
	float AimBlendAlpha;//[Offset: 0x444, Size: 0x4]
	enum CurrentPose;//[Offset: 0x448, Size: 0x1]
	enum LastPose;//[Offset: 0x449, Size: 0x1]
	bool bDrivingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44a, Size: 0x1]
	bool bPassengerInVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44a, Size: 0x1]
	float Direction;//[Offset: 0x44c, Size: 0x4]
	float Speed;//[Offset: 0x450, Size: 0x4]
	float MinSprintSpeedTransition;//[Offset: 0x454, Size: 0x4]
	float Forward;//[Offset: 0x458, Size: 0x4]
	float Strafe;//[Offset: 0x45c, Size: 0x4]
	float MaxYawBeforeTurnInPlace;//[Offset: 0x460, Size: 0x4]
	float MaxYawBeforeFastTurnInPlace;//[Offset: 0x464, Size: 0x4]
	float SprintFireStartingDelayTime;//[Offset: 0x468, Size: 0x4]
	float ADSBlendTime;//[Offset: 0x46c, Size: 0x4]
	Vector HeadScale;//[Offset: 0x470, Size: 0xc]
	float HeadScaleAlpha;//[Offset: 0x47c, Size: 0x4]
	<enum,Vector> FPHeightOffsets;//[Offset: 0x480, Size: 0x50]
	Vector TorsoWarpAmount;//[Offset: 0x4d0, Size: 0xc]
	Vector TorsoWarp;//[Offset: 0x4dc, Size: 0xc]
	Vector TorsoWarpNeg;//[Offset: 0x4e8, Size: 0xc]
	Vector CurrentFPHeightOffset;//[Offset: 0x4f4, Size: 0xc]
	AnimMontage* EquipmentOverrideEquipMontage;//[Offset: 0x500, Size: 0x8]
	AnimMontage* EquipmentOverrideHolsterMontage;//[Offset: 0x508, Size: 0x8]
	AnimMontage* EquipmentOverrideReloadMontage;//[Offset: 0x510, Size: 0x8]
	AnimMontage* EquipmentOverrideShortReloadMontage;//[Offset: 0x518, Size: 0x8]
	AnimMontage* EquipmentOverrideFireMontage;//[Offset: 0x520, Size: 0x8]
	AnimMontage* EquipmentOverrideUseAlternateMontage;//[Offset: 0x528, Size: 0x8]
	AnimMontage* EquipmentOverrideBoltActionMontage;//[Offset: 0x530, Size: 0x8]
	AnimSequenceBase* HandGripOverrideSequence;//[Offset: 0x538, Size: 0x8]
	delegate OnEquipmentSwapIn;//[Offset: 0x540, Size: 0x10]
	delegate OnEquipmentSwapOut;//[Offset: 0x550, Size: 0x10]
	delegate OnEquipmentReload;//[Offset: 0x560, Size: 0x10]
	delegate OnEquipmentShortReload;//[Offset: 0x570, Size: 0x10]
	delegate OnEquipmentStartThrow;//[Offset: 0x580, Size: 0x10]
	delegate OnEquipmentDeploy;//[Offset: 0x590, Size: 0x10]
	delegate OnEquipmentHandlingStateChange;//[Offset: 0x5a0, Size: 0x10]
	delegate OnEquipmentUsed;//[Offset: 0x5b0, Size: 0x10]
	delegate OnEquipmentUsedAlternate;//[Offset: 0x5c0, Size: 0x10]
	delegate OnEquipmentBoltAction;//[Offset: 0x5d0, Size: 0x10]
	delegate OnMantle;//[Offset: 0x5e0, Size: 0x10]
	delegate OnVault;//[Offset: 0x5f0, Size: 0x10]
	delegate OnHighstepVault;//[Offset: 0x600, Size: 0x10]
	float HitReactionLargeDamageThreshold;//[Offset: 0x610, Size: 0x4]
	FName FinishThrowSectionName;//[Offset: 0x614, Size: 0x8]
	FName GunHandleSocketName;//[Offset: 0x61c, Size: 0x8]
	FName AttachLName;//[Offset: 0x624, Size: 0x8]
	FName AttachRName;//[Offset: 0x62c, Size: 0x8]
	FName GunSwayModifiedBone;//[Offset: 0x634, Size: 0x8]
	FName AerialDeployAnimationName;//[Offset: 0x63c, Size: 0x8]
	FName AerialIdleAnimationName;//[Offset: 0x644, Size: 0x8]
	FName AerialCollapseAnimationName;//[Offset: 0x64c, Size: 0x8]
	float TurnInPlaceSpeed;//[Offset: 0x654, Size: 0x4]
	enum TurnInPlaceType;//[Offset: 0x658, Size: 0x1]
	float TurnInPlaceBlendOutPercentThreshold;//[Offset: 0x65c, Size: 0x4]
	Vector EquipmentSightPosition;//[Offset: 0x660, Size: 0xc]
	float AdsSightDistanceFromCamera;//[Offset: 0x66c, Size: 0x4]
	float StanceAlpha;//[Offset: 0x670, Size: 0x4]
	enum EquipmentHandlingState;//[Offset: 0x674, Size: 0x1]
	float SwapInAnimTimeScale;//[Offset: 0x678, Size: 0x4]
	float SwapOutAnimTimeScale;//[Offset: 0x67c, Size: 0x4]
	float ReloadAnimTimeScale;//[Offset: 0x680, Size: 0x4]
	float UseAnimTimeScale;//[Offset: 0x684, Size: 0x4]
	bool bHasCharacterFireAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool bHasSetCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1]
	bool bTurnInPlaceControlsCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 0x1]
	bool bCanPlayTurnInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68b, Size: 0x1]
	bool bThirdPersonMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68c, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68c, Size: 0x1]
	ODCharacter* CachedCharacter;//[Offset: 0x690, Size: 0x8]
	ODVehicle* LefthandGrabTargetVehicle;//[Offset: 0x698, Size: 0x8]
	FName LefthandGrabTargetBone;//[Offset: 0x6a0, Size: 0x8]
	Vector LastControlInput;//[Offset: 0x6a8, Size: 0xc]
	void UpdateStanceAlpha(float DeltaTime);// 0x54857e8
	void UpdateEquipmentState();// 0x54859dc
	void UpdateDeathSequenceRootMotion(AnimSequence* DeathSequence, float PreviousTime, float DeltaTime);// 0x54859f0
	void SetIsPlayingTurnInPlaceAnimation();// 0x5485ba0
	void PlayVault(float AnimationRateScale);// 0x59ef218
	void PlayTaunt5(float AnimationRateScale);// 0x59ef218
	void PlayTaunt4(float AnimationRateScale);// 0x59ef218
	void PlayTaunt3(float AnimationRateScale);// 0x59ef218
	void PlayTaunt2(float AnimationRateScale);// 0x59ef218
	void PlayTaunt1(float AnimationRateScale);// 0x59ef218
	void PlayPickupMontage(float AnimationRateScale);// 0x59ef218
	void PlayPickupHealthMontage(float AnimationRateScale);// 0x59ef218
	void PlayPickupDogtagMontage(float AnimationRateScale);// 0x59ef218
	void PlayMeleeTakedownVictim(float AnimationRateScale);// 0x59ef218
	void PlayMeleeTakedownAttacker(float AnimationRateScale);// 0x59ef218
	void PlayMeleeSlash(float AnimationRateScale);// 0x59ef218
	void PlayMantle(float AnimationRateScale);// 0x59ef218
	void PlayJumpMontage(float AnimationRateScale);// 0x59ef218
	void PlayHitReact_Shot_Small(float AnimationRateScale);// 0x59ef218
	void PlayHitReact_Shot_Large(float AnimationRateScale);// 0x59ef218
	void PlayHitReact_Melee(float AnimationRateScale);// 0x59ef218
	void PlayHighstepVault(float AnimationRateScale);// 0x59ef218
	void PlayHardLandingMontage(float AnimationRateScale);// 0x59ef218
	void PlayFinishThrowMontage(float AnimationRateScale);// 0x59ef218
	void PlayEquipmentUsedAlternate(float AnimationRateScale);// 0x59ef218
	void PlayEquipmentUsed(float AnimationRateScale);// 0x59ef218
	void PlayEquipmentSwap(bool bSwapOut, float AnimationRateScale);// 0x59ef218
	void PlayEquipmentStartThrow(float AnimationRateScale);// 0x59ef218
	void PlayEquipmentShortReload(float AnimationRateScale, out const FName SectionName);// 0x59ef218
	void PlayEquipmentReload(float AnimationRateScale, out const FName SectionName);// 0x59ef218
	void PlayEquipmentDeploy(float AnimationRateScale);// 0x59ef218
	void PlayEquipmentBoltAction(float AnimationRateScale);// 0x59ef218
	void PlayDeployAerial(float AnimationRateScale);// 0x59ef218
	void PlayDeath_ATVPassengerShotRight(float AnimationRateScale);// 0x59ef218
	void PlayDeath_ATVPassengerShotLeft(float AnimationRateScale);// 0x59ef218
	void PlayDeath_ATVPassengerExploded(float AnimationRateScale);// 0x59ef218
	void PlayDeath_ATVDriverShotRight(float AnimationRateScale);// 0x59ef218
	void PlayDeath_ATVDriverShotLeft(float AnimationRateScale);// 0x59ef218
	void PlayDeath_ATVDriverExploded(float AnimationRateScale);// 0x59ef218
	void PlayDeath(float AnimationRateScale);// 0x59ef218
	void PlayClimbUpExitMontage(float AnimationRateScale);// 0x59ef218
	void PlayClimbUpEnterMontage(float AnimationRateScale);// 0x59ef218
	void PlayClimbDownExitMontage(float AnimationRateScale);// 0x59ef218
	void PlayClimbDownEnterMontage(float AnimationRateScale);// 0x59ef218
	void PlayAerialLanding(float AnimationRateScale);// 0x59ef218
	void OnVehicleSeatChanged(VehicleSeatComponent* PrevVehicleSeatComponent, VehicleSeatComponent* NewVehicleSeatComponent);// 0x5485650
	void OnUpdatePointOfView(enum PointOfView);// 0x54854f8
	void OnEquipmentHandlingStateChanged(enum NewEquipmentHandlingState);// 0x5485740
	void OnDeath();// 0x59ef218
	void OnADSStateChanged(bool bInADS);// 0x59ef218
	bool IsThirdPerson();// 0x5485b2c
	void InternalUpdateEquipmentState();// 0x59ef218
	void HandleTurnInPlace(float DeltaTime);// 0x5485bb4
	void HandlePoseStates();// 0x5485c5c
	void FinishJumpMontage();// 0x59ef218
	void EnableTurnInPlaceControlsRotation();// 0x5485b78
	void DisableTurnInPlaceControlsRotation();// 0x5485b64
	void ClearIsPlayingTurnInPlaceAnimation();// 0x5485b8c
	float CalculateGunPushback(float PushbackRate, float PushbackMagnitude, float Time);// 0x5485890
	void BlueprintSetCharacter(ODCharacter* NewCharacter);// 0x59ef218
	void BlueprintClearCharacter(ODCharacter* NewCharacter);// 0x59ef218
	void AuthorityOnCharacterCombatStateChanged(bool bIsInCombat);// 0x54855a0

--------------------------------
Class: VATMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	<FName,VATAnimDefinition> AnimationDefinitions;//[Offset: 0x4f0, Size: 0x50]
	bool bHideWhenStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	bool bDeactivateWhenStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1]
	bool bPlayStartupAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x542, Size: 0x1]
	FName StartupAnimation;//[Offset: 0x544, Size: 0x8]
	void StopAnimation();// 0x55ae37c
	void Restart();// 0x55ae398
	bool RecentlyPlayedAnimation(out const FName AnimName);// 0x55ae5e8
	void PlayAnimation(out const FName AnimName);// 0x55ae6a8
	void PauseAnimation(bool bDesiredPause);// 0x55ae3b4
	bool IsPlayingAnimation(out const FName AnimName);// 0x55ae528
	void EnsurePlayingAnimation(out const FName AnimName);// 0x55ae46c

--------------------------------
Class: VATAnimDefinition
	float CurrentTimeline;//[Offset: 0x0, Size: 0x4]
	bool bControlTimeline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	FName TimelineParameterName;//[Offset: 0x8, Size: 0x8]
	FName FirstFrameGameTimeParameterName;//[Offset: 0x10, Size: 0x8]
	FName DisplayFrameName;//[Offset: 0x18, Size: 0x8]
	int HoudiniFPS;//[Offset: 0x20, Size: 0x4]
	float TimelineStartValue;//[Offset: 0x24, Size: 0x4]
	float Duration;//[Offset: 0x28, Size: 0x4]
	float TimelineEndValue;//[Offset: 0x2c, Size: 0x4]
	StaticMesh* VATMesh;//[Offset: 0x30, Size: 0x8]
	int VATMaterialElementID;//[Offset: 0x38, Size: 0x4]
	MaterialInstance* VATMaterial;//[Offset: 0x40, Size: 0x8]
	bool bPlayNextAnimationOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FName NextAnimation;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: BlueprintTickFunction.TickFunction
	ODCharacter* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InteractionTickFunction.TickFunction
	ODCharacter* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CharacterSignificanceFideltyTickFunction.TickFunction
	ODCharacter* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RepVehicleSeatAttachment
	VehicleSeatComponent* AttachComponent;//[Offset: 0x0, Size: 0x8]
	Vector WorldLocation;//[Offset: 0x8, Size: 0xc]
	Rotator WorldRotation;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: RepCharacterAnimMontage
	enum Type;//[Offset: 0x0, Size: 0x1]
	float PlayRate;//[Offset: 0x4, Size: 0x4]
	uint32 PlayedAtFrameID;//[Offset: 0x8, Size: 0x4]
	FName SectionName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: PendingReviveInfo
	bool bHasPendingRevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Controller* Instigator;//[Offset: 0x8, Size: 0x8]
	float StartingHealthFraction;//[Offset: 0x10, Size: 0x4]
	bool bApplyInitialHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	HealingSource InitialHealing;//[Offset: 0x18, Size: 0x40]

--------------------------------
Class: SoldierMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Soldier* CharacterOwner;//[Offset: 0x158, Size: 0x8]
	float GravityScale;//[Offset: 0x160, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x164, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x168, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x16c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x170, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x174, Size: 0x4]
	enum MovementMode;//[Offset: 0x178, Size: 0x1]
	enum CustomMovementMode;//[Offset: 0x179, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x17a, Size: 0x1]
	float GroundFriction;//[Offset: 0x17c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1a0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1a4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x1a8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x1ac, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1b0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1b4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1b8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1bc, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1c0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1c4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1c8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1cc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1d0, Size: 0x4]
	float AirControl;//[Offset: 0x1d4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1d8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1dc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1e0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1e4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1e8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1ec, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1f0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1f4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x201, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x201, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x202, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x202, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x202, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x202, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x202, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x202, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x202, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x208, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x210, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x214, Size: 0x4]
	float Mass;//[Offset: 0x218, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x21c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x220, Size: 0x4]
	float PushForceFactor;//[Offset: 0x224, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x228, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x22c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x230, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x234, Size: 0x4]
	float RepulsionForce;//[Offset: 0x238, Size: 0x4]
	Vector2D MoveInputVector;//[Offset: 0x23c, Size: 0x8]
	Vector Acceleration;//[Offset: 0x244, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x250, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x260, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x26c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x278, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x27c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x280, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x284, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x290, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x29c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x2ac, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2b0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2b4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2b8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2bc, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2c0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2c4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2c8, Size: 0x4]
	float NetworkSimulatedZeroVelocityExponentialSmoothLocationTime;//[Offset: 0x2cc, Size: 0x4]
	float NetworkSimulatedNonZeroVelocityExponentialSmoothLocationTime;//[Offset: 0x2d0, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2d4, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2d8, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2dc, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2e0, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2e4, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2e8, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2ec, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2f0, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2f4, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2f8, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2fc, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x300, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x304, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x308, Size: 0x94]
	enum DefaultLandMovementMode;//[Offset: 0x39c, Size: 0x1]
	enum DefaultWaterMovementMode;//[Offset: 0x39d, Size: 0x1]
	enum GroundMovementMode;//[Offset: 0x39e, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39f, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39f, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39f, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39f, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39f, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39f, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39f, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39f, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a0, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a0, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a0, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3a0, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3a0, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3a0, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a1, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a1, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a1, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a1, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a1, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3a1, Size: 0x1]
	enum SoldierMovementSimulationType;//[Offset: 0x3a2, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a3, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a3, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a3, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a3, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3a3, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3a3, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3b4, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3b8, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3c4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3c8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3cc, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3d0, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3d4, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3d8, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x488, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x48c, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x490, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x494, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x498, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x49c, Size: 0x4]
	SoldierMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4a0, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4e8, Size: 0x4]
	ODRootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4f0, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5c0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x600, Size: 0xc]
	SoldierMovementFullState* SynchronizedState;//[Offset: 0x638, Size: 0x8]
	<AnimMontage*> IgnoredRootMotionMontages;//[Offset: 0x650, Size: 0x50]
	float TimeSinceLastStanceChange;//[Offset: 0x6a0, Size: 0x4]
	float MinimumTimeBetweenStanceChanges;//[Offset: 0x6a4, Size: 0x4]
	delegate OnTraversalFlagsChanged;//[Offset: 0x6a8, Size: 0x10]
	delegate OnAerialStateChanged;//[Offset: 0x6d0, Size: 0x10]
	delegate OnStartTraversal;//[Offset: 0x6e0, Size: 0x10]
	delegate OnFinishTraversal;//[Offset: 0x6f0, Size: 0x10]
	ODCharacterCapsule* Capsule;//[Offset: 0x700, Size: 0x8]
	float MaxWalkSpeedProne;//[Offset: 0x708, Size: 0x4]
	float MaxWalkSpeedSprint;//[Offset: 0x70c, Size: 0x4]
	float MinDotProductForSprint;//[Offset: 0x710, Size: 0x4]
	float RunSpeedMultiplier;//[Offset: 0x714, Size: 0x4]
	float SurfaceAlignmentAngularDistanceDegreesMax;//[Offset: 0x718, Size: 0x4]
	float MaxCharacterSurfaceAngularDistanceDotProduct;//[Offset: 0x71c, Size: 0x4]
	float MaxCrouchStepHeight;//[Offset: 0x720, Size: 0x4]
	float MaxProneStepHeight;//[Offset: 0x724, Size: 0x4]
	enum RepCurrentStance;//[Offset: 0x728, Size: 0x1]
	float MinSpeedForFootsteps;//[Offset: 0x72c, Size: 0x4]
	float HighestFootstepHz;//[Offset: 0x730, Size: 0x4]
	float LowestFootstepHz;//[Offset: 0x734, Size: 0x4]
	<byte,FootstepDecalInfo> FootstepFloorDecalsBySurface;//[Offset: 0x738, Size: 0x50]
	<byte,ParticleSystem*> FootstepFloorParticlesBySurface;//[Offset: 0x788, Size: 0x50]
	<byte,AkAudioEvent*> FootstepAudioEventsBySurface;//[Offset: 0x7d8, Size: 0x50]
	AkAudioEvent* GenericFootstepAudio;//[Offset: 0x828, Size: 0x8]
	float TargetJumpApex;//[Offset: 0x838, Size: 0x4]
	float JumpPenaltyMaxSpeedMultiplier;//[Offset: 0x83c, Size: 0x4]
	float JumpPenaltyTime;//[Offset: 0x840, Size: 0x4]
	float CurrentJumpWalkSpeedPenalty;//[Offset: 0x844, Size: 0x4]
	float ClimbEnterCheckDistance;//[Offset: 0x860, Size: 0x4]
	float LadderYawConstraintAngle;//[Offset: 0x864, Size: 0x4]
	float LadderClimbSpeed;//[Offset: 0x868, Size: 0x4]
	float LadderDescendSpeed;//[Offset: 0x86c, Size: 0x4]
	float TimeSinceEnteredClimb;//[Offset: 0x870, Size: 0x4]
	float TimeUntilUserControlsLadder;//[Offset: 0x874, Size: 0x4]
	float HalfGripWidth;//[Offset: 0x878, Size: 0x4]
	Vector LeftHandGrabPoint;//[Offset: 0x87c, Size: 0xc]
	Vector RightHandGrabPoint;//[Offset: 0x888, Size: 0xc]
	float MinimumHeightForFreefall;//[Offset: 0x894, Size: 0x4]
	float MinFallVelocityForSkydive;//[Offset: 0x898, Size: 0x4]
	float FreefallGracePeriodDuration;//[Offset: 0x89c, Size: 0x4]
	float FreefallGracePeriodTimer;//[Offset: 0x8a0, Size: 0x4]
	float FlightMaxYaw;//[Offset: 0x8a4, Size: 0x4]
	float AerialEquipmentThrustAcceleration;//[Offset: 0x8a8, Size: 0x4]
	float AirDensity;//[Offset: 0x8ac, Size: 0x4]
	float WingArea;//[Offset: 0x8b0, Size: 0x4]
	float FlightCoefficientFrontalDrag;//[Offset: 0x8b4, Size: 0x4]
	float FlightCoefficientVerticalDrag;//[Offset: 0x8b8, Size: 0x4]
	float FlightCoefficientSideDrag;//[Offset: 0x8bc, Size: 0x4]
	float ParachuteDeployTime;//[Offset: 0x8c0, Size: 0x4]
	float ParachuteCollapseTime;//[Offset: 0x8c4, Size: 0x4]
	CurveFloat* ParachuteEffectivenessCurve;//[Offset: 0x8c8, Size: 0x8]
	float MaxDeployedParachuteAirSpeed;//[Offset: 0x8d0, Size: 0x4]
	float MaxFlightFallVelocity;//[Offset: 0x8d4, Size: 0x4]
	float AirfoilCoefficientScalar;//[Offset: 0x8d8, Size: 0x4]
	float MaxParachuteYawDegrees;//[Offset: 0x8dc, Size: 0x4]
	float AngleOfAttackScale;//[Offset: 0x8e0, Size: 0x4]
	float ParachuteBankScale;//[Offset: 0x8e4, Size: 0x4]
	float ParachuteThrottleScale;//[Offset: 0x8e8, Size: 0x4]
	float ParachuteBrakeScale;//[Offset: 0x8ec, Size: 0x4]
	float FulcrumOffsetSoldierMovement;//[Offset: 0x8f0, Size: 0x4]
	float MaxPitchChangePerSecond;//[Offset: 0x8f4, Size: 0x4]
	float MaxYawChangePerSecond;//[Offset: 0x8f8, Size: 0x4]
	float MaxRollChangePerSecond;//[Offset: 0x8fc, Size: 0x4]
	bool bDrawGlideDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 0x1]
	float GlideDrawDebugTime;//[Offset: 0x904, Size: 0x4]
	float TimeSinceParachuteEnter;//[Offset: 0x908, Size: 0x4]
	float TimeSinceParachuteExit;//[Offset: 0x90c, Size: 0x4]
	enum AerialState;//[Offset: 0x910, Size: 0x1]
	Rotator LastParachuteRotation;//[Offset: 0x914, Size: 0xc]
	Rotator AerialRotation;//[Offset: 0x920, Size: 0xc]
	float MinTimeBetweenCrouchProneChecks;//[Offset: 0x92c, Size: 0x4]
	float TimeSinceLastCrouchProneCheck;//[Offset: 0x930, Size: 0x4]
	bool bAutomaticTraversals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x934, Size: 0x1]
	bool bCanWalkOffLedgesWhenProne;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x934, Size: 0x1]
	bool bWantsToProne;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x934, Size: 0x1]
	bool bProneMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x934, Size: 0x1]
	bool bWantsToSprint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x934, Size: 0x1]
	bool bWantsTraversal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x934, Size: 0x1]
	bool bWantsAerialMovement;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x934, Size: 0x1]
	enum UserCanTriggerVaultType;//[Offset: 0x935, Size: 0x1]
	bool bIsStandAllowedRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x936, Size: 0x1]
	bool bIsCrouchAllowedRightNow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x936, Size: 0x1]
	bool bIsProneAllowedRightNow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x936, Size: 0x1]
	bool bFreefalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x936, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x936, Size: 0x1]
	bool bIsMantling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x936, Size: 0x1]
	bool bIsVaulting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x936, Size: 0x1]
	bool bIsHighstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x936, Size: 0x1]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x948, Size: 0x8]
	enum PendingMontageType;//[Offset: 0x950, Size: 0x1]
	enum LastSeenClientMovementMode;//[Offset: 0x951, Size: 0x1]
	enum LastSeenClientCustomMovementMode;//[Offset: 0x952, Size: 0x1]
	CheckStartTraverseHelper CheckStartTraverseHelper;//[Offset: 0x958, Size: 0x100]
	TraversalMovementHelper TraversalMovementHelper;//[Offset: 0xa58, Size: 0xf8]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 0x1]
	TraversalMovementState LastSimulatedTraversalMovementState;//[Offset: 0xb54, Size: 0x20]
	TurnInPlaceMovementHelper TurnInPlaceMovementHelper;//[Offset: 0xb78, Size: 0x60]
	bool bPushAgainstWallInProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 0x1]
	float ProneWallPushDistance;//[Offset: 0xbdc, Size: 0x4]
	CurveFloat* ProneWallPushDistanceToMinSpeed;//[Offset: 0xbe0, Size: 0x8]
	Vector DeathLocationDelta;//[Offset: 0xbe8, Size: 0xc]
	bool bShouldApplyDeathGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf4, Size: 0x1]
	float TraversalFloorDistanceCheck;//[Offset: 0xbf8, Size: 0x4]
	bool bDisableVelocityBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbfc, Size: 0x1]
	float DisableVelocityBrakingTime;//[Offset: 0xc00, Size: 0x4]
	float DisableVelocityBrakingTimerCurrent;//[Offset: 0xc04, Size: 0x4]
	StanceChangeHelper StanceChangeHelper;//[Offset: 0xc08, Size: 0x28]
	int CurrentCommandId;//[Offset: 0xc30, Size: 0x4]
	void TryExecuteTraversal();// 0x55821f4
	void SetWantsTraversal(bool bInWantsTraversal);// 0x5582068
	void SetWantsAerialMovement(bool bInWantsAerialMovement);// 0x5581f98
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x55829d0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x5582aac
	void SetMovementMode(enum NewMovementMode, enum NewCustomMode);// 0x55832d4
	void SetIsPlayingTurnInPlaceAnimation();// 0x5581e24
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x558349c
	void SetGroupsToIgnore(int GroupFlags);// 0x5583550
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x55835f8
	void SetGroupsToAvoid(int GroupFlags);// 0x55836ac
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x5583754
	void SetAvoidanceGroup(int GroupFlags);// 0x5583808
	void SetAvoidanceEnabled(bool bEnable);// 0x55833ec
	void OnRep_Stance(enum LastStance);// 0x5581d08
	bool ODIsWalking();// 0x5581db0
	float K2_GetWalkableFloorZ();// 0x5582a78
	float K2_GetWalkableFloorAngle();// 0x5582b54
	float K2_GetModifiedMaxAcceleration();// 0x5582f88
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x55828a0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x5582690
	bool IsWalking();// 0x5583294
	bool IsWalkable(out const HitResult Hit);// 0x5582b88
	bool IsVaulting();// 0x5582298
	bool IsStanding();// 0x558231c
	bool IsSprinting();// 0x558235c
	bool IsProne();// 0x55822d8
	bool IsMantling();// 0x55822b8
	bool IsHighstepping();// 0x5582278
	bool IsGliding();// 0x55823b4
	bool IsFreeFalling();// 0x55823ec
	bool IsClimbing();// 0x558237c
	void HandleTurnInPlace(float AimYaw, float DeltaTime);// 0x5581e38
	bool HandleMantle(bool bManual);// 0x5582138
	bool GetWantsTraversal();// 0x5582118
	bool GetWantsAerialMovement();// 0x5582048
	float GetValidPerchRadius();// 0x5582c6c
	enum GetStance();// 0x5581f28
	float GetPerchRadiusThreshold();// 0x5582ca0
	enum GetMovementMode();// 0x5581f7c
	PrimitiveComponent* GetMovementBase();// 0x5583244
	float GetMinAnalogSpeed();// 0x5582fc4
	float GetMaxJumpHeightWithJumpTime();// 0x5583000
	float GetMaxJumpHeight();// 0x558303c
	float GetMaxBrakingDeceleration();// 0x5582f10
	float GetMaxAcceleration();// 0x5582f4c
	Vector GetLastUpdateVelocity();// 0x55838b0
	Rotator GetLastUpdateRotation();// 0x55838d8
	Vector GetLastUpdateLocation();// 0x5583914
	Vector GetImpartedMovementBaseVelocity();// 0x5583204
	float GetFreefallGracePeriodDuration();// 0x558240c
	enum GetCustomMovementMode();// 0x5581f60
	Vector GetCurrentAcceleration();// 0x5582ed8
	Soldier* GetCharacterOwner();// 0x55833d0
	float GetAnalogInputModifier();// 0x5582ea4
	enum GetAerialState();// 0x5582428
	void EnableTurnInPlaceControlsRotation();// 0x5581dfc
	void DisableTurnInPlaceControlsRotation();// 0x5581de8
	void DisableMovement();// 0x5583278
	void ClearIsPlayingTurnInPlaceAnimation();// 0x5581e10
	void ClearAccumulatedForces();// 0x5582e88
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5582444
	bool CanStandInCurrentPosition();// 0x5582240
	bool CanProneInCurrentState();// 0x5582208
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x5583078
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x5582d84
	void AddForce(Vector Force);// 0x5582cd4

--------------------------------
Class: SoldierMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: ODRootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: SoldierMovementFullState.Object
	SoldierMovementMinimalState State;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoldierMovementMinimalState
	bool bRootMotionMontageCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte MovementMode;//[Offset: 0x1, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	CharacterClimbState ClimbState;//[Offset: 0x28, Size: 0x20]
	SoldierMovementComponent* Owner;//[Offset: 0x48, Size: 0x8]
	float RootMotionTrackPosition;//[Offset: 0x50, Size: 0x4]
	enum CurrentAimStance;//[Offset: 0x54, Size: 0x1]
	enum PrevAimStance;//[Offset: 0x55, Size: 0x1]
	int StanceChangeStartCommandId;//[Offset: 0x58, Size: 0x4]
	TraversalMovementState TraversalMovementState;//[Offset: 0x5c, Size: 0x20]
	Rotator AerialRotation;//[Offset: 0x7c, Size: 0xc]

--------------------------------
Class: TraversalMovementState
	enum CurrentTraverseAnimationType;//[Offset: 0x0, Size: 0x1]
	Vector WorldRiseDeltaLocation;//[Offset: 0x4, Size: 0xc]
	Vector WorldSweepDeltaLocation;//[Offset: 0x10, Size: 0xc]
	float CurrentTraversalTimeSeconds;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: FootstepDecalInfo
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	Vector Size;//[Offset: 0x8, Size: 0xc]
	float LifeSpan;//[Offset: 0x14, Size: 0x4]
	float FadeDelay;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CheckStartTraverseHelper
	float TimeAfterStanceChangeForTraversals;//[Offset: 0x0, Size: 0x4]
	float FirstTraversalCheckDistance;//[Offset: 0xa0, Size: 0x4]
	float TraversalMinTraversalSpeed;//[Offset: 0xa4, Size: 0x4]
	float TraversalForwardSpeedScaleMin;//[Offset: 0xa8, Size: 0x4]
	float TraversalForwardSpeedScaleMax;//[Offset: 0xac, Size: 0x4]
	float FirstTraversalCheckRadius;//[Offset: 0xb0, Size: 0x4]
	float FirstTraversalCheckCapsuleHalfHeight;//[Offset: 0xb4, Size: 0x4]
	float FirstTraversalCheckZOffset;//[Offset: 0xb8, Size: 0x4]
	float MinVaultingHeight;//[Offset: 0xbc, Size: 0x4]
	float MaxVaultingHeight;//[Offset: 0xc0, Size: 0x4]
	float MaxMantlingHeight;//[Offset: 0xc4, Size: 0x4]
	float MidAirMaxMantleHeightFromFoot;//[Offset: 0xc8, Size: 0x4]
	float MaxHighStepHeightFromFoot;//[Offset: 0xcc, Size: 0x4]
	float VaultTestPenetrationAmount;//[Offset: 0xd0, Size: 0x4]
	float VaultHeightDifferenceTolerance;//[Offset: 0xd4, Size: 0x4]
	float MantleFloorHeightDifference;//[Offset: 0xd8, Size: 0x4]
	float MantleTestPenetrationAmount;//[Offset: 0xdc, Size: 0x4]
	float WindowStartTestZOffsetFromFoot;//[Offset: 0xe0, Size: 0x4]
	float ObstructionSweepSize;//[Offset: 0xe4, Size: 0x4]
	float TraversalMaxViewAngleDotProduct;//[Offset: 0xe8, Size: 0x4]
	float TraversalMaxSlopeAngleZComponent;//[Offset: 0xec, Size: 0x4]
	float TraversalJoystickAngleDotProduct;//[Offset: 0xf0, Size: 0x4]
	float MinMoveInputVectorDistanceForTraversalSq;//[Offset: 0xf4, Size: 0x4]
	bool bDrawTraversalDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bCanEverMantle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 0x1]
	bool bCanEverVault;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf9, Size: 0x1]
	float RiseBeginDistance;//[Offset: 0xfc, Size: 0x4]

--------------------------------
Class: TraversalMovementHelper
	TraversalMovementDefinition VaultMovementDefinition;//[Offset: 0x0, Size: 0x30]
	TraversalMovementDefinition MantleMovementDefinition;//[Offset: 0x30, Size: 0x30]
	TraversalMovementDefinition HighstepMovementDefinition;//[Offset: 0x60, Size: 0x30]
	float MaxTraversalTimeSeconds;//[Offset: 0x90, Size: 0x4]
	AnimMontage* CurrentTraversalRootMotionMontage;//[Offset: 0x98, Size: 0x8]
	Vector LocalRiseRootMotionScale;//[Offset: 0xa0, Size: 0xc]
	Vector LocalRiseLerpVelocity;//[Offset: 0xac, Size: 0xc]
	Vector LocalSweepRootMotionScale;//[Offset: 0xb8, Size: 0xc]
	Vector LocalSweepLerpVelocity;//[Offset: 0xc4, Size: 0xc]
	float TraverseRotationYaw;//[Offset: 0xd0, Size: 0x4]
	float MontagePlayRate;//[Offset: 0xd4, Size: 0x4]
	TraversalMovementState TraversalMovementState;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: TraversalMovementDefinition
	AnimMontage* RootMotionAnimMontage;//[Offset: 0x0, Size: 0x8]
	float PercentPlayLength;//[Offset: 0x8, Size: 0x4]
	enum MontageType;//[Offset: 0xc, Size: 0x1]
	enum CapsulePose;//[Offset: 0xd, Size: 0x1]
	Vector ExitTraversalVelocityAddition;//[Offset: 0x10, Size: 0xc]
	float RiseTimeSeconds;//[Offset: 0x1c, Size: 0x4]
	float TraversalTimeSeconds;//[Offset: 0x20, Size: 0x4]
	CurveVector* SweepCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TurnInPlaceMovementHelper
	float MinTurn;//[Offset: 0x0, Size: 0x4]
	float MaxTurn;//[Offset: 0x4, Size: 0x4]
	float StartTurnThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxTurnAcceleration;//[Offset: 0xc, Size: 0x4]
	float PercentOfTurnToAllowSpeedChanges;//[Offset: 0x10, Size: 0x4]
	BlendSpaceBase* StandLeftBlendSpace;//[Offset: 0x18, Size: 0x8]
	BlendSpaceBase* StandRightBlendSpace;//[Offset: 0x20, Size: 0x8]
	BlendSpaceBase* CrouchLeftBlendSpace;//[Offset: 0x28, Size: 0x8]
	BlendSpaceBase* CrouchRightBlendSpace;//[Offset: 0x30, Size: 0x8]
	BlendSpaceBase* ProneLeftBlendSpace;//[Offset: 0x38, Size: 0x8]
	BlendSpaceBase* ProneRightBlendSpace;//[Offset: 0x40, Size: 0x8]
	enum CurrentTurnInPlaceType;//[Offset: 0x48, Size: 0x1]
	bool bIsPlayingTurnInPlaceAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	float PercentTime;//[Offset: 0x4c, Size: 0x4]
	float PercentMovement;//[Offset: 0x50, Size: 0x4]
	float Speed;//[Offset: 0x54, Size: 0x4]
	bool bTurnInPlaceControlsRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: StanceChangeHelper
	enum PreviousStance;//[Offset: 0x0, Size: 0x1]
	enum CurrentStance;//[Offset: 0x1, Size: 0x1]
	int StanceChangeStartCommandId;//[Offset: 0x4, Size: 0x4]
	float CurrentStanceChangeTime;//[Offset: 0x8, Size: 0x4]
	float StanceChangeAlpha;//[Offset: 0xc, Size: 0x4]
	float StandToProneTime;//[Offset: 0x10, Size: 0x4]
	float StandToCrouchTime;//[Offset: 0x14, Size: 0x4]
	float CrouchToStandTime;//[Offset: 0x18, Size: 0x4]
	float CrouchToProneTime;//[Offset: 0x1c, Size: 0x4]
	float ProneToStandTime;//[Offset: 0x20, Size: 0x4]
	float ProneToCrouchTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: ODSimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	ODRepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: ODRepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	ODRootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: CharacterDamagedAudioData
	float LastVehicleDamageTime_31_A0936A4D41E40273A4C3579F7E650A43;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* VehicleDamageAudio_30_F9034EB541147D3652F7B9BD3CA969C0;//[Offset: 0x8, Size: 0x8]
	float VehicleDamageAudioMinDelay_32_2EAFBB7B49231F29E87E84B5EC84BBF7;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CharacterCollisionAudioData
	float LastFriendlyVehicleCollisionTime_26_75D188F845653B5B12303E9C4B3A2241;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* RunoverFriendlyVehicleAudio_27_BF85E7FA41BAA7678C47228B06D18CB1;//[Offset: 0x8, Size: 0x8]
	float LastEnemyVehicleCollisionTime_28_A0936A4D41E40273A4C3579F7E650A43;//[Offset: 0x10, Size: 0x4]
	AkAudioEvent* RunoverEnemyVehicleAudio_29_F9034EB541147D3652F7B9BD3CA969C0;//[Offset: 0x18, Size: 0x8]
	float CollisionAudioMinDelay_20_2EAFBB7B49231F29E87E84B5EC84BBF7;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ODCharacterMovementComponent.SoldierMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object

--------------------------------
Class: ImpactCameraFade
	bool bApplyCameraFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float FadeStartAlpha;//[Offset: 0x4, Size: 0x4]
	float FadeEndAlpha;//[Offset: 0x8, Size: 0x4]
	LinearColor FadeColor;//[Offset: 0xc, Size: 0x10]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	CameraActionParams FadeParams;//[Offset: 0x20, Size: 0x28]
	CurveFloat* DistanceFalloff;//[Offset: 0x48, Size: 0x8]
	CurveFloat* AngleFalloff;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ODControllerDefaultsDataAsset.DataAsset.Object
	class AimAssistModifier* AimAssistModifierClass;//[Offset: 0x30, Size: 0x8]
	ODAimAssistData DefaultPlayerAimAssistData;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ODAimAssistData
	DataTable* AimAssistCSV;//[Offset: 0x0, Size: 0x8]
	int AimAssistPriority;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PrimaryPawnPrespawn
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	int PrespawnCount;//[Offset: 0x30, Size: 0x4]
	float PrespawnGameTime;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ODCheatManager.CheatManager.Object
	delegate OnToggleCombatPlayerHud;//[Offset: 0xa8, Size: 0x10]
	ODCheatWidget* CheatUIWidget;//[Offset: 0xb8, Size: 0x8]
	VehicleDebugWidget* VehicleDebugWidget;//[Offset: 0xc0, Size: 0x8]
	<FName,class EquipmentActor> ValidEquipmentToGive;//[Offset: 0xc8, Size: 0x50]
	TouchInterface* DebugCameraTouchInterface;//[Offset: 0x118, Size: 0x8]
	class ODCheatWidget* UIWidgetClass;//[Offset: 0x120, Size: 0x8]
	class VehicleDebugWidget* VehicleDebugWidgetClass;//[Offset: 0x128, Size: 0x8]
	bool bBottomlessClipEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bInfiniteMagazinesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	bool bShouldVisualizeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1]
	bool bShouldInstagib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133, Size: 0x1]
	bool bJesusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	bool bDestructionPlayTestOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1]
	bool bPlayerIsViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1]
	bool bDebugCameraControlsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x137, Size: 0x1]
	enum CurrentMovementMode;//[Offset: 0x138, Size: 0x1]
	bool bShowPlayerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool bShowEquipmentEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	void UnequipCurrentWeapon();// 0x5490f98
	void TriggerAssert();// 0x549011c
	void ToggleVehicleDebugWidget();// 0x548f8e8
	void ToggleNetProfile();// 0x548fd64
	void ToggleDebugCameraControl();// 0x548f9c4
	void ToggleHud();// 0x548fbf4
	void ToggleCheatsUI();// 0x5491710
	void TeleportTo(out const Vector Location, out const Rotator Rotation);// 0x5490360
	void StopwatchUpdate(float TimeValue);// 0x5490908
	void StopwatchStop();// 0x54908f4
	void StopwatchStart(bool bShowCentiseconds, FString Label);// 0x54909b0
	void StopwatchClear();// 0x54908e0
	void StartHeroDestruction();// 0x54902a4
	void StartActivity(out const FName ActivityName);// 0x5490b74
	void SkipToSector(int SectorNum);// 0x549069c
	void SkipOnboarding();// 0x5490aac
	void ShowPlayer();// 0x548f8d4
	void ShowEquipment();// 0x548f7f4
	void SetUseTerritoryConflict(const bool bShouldUse);// 0x548fe58
	void SetShowPlayer(bool bIsShowPlayerEnabled);// 0x548f824
	void SetShowEquipment(bool bIsShowEquipmentEnabled);// 0x548f744
	void SetMetaServerLoadout(int LoadoutIndex);// 0x54902b8
	void SetLiveDataVersionOverride(FString LiveDataVersion);// 0x548f910
	void SetJesusMode(bool bEnableJesus);// 0x548fb30
	void SetJesusHealth(float NewJesusHealthAsDecimalPercentage);// 0x548fa88
	void SetInstagib(bool bAllowOneHitKills);// 0x5490504
	void SetInfiniteMagazines(bool bIsInfiniteMagazinesEnabled);// 0x5491430
	void SetHealth(float NewHealth);// 0x549045c
	void SetDestructionPlayTestMode(bool bDestructionPlayTestEnabled);// 0x549159c
	void SetCurrencyValue(FString CurrencyInventoryID, int64 Value);// 0x5490fac
	void SetBottomlessClip(bool bIsBottomlessClipEnabled);// 0x549164c
	void SetAllowLateJoin(bool bAllowLateJoin);// 0x548ff58
	void ServerWalk();// 0x548e408
	void ServerUnequipCurrentWeapon();// 0x548ea30
	void ServerToggleNetProfile();// 0x548e0d4
	void ServerTeleportTo(const Vector Location, const Rotator Rotation);// 0x548f5fc
	void ServerStartHeroDestruction();// 0x548e350
	void ServerSkipToSector(int SectorNum);// 0x54905b4
	void ServerSetVisualizeAim(bool bInShouldVisualizeAim);// 0x548e93c
	void ServerSetUseTerritoryConflict(bool bShouldUse);// 0x548e610
	void ServerSetLiveVersionOverride(FString LiveDataVersion);// 0x548dd70
	void ServerSetJesusHealth(float NewJesusHealth);// 0x548f05c
	void ServerSetJesus(bool bIsJesusEnabled);// 0x548f144
	void ServerSetInstagib(bool bAllowOneHitKills);// 0x548f320
	void ServerSetInfiniteMagazines(bool bIsInfiniteMagazinesEnabled);// 0x548f414
	void ServerSetHealth(float NewHealth);// 0x548f238
	void ServerSetDestructionPlayTestMode(bool bDestructionPlayTestEnabled);// 0x548e51c
	void ServerSetCurrencyValue(FString CurrencyContentId, int64 Value);// 0x548ee38
	void ServerSetBottomlessClip(bool bIsBottomlessClipEnabled);// 0x548f508
	void ServerSetAllowLateJoin(bool bAllowLateJoin);// 0x548e848
	void ServerJumpToBootcampStage(const FName BootcampStage);// 0x54907f8
	void ServerGod();// 0x548e4c0
	void ServerGiveMagazines(int count);// 0x548ef74
	void ServerGiveEquipmentWithLoadout(EquipmentLoadoutData LoadoutData);// 0x548ea8c
	void ServerGhost();// 0x548e3ac
	void ServerForceStartMatch();// 0x548e7ec
	void ServerForceEndGame(enum MatchResult);// 0x548e704
	void ServerFly();// 0x548e464
	void ServerDisableCharacterMovement();// 0x5490130
	void ServerDestroyPercent(int Percentage);// 0x548e268
	void ServerDestroyDestructible(const FName DestructibleActorNamePrefix, const FName DestructibleBrickNamePrefix);// 0x548e130
	void ServerBugIt(FString ThreadReplyId);// 0x549001c
	void ServerAddWeaponXp(const int XpTpAdd, FString WeaponContentId);// 0x548de5c
	void ServerAddPlayerXp(const int XpTpAdd, FString CurrentPlayerID);// 0x548df98
	void Player.Reset();// 0x5490008
	void ResetCompletedGameActivities();// 0x5490cdc
	void RequestRefreshRate(int RefreshRateHz);// 0x5490cf0
	void ReportBug();// 0x548dd5c
	void ProfileIt(int SecondsToProfile);// 0x548fcbc
	void LogGameSpecificBugIt();// 0x5490108
	void JumpToStage(out const FName BootcampStage);// 0x5490744
	void Jesus();// 0x548fbe0
	void InfiniteMagazines();// 0x54914e0
	void GiveMagazines(int count);// 0x5491388
	void GiveEquipmentWithLoadoutData(EquipmentLoadoutData LoadoutData);// 0x5491160
	void GiveEquipment(out const FName EquipmentName);// 0x54910ac
	bool GetShowPlayer();// 0x548f808
	bool GetShowEquipment();// 0x548f728
	bool GetShouldVisualizeAim();// 0x548fd78
	bool GetShouldInstagib();// 0x548fd94
	bool GetJesus();// 0x548fdb0
	bool GetInfiniteMagazines();// 0x548fe04
	bool GetDestructionPlayTestMode();// 0x548fe20
	static ODCheatManager* GetCheatManager(Object* WorldContextObject);// 0x548f9e0
	bool GetCanUseWeapons();// 0x548fdcc
	bool GetBottomlessClip();// 0x548fe3c
	void ForceWinNow();// 0x548ff30
	void ForceTieNow();// 0x548ff08
	void ForceStartMatch();// 0x548ff44
	void ForceLoseNow();// 0x548ff1c
	void DumpDevFiles(FString SlackUsername);// 0x548fc08
	void DisableCharacterMovement();// 0x549018c
	void DestroyPercent(int Percentage);// 0x54914f4
	void DestroyDestructible(out const FName DestructibleActorNamePrefix, out const FName DestructibleBrickNamePrefix);// 0x54901a0
	void CompleteDependencies(out const FName ActivityName);// 0x5490c28
	void CompleteActivity(out const FName ActivityName);// 0x5490ac0
	void ClearLiveVersionOverride();// 0x548f8fc
	void BottomlessClip();// 0x54916fc
	void AddWeaponXp(const int XpToAdd, FString WeaponContentId);// 0x5490d98
	void AddPlayerXp(const int XpToAdd, FString TargetPlayerId);// 0x5490e98

--------------------------------
Class: ODCheatWidget.UserWidget.Widget.Visual.Object
	CheckBox* ToggleDebugViewButton;//[Offset: 0x260, Size: 0x8]
	CheckBox* ToggleGhostModeButton;//[Offset: 0x268, Size: 0x8]
	CheckBox* ToggleFlyModeButton;//[Offset: 0x270, Size: 0x8]
	CheckBox* ToggleDebugControlsButton;//[Offset: 0x278, Size: 0x8]
	Button* UpButton;//[Offset: 0x280, Size: 0x8]
	Button* DownButton;//[Offset: 0x288, Size: 0x8]
	class UserWidget* DebugControlsWidgetClass;//[Offset: 0x290, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x298, Size: 0x8]
	ODCheatManager* CheatMgr;//[Offset: 0x2a0, Size: 0x8]
	ODPlayerController* PlayerController;//[Offset: 0x2a8, Size: 0x8]
	UserWidget* DebugControlsWidget;//[Offset: 0x2b8, Size: 0x8]
	void UpdateMovementState(enum NewState);// 0x549b84c
	void UpdateDebugViewState(bool bViewActive);// 0x549b8f4
	void OnShowDebugView(bool bIsChecked);// 0x549b79c
	void OnEnterGhostMode(bool bIsChecked);// 0x549b6ec
	void OnEnterFlyMode(bool bIsChecked);// 0x549b63c
	void OnEnableDebugControls(bool bIsChecked);// 0x549b58c
	void MoveUpEnd();// 0x549b564
	void MoveUpBegin();// 0x549b578
	void MoveDownEnd();// 0x549b53c
	void MoveDownBegin();// 0x549b550

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x119, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x11c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x580]
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b0, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6b8, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c0, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6c8, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d0, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6d8, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e0, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6e8, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f0, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6f8, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x700, Size: 0x1]
	Margin Padding;//[Offset: 0x704, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x718, Size: 0x28]
	byte ClickMethod;//[Offset: 0x740, Size: 0x1]
	byte TouchMethod;//[Offset: 0x741, Size: 0x1]
	byte PressMethod;//[Offset: 0x742, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x743, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x748, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x7280e84
	void SetPressMethod(byte InPressMethod);// 0x7280ddc
	void SetIsChecked(bool InIsChecked);// 0x728107c
	void SetClickMethod(byte InClickMethod);// 0x7280f2c
	void SetCheckedState(enum InCheckedState);// 0x7280fd4
	bool IsPressed();// 0x7281198
	bool IsChecked();// 0x7281160
	enum GetCheckedState();// 0x728112c

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* content);// 0x7284b70
	PanelSlot* GetContentSlot();// 0x7284c20
	Widget* GetContent();// 0x7284b3c

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88]
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88]
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88]
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88]
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88]
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88]
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88]
	Margin Padding;//[Offset: 0x4d8, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278]
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10]
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1]
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1]
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1]
	bool bCheckMultiTouchBeforeRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10]
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10]
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10]
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x727e9f4
	void SetStyle(out const ButtonStyle InStyle);// 0x727eccc
	void SetPressMethod(byte InPressMethod);// 0x727e94c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x727ec24
	void SetClickMethod(byte InClickMethod);// 0x727ea9c
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x727eb7c
	bool IsPressed();// 0x727eb44

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88]
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88]
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18]

--------------------------------
Class: VehicleDebugWidget.UserWidget.Widget.Visual.Object
	ODPlayerController* PlayerController;//[Offset: 0x260, Size: 0x8]
	class VehicleWheelDebugWidget* VehicleWheelDebugWidgetClass;//[Offset: 0x268, Size: 0x8]
	VehicleSeatComponent* CurrentVehicleSeat;//[Offset: 0x270, Size: 0x8]
	ODVehicle* Vehicle;//[Offset: 0x278, Size: 0x8]
	ChassisComponent* ChassisComponent;//[Offset: 0x280, Size: 0x8]
	VehicleWheelDebugWidget*[] WheelDebugWidgets;//[Offset: 0x288, Size: 0x10]
	void ResetWheelDebugWidgets();// 0x55af7fc
	void OnVehicleOccupied(VehicleSeatComponent* VehicleSeat);// 0x59ef218
	void OnPossessedVehicleSeat(VehicleSeatComponent* VehicleSeat);// 0x55af810
	void OnAddWheelToScrollBox(VehicleWheelDebugWidget* WheelDebugWidget);// 0x59ef218
	void ClearWheelScrollBox();// 0x59ef218

--------------------------------
Class: VehicleWheelDebugWidget.UserWidget.Widget.Visual.Object
	WheelComponent* WheelComponent;//[Offset: 0x260, Size: 0x8]
	void OnWheelDebugWidgetInitialized();// 0x59ef218
	void InitializeWheel(WheelComponent* InWheelComponent);// 0x55b7244

--------------------------------
Class: ODPlayerSettingsSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnPlayerSettingsLoaded;//[Offset: 0x30, Size: 0x10]
	delegate OnSaveOnOffToggleComplete;//[Offset: 0x40, Size: 0x10]
	delegate OnSaveBoolSettingComplete;//[Offset: 0x50, Size: 0x10]
	delegate OnSaveFloatSettingComplete;//[Offset: 0x60, Size: 0x10]
	delegate OnSaveRadioSelectComplete;//[Offset: 0x70, Size: 0x10]
	<FString,ODPlayerSettingContainer> UnStructuredConfigSettings;//[Offset: 0x80, Size: 0x50]
	delegate OnRenderingSettingsUpdated;//[Offset: 0xd0, Size: 0x10]
	ProfileSettings_PlayerSettings PlayerSettings;//[Offset: 0xe8, Size: 0x48]
	MetaServerGameConfigSubsystem* GameConfigSubsystem;//[Offset: 0x130, Size: 0x8]
	ODMetaServerSubsystem* MetaServerSubsystem;//[Offset: 0x138, Size: 0x8]
	ODRenderingSettingsSubsystem* RenderingSettingsSubsystem;//[Offset: 0x140, Size: 0x8]
	void UpdateRadioPlayerSetting(out const ProfileSettings_RadioProfileSetting Setting);// 0x5512708
	void UpdateOnOffTogglePlayerSetting(out const ProfileSettings_OnOffToggleProfileSetting OutSetting);// 0x551299c
	void UpdateGlobalVolume(const float VolumeLevel);// 0x5512660
	void UpdateFloatPlayerSetting(out const ProfileSettings_FloatRangeProfileSetting Setting);// 0x55127e4
	void UpdateDataFromRenderingSubsystemSettings(int NewGraphicsQualityTier);// 0x5513768
	void UpdateBoolPlayerSetting(out const ProfileSettings_BoolProfileSetting Setting);// 0x55128c0
	float RoundFloatByMultipleOfNumber(const float Value, const float Multiple);// 0x5512568
	bool HasPlayerUpdatedSetting(FString SettingId);// 0x55136a8
	void HandleSaveRadioSettingHandler(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveRadioSelectSettingResponse response, GrpcStatus Status);// 0x5511c08
	void HandleSaveOnOffCustomSettingHandler(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveOnOffToggleSettingResponse response, GrpcStatus Status);// 0x5512310
	void HandleSaveFloatSettingHandler(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveFloatPlayerSettingResponse response, GrpcStatus Status);// 0x5511e60
	void HandleSaveBoolSettingHandler(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveBoolProfileSettingResponse response, GrpcStatus Status);// 0x55120b8
	void GetPlayerConfigSettingsByCategory(enum Category, out ODPlayerSettingContainer[] InSettings);// 0x55135a0
	bool GetArePlayerSettingsLoaded();// 0x5513848
	ProfileSettings_PlayerConfigSettings GetAllPlayerConfigSettings();// 0x5513810
	bool FindWeaponTypeBoolConfigSetting(const enum WeaponType, const enum Category, out ProfileSettings_WeaponTypeBoolConfigSetting OutConfigSetting);// 0x5512df4
	bool FindRadioSelectConfigSettingById(FString SettingId, out ProfileSettings_RadioSelectConfigSetting OutSetting);// 0x5512a78
	bool FindOnOffToggleConfigSettingById(FString SettingId, out ProfileSettings_OnOffToggleConfigSetting OutSetting);// 0x5513130
	bool FindOnOffToggleConfigCategory(const enum Category, out ProfileSettings_OnOffToggleConfigSetting OutSetting);// 0x5512fa0
	bool FindFloatConfigSettingById(FString SettingId, out ProfileSettings_FloatRangeConfigSetting OutSetting);// 0x55132cc
	bool FindFiringTypeBoolConfigSetting(const enum FiringType, const enum Category, out ProfileSettings_FiringTypeBoolConfigSetting OutConfigSetting);// 0x5512c48
	bool FindBoolConfigSettingById(FString SettingId, out ProfileSettings_BoolConfigSetting OutSetting);// 0x5513438

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: ODPlayerSettingContainer
	FName SettingId;//[Offset: 0x0, Size: 0x8]
	enum PlayerSettingType;//[Offset: 0x8, Size: 0x1]
	bool bDisabledInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	enum Category;//[Offset: 0xa, Size: 0x1]
	int CategoryIndex;//[Offset: 0xc, Size: 0x4]
	enum Editability;//[Offset: 0x10, Size: 0x1]
	ProfileSettings_OnOffToggleConfigSetting ToggleConfigSetting;//[Offset: 0x18, Size: 0x88]
	ProfileSettings_BoolConfigSetting BoolConfigSetting;//[Offset: 0xa0, Size: 0x50]
	ProfileSettings_FloatRangeConfigSetting FloatConfigSetting;//[Offset: 0xf0, Size: 0x60]
	ProfileSettings_RadioSelectConfigSetting RadioConfigSetting;//[Offset: 0x150, Size: 0x60]
	enum WeaponType;//[Offset: 0x1b0, Size: 0x1]
	ProfileSettings_WeaponTypeBoolConfigSetting WeaponTypeConfigSetting;//[Offset: 0x1b8, Size: 0x58]
	enum FiringType;//[Offset: 0x210, Size: 0x1]
	ProfileSettings_FiringTypeBoolConfigSetting FiringTypeConfigSetting;//[Offset: 0x218, Size: 0x58]
	enum ADSMagnitudeMin;//[Offset: 0x270, Size: 0x1]
	bool bDevOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	enum Scope;//[Offset: 0x272, Size: 0x1]

--------------------------------
Class: ProfileSettings_OnOffToggleConfigSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	enum Category;//[Offset: 0x18, Size: 0x1]
	int CategoryDisplayIndex;//[Offset: 0x1c, Size: 0x4]
	enum Editability;//[Offset: 0x20, Size: 0x1]
	FString DisplayName;//[Offset: 0x28, Size: 0x10]
	FString Description;//[Offset: 0x38, Size: 0x10]
	enum DefaultValue;//[Offset: 0x48, Size: 0x1]
	enum Scope;//[Offset: 0x49, Size: 0x1]
	bool bDevOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	FString Option1title;//[Offset: 0x50, Size: 0x10]
	FString Option2title;//[Offset: 0x60, Size: 0x10]
	FString Option3title;//[Offset: 0x70, Size: 0x10]
	enum SubCategory;//[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ProfileSettings_BoolConfigSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	enum Category;//[Offset: 0x18, Size: 0x1]
	int CategoryDisplayIndex;//[Offset: 0x1c, Size: 0x4]
	enum Editability;//[Offset: 0x20, Size: 0x1]
	FString DisplayName;//[Offset: 0x28, Size: 0x10]
	FString Description;//[Offset: 0x38, Size: 0x10]
	bool bDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum Scope;//[Offset: 0x49, Size: 0x1]
	bool bDevOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	enum SubCategory;//[Offset: 0x4b, Size: 0x1]

--------------------------------
Class: ProfileSettings_FloatRangeConfigSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	enum Category;//[Offset: 0x18, Size: 0x1]
	int CategoryDisplayIndex;//[Offset: 0x1c, Size: 0x4]
	enum Editability;//[Offset: 0x20, Size: 0x1]
	FString DisplayName;//[Offset: 0x28, Size: 0x10]
	FString Description;//[Offset: 0x38, Size: 0x10]
	float MinValue;//[Offset: 0x48, Size: 0x4]
	float MaxValue;//[Offset: 0x4c, Size: 0x4]
	float Precision;//[Offset: 0x50, Size: 0x4]
	float DefaultValue;//[Offset: 0x54, Size: 0x4]
	bool bAsPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	enum Scope;//[Offset: 0x59, Size: 0x1]
	bool bDevOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum SubCategory;//[Offset: 0x5b, Size: 0x1]

--------------------------------
Class: ProfileSettings_RadioSelectConfigSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	enum Category;//[Offset: 0x18, Size: 0x1]
	int CategoryDisplayIndex;//[Offset: 0x1c, Size: 0x4]
	enum Editability;//[Offset: 0x20, Size: 0x1]
	FString DisplayName;//[Offset: 0x28, Size: 0x10]
	FString Description;//[Offset: 0x38, Size: 0x10]
	ProfileSettings_RadioOption[] options;//[Offset: 0x48, Size: 0x10]
	int DefaultValue;//[Offset: 0x58, Size: 0x4]
	enum Scope;//[Offset: 0x5c, Size: 0x1]
	bool bDevOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	enum SubCategory;//[Offset: 0x5e, Size: 0x1]

--------------------------------
Class: ProfileSettings_RadioOption.ProtoMessage
	int DisplayIndex;//[Offset: 0x8, Size: 0x4]
	int OptionValue;//[Offset: 0xc, Size: 0x4]
	FString OptionName;//[Offset: 0x10, Size: 0x10]
	FString Desc;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ProfileSettings_WeaponTypeBoolConfigSetting.ProtoMessage
	enum WeaponType;//[Offset: 0x8, Size: 0x1]
	FString SettingId;//[Offset: 0x10, Size: 0x10]
	enum Category;//[Offset: 0x20, Size: 0x1]
	int CategoryDisplayIndex;//[Offset: 0x24, Size: 0x4]
	enum Editability;//[Offset: 0x28, Size: 0x1]
	FString DisplayName;//[Offset: 0x30, Size: 0x10]
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum Scope;//[Offset: 0x51, Size: 0x1]
	bool bDevOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	enum SubCategory;//[Offset: 0x53, Size: 0x1]

--------------------------------
Class: ProfileSettings_FiringTypeBoolConfigSetting.ProtoMessage
	enum FiringType;//[Offset: 0x8, Size: 0x1]
	FString SettingId;//[Offset: 0x10, Size: 0x10]
	enum Category;//[Offset: 0x20, Size: 0x1]
	int CategoryDisplayIndex;//[Offset: 0x24, Size: 0x4]
	enum Editability;//[Offset: 0x28, Size: 0x1]
	FString DisplayName;//[Offset: 0x30, Size: 0x10]
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum Scope;//[Offset: 0x51, Size: 0x1]
	bool bDevOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]

--------------------------------
Class: ProfileSettings_FloatRangeProfileSetting.ProtoMessage
	FString SettingId;//[Offset: 0x8, Size: 0x10]
	float Value;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ProfileSettings_PlayerSettings.ProtoMessage
	ProfileSettings_BoolProfileSetting[] BoolSettings;//[Offset: 0x8, Size: 0x10]
	ProfileSettings_FloatRangeProfileSetting[] FloatSettings;//[Offset: 0x18, Size: 0x10]
	ProfileSettings_OnOffToggleProfileSetting[] OnOffToggleSettings;//[Offset: 0x28, Size: 0x10]
	ProfileSettings_RadioProfileSetting[] RadioSettings;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MetaServerGameConfigSubsystem.GameInstanceSubsystem.Subsystem.Object
	Gameconfiguration_GameConfig GameConfig;//[Offset: 0x48, Size: 0x1458]
	Texture2D* LoadIconForRank(out const PlayerProgression_PlayerRank PlayerRank);// 0x54222bc
	void GetWeaponUnlocksForRank(FString WeaponContentId, const int WeaponRankNumber, out InventoryItemContent[] OutInventoryItemContents);// 0x5422030
	WeaponProgression_WeaponRank2[] GetWeaponRanks();// 0x54223fc
	CurrentWeaponRankInfo GetWeaponRankInfo(FString WeaponContentId, const int CurrentXP);// 0x5422190
	bool GetUnlockedInventoryContentsByWeaponRank(FString WeaponInventoryId, const int WeaponRank, out InventoryItemContent[] OutUnlockedInventoryItemContent);// 0x54217a8
	bool GetUnlockedInventoryContentsByPlayerRank(const int PlayerRank, out <FString,InventoryItemContent> OutUnlockedInventoryItemContent);// 0x542165c
	UnlockedContentPerWeaponRank[] GetUnlockedContentPerWeaponRank(FString WeaponContentId);// 0x5421ed0
	void GetUnlockedContentPerPlayerRankAndClass(FString SoldierClassName, out UnlockedContentPerPlayerRank[] OutUnlockedContentPerPlayerRanks);// 0x5422650
	UnlockedContentPerPlayerRank[] GetUnlockedContentPerPlayerRank();// 0x54227cc
	int GetTotalPointsUnlockedFor(FString WeaponContentId, const int WeaponRankNumber);// 0x5421dc8
	int GetStatIndexForWeaponStatName(FString StatName, out const enum SortList);// 0x5421bb8
	void GetSoldierSpecInventoryIdsBySoldierClass(FString SoldierClssName, out FString[] SoldierSpecInventoryIds);// 0x5422d88
	void GetSoldierSpecializationsBySoldierClass(FString SoldierClassName, out <FString,InventoryItemContent> OutSoldierSpecializations);// 0x5423084
	enum GetSoldierClassByInventoryId(FString InventoryId);// 0x5422fc8
	Gamedata_SocialPlatformSettings GetSocialPlatformSettings();// 0x5421ccc
	int GetPointCostFor(FString WeaponSpecializationContentId);// 0x5421d0c
	void GetPlayerUnlocksForRankAndClass(FString SoldierClassName, const int PlayerRankNumber, out <FString,InventoryItemContent> OutInventoryItemContents);// 0x54228b4
	void GetPlayerUnlocksForRank(const int PlayerRankNumber, out <FString,InventoryItemContent> OutInventoryItemContents);// 0x5422a4c
	PlayerProgression_PlayerRank[] GetPlayerRanks();// 0x5422588
	CurrentPlayerRankInfo GetPlayerRankInfo(const int CurrentXP);// 0x5422b8c
	void GetOrderedStatListNamesByType(out const enum ListType, out FString[] OutSortedNames);// 0x5421914
	void GetOrderedStatListByType(out const enum ListType, out Weapon_WeaponStatSortItem[] OutSortedItems);// 0x5421a58
	WeaponProgression_WeaponRank2 GetMaxWeaponRank();// 0x54223bc
	PlayerProgression_PlayerRank GetMaxPlayerRank();// 0x54224ac
	InventoryItems_InventoryItem GetInventoryItemFor(FString InventoryId);// 0x5424b04
	bool GetGameConfigInitialized();// 0x54213b4
	Gameconfiguration_GameConfig GetGameConfig();// 0x5424fc4
	FString GetDisplayNameByInventoryId(FString InventoryId);// 0x5424a00
	Common_ContentDefinition GetContentDefinitionFor(FString ContentId);// 0x5424c68
	FString GetAssetPathFromContentId_Unsafe(FString ContentId);// 0x5423528
	FString GetAssetPathFromContentId(FString ContentId, enum SlotType);// 0x542362c
	void GetAllSoldierSpecInventoryIds(out FString[] SoldierSpecInventoryIds);// 0x5422ed4
	void GetAllSoldierSpecializations(out <FString,InventoryItemContent> OutSoldierSpecializations);// 0x54231d0
	void GetAllInventoryItemContent(out <FString,InventoryItemContent> InventoryIdToItemContent);// 0x5424900
	void GetAllEquipmentForClassBySlot(FString SoldierClassName, const enum SlotType, out FString[] OutEquipmentList);// 0x54232d0
	bool FindRequiredWeaponRankForUnlockedInventoryId(FString InventoryId, FString WeaponContentId, out int OutRank);// 0x54213d4
	bool FindRequiredPlayerRankForUnlockedInventoryId(FString InventoryId, out int OutRank);// 0x5421544
	bool FindInventoryItemFor(FString InventoryId, out InventoryItems_InventoryItem OutInventoryItem);// 0x54247b4
	InventoryItemContent FindInventoryItemContentFor(FString InventoryId, out bool bSuccess);// 0x5424340
	bool FindInventoryItemContentByInventoryId(FString InventoryId, out InventoryItemContent InventoryItemContent);// 0x54240ac
	bool FindInventoryContentItemByParentAndContentId(FString ContentId, FString AssociatedContentId, out InventoryItemContent OutInventoryItem);// 0x5423dc8
	void FilterInventoryItemContentByTypeSlotMetadataAndProgression(const enum ContentType, const enum Slot, FString TypeMetadata, bool bIncludeEmptyMetadata, bool bExcludeNonProgressionItems, out <FString,InventoryItemContent> OutItemContent);// 0x542377c
	void FilterInventoryItemContentByTypeSlotAndTypeMedata(const enum ContentType, const enum Slot, FString TypeMetadata, bool bIncludeEmptyMetadata, out <FString,InventoryItemContent> OutItemContent);// 0x5423a04
	void FilterInventoryItemContentByTypeAndSlot(const enum ContentType, const enum Slot, out <FString,InventoryItemContent> OutItemContent);// 0x5423c3c
	bool ContainsContentId(FString ContentId);// 0x5423468

--------------------------------
Class: Gameconfiguration_GameConfig.ProtoMessage
	<FString,Gadget_GadgetArsenal> Gadgets;//[Offset: 0x8, Size: 0x50]
	<FString,SoldierClass_SoldierSpecArsenal> SoldierSpecs;//[Offset: 0x58, Size: 0x50]
	Gamedata_Player InitialPlayer;//[Offset: 0xa8, Size: 0x108]
	Gamedata_Profile InitialProfile;//[Offset: 0x1b0, Size: 0xe0]
	<FString,Gamedata_ClassLoadout> InitialClassLoadouts;//[Offset: 0x290, Size: 0x50]
	<FString,Gamedata_ClassAsset> InitialClassAssets;//[Offset: 0x2e0, Size: 0x50]
	<FString,CharacterCosmetics_CharacterCosmeticArsenal> CharacterCosmetics;//[Offset: 0x330, Size: 0x50]
	FString InitialSelectedClass;//[Offset: 0x380, Size: 0x10]
	Weapon_WeaponArsenal Weapons;//[Offset: 0x390, Size: 0x58]
	ProgressionCommon_CombatXpRewards CombatXpRewards;//[Offset: 0x3e8, Size: 0x38]
	PlayerProgression_PlayerRank[] PlayerRanks;//[Offset: 0x420, Size: 0x10]
	ProfileSettings_PlayerConfigSettings ProfileConfigSettings;//[Offset: 0x430, Size: 0xd18]
	Common_ContentDefinitions ContentDefinitions;//[Offset: 0x1148, Size: 0x68]
	ProgressionCommon_ProgressionUnlocks ProgressionUnlocks;//[Offset: 0x11b0, Size: 0xa8]
	WeaponProgression_WeaponRank2[] WeaponRanks;//[Offset: 0x1258, Size: 0x10]
	TutorialProgression_TutorialConfig TutorialConfig;//[Offset: 0x1268, Size: 0x60]
	int64 TermsLastUpdated;//[Offset: 0x12c8, Size: 0x8]
	Gamedata_SocialPlatformSettings SocialPlatformSettings;//[Offset: 0x12d0, Size: 0x10]
	<FString,Gamedata_ClassLoadout> BotLoadouts;//[Offset: 0x12e0, Size: 0x50]
	InventoryItems_InventoryItems InventoryItems;//[Offset: 0x1330, Size: 0x58]
	Weapon_WeaponStatSortingConfig WeaponStatSorting;//[Offset: 0x1388, Size: 0x48]
	Gamedata_MatchFillingFallbackTable MatchFillingFallbackTable;//[Offset: 0x13d0, Size: 0x18]
	Gamedata_MatchFillingFallbackTable MatchConnectionsFallbackTable;//[Offset: 0x13e8, Size: 0x18]
	Gamedata_UIEnterMatchScreenMinTimes UiEnterMatchScreenMinTimes;//[Offset: 0x1400, Size: 0x58]

--------------------------------
Class: Gadget_GadgetArsenal.ProtoMessage
	<FString,Gadget_Gadget> Assets;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Gadget_Gadget.ProtoMessage
	FString AssetId;//[Offset: 0x8, Size: 0x10]
	enum SlotId;//[Offset: 0x18, Size: 0x1]
	Money_Price Price;//[Offset: 0x20, Size: 0x10]
	enum AssetTypeId;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Money_Price.ProtoMessage
	enum Unit;//[Offset: 0x8, Size: 0x1]
	int Value;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoldierClass_SoldierSpecArsenal.ProtoMessage
	<FString,SoldierClass_SoldierSpec> Assets;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: SoldierClass_SoldierSpec.ProtoMessage
	FString AssetId;//[Offset: 0x8, Size: 0x10]
	int Rank;//[Offset: 0x18, Size: 0x4]
	Money_Price Price;//[Offset: 0x20, Size: 0x10]
	FString Name;//[Offset: 0x30, Size: 0x10]
	FString Description;//[Offset: 0x40, Size: 0x10]
	enum AssetTypeId;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: Gamedata_Player.ProtoMessage
	Wrappers_StringValue Name;//[Offset: 0x8, Size: 0x18]
	Gamedata_UIPreference UiPreference;//[Offset: 0x20, Size: 0x28]
	enum MatchmakingRegion;//[Offset: 0x48, Size: 0x1]
	Gamedata_GeoIpLocation GeoIpLocation;//[Offset: 0x50, Size: 0x28]
	Timestamp_Timestamp LastLogin;//[Offset: 0x78, Size: 0x18]
	int64 BetaAcceptDate;//[Offset: 0x90, Size: 0x8]
	int64 TermsAndPrivacyAcceptDate;//[Offset: 0x98, Size: 0x8]
	Timestamp_Timestamp Creation;//[Offset: 0xa0, Size: 0x18]
	Gamedata_PlayerBanData BanData;//[Offset: 0xb8, Size: 0x50]

--------------------------------
Class: Wrappers_StringValue.ProtoMessage
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Gamedata_UIPreference.ProtoMessage
	Wrappers_FloatValue AimSensitivity;//[Offset: 0x8, Size: 0x10]
	Wrappers_BoolValue AutoFire;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Wrappers_FloatValue.ProtoMessage
	float Value;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Wrappers_BoolValue.ProtoMessage
	bool bValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: Gamedata_GeoIpLocation.ProtoMessage
	FString IpAddress;//[Offset: 0x8, Size: 0x10]
	FString CountryName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Timestamp_Timestamp.ProtoMessage
	int64 Seconds;//[Offset: 0x8, Size: 0x8]
	int Nanos;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: Gamedata_PlayerBanData.ProtoMessage
	Timestamp_Timestamp BanStartTime;//[Offset: 0x8, Size: 0x18]
	Timestamp_Timestamp BanEndTime;//[Offset: 0x20, Size: 0x18]
	enum BanReason;//[Offset: 0x38, Size: 0x1]
	FString BanComment;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: Gamedata_Profile.ProtoMessage
	Gamedata_SoldierClassProgressions SoldierClassProgressions;//[Offset: 0x8, Size: 0x58]
	Gamedata_AssetProgression AssetProgressions;//[Offset: 0x60, Size: 0x58]
	Gamedata_Progression PlayerProgression;//[Offset: 0xb8, Size: 0x10]
	enum CurrentSoldierClass;//[Offset: 0xc8, Size: 0x1]
	int LastAccessedConfigVersion;//[Offset: 0xcc, Size: 0x4]
	Common_Event[] Events;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: Gamedata_SoldierClassProgressions.ProtoMessage
	<FString,Gamedata_Progression> Progressions;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Gamedata_Progression.ProtoMessage
	int Rank;//[Offset: 0x8, Size: 0x4]
	int Xp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Gamedata_AssetProgression.ProtoMessage
	<FString,Gamedata_Progression> Progressions;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Common_Event.ProtoMessage
	Timestamp_Timestamp OccurredOn;//[Offset: 0x8, Size: 0x18]
	FString Name;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: Gamedata_ClassLoadout.ProtoMessage
	int CurrentSelectedLoadout;//[Offset: 0x8, Size: 0x4]
	<int,Loadout_LoadoutV2> LoadoutsV2;//[Offset: 0x10, Size: 0x50]
	int DefaultLoadout;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: Loadout_LoadoutV2.ProtoMessage
	Loadout_WeaponConfiguration PrimaryWeapon;//[Offset: 0x8, Size: 0xa0]
	<FString,Loadout_WeaponConfiguration> UnequippedPrimaryWeapons;//[Offset: 0xa8, Size: 0x50]
	Loadout_WeaponConfiguration SecondaryWeapon;//[Offset: 0xf8, Size: 0xa0]
	<FString,Loadout_WeaponConfiguration> UnequippedSecondaryWeapons;//[Offset: 0x198, Size: 0x50]
	FString SoldierSpecId;//[Offset: 0x1e8, Size: 0x10]
	Loadout_GadgetConfiguration PrimaryGadget;//[Offset: 0x1f8, Size: 0x28]
	Loadout_GadgetConfiguration SecondaryGadget;//[Offset: 0x220, Size: 0x28]
	<FString,Loadout_GadgetConfiguration> UnequippedGadgets;//[Offset: 0x248, Size: 0x50]
	Loadout_SoldierSkinConfiguration SoldierSkin;//[Offset: 0x298, Size: 0x48]
	<FString,Loadout_SoldierSkinConfiguration> UnequippedSoliderSkins;//[Offset: 0x2e0, Size: 0x50]
	Loadout_GadgetConfiguration MeleeEquipment;//[Offset: 0x330, Size: 0x28]
	FString LoadoutName;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: Loadout_WeaponConfiguration.ProtoMessage
	FString WeaponContentId;//[Offset: 0x8, Size: 0x10]
	Loadout_WeaponConfiguration_Attachments WeaponAttachments;//[Offset: 0x18, Size: 0x58]
	FString[] WeaponSpecIds;//[Offset: 0x70, Size: 0x10]
	FString CharmContentId;//[Offset: 0x80, Size: 0x10]
	FString SkinContentId;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: Loadout_WeaponConfiguration_Attachments.ProtoMessage
	FString BarrelAttachmentId;//[Offset: 0x8, Size: 0x10]
	FString GripAttachmentId;//[Offset: 0x18, Size: 0x10]
	FString MagazineAttachmentId;//[Offset: 0x28, Size: 0x10]
	FString StockAttachmentId;//[Offset: 0x38, Size: 0x10]
	FString OpticAttachmentId;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: Loadout_GadgetConfiguration.ProtoMessage
	FString GadgetContentId;//[Offset: 0x8, Size: 0x10]
	FString SkinContentId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Loadout_SoldierSkinConfiguration.ProtoMessage
	FString ContentId;//[Offset: 0x8, Size: 0x10]
	FString BackpackId;//[Offset: 0x18, Size: 0x10]
	FString GlovesId;//[Offset: 0x28, Size: 0x10]
	FString GestureId;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: Gamedata_ClassAsset.ProtoMessage
	<FString,int> Assets;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: CharacterCosmetics_CharacterCosmeticArsenal.ProtoMessage
	<FString,CharacterCosmetics_CharacterCosmetic> Assets;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: CharacterCosmetics_CharacterCosmetic.ProtoMessage
	FString AssetId;//[Offset: 0x8, Size: 0x10]
	FString Name;//[Offset: 0x18, Size: 0x10]
	enum AssetTypeId;//[Offset: 0x28, Size: 0x1]
	Money_Price Price;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Weapon_WeaponArsenal.ProtoMessage
	<FString,Weapon_Weapon> Assets;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Weapon_Weapon.ProtoMessage
	FString AssetId;//[Offset: 0x8, Size: 0x10]
	enum SlotId;//[Offset: 0x18, Size: 0x1]
	Money_Price Price;//[Offset: 0x20, Size: 0x10]
	Weapon_WeaponRank[] WeaponRanks;//[Offset: 0x30, Size: 0x10]
	enum AssetTypeId;//[Offset: 0x40, Size: 0x1]
	enum WeaponType;//[Offset: 0x41, Size: 0x1]

--------------------------------
Class: Weapon_WeaponRank.ProtoMessage
	int Rank;//[Offset: 0x8, Size: 0x4]
	int Xp;//[Offset: 0xc, Size: 0x4]
	Weapon_WeaponSpec[] UnlockedWeaponSpecs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Weapon_WeaponSpec.ProtoMessage
	FString AssetId;//[Offset: 0x8, Size: 0x10]
	FString Slot;//[Offset: 0x18, Size: 0x10]
	FString Name;//[Offset: 0x28, Size: 0x10]
	Money_Price Price;//[Offset: 0x38, Size: 0x10]
	FString Effect;//[Offset: 0x48, Size: 0x10]
	FString Stat;//[Offset: 0x58, Size: 0x10]
	enum AttachmentCategory;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: ProgressionCommon_CombatXpRewards.ProtoMessage
	int PerSecond;//[Offset: 0x8, Size: 0x4]
	int PerKill;//[Offset: 0xc, Size: 0x4]
	int PerObjective;//[Offset: 0x10, Size: 0x4]
	float WinMod;//[Offset: 0x14, Size: 0x4]
	ProgressionCommon_XpMultiplier[] PlayerXpMultipliers;//[Offset: 0x18, Size: 0x10]
	ProgressionCommon_XpMultiplier[] WeaponXpMultipliers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ProgressionCommon_XpMultiplier.ProtoMessage
	enum Multiplier;//[Offset: 0x8, Size: 0x1]
	float AmountAsFloat;//[Offset: 0xc, Size: 0x4]
	int MaxCategoryXp;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PlayerProgression_PlayerRank.ProtoMessage
	FString RankTitle;//[Offset: 0x8, Size: 0x10]
	FString BadgeAssetId;//[Offset: 0x18, Size: 0x10]
	int MinXp;//[Offset: 0x28, Size: 0x4]
	int MaxXp;//[Offset: 0x2c, Size: 0x4]
	int RankNumber;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ProfileSettings_PlayerConfigSettings.ProtoMessage
	ProfileSettings_AutofireConfigSettings AutofireSettings;//[Offset: 0x8, Size: 0xf0]
	ProfileSettings_AutoADSConfigSettings AutoAdssettings;//[Offset: 0xf8, Size: 0xa0]
	ProfileSettings_SensitivityConfigSettings SensitivitySettings;//[Offset: 0x198, Size: 0x948]
	ProfileSettings_FloatRangeConfigSetting[] FloatSettings;//[Offset: 0xae0, Size: 0x10]
	ProfileSettings_BoolConfigSetting[] BoolSettings;//[Offset: 0xaf0, Size: 0x10]
	ProfileSettings_AutoADSConfigSettings AutoAdsleftButton;//[Offset: 0xb00, Size: 0xa0]
	ProfileSettings_AutoADSConfigSettings AutoAdsrightButton;//[Offset: 0xba0, Size: 0xa0]
	ProfileSettings_RadioSelectConfigSetting[] RadioSettings;//[Offset: 0xc40, Size: 0x10]
	ProfileSettings_ConquestConfigSettings ConquestSettings;//[Offset: 0xc50, Size: 0xa0]
	ProfileSettings_FiringTypeTriggerSettings FiringTypeTriggerSettings;//[Offset: 0xcf0, Size: 0x28]

--------------------------------
Class: ProfileSettings_AutofireConfigSettings.ProtoMessage
	ProfileSettings_OnOffToggleConfigSetting GlobalAutofire;//[Offset: 0x8, Size: 0x88]
	ProfileSettings_WeaponTypeBoolConfigSetting[] WeaponTypeSettings;//[Offset: 0x90, Size: 0x10]
	ProfileSettings_BoolConfigSetting EnableFireButtonsWhenAutofireOn;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: ProfileSettings_AutoADSConfigSettings.ProtoMessage
	ProfileSettings_OnOffToggleConfigSetting GlobalAutoAds;//[Offset: 0x8, Size: 0x88]
	ProfileSettings_WeaponTypeBoolConfigSetting[] WeaponTypeSettings;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: ProfileSettings_SensitivityConfigSettings.ProtoMessage
	ProfileSettings_FloatRangeConfigSetting AimSensitivity;//[Offset: 0x8, Size: 0x60]
	ProfileSettings_FloatRangeConfigSetting DefaultAdssensitivity;//[Offset: 0x68, Size: 0x60]
	ProfileSettings_BoolConfigSetting UseCustomSensitivity;//[Offset: 0xc8, Size: 0x50]
	ProfileSettings_ADSMagnificationConfigThreshold[] MagThresholds;//[Offset: 0x118, Size: 0x10]
	ProfileSettings_BoolConfigSetting AimAcceleration;//[Offset: 0x128, Size: 0x50]
	ProfileSettings_FloatRangeConfigSetting AimAccelerationMagnitude;//[Offset: 0x178, Size: 0x60]
	ProfileSettings_FloatRangeConfigSetting YawSensitivity;//[Offset: 0x1d8, Size: 0x60]
	ProfileSettings_FloatRangeConfigSetting PitchSensitivity;//[Offset: 0x238, Size: 0x60]
	ProfileSettings_BoolConfigSetting AimAssist;//[Offset: 0x298, Size: 0x50]
	ProfileSettings_AimAccelerationSetting HipFireAimAcceleration;//[Offset: 0x2e8, Size: 0x178]
	ProfileSettings_AimAccelerationSetting AdsAimAcceleration;//[Offset: 0x460, Size: 0x178]
	ProfileSettings_BoolConfigSetting UseGyroAimAds;//[Offset: 0x5d8, Size: 0x50]
	ProfileSettings_FloatRangeConfigSetting GyroAimSensitivityYawAds;//[Offset: 0x628, Size: 0x60]
	ProfileSettings_FloatRangeConfigSetting GyroAimSensitivityPitchAds;//[Offset: 0x688, Size: 0x60]
	ProfileSettings_BoolConfigSetting UseGyroAimHipfire;//[Offset: 0x6e8, Size: 0x50]
	ProfileSettings_FloatRangeConfigSetting GyroAimSensitivityYawHipfire;//[Offset: 0x738, Size: 0x60]
	ProfileSettings_FloatRangeConfigSetting GyroAimSensitivityPitchHipfire;//[Offset: 0x798, Size: 0x60]
	ProfileSettings_BoolConfigSetting InvertGyroAimYaw;//[Offset: 0x7f8, Size: 0x50]
	ProfileSettings_BoolConfigSetting InvertGyroAimPitch;//[Offset: 0x848, Size: 0x50]
	ProfileSettings_FloatRangeConfigSetting GyroSmoothingAmount;//[Offset: 0x898, Size: 0x60]
	ProfileSettings_BoolConfigSetting EnableGyroVehicleControl;//[Offset: 0x8f8, Size: 0x50]

--------------------------------
Class: ProfileSettings_ADSMagnificationConfigThreshold.ProtoMessage
	enum MagnificationMin;//[Offset: 0x8, Size: 0x1]
	ProfileSettings_FloatRangeConfigSetting AdsSensitivity;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: ProfileSettings_AimAccelerationSetting.ProtoMessage
	ProfileSettings_BoolConfigSetting Enabled;//[Offset: 0x8, Size: 0x50]
	ProfileSettings_FloatRangeConfigSetting MinInputVelocity;//[Offset: 0x58, Size: 0x60]
	ProfileSettings_FloatRangeConfigSetting MaxInputVelocity;//[Offset: 0xb8, Size: 0x60]
	ProfileSettings_FloatRangeConfigSetting MaxAccelerationMagnitude;//[Offset: 0x118, Size: 0x60]

--------------------------------
Class: ProfileSettings_ConquestConfigSettings.ProtoMessage
	ProfileSettings_OnOffToggleConfigSetting ConquestPointScaleFadeMode;//[Offset: 0x8, Size: 0x88]
	ProfileSettings_FloatRangeConfigSetting[] FloatSettings;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: ProfileSettings_FiringTypeTriggerSettings.ProtoMessage
	ProfileSettings_FiringTypeBoolConfigSetting[] ContinueFireOnPressSettings;//[Offset: 0x8, Size: 0x10]
	ProfileSettings_FiringTypeBoolConfigSetting[] FireOnPressSettings;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Common_ContentDefinitions.ProtoMessage
	Common_ContentDefinition[] Definitions;//[Offset: 0x8, Size: 0x10]
	<FString,Common_ContentDefinition> ContentIdToDefinition;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: Common_ContentDefinition.ProtoMessage
	Common_ContentId ID;//[Offset: 0x8, Size: 0x20]
	FString Name;//[Offset: 0x28, Size: 0x10]
	FString Description;//[Offset: 0x38, Size: 0x10]
	enum Type;//[Offset: 0x48, Size: 0x1]
	enum Slot;//[Offset: 0x49, Size: 0x1]
	Money_Price Price;//[Offset: 0x50, Size: 0x10]
	Common_ContentPath Path;//[Offset: 0x60, Size: 0x20]
	FString ContentPath;//[Offset: 0x80, Size: 0x10]
	FString IconPath;//[Offset: 0x90, Size: 0x10]
	FString DisplayName;//[Offset: 0xa0, Size: 0x10]
	FString TypeMetadata;//[Offset: 0xb0, Size: 0x10]
	FString ContentId;//[Offset: 0xc0, Size: 0x10]
	int PointCost;//[Offset: 0xd0, Size: 0x4]
	int MaxOwned;//[Offset: 0xd4, Size: 0x4]
	enum Rarity;//[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: Common_ContentId.ProtoMessage
	FString Guid;//[Offset: 0x8, Size: 0x10]
	int Bug;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Common_ContentPath.ProtoMessage
	FString RelativePath;//[Offset: 0x8, Size: 0x10]
	int Bug;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ProgressionCommon_ProgressionUnlocks.ProtoMessage
	<int,ProgressionCommon_UnlockableContent> UnlocksPerPlayerRank;//[Offset: 0x8, Size: 0x50]
	<FString,ProgressionCommon_WeaponUnlocks> UnlocksPerWeapon;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: ProgressionCommon_UnlockableContent.ProtoMessage
	<FString,int> InventoryItems;//[Offset: 0x8, Size: 0x50]
	ProgressionCommon_UnlockableInventoryItem[] InventoryItemsV2;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: ProgressionCommon_UnlockableInventoryItem.ProtoMessage
	FString InventoryId;//[Offset: 0x8, Size: 0x10]
	int Quantity;//[Offset: 0x18, Size: 0x4]
	bool bIsGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ProgressionCommon_WeaponUnlocks.ProtoMessage
	<int,ProgressionCommon_UnlockableContent> UnlocksPerRank;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: WeaponProgression_WeaponRank2.ProtoMessage
	int RankNumber;//[Offset: 0x8, Size: 0x4]
	int MinXp;//[Offset: 0xc, Size: 0x4]
	int MaxXp;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TutorialProgression_TutorialConfig.ProtoMessage
	FString FtueBootcampPrimaryWeaponId;//[Offset: 0x8, Size: 0x10]
	FString FtueBootcampSecondaryWeaponId;//[Offset: 0x18, Size: 0x10]
	bool bFtueBootcampDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString FtueBootcampPrimaryGadgetContentId;//[Offset: 0x30, Size: 0x10]
	FString FtueBootcampSecondaryGadgetContentId;//[Offset: 0x40, Size: 0x10]
	FString[] DefaultTutorialActivities;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: Gamedata_SocialPlatformSettings.ProtoMessage
	bool bFacebookLoginEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bGooglePlayLoginEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bEaAccountLoginEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bGamecenterLoginEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAppleLoginEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InventoryItems_InventoryItems.ProtoMessage
	<FString,InventoryItems_InventoryItem> InventoryIdToDefinition;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: InventoryItems_InventoryItem.ProtoMessage
	FString ItemContentId;//[Offset: 0x8, Size: 0x10]
	FString AssociatedContentId;//[Offset: 0x18, Size: 0x10]
	enum Type;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: Weapon_WeaponStatSortingConfig.ProtoMessage
	Weapon_WeaponStatSortItem[] PrimaryWeaponStats;//[Offset: 0x8, Size: 0x10]
	Weapon_WeaponStatSortItem[] PrimaryWeaponStatsShortList;//[Offset: 0x18, Size: 0x10]
	Weapon_WeaponStatSortItem[] SecondaryWeaponStats;//[Offset: 0x28, Size: 0x10]
	Weapon_WeaponStatSortItem[] SecondaryWeaponStatsShortList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: Weapon_WeaponStatSortItem.ProtoMessage
	FString StatName;//[Offset: 0x8, Size: 0x10]
	int StatIndex;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Gamedata_MatchFillingFallbackTable.ProtoMessage
	Gamedata_MatchThresholdRequirement[] MatchThresholdRequirement;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Gamedata_MatchThresholdRequirement.ProtoMessage
	int SortId;//[Offset: 0x8, Size: 0x4]
	float WaitTimeMillis;//[Offset: 0xc, Size: 0x4]
	float PercentFullRequired;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: Gamedata_UIEnterMatchScreenMinTimes.ProtoMessage
	<int,float> UiEnterMatchPhaseMinTimes;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: InventoryItemContent
	FString InventoryId;//[Offset: 0x0, Size: 0x10]
	InventoryItems_InventoryItem InventoryItem;//[Offset: 0x10, Size: 0x30]
	Common_ContentDefinition ContentDefinition;//[Offset: 0x40, Size: 0xe0]
	bool bIsGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]

--------------------------------
Class: CurrentWeaponRankInfo
	WeaponProgression_WeaponRank2 WeaponRank;//[Offset: 0x0, Size: 0x18]
	WeaponProgression_WeaponRank2 NextRank;//[Offset: 0x18, Size: 0x18]
	bool bHasNextRank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float PercentComplete;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: UnlockedContentPerWeaponRank
	int WeaponRankNumber;//[Offset: 0x0, Size: 0x4]
	InventoryItemContent[] InventoryItems;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: UnlockedContentPerPlayerRank
	int PlayerRankNumber;//[Offset: 0x0, Size: 0x4]
	<FString,InventoryItemContent> InventoryIdToInventoryItems;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: CurrentPlayerRankInfo
	PlayerProgression_PlayerRank PlayerRank;//[Offset: 0x0, Size: 0x38]
	PlayerProgression_PlayerRank NextRank;//[Offset: 0x38, Size: 0x38]
	bool bHasNextRank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float PercentComplete;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: ODMetaServerSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnPlayerLoadoutsSaved;//[Offset: 0x30, Size: 0x10]
	delegate OnBadgingStatusUpdated;//[Offset: 0x40, Size: 0x10]
	delegate OnPlayerLoaded;//[Offset: 0x80, Size: 0x10]
	delegate OnInitServiceFailure;//[Offset: 0x90, Size: 0x10]
	delegate OnPersonaConflictReceived;//[Offset: 0xa0, Size: 0x10]
	delegate OnGetPersonaPublicProfiles;//[Offset: 0xb0, Size: 0x10]
	delegate OnPersonaConflictResolved;//[Offset: 0xc0, Size: 0x10]
	delegate OnLoadoutSaveComplete;//[Offset: 0xd0, Size: 0x10]
	delegate OnHeartbeatReceived;//[Offset: 0xe0, Size: 0x10]
	delegate OnMatchResultsViewReceived;//[Offset: 0xf0, Size: 0x10]
	delegate OnBeforeEnvLogin;//[Offset: 0x100, Size: 0x10]
	ODGenericModal* BanModal;//[Offset: 0x148, Size: 0x8]
	class ODGenericModal* BanModalClass;//[Offset: 0x150, Size: 0x8]
	BootstrapServiceRpcClient* RpcClient_Bootstrap;//[Offset: 0x158, Size: 0x8]
	AnonymousAuthServiceRpcClient* RpcClient_AnonymousAuth;//[Offset: 0x160, Size: 0x8]
	AuthServiceRpcClient* RpcClient_Auth;//[Offset: 0x168, Size: 0x8]
	InitServiceRpcClient* RpcClient_Init;//[Offset: 0x170, Size: 0x8]
	PlayerServiceRpcClient* RpcClient_Player;//[Offset: 0x178, Size: 0x8]
	TutorialServiceRpcClient* RpcClient_TutorialService;//[Offset: 0x180, Size: 0x8]
	MatchResultsServiceRpcClient* RpcClient_Match;//[Offset: 0x188, Size: 0x8]
	WWCEFlowServiceRpcClient* RpcClient_WWCEFlow;//[Offset: 0x190, Size: 0x8]
	TelemetryServiceSubsystem* TelemetryServiceInstance;//[Offset: 0x1a0, Size: 0x8]
	bool bHasPlayerLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	Gamedata_Player PlayerGamedata;//[Offset: 0x398, Size: 0x108]
	Gamedata_Profile ProfileGamedata;//[Offset: 0x4a0, Size: 0xe0]
	Gamedata_MatchmakingSettings MatchmakingSettings;//[Offset: 0x580, Size: 0x18]
	MetaServerEquipmentSubsystem* ServerEquipmentSubsytem;//[Offset: 0x598, Size: 0x8]
	MetaServerGameConfigSubsystem* GameConfigSubsystem;//[Offset: 0x5a0, Size: 0x8]
	MetaServerTutorialProgressionSubsystem* TutorialProgressionSubsystem;//[Offset: 0x5a8, Size: 0x8]
	ODPlayerSettingsSubsystem* PlayerSettingsSubsystem;//[Offset: 0x5b0, Size: 0x8]
	ODBootFlowSubsystem* BootFlowSubsystem;//[Offset: 0x5b8, Size: 0x8]
	ODBadgingSubsystem* BadgingSubsystem;//[Offset: 0x5c0, Size: 0x8]
	ODStoreSubsystem* StoreSubsystem;//[Offset: 0x5c8, Size: 0x8]
	PlayerAssignmentsSubsystem* PlayerAssignmentsSubsystem;//[Offset: 0x5d0, Size: 0x8]
	ITMTXSubsystem* MTXSubsystem;//[Offset: 0x5d8, Size: 0x8]
	ODMatchStateSubsystem* MatchStateSubsystem;//[Offset: 0x5e0, Size: 0x8]
	ODNimbleSubsystem* NimbleSubsystem;//[Offset: 0x5e8, Size: 0x8]
	FString ServerRootCAFile;//[Offset: 0x5f0, Size: 0x10]
	Timespan MetaserverDeviceTimeDelta;//[Offset: 0x600, Size: 0x8]
	CohoMatchmakingSubsystem* MatchmakingSubsystem;//[Offset: 0x650, Size: 0x8]
	ChannelCredentials* ChannelCredentials;//[Offset: 0x658, Size: 0x8]
	<FString,Gamedata_PublicProfile> CachedPublicProfiles;//[Offset: 0x6a8, Size: 0x50]
	<FString,ODNimblePersonaGCHolder> CachedConflictedPersonas;//[Offset: 0x748, Size: 0x50]
	void UpdateMatchmakingRegion(const enum Region);// 0x54dd154
	void TryUpdateTelemetrySettingsOnBoolSettingUpdate(out const ProfileSettings_BoolProfileSetting Setting);// 0x54dcba4
	void SetUserActivePortalNames(out const FString[] SelectedPortals);// 0x54dd230
	void saveProfile(out const Gamedata_Profile GamedataPlayer);// 0x54dd8b0
	void savePlayer();// 0x54ddae4
	void saveMatchmakingSettings(out const Gamedata_MatchmakingSettings MMSettings);// 0x54dd048
	void saveLoadout(out const Gamedata_ClassLoadouts GamedataClassLoadouts);// 0x54dd74c
	void saveBadgingStatus(out const Gamedata_BadgingStatus BadgingStatus);// 0x54dd46c
	void ResolvePersonaConflict(FString ChosenPersonaId);// 0x54dcf80
	void RequestWWCEEncryptedTPTK();// 0x54dd458
	void ReloadPlayerProfile();// 0x54ddaf8
	void OnPersonaConflictOccurred(out const <FString> ConflictingPersonaIds);// 0x54d8504
	void OnNewEnvironment(FString URL, FString Name);// 0x54d86b8
	void OnMatchmakingError(FString ErrorMessage, const enum Queue);// 0x54d89d4
	void OnMatchmakingCancel();// 0x54d89c0
	void OnMailClaimedRewards(bool bSuccess);// 0x54d8394
	void OnConflictResolvedReAuthenticate();// 0x54dd034
	void OnConflictedPersonasRetrieved(out const ODNimblePersona*[] InConflictedPersonas);// 0x54d8444
	void OnBootflowError(FString ErrorMessage);// 0x54d8604
	void LoadPlayerProfile(out const Cohodata_Version ClientVersion);// 0x54ddb0c
	bool IsPlayerLoaded();// 0x54dd43c
	bool IsPendingPersonaResolution();// 0x54dcf50
	void HandleSaveProfile(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveProfileResponse response, GrpcStatus Status);// 0x54d99e8
	void HandleSavePlayer(PlayerServiceRpcClient* RpcClient, out const PlayerService_SavePlayerResponse response, GrpcStatus Status);// 0x54d9e80
	void HandleSaveMatchmakingSettings(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveMatchmakingSettingsResponse response, GrpcStatus Status);// 0x54d9bfc
	void HandleSaveLoadout(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveLoadoutResponse response, GrpcStatus Status);// 0x54d97d4
	void HandleSaveBadgingStatus(PlayerServiceRpcClient* RpcClient, out const PlayerService_SaveBadgingStatusResponse response, GrpcStatus Status);// 0x54d95c0
	void HandleInit(InitServiceRpcClient* RpcClient, out const InitService_InitResponse response, GrpcStatus Status);// 0x54da2a4
	void HandleHeartbeat(InitServiceRpcClient* RpcClient, out const InitService_HeartbeatResponse response, GrpcStatus Status);// 0x54da094
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x54dca98
	void HandleGetPublicProfilesHandler(PlayerServiceRpcClient* RpcClient, out const PlayerService_GetPublicProfilesResponse response, GrpcStatus Status);// 0x54d90a8
	void HandleGetMatchResults(MatchResultsServiceRpcClient* RpcClient, out const BattlestatsService_GetMatchResultsResponse response, GrpcStatus Status);// 0x54d8d08
	void HandleGetConflictedProfilesHandler(PlayerServiceRpcClient* RpcClient, out const PlayerService_GetPublicProfilesResponse response, GrpcStatus Status);// 0x54d9334
	void HandleEncryptTPTKResults(WWCEFlowServiceRpcClient* RpcClient, out const WwceFlowService_EncryptTPTKResponse response, GrpcStatus Status);// 0x54d8ad4
	void HandleEadpLogin(AuthServiceRpcClient* RpcClient, out const AuthService_EadpLoginResponse response, GrpcStatus Status);// 0x54dc5ec
	void HandleAnonymousLogin(AnonymousAuthServiceRpcClient* RpcClient, out const AnonymousAuthService_LoginResponse response, GrpcStatus Status);// 0x54dc864
	FString[] GetUserActivePortalNames();// 0x54dd324
	void GetPublicProfilesForPersonaConflict(out const FString[] PlayerIds);// 0x54dcd68
	void getPublicProfiles(out const FString[] PlayerIds);// 0x54dce5c
	DateTime GetMetaserverCorrectedUtcNow();// 0x54dcc80
	void GetMatchResultsViewFor(FString MatchId);// 0x54dccb4
	FString GetCurrentURL();// 0x54dde0c
	FString GetCurrentPlayerID();// 0x54ddcac
	enum GetCurrentMatchmakingRegion();// 0x54dd1fc
	FString GetCurrentEnvName();// 0x54ddd5c
	void ExecLoginFlow();// 0x54ddc98
	void eadpLogin(FString authCode);// 0x54ddbd0
	void ConnectToServerForFTUE(FString Host, const int Port, FString TicketId, FString MatchId, const enum Queue);// 0x54d87c4
	void CancelResolvePersonaConflict();// 0x54dcf6c
	void anonymousLogin();// 0x54ddc84

--------------------------------
Class: Gamedata_MatchmakingSettings.ProtoMessage
	FString[] ActivePortals;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Gamedata_ClassLoadouts.ProtoMessage
	<FString,Gamedata_ClassLoadout> ClassLoadouts;//[Offset: 0x8, Size: 0x50]
	FString CurrentSelectedClass;//[Offset: 0x58, Size: 0x10]
	Gamedata_SoldierClassLoadout FavoriteClassLoadout;//[Offset: 0x68, Size: 0x20]

--------------------------------
Class: Gamedata_SoldierClassLoadout.ProtoMessage
	FString SoldierClass;//[Offset: 0x8, Size: 0x10]
	int LoadoutIndex;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Gamedata_BadgingStatus.ProtoMessage
	Gamedata_BadgingContentIds PrimaryWeaponContentIds;//[Offset: 0x8, Size: 0x18]
	Gamedata_BadgingContentIds SecondaryWeaponContentIds;//[Offset: 0x20, Size: 0x18]
	<FString,Gamedata_BadgingContentIds> SoldierClassNameToPrimaryGadgetContentIds;//[Offset: 0x38, Size: 0x50]
	<FString,Gamedata_BadgingContentIds> SoldierClassNameToSecondaryGadgetContentIds;//[Offset: 0x88, Size: 0x50]
	<FString,Gamedata_BadgingContentIds> PrimaryWeaponContentIdsToSpecializationContentIds;//[Offset: 0xd8, Size: 0x50]
	<FString,Gamedata_BadgingContentIds> SecondaryWeaponContentIdsToSpecializationContentIds;//[Offset: 0x128, Size: 0x50]

--------------------------------
Class: Gamedata_BadgingContentIds.ProtoMessage
	FString[] BadgingContentIds;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ODGenericModal.ODModalViewBase.UserWidget.Widget.Visual.Object
	bool bCloseModalOnContinue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263, Size: 0x1]
	Overlay* CancelButtonOverlay;//[Offset: 0x268, Size: 0x8]
	Overlay* ContinueButtonOverlay;//[Offset: 0x270, Size: 0x8]
	Overlay* CloseButtonOverlay;//[Offset: 0x278, Size: 0x8]
	FText Title;//[Offset: 0x280, Size: 0x18]
	FText Message;//[Offset: 0x298, Size: 0x18]
	FText ContinueButtonText;//[Offset: 0x2b0, Size: 0x18]
	FText CancelButtonText;//[Offset: 0x2c8, Size: 0x18]
	delegate ContinueButtonSelectedDelegate;//[Offset: 0x2e0, Size: 0x10]
	void InitWithParams(const enum InModalGroup, const bool InShowModalBackdrop, const bool InHideOtherGroupModals, out const GenericModalInitParams InParams);// 0x54c9350
	void Init(const enum InModalGroup, const bool InShowModalBackdrop, const bool InHideOtherGroupModals, out const FText InTitle, out const FText InMessage, out const FText InContinueButtonText, out const FText InCancelButtonText, const bool InCloseModalOnContinue, const bool InShowCancelButton, const bool InShowContinueButton, const bool InShowCloseButton);// 0x54c9670
	void ContinueButtonSelected();// 0x54c933c

--------------------------------
Class: ODModalViewBase.UserWidget.Widget.Visual.Object
	enum ModalGroup;//[Offset: 0x260, Size: 0x1]
	bool bShowModalBackdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	bool bHideOtherGroupModals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1]
	void InitWithProperties(const enum InModalGroup, const bool InShowModalBackdrop, const bool InHideOtherGroupModals);// 0x54e3f50

--------------------------------
Class: GenericModalInitParams
	FText Title;//[Offset: 0x0, Size: 0x18]
	FText Message;//[Offset: 0x18, Size: 0x18]
	FText ContinueButtonText;//[Offset: 0x30, Size: 0x18]
	FText CancelButtonText;//[Offset: 0x48, Size: 0x18]
	bool bCloseModalOnContinue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bShowCancelButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool bShowContinueButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bShowCloseButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* content);// 0x7296948

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x7296ddc
	void SetPadding(Margin InPadding);// 0x7296f2c
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x7296e84

--------------------------------
Class: ODNimblePersona.Object
	ODNimbleNexusPersonaCopy persona;//[Offset: 0x28, Size: 0xc8]
	Gamedata_PublicProfile PublicProfile;//[Offset: 0xf0, Size: 0x48]
	ODFacebookUserInfo FacebookUserInfo;//[Offset: 0x138, Size: 0x30]
	ODGooglePlayUserInfo GooglePlayUserInfo;//[Offset: 0x168, Size: 0x40]
	FString GetUserId();// 0x54ef9b0
	Gamedata_PublicProfile GetPublicProfile();// 0x54ef5e0
	FString GetNickName();// 0x54ef868
	FString GetNamespace();// 0x54ef7e4
	ODGooglePlayUserInfo GetGooglePlayUserInfo();// 0x54ef48c
	ODFacebookUserInfo GetFacebookUserInfo();// 0x54ef6d0
	FString GetDisplayName();// 0x54ef92c
	Timestamp_Timestamp GetCreationTime();// 0x54ef8ec

--------------------------------
Class: ODNimbleNexusPersonaCopy
	FString anonymousPlayerKey;//[Offset: 0x0, Size: 0x10]
	FString PersonaId;//[Offset: 0x10, Size: 0x10]
	FString pidId;//[Offset: 0x20, Size: 0x10]
	FString NimbleName;//[Offset: 0x30, Size: 0x10]
	FString DisplayName;//[Offset: 0x40, Size: 0x10]
	FString nickName;//[Offset: 0x50, Size: 0x10]
	FString namespaceName;//[Offset: 0x60, Size: 0x10]
	bool IsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	FString Status;//[Offset: 0x78, Size: 0x10]
	FString statusReasonCode;//[Offset: 0x88, Size: 0x10]
	FString privacyLevel;//[Offset: 0x98, Size: 0x10]
	FString dateCreated;//[Offset: 0xa8, Size: 0x10]
	FString lastAuthenticated;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: Gamedata_PublicProfile.ProtoMessage
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	int Rank;//[Offset: 0x18, Size: 0x4]
	FString DisplayName;//[Offset: 0x20, Size: 0x10]
	Timestamp_Timestamp Creation;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: ODFacebookUserInfo
	FString PersonaId;//[Offset: 0x0, Size: 0x10]
	FString userId;//[Offset: 0x10, Size: 0x10]
	FString GamerName;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ODGooglePlayUserInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString DisplayName;//[Offset: 0x10, Size: 0x10]
	FString Title;//[Offset: 0x20, Size: 0x10]
	FString IconImageURI;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Cohodata_Version.ProtoMessage
	int Major;//[Offset: 0x8, Size: 0x4]
	int Minor;//[Offset: 0xc, Size: 0x4]
	int Patch;//[Offset: 0x10, Size: 0x4]
	int ChangeList;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BootstrapServiceRpcClient.RpcClient.Object
	delegate EventlistDLCDynamic;//[Offset: 0x120, Size: 0x10]
	delegate EventsignURLDynamic;//[Offset: 0x148, Size: 0x10]
	delegate EventbootstrapDynamic;//[Offset: 0x170, Size: 0x10]
	bool signURL(BootstrapService_DLCSignUrlRequest Request, out const GrpcClientContext Context);// 0x4022e64
	bool listDLC(BootstrapService_DLCRequest Request, out const GrpcClientContext Context);// 0x40230d8
	bool bootstrap(BootstrapService_BootstrapRequest Request, out const GrpcClientContext Context);// 0x4022c40

--------------------------------
Class: RpcClient.Object
	delegate EventRpcError;//[Offset: 0x28, Size: 0x10]
	void Update();// 0x3ae1628
	void Stop(bool bSynchronous);// 0x3ae163c
	static RpcClient* CreateRpcClientUri(class RpcClient Class, FString Uri, ChannelCredentials* ChannelCredentials, Object* Outer);// 0x3ae12b8
	static RpcClient* CreateRpcClient(class RpcClient Class, RpcClientInstantiationParameters InstantiationParameters, Object* Outer);// 0x3ae144c
	bool CanSendRequests();// 0x3ae15f0

--------------------------------
Class: BootstrapService_DLCSignUrlRequest.IdempotentProtoMessage.ProtoMessage
	FString Path;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: IdempotentProtoMessage.ProtoMessage
	FString IdempotencyData;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GrpcClientContext
	bool bOverride_Metadata;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	<FString,FString> MetaData;//[Offset: 0x8, Size: 0x50]
	float DeadlineSeconds;//[Offset: 0x58, Size: 0x4]
	FString Authority;//[Offset: 0x60, Size: 0x10]
	enum GrpcCompressionAlgorithm;//[Offset: 0x70, Size: 0x1]
	bool bIdempotent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bCacheable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool bWaitForReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool bInitialMetadataCorked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: BootstrapService_DLCRequest.IdempotentProtoMessage.ProtoMessage
	int PlatformId;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BootstrapService_BootstrapRequest.IdempotentProtoMessage.ProtoMessage
	Cohodata_Version ClientVersion;//[Offset: 0x18, Size: 0x18]
	bool bShippingBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ChannelCredentials.Object
	static ChannelCredentials* MakeSslCredentials(FString PemRootCerts, FString PemPrivateKey, FString PemCertChain);// 0x3adffb0
	static ChannelCredentials* MakeInsecureChannelCredentials();// 0x3adff7c
	static ChannelCredentials* MakeGoogleDefaultCredentials();// 0x3ae01ec

--------------------------------
Class: RpcClientInstantiationParameters
	FString Ip;//[Offset: 0x0, Size: 0x10]
	int Port;//[Offset: 0x10, Size: 0x4]
	ChannelCredentials* ChannelCredentials;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AnonymousAuthServiceRpcClient.RpcClient.Object
	delegate EventcreatePlayerDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventanonymousLoginDynamic;//[Offset: 0x118, Size: 0x10]
	bool createPlayer(AnonymousAuthService_CreatePlayerRequest Request, out const GrpcClientContext Context);// 0x40092bc
	bool anonymousLogin(AnonymousAuthService_LoginRequest Request, out const GrpcClientContext Context);// 0x4008ff0

--------------------------------
Class: AnonymousAuthService_CreatePlayerRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: AnonymousAuthService_LoginRequest.IdempotentProtoMessage.ProtoMessage
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
	FString AnonymousToken;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AuthServiceRpcClient.RpcClient.Object
	delegate EventdebugLoginDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventeadpLoginDynamic;//[Offset: 0x118, Size: 0x10]
	bool eadpLogin(AuthService_EadpLoginRequest Request, out const GrpcClientContext Context);// 0x4013fac
	bool debugLogin(AuthService_EadpLoginRequest Request, out const GrpcClientContext Context);// 0x4014860

--------------------------------
Class: AuthService_EadpLoginRequest.IdempotentProtoMessage.ProtoMessage
	FString authCode;//[Offset: 0x18, Size: 0x10]
	FString Platform;//[Offset: 0x28, Size: 0x10]
	FString DeviceID;//[Offset: 0x38, Size: 0x10]
	FString Type;//[Offset: 0x48, Size: 0x10]
	FString Ip;//[Offset: 0x58, Size: 0x10]
	FString Locale;//[Offset: 0x68, Size: 0x10]
	FString userId;//[Offset: 0x78, Size: 0x10]
	FString Os;//[Offset: 0x88, Size: 0x10]
	FString AndroidId;//[Offset: 0x98, Size: 0x10]
	FString Idfa;//[Offset: 0xa8, Size: 0x10]
	FString Cpu;//[Offset: 0xb8, Size: 0x10]
	FString Gpu;//[Offset: 0xc8, Size: 0x10]
	int64 Memory;//[Offset: 0xd8, Size: 0x8]
	bool bWifi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	FString Splits;//[Offset: 0xe8, Size: 0x10]
	FString Carrier;//[Offset: 0xf8, Size: 0x10]
	FString GameId;//[Offset: 0x108, Size: 0x10]
	FString GameName;//[Offset: 0x118, Size: 0x10]
	FString OsVersion;//[Offset: 0x128, Size: 0x10]
	FString AppVersion;//[Offset: 0x138, Size: 0x10]
	FString DeviceModel;//[Offset: 0x148, Size: 0x10]

--------------------------------
Class: PlayerServiceRpcClient.RpcClient.Object
	delegate EventsavePlayerSettingsDynamic;//[Offset: 0x3c0, Size: 0x10]
	delegate EventsaveFloatProfileSettingDynamic;//[Offset: 0x3e8, Size: 0x10]
	delegate EventsaveOnOffToggleProfileSettingDynamic;//[Offset: 0x410, Size: 0x10]
	delegate EventsaveBoolProfileSettingDynamic;//[Offset: 0x438, Size: 0x10]
	delegate EventgetPublicProfilesForConflictResolutionDynamic;//[Offset: 0x460, Size: 0x10]
	delegate EventacceptTermsAndPrivacyDynamic;//[Offset: 0x488, Size: 0x10]
	delegate EventacceptBetaTermsDynamic;//[Offset: 0x4b0, Size: 0x10]
	delegate EventsaveBadgingStatusDynamic;//[Offset: 0x4d8, Size: 0x10]
	delegate EventresetBootFlowParametersDynamic;//[Offset: 0x500, Size: 0x10]
	delegate EventsaveLoadoutDynamic;//[Offset: 0x528, Size: 0x10]
	delegate EventsavePlayerDynamic;//[Offset: 0x550, Size: 0x10]
	delegate EventsaveRadioProfileSettingDynamic;//[Offset: 0x578, Size: 0x10]
	delegate EventsaveProfileDynamic;//[Offset: 0x5a0, Size: 0x10]
	delegate EventvalidateAndGrantPlayerProgressionItemDynamic;//[Offset: 0x5c8, Size: 0x10]
	delegate EventvalidateAndGrantWeaponProgressionItemsDynamic;//[Offset: 0x5f0, Size: 0x10]
	delegate EventsaveMatchmakingSettingsDynamic;//[Offset: 0x618, Size: 0x10]
	delegate EventgetPublicProfilesDynamic;//[Offset: 0x640, Size: 0x10]
	bool validateAndGrantWeaponProgressionItems(PlayerService_ValidateAndGrantWeaponProgressionItemsRequest Request, out const GrpcClientContext Context);// 0x4085730
	bool validateAndGrantPlayerProgressionItem(PlayerService_ValidateAndGrantPlayerProgressionItemRequest Request, out const GrpcClientContext Context);// 0x4085ab4
	bool saveRadioProfileSetting(PlayerService_SaveRadioSelectSettingRequest Request, out const GrpcClientContext Context);// 0x4086374
	bool saveProfile(PlayerService_SaveProfileRequest Request, out const GrpcClientContext Context);// 0x4085d30
	bool savePlayerSettings(PlayerService_SavePlayerSettingsRequest Request, out const GrpcClientContext Context);// 0x4088830
	bool savePlayer(PlayerService_SavePlayerRequest Request, out const GrpcClientContext Context);// 0x408660c
	bool saveOnOffToggleProfileSetting(PlayerService_SaveOnOffToggleSettingRequest Request, out const GrpcClientContext Context);// 0x4088300
	bool saveMatchmakingSettings(PlayerService_SaveMatchmakingSettingsRequest Request, out const GrpcClientContext Context);// 0x40853e8
	bool saveLoadout(PlayerService_SaveLoadoutRequest Request, out const GrpcClientContext Context);// 0x4086acc
	bool saveFloatProfileSetting(PlayerService_SaveFloatPlayerSettingRequest Request, out const GrpcClientContext Context);// 0x4088598
	bool saveBoolProfileSetting(PlayerService_SaveBoolProfileSettingRequest Request, out const GrpcClientContext Context);// 0x4088068
	bool saveBadgingStatus(PlayerService_SaveBadgingStatusRequest Request, out const GrpcClientContext Context);// 0x40870ec
	bool resetBootFlowParameters(PlayerService_ResetBootFlowParametersRequest Request, out const GrpcClientContext Context);// 0x4086ee8
	bool getPublicProfilesForConflictResolution(PlayerService_GetPublicProfilesRequest Request, out const GrpcClientContext Context);// 0x4087d44
	bool getPublicProfiles(PlayerService_GetPublicProfilesRequest Request, out const GrpcClientContext Context);// 0x40850c4
	bool acceptTermsAndPrivacy(PlayerService_AcceptTermsAndPrivacyRequest Request, out const GrpcClientContext Context);// 0x4087b40
	bool acceptBetaTerms(PlayerService_AcceptBetaTermsRequest Request, out const GrpcClientContext Context);// 0x408793c

--------------------------------
Class: PlayerService_ValidateAndGrantWeaponProgressionItemsRequest.IdempotentProtoMessage.ProtoMessage
	FString[] InventoryId;//[Offset: 0x18, Size: 0x10]
	FString WeaponInventoryId;//[Offset: 0x28, Size: 0x10]
	int Rank;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerService_ValidateAndGrantPlayerProgressionItemRequest.IdempotentProtoMessage.ProtoMessage
	FString InventoryId;//[Offset: 0x18, Size: 0x10]
	int Rank;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PlayerService_SaveRadioSelectSettingRequest.IdempotentProtoMessage.ProtoMessage
	ProfileSettings_RadioProfileSetting Setting;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: PlayerService_SaveProfileRequest.IdempotentProtoMessage.ProtoMessage
	Gamedata_Profile Profile;//[Offset: 0x18, Size: 0xe0]

--------------------------------
Class: PlayerService_SavePlayerSettingsRequest.IdempotentProtoMessage.ProtoMessage
	ProfileSettings_PlayerSettings Settings;//[Offset: 0x18, Size: 0x48]

--------------------------------
Class: PlayerService_SavePlayerRequest.IdempotentProtoMessage.ProtoMessage
	Gamedata_Player Player;//[Offset: 0x18, Size: 0x108]

--------------------------------
Class: PlayerService_SaveOnOffToggleSettingRequest.IdempotentProtoMessage.ProtoMessage
	ProfileSettings_OnOffToggleProfileSetting Setting;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: PlayerService_SaveMatchmakingSettingsRequest.IdempotentProtoMessage.ProtoMessage
	Gamedata_MatchmakingSettings Settings;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: PlayerService_SaveLoadoutRequest.IdempotentProtoMessage.ProtoMessage
	Gamedata_ClassLoadouts ClassLoadouts;//[Offset: 0x18, Size: 0x88]

--------------------------------
Class: PlayerService_SaveFloatPlayerSettingRequest.IdempotentProtoMessage.ProtoMessage
	ProfileSettings_FloatRangeProfileSetting Setting;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: PlayerService_SaveBoolProfileSettingRequest.IdempotentProtoMessage.ProtoMessage
	ProfileSettings_BoolProfileSetting Setting;//[Offset: 0x18, Size: 0x20]

--------------------------------
Class: PlayerService_SaveBadgingStatusRequest.IdempotentProtoMessage.ProtoMessage
	Gamedata_BadgingStatus BadgingStatus;//[Offset: 0x18, Size: 0x178]

--------------------------------
Class: PlayerService_ResetBootFlowParametersRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: PlayerService_GetPublicProfilesRequest.IdempotentProtoMessage.ProtoMessage
	FString[] PlayerIds;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PlayerService_AcceptTermsAndPrivacyRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: PlayerService_AcceptBetaTermsRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: PlayerService_SaveProfileResponse.ProtoMessage

--------------------------------
Class: GrpcStatus
	enum ErrorCode;//[Offset: 0x0, Size: 0x1]
	FString ErrorMessage;//[Offset: 0x8, Size: 0x10]
	FString ErrorDetails;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PlayerService_SavePlayerResponse.ProtoMessage

--------------------------------
Class: PlayerService_SaveMatchmakingSettingsResponse.ProtoMessage
	Gamedata_MatchmakingSettings Settings;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: PlayerService_SaveLoadoutResponse.ProtoMessage

--------------------------------
Class: PlayerService_SaveBadgingStatusResponse.ProtoMessage

--------------------------------
Class: InitServiceRpcClient.RpcClient.Object
	delegate EventinitV2Dynamic;//[Offset: 0x120, Size: 0x10]
	delegate EventinitDynamic;//[Offset: 0x148, Size: 0x10]
	delegate EventheartbeatDynamic;//[Offset: 0x170, Size: 0x10]
	bool initV2(InitService_InitRequest Request, out const GrpcClientContext Context);// 0x405c69c
	bool Init(InitService_InitRequest Request, out const GrpcClientContext Context);// 0x405c04c
	bool heartbeat(InitService_HeartbeatRequest Request, out const GrpcClientContext Context);// 0x405be2c

--------------------------------
Class: InitService_InitRequest.IdempotentProtoMessage.ProtoMessage
	Cohodata_Version ClientVersion;//[Offset: 0x18, Size: 0x18]
	Cohodata_SegmentVersion[] Segments;//[Offset: 0x30, Size: 0x10]
	int GameConfigVersion;//[Offset: 0x40, Size: 0x4]
	bool bResetPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	FString GameId;//[Offset: 0x48, Size: 0x10]
	FString GameName;//[Offset: 0x58, Size: 0x10]
	FString DeviceID;//[Offset: 0x68, Size: 0x10]
	FString DeviceModel;//[Offset: 0x78, Size: 0x10]
	FString OsVersion;//[Offset: 0x88, Size: 0x10]
	FString AppVersion;//[Offset: 0x98, Size: 0x10]
	FString Platform;//[Offset: 0xa8, Size: 0x10]
	FString LiveDataVersion;//[Offset: 0xb8, Size: 0x10]
	FString BuildConfig;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: Cohodata_SegmentVersion.ProtoMessage
	int DataVersion;//[Offset: 0x8, Size: 0x4]
	FString Name;//[Offset: 0x10, Size: 0x10]
	FString Package;//[Offset: 0x20, Size: 0x10]
	FString Scope;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: InitService_HeartbeatRequest.IdempotentProtoMessage.ProtoMessage
	Timestamp_Timestamp TimeStamp;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: TutorialServiceRpcClient.RpcClient.Object
	delegate EventsetBootcampCompletedDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventresetProgressDynamic;//[Offset: 0x118, Size: 0x10]
	bool setBootcampCompleted(TutorialService_FTUEBootcampCompletedRequest Request, out const GrpcClientContext Context);// 0x40a99fc
	bool resetProgress(TutorialService_ResetTutorialProgresRequest Request, out const GrpcClientContext Context);// 0x40a97f8

--------------------------------
Class: TutorialService_FTUEBootcampCompletedRequest.IdempotentProtoMessage.ProtoMessage
	FString TutorialActivity;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TutorialService_ResetTutorialProgresRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: MatchResultsServiceRpcClient.RpcClient.Object
	delegate EventgetMatchResultsDynamic;//[Offset: 0xc0, Size: 0x10]
	bool getMatchResults(BattlestatsService_GetMatchResultsRequest Request, out const GrpcClientContext Context);// 0x40173f0

--------------------------------
Class: BattlestatsService_GetMatchResultsRequest.IdempotentProtoMessage.ProtoMessage
	FString MatchId;//[Offset: 0x18, Size: 0x10]
	FString PlayerId;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WWCEFlowServiceRpcClient.RpcClient.Object
	delegate EventencryptTPTKDynamic;//[Offset: 0xc0, Size: 0x10]
	bool encryptTPTK(WwceFlowService_EncryptTPTKRequest Request, out const GrpcClientContext Context);// 0x40ab13c

--------------------------------
Class: WwceFlowService_EncryptTPTKRequest.IdempotentProtoMessage.ProtoMessage
	FString UnencryptedTptk;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TelemetryServiceSubsystem.GameInstanceSubsystem.Subsystem.Object
	void SetOptionalTelemetryEnabled(bool bSharingEnabled);// 0x55a2224
	void RetryPublishTelemetryEvents();// 0x55a21e0
	void PublishTelemetryEvents();// 0x55a21f4
	bool IsUsageSharingEnabled();// 0x55a2208
	void ClearFailedAttachments();// 0x55a21cc

--------------------------------
Class: MetaServerEquipmentSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnPurchaseInventoryComplete;//[Offset: 0x40, Size: 0x10]
	delegate OnInventoryItemGranted;//[Offset: 0x50, Size: 0x10]
	delegate OnInventoryItemsGranted;//[Offset: 0x60, Size: 0x10]
	Gamedata_ClassLoadouts ClassLoadoutsGamedata;//[Offset: 0x78, Size: 0x88]
	ProfileSettings_PlayerSettings PlayerSettings;//[Offset: 0x100, Size: 0x48]
	bool ValidateWeaponUnlockOwnership(FString InventoryId, out bool bOutAwaitItemGrant);// 0x541cacc
	bool ValidateProgressionUnlockOwnership(FString InventoryId, out bool bOutAwaitItemGrant);// 0x541c9b4
	void validateAndGrantWeaponProgressionItems(out const FString[] InventoryIds, FString WeaponInventoryItemId, const int Rank);// 0x541b9b0
	void validateAndGrantPlayerProgressionItem(FString InventoryId, const int Rank);// 0x541bb40
	void UpdatePlayerSettings(out const ProfileSettings_PlayerSettings InPlayerSettings);// 0x541cbe4
	bool UpdateLoadoutSlot2(FString SoldierClassName, FString ContentId, const enum SlotType, int LoadoutIndex);// 0x541e6a0
	void UpdateLoadoutName(FString SoldierClassName, int LoadoutIndex, FString LoadoutName);// 0x541f3d4
	void UpdateLoadout(FString SoldierClassName, out const Loadout_LoadoutV2 NewLoadout, int LoadoutIndex);// 0x541e850
	void UpdateLastChosenSoldierClass(FString InSoldierClassName);// 0x541ef48
	bool UpdateFavoriteSoldierClassLoadout(FString SoldierClassName, const int LoadoutIndex);// 0x541effc
	bool UpdateDefaultLoadoutForSoldierClass(FString SoldierClassName, const int LoadoutIndex);// 0x541f20c
	void UpdateCurrentSelectedLoadoutIndex(FString SoldierClassName, int InLoadoutIndex);// 0x541ee48
	void UpdateClassLoadouts(out const Gamedata_ClassLoadouts GamedataClassLoadouts);// 0x541d210
	void UpdateChosenLoadout(FString SoldierClass, out const Loadout_LoadoutV2 ChosenLoadoutData, int ChosenLoadoutIndex);// 0x541d460
	void SetWeaponSpecializationPoints(out const LoadoutId LoadoutId, FString WeaponContentId, out WeaponSpecializationPoints OutWeaponSpecializationPoints);// 0x541c1c8
	void RemoveWeaponSpecFromLoadoutWeapon(out const LoadoutId LoadoutId, FString WeaponContentId, FString SpecContentId, out WeaponSpecializationPoints OutWeaponSpecializationPoints);// 0x541c4c8
	void RemoveAllWeaponSpecsFromWeapon(out const LoadoutId LoadoutId, FString WeaponContentId, out WeaponSpecializationPoints OutWeaponSpecializationPoints);// 0x541c348
	void PurchaseInventory(FString InventoryId);// 0x541bdc0
	void OnValidateAndGrantWeaponProgressionItemsResult(PlayerServiceRpcClient* RpcClient, out const PlayerService_ValidateAndGrantWeaponProgressionItemsResponse response, GrpcStatus Status);// 0x541b4e0
	void OnValidateAndGrantPlayerProgressionItemResult(PlayerServiceRpcClient* RpcClient, out const PlayerService_ValidateAndGrantPlayerProgressionItemResponse response, GrpcStatus Status);// 0x541b748
	void OnPurchaseInventoryResult(out const PlayerInventory_PlayerInventoryTransaction InventoryTransaction, bool bSuccessful);// 0x541bc40
	bool IsItemPurchaseable(FString InventoryId);// 0x541bff4
	bool IsItemOwned(FString InventoryId);// 0x541bf34
	bool IsItemGranted(FString InventoryId);// 0x541be74
	bool GetWeaponSpecIdsByLoadoutWeaponContentId(FString WeaponContentId, out const LoadoutId LoadoutId, out FString[] OutSpecs);// 0x541e4ec
	FString GetWeaponAttachmentByTypeAndLoadout(const enum ContentType, out const LoadoutId LoadoutId, FString WeaponContentId);// 0x541dd90
	FString GetPrimaryWeaponOptic(FString SoldierClassName, int LoadoutIndex);// 0x541df3c
	bool GetLoadoutName(FString SoldierClassName, int LoadoutIndex, out FString OutLoadoutName);// 0x541f52c
	int GetLastLoadoutIndex(FString SoldierClassName);// 0x541fa48
	FString GetLastChosenSoldierClassAsString();// 0x541f990
	enum GetLastChosenSoldierClass();// 0x541fa14
	bool GetIsWeaponUnlockGrantedAtRank(FString InventoryId, const int Rank);// 0x541b3d4
	void GetFavoriteSoldierClassLoadout(out enum OutSoldierClass, out int OutLoadoutIndex);// 0x541f108
	FString GetEquippedSoldierSpec(out const LoadoutId LoadoutId);// 0x541c0b4
	FString GetEquipmentIDFromLoadout(FString SoldierClassName, const enum SlotType, int LoadoutIndex);// 0x541dbf4
	FString GetEquipmentContentIdFromLoadout(FString SoldierClassName, enum SlotType, int LoadoutIndex);// 0x541da58
	int GetDefaultLoadoutForSoldierClass(FString SoldierClassName);// 0x541f318
	Gamedata_ClassLoadouts GetClassLoadouts();// 0x541f86c
	Loadout_LoadoutV2 GetClassLoadout(FString SoldierClassName, int LoadoutIndex);// 0x541f69c
	bool FindWeaponInLoadout(FString WeaponContentId, out const LoadoutId LoadoutId, out Loadout_WeaponConfiguration OutWeapon);// 0x541e08c
	bool FindWeaponInCurrentLoadout(FString WeaponContentId, out Loadout_WeaponConfiguration OutWeapon);// 0x541e2e8
	bool FindWeaponFirstLevelOpticContentId(FString InventoryId, out FString OutContentId);// 0x541b2b0
	bool ContainsLoadoutForSoldierClass(FString SoldierClassName);// 0x541f7ac
	bool AddWeaponSpecToWeapon(out const LoadoutId LoadoutId, FString InventoryId, out WeaponSpecializationPoints OutWeaponSpecializationPoints);// 0x541c6a0
	bool AddAttachmentToWeapon(out const LoadoutId LoadoutId, FString WeaponInventoryId, FString AttachmentInventoryId);// 0x541c834

--------------------------------
Class: LoadoutId
	FString SoldierClassName;//[Offset: 0x0, Size: 0x10]
	int LoadoutIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WeaponSpecializationPoints
	LoadoutId LoadoutId;//[Offset: 0x0, Size: 0x18]
	FString PrimaryWeaponContentId;//[Offset: 0x18, Size: 0x10]
	int PointsAvailable;//[Offset: 0x28, Size: 0x4]
	int PointsUsed;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: PlayerService_ValidateAndGrantWeaponProgressionItemsResponse.ProtoMessage
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	FString[] InventoryId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PlayerService_ValidateAndGrantPlayerProgressionItemResponse.ProtoMessage
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	FString[] InventoryId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PlayerInventory_PlayerInventoryTransaction.ProtoMessage
	PlayerInventory_TransactionItem[] TransactionItems;//[Offset: 0x8, Size: 0x10]
	float LtvModification;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PlayerInventory_TransactionItem.ProtoMessage
	int64 Value;//[Offset: 0x8, Size: 0x8]
	FString InventoryId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MetaServerTutorialProgressionSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnTutorialProgressionUpdated;//[Offset: 0x30, Size: 0x10]
	ODMetaServerSubsystem* MetaServerSubsystem;//[Offset: 0x48, Size: 0x8]
	void SetFTUEBootcampCompleted(FString ActivityName);// 0x542ad5c
	void ResetFTUEProgress();// 0x542ad48
	void HandleTutorialProgressionGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x542ac3c
	void HandleSetFTUEBootcampCompleted(TutorialServiceRpcClient* RpcClient, out const TutorialService_FTUEBootcampCompletedResponse response, GrpcStatus Status);// 0x542a8ec
	void HandleResetFTUEProgress(TutorialServiceRpcClient* RpcClient, out const TutorialService_ResetTutorialProgresResponse response, GrpcStatus Status);// 0x542a64c
	TutorialProgression_TutorialProgression GetTutorialProgression();// 0x542ae10

--------------------------------
Class: RpcError
	FString ErrorMessage;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TutorialService_FTUEBootcampCompletedResponse.ProtoMessage
	TutorialProgression_TutorialProgression TutorialProgression;//[Offset: 0x8, Size: 0x38]
	Gamedata_ClassLoadouts ClassLoadouts;//[Offset: 0x40, Size: 0x88]

--------------------------------
Class: TutorialProgression_TutorialProgression.ProtoMessage
	bool bFtuebootcampCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bFtuebootcampEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	FString[] ActiveTutorialActivities;//[Offset: 0x10, Size: 0x10]
	Timestamp_Timestamp TimeOfLastProgress;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: TutorialService_ResetTutorialProgresResponse.ProtoMessage
	TutorialProgression_TutorialProgression TutorialProgression;//[Offset: 0x8, Size: 0x38]

--------------------------------
Class: ODBootFlowSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnBootFlowProgressUpdated;//[Offset: 0x50, Size: 0x10]
	delegate OnNewEnvironment;//[Offset: 0x60, Size: 0x10]
	FString AppStoreAppURL;//[Offset: 0x80, Size: 0x10]
	FString GooglePlayAppURL;//[Offset: 0x90, Size: 0x10]
	FString BootMap;//[Offset: 0xa0, Size: 0x10]
	FString DLCMap;//[Offset: 0xb0, Size: 0x10]
	FString NotEligibleMap;//[Offset: 0xc0, Size: 0x10]
	FString MainMenuMap;//[Offset: 0xd0, Size: 0x10]
	FString PerfBenchmarkMap;//[Offset: 0xe0, Size: 0x10]
	class UserWidget* NotEligiblePage;//[Offset: 0xf0, Size: 0x28]
	class UserWidget* BetaParticipationPage;//[Offset: 0x118, Size: 0x28]
	class UserWidget* LoginPage;//[Offset: 0x140, Size: 0x28]
	class UserWidget* TermsUpdatedPage;//[Offset: 0x168, Size: 0x28]
	class UserWidget* StartingFTUEPage;//[Offset: 0x190, Size: 0x28]
	class UserWidget* BootcampPromptPage;//[Offset: 0x1b8, Size: 0x28]
	class UserWidget* Homepage;//[Offset: 0x1e0, Size: 0x28]
	ODMetaServerSubsystem* MetaServerSubsystem;//[Offset: 0x210, Size: 0x8]
	ChannelCredentials* ChannelCredentials;//[Offset: 0x218, Size: 0x8]
	EnvironmentsRegistryServiceRpcClient* RpcClient_EnvRegistry;//[Offset: 0x220, Size: 0x8]
	class ODGenericModal* UpgradeAppWidgetClass;//[Offset: 0x2a0, Size: 0x8]
	ODGenericModal* UpgradeAppWidget;//[Offset: 0x2a8, Size: 0x8]
	BootflowStateMachine* StateMachine;//[Offset: 0x2b0, Size: 0x8]
	void TransitionTo(enum StateId);// 0x54669f0
	enum StateNameToId(FString StateName);// 0x5466934
	FString StateIdToName(const enum StateId);// 0x5466838
	void StartMetaServerConnection();// 0x5466b7c
	void ShowUpgradeAppWidget();// 0x546651c
	void ResetBootFlowProgression();// 0x5466a98
	void OnStateEntered(enum StateId);// 0x546542c
	void OnConsentStateEnter();// 0x54654fc
	void OnAnonymousLoginStateEnter();// 0x54654e8
	void OnAnonymousLoginComplete();// 0x54654d4
	bool MustReAcceptTermsPrivacyPolicy();// 0x5466aac
	void LaunchUpgradeUrl();// 0x5465510
	bool HasGetEnvironmentResponse();// 0x5466500
	void HandleResetBootFlowParameters(PlayerServiceRpcClient* RpcClient, out const PlayerService_PlayerResponse response, GrpcStatus Status);// 0x5465924
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x5465524
	void HandleGetEnvironment(EnvironmentsRegistryServiceRpcClient* RpcClient, out const EnvironmentsRegistryService_GetEnvironmentResponse response, GrpcStatus Status);// 0x5465630
	void HandleAcceptTermsAndPrivacyPolicy(PlayerServiceRpcClient* RpcClient, out const PlayerService_PlayerResponse response, GrpcStatus Status);// 0x5465c80
	void HandleAcceptBetaTerms(PlayerServiceRpcClient* RpcClient, out const PlayerService_PlayerResponse response, GrpcStatus Status);// 0x5465fdc
	bool GetHasAcceptedTermsPrivacyPolicy();// 0x5466ae4
	bool GetHasAcceptedBetaTerms();// 0x5466b1c
	FString GetCurrentEnvironmentSettingName();// 0x5466338
	FString[] GetAvailableEnvironmentNames();// 0x54663e8
	void ConfigureEnvironmentOverride(FString OverrideEnvName);// 0x5466b90
	BootflowState AddState(enum StateId, BootflowStateData StateData);// 0x5466530
	void AcceptTermsAndPrivacyPolicy();// 0x5466b54
	void acceptBetaTerms();// 0x5466b68

--------------------------------
Class: EnvironmentsRegistryServiceRpcClient.RpcClient.Object
	delegate EventenumerateEnvironmentsDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventgetEnvironmentDynamic;//[Offset: 0x118, Size: 0x10]
	bool getEnvironment(EnvironmentsRegistryService_GetEnvironmentRequest Request, out const GrpcClientContext Context);// 0x4041fa4
	bool enumerateEnvironments(EnvironmentsRegistryService_EnumerateEnvironmentsRequest Request, out const GrpcClientContext Context);// 0x4042294

--------------------------------
Class: EnvironmentsRegistryService_GetEnvironmentRequest.IdempotentProtoMessage.ProtoMessage
	FString Branch;//[Offset: 0x18, Size: 0x10]
	FString Platform;//[Offset: 0x28, Size: 0x10]
	Cohodata_Version Version;//[Offset: 0x38, Size: 0x18]
	int BuildConfiguration;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: EnvironmentsRegistryService_EnumerateEnvironmentsRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: BootflowStateMachine.Object
	delegate OnEnteringState;//[Offset: 0x28, Size: 0x10]
	delegate OnEnteredState;//[Offset: 0x38, Size: 0x10]
	delegate OnExitState;//[Offset: 0x48, Size: 0x10]
	delegate OnPostLoadLevel;//[Offset: 0x58, Size: 0x10]
	delegate OnPostLoadPage;//[Offset: 0x68, Size: 0x10]
	ODBootFlowSubsystem* OwningBootFlowSubsystem;//[Offset: 0xd0, Size: 0x8]
	void TransitionTo(const enum StateId);// 0x53ac410
	bool HasState(const enum StateId);// 0x53ac4b8
	BootflowState AddState(const enum StateId, out const BootflowStateData StateData);// 0x53ac56c

--------------------------------
Class: BootflowStateData
	FString LevelToLoad;//[Offset: 0x0, Size: 0x10]
	class UserWidget* PageToLoad;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: BootflowState
	enum StateId;//[Offset: 0x0, Size: 0x1]
	BootflowStateData StateData;//[Offset: 0x8, Size: 0x38]
	delegate OnStateEnter;//[Offset: 0x40, Size: 0x10]
	delegate OnStateExit;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: PlayerService_PlayerResponse.ProtoMessage
	Gamedata_Player Player;//[Offset: 0x8, Size: 0x108]

--------------------------------
Class: EnvironmentsRegistryService_GetEnvironmentResponse.ProtoMessage
	EnvironmentsRegistryService_EnvironmentInfo EnvironmentInfo;//[Offset: 0x8, Size: 0x38]
	bool bForceUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	FString ErrorMessage;//[Offset: 0x48, Size: 0x10]
	EnvironmentsRegistryService_EnvironmentInfo[] AvailableEnvironments;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: EnvironmentsRegistryService_EnvironmentInfo.ProtoMessage
	FString RuleName;//[Offset: 0x8, Size: 0x10]
	FString BaseUrl;//[Offset: 0x18, Size: 0x10]
	FString Name;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ODBadgingSubsystem.GameInstanceSubsystem.Subsystem.Object
	Gamedata_BadgingStatus BadgingStatus;//[Offset: 0x30, Size: 0x178]
	void SetBadgingStatus(const Gamedata_BadgingStatus InBadgingStatus);// 0x545cddc
	void RemoveBadgingForWeaponSpecsByInventoryId(FString InventoryId);// 0x545ddcc
	void RemoveBadgingForWeaponSpecs(FString WeaponContentId, FString ContentId);// 0x545dcc0
	void RemoveBadgingForWeaponsAndGadgets(FString ContentId);// 0x545de80
	void HandleWeaponRankedUp(out const WeaponRankUpNotification[] WeaponRankUpNotifications);// 0x545ca9c
	void HandlePlayerRankedUp(out const PlayerRankUpNotification PlayerRankUpNotification);// 0x545cb90
	Gamedata_BadgingStatus GetBadgingStatus();// 0x545cc40
	bool CheckBadgingForWeaponTypes(const enum AssetTypeId);// 0x545db4c
	bool CheckBadgingForWeaponSpecsOptics(FString WeaponContentId);// 0x545d530
	bool CheckBadgingForWeaponSpecsMini(FString WeaponContentId);// 0x545d770
	bool CheckBadgingForWeaponSpecsByInventoryId(FString InventoryId);// 0x545d948
	bool CheckBadgingForWeaponSpecs(FString WeaponContentId, FString ContentId);// 0x545d830
	bool CheckBadgingForWeaponsAndGadgets(FString ContentId);// 0x545dc00
	bool CheckBadgingForSoldierClass(FString SoldierClassName);// 0x545d6b0
	bool CheckBadgingForPrimaryWeaponFilter(FString Filter);// 0x545d5f0
	bool CheckBadgingForLoadoutButton();// 0x545da08
	bool CheckBadgingForGadgetTypes(const enum AssetTypeId, FString SoldierClassName);// 0x545da40

--------------------------------
Class: WeaponRankUpNotification
	FString WeaponContentId;//[Offset: 0x0, Size: 0x10]
	int PreviousRank;//[Offset: 0x10, Size: 0x4]
	int NewRank;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: PlayerRankUpNotification
	int PreviousRank;//[Offset: 0x0, Size: 0x4]
	int NewRank;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ODStoreSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnWalletLevelsUpdated;//[Offset: 0x30, Size: 0x10]
	delegate OnWalletLevelsUpdatedWithDeltas;//[Offset: 0x40, Size: 0x10]
	delegate OnPlayerInventoryUpdatedDelegate;//[Offset: 0x50, Size: 0x10]
	delegate OnStorePushDataDelegate;//[Offset: 0x60, Size: 0x10]
	delegate OnPurchaseResultDelegate;//[Offset: 0x70, Size: 0x10]
	delegate OnBoostersUpdatedDelegate;//[Offset: 0x80, Size: 0x10]
	delegate OnMTXPurchaseCompleteDelegate;//[Offset: 0x90, Size: 0x10]
	delegate OnBoosterActivated;//[Offset: 0xa0, Size: 0x10]
	delegate OnGachaPurchaseResultDelegate;//[Offset: 0xb0, Size: 0x10]
	PlayerStoreServiceRpcClient* RpcClient_PlayerStoreService;//[Offset: 0xc0, Size: 0x8]
	PlayerBoostersServiceRpcClient* RpcClient_PlayerBoosterService;//[Offset: 0xc8, Size: 0x8]
	MetaServerGameConfigSubsystem* GameConfigSubsystem;//[Offset: 0x5e0, Size: 0x8]
	ODProgressionSubsystem* ProgressionSubsystem;//[Offset: 0x5e8, Size: 0x8]
	ITMTXSubsystem* MTXSubsystem;//[Offset: 0x5f0, Size: 0x8]
	Common_ContentDefinition[] AllCurrencyContentDefs;//[Offset: 0x6c0, Size: 0x10]
	void PurchaseWithPriceChoice(FString StoreCatalogItemID, FString PriceId, int64 count);// 0x553024c
	void purchaseGacha(FString StoreCatalogItemID, int64 count);// 0x5530098
	void purchase(FString StoreCatalogItemID, int64 count);// 0x55303a4
	void OnMTXUpdated(out const ITMTXTransaction MTXTransaction);// 0x552dbf8
	void OnMTXCatalogUpdated();// 0x552dbe4
	bool IsContentOwned(FString ContentId);// 0x552e068
	bool IsCatalogItemOwned(FString CatalogId);// 0x552e260
	void HandleSubscription(PlayerStoreServiceRpcClient* RpcClient, out const StoreService_StorePushDataResponse PushData, GrpcStatus Status);// 0x552f1d4
	void HandlePurchaseResponse(PlayerStoreServiceRpcClient* RpcClient, out const StoreService_PurchaseResponse response, GrpcStatus Status);// 0x552fdf0
	void HandlePurchaseGachaResponse(PlayerStoreServiceRpcClient* RpcClient, out const StoreService_PurchaseGachaResponse response, GrpcStatus Status);// 0x552f4b8
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x55304a4
	void GetWalletRef(out WalletLevels Wallet);// 0x552e714
	WalletLevels GetWallet();// 0x552f0f4
	<FString,StoreService_StoreFrontSubFilterList> GetStoreFrontFilters();// 0x552ec34
	StoreFrontCatalogItem GetStoreFrontCatalogItemByCatalogItemId(FString CatalogItemId);// 0x552dd54
	void GetStoreFrontCatalog(FString Filter, FString SubFilter, out StoreFrontCatalogItemList OutCatalogList);// 0x552e9a0
	Storecatalog_StoreCatalog GetStoreCatalog();// 0x552ecc4
	PlayerInventory GetPlayerInventory();// 0x552eed8
	int64 GetInventoryItemCostInCompanyCoin(FString InventoryId);// 0x552e41c
	FString GetCurrencyDisplayName(FString CurrencyName);// 0x552e55c
	int64 GetCurrencyBalanceByInventoryId(FString InventoryId);// 0x552e658
	int64 GetContentCount(FString ContentId);// 0x552e168
	FString GetCompanyCoinInventoryId();// 0x552e4d8
	void GetBoostersResponse(PlayerBoostersServiceRpcClient* RpcClient, out const BoostersService_ActiveBoostersResponse response, GrpcStatus Status);// 0x552f7f4
	PlayerBoosters GetBoosters();// 0x552ef68
	<FString,StoreFrontCatalogItemList> GetAllStoreFrontCatalog();// 0x552e90c
	FString FindCatalogIdForContentDefId(FString ContentDefinitionId);// 0x552e320
	void ActivateBoosterResponse(PlayerBoostersServiceRpcClient* RpcClient, out const BoostersService_ActivateBoosterResponse response, GrpcStatus Status);// 0x552fa98
	void activateBooster(FString BoosterInventoryId);// 0x5530198

--------------------------------
Class: ITMTXTransaction
	FString Sku;//[Offset: 0x0, Size: 0x10]
	enum TransactionState;//[Offset: 0x10, Size: 0x1]
	enum TransactionError;//[Offset: 0x11, Size: 0x1]
	FString ErrorString;//[Offset: 0x18, Size: 0x10]
	PlayerInventory_PlayerInventoryTransaction InventoryTransaction;//[Offset: 0x28, Size: 0x20]
	Object* NimbleMTXTransaction;//[Offset: 0x48, Size: 0x8]
	bool HasSentErrorTelemetry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: PlayerStoreServiceRpcClient.RpcClient.Object
	delegate EventpurchaseDynamic;//[Offset: 0x180, Size: 0x10]
	delegate EventtryPurchaseContentDynamic;//[Offset: 0x1a8, Size: 0x10]
	delegate EventpurchaseGachaDynamic;//[Offset: 0x1d0, Size: 0x10]
	delegate EventsubscribeDynamic;//[Offset: 0x1f8, Size: 0x10]
	delegate EventunsubscribeDynamic;//[Offset: 0x220, Size: 0x10]
	bool Unsubscribe(StoreService_StoreUnsubscribeRequest Request, out const GrpcClientContext Context);// 0x409bfd8
	bool tryPurchaseContent(StoreService_TryPurchaseRequest Request, out const GrpcClientContext Context);// 0x409c6b4
	bool Subscribe(StoreService_StoreSubscriptionRequest Request, out const GrpcClientContext Context);// 0x409c1dc
	bool purchaseGacha(StoreService_PurchaseRequest Request, out const GrpcClientContext Context);// 0x409c3e0
	bool purchase(StoreService_PurchaseRequest Request, out const GrpcClientContext Context);// 0x409c930

--------------------------------
Class: StoreService_StoreUnsubscribeRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: StoreService_TryPurchaseRequest.IdempotentProtoMessage.ProtoMessage
	FString ContentDefinitionId;//[Offset: 0x18, Size: 0x10]
	int count;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: StoreService_StoreSubscriptionRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: StoreService_PurchaseRequest.IdempotentProtoMessage.ProtoMessage
	FString StoreCatalogId;//[Offset: 0x18, Size: 0x10]
	int count;//[Offset: 0x28, Size: 0x4]
	FString PriceId;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: PlayerBoostersServiceRpcClient.RpcClient.Object
	delegate EventactivateBoosterDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventgetActiveBoostersDynamic;//[Offset: 0x118, Size: 0x10]
	bool getActiveBoosters(BoostersService_GetActiveBoostersRequest Request, out const GrpcClientContext Context);// 0x4019ef0
	bool activateBooster(BoostersService_ActivateBoosterRequest Request, out const GrpcClientContext Context);// 0x401a164

--------------------------------
Class: BoostersService_GetActiveBoostersRequest.IdempotentProtoMessage.ProtoMessage
	FString BoosterInventoryId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: BoostersService_ActivateBoosterRequest.IdempotentProtoMessage.ProtoMessage
	FString BoosterInventoryId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ODProgressionSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnPlayerRankUp;//[Offset: 0x30, Size: 0x10]
	delegate OnWeaponRankUp;//[Offset: 0x40, Size: 0x10]
	void InitializeCache();// 0x551a65c
	void HandlePlayerLoaded();// 0x551a648
	int GetWeaponRank(FString InventoryId);// 0x551a670
	int GetPlayerRank();// 0x551a72c

--------------------------------
Class: ITMTXSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnPurchaseTransactionUpdated;//[Offset: 0x30, Size: 0x10]
	delegate OnNimbleStoreCatalogUpdated;//[Offset: 0x40, Size: 0x10]
	MTXServiceRpcClient* RpcClient_MtxService;//[Offset: 0x50, Size: 0x8]
	<FString,ITMTXTransaction> ActiveMTXTransactionsMap;//[Offset: 0x58, Size: 0x50]
	void RetrieveCatalogItems();// 0x53faf68
	void ResumeTransactionsWhenReady();// 0x53faf54
	void ResumeRecoveredTransactions();// 0x53faf40
	enum PurchaseItem(FString Sku);// 0x53faf7c
	void HandleVerifyPurchaseResponse(MTXServiceRpcClient* RpcClient, out const MtxService_VerifyPurchaseResponse response, GrpcStatus Status);// 0x53fac58
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x53fb038

--------------------------------
Class: MTXServiceRpcClient.RpcClient.Object
	delegate EventverifyIOSPurchaseDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventverifyAndroidPurchaseDynamic;//[Offset: 0x118, Size: 0x10]
	bool verifyIOSPurchase(MtxService_VerifyIOSPurchaseRequest Request, out const GrpcClientContext Context);// 0x40765d8
	bool verifyAndroidPurchase(MtxService_VerifyAndroidPurchaseRequest Request, out const GrpcClientContext Context);// 0x40762a8

--------------------------------
Class: MtxService_VerifyIOSPurchaseRequest.IdempotentProtoMessage.ProtoMessage
	FString Receipt;//[Offset: 0x18, Size: 0x10]
	FString StoreVisitId;//[Offset: 0x28, Size: 0x10]
	FString LocalCurrencyType;//[Offset: 0x38, Size: 0x10]
	float LocalCurrencyValue;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MtxService_VerifyAndroidPurchaseRequest.IdempotentProtoMessage.ProtoMessage
	FString Receipt;//[Offset: 0x18, Size: 0x10]
	FString StoreVisitId;//[Offset: 0x28, Size: 0x10]
	FString LocalCurrencyType;//[Offset: 0x38, Size: 0x10]
	float LocalCurrencyValue;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MtxService_VerifyPurchaseResponse.ProtoMessage
	PlayerInventory_PlayerInventoryTransaction InventoryDelta;//[Offset: 0x8, Size: 0x20]
	FString[] TransactionIds;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: StoreService_StorePushDataResponse.ProtoMessage
	PlayerInventory_PlayerInventoryTransaction InventoryDelta;//[Offset: 0x8, Size: 0x20]
	FString Source;//[Offset: 0x28, Size: 0x10]
	FString Meta;//[Offset: 0x38, Size: 0x10]
	FString PlayerId;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: StoreService_PurchaseResponse.ProtoMessage
	PlayerInventory_PlayerInventoryTransaction InventoryDelta;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: StoreService_PurchaseGachaResponse.ProtoMessage
	PlayerInventory_PlayerInventoryTransaction InventoryDelta;//[Offset: 0x8, Size: 0x20]
	GachaService_GachaPullInfo GachaPullInfo;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: GachaService_GachaPullInfo.ProtoMessage
	FString GachaBoxInventoryId;//[Offset: 0x8, Size: 0x10]
	PlayerInventory_PlayerInventoryTransaction PullResult;//[Offset: 0x18, Size: 0x20]
	int Quantity;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: WalletLevels
	<FString,int64> Currencies;//[Offset: 0x0, Size: 0x50]
	<FString,int64> CurrenciesByInventoryID;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: StoreService_StoreFrontSubFilterList.ProtoMessage
	FString[] SubFilterName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: StoreFrontCatalogItem
	FString ItemDisplayName;//[Offset: 0x0, Size: 0x10]
	FString CatalogItemId;//[Offset: 0x10, Size: 0x10]
	Timestamp_Timestamp ActiveFrom;//[Offset: 0x20, Size: 0x18]
	Timestamp_Timestamp ExpiredAt;//[Offset: 0x38, Size: 0x18]
	StoreFrontItem[] Items;//[Offset: 0x50, Size: 0x10]
	StoreFrontPrice[] Prices;//[Offset: 0x60, Size: 0x10]
	StoreFrontPriceChoice[] PriceChoices;//[Offset: 0x70, Size: 0x10]
	FString ThumbnailPath;//[Offset: 0x80, Size: 0x10]
	FString IosSku;//[Offset: 0x90, Size: 0x10]
	FString AndroidSku;//[Offset: 0xa0, Size: 0x10]
	bool IsMtx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	FString PriceWithCurrencyAndFormat;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: StoreFrontItem
	FString InventoryItemId;//[Offset: 0x0, Size: 0x10]
	int Quantity;//[Offset: 0x10, Size: 0x4]
	FString ParentContentDefId;//[Offset: 0x18, Size: 0x10]
	Common_ContentDefinition ContentDefinition;//[Offset: 0x28, Size: 0xe0]
	bool IsParentUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]

--------------------------------
Class: StoreFrontPrice
	int Quantity;//[Offset: 0x0, Size: 0x4]
	Common_ContentDefinition ContentDefinition;//[Offset: 0x8, Size: 0xe0]

--------------------------------
Class: StoreFrontPriceChoice
	FString PriceId;//[Offset: 0x0, Size: 0x10]
	StoreFrontPrice[] Prices;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StoreFrontCatalogItemList
	FString[] CatalogItemIds;//[Offset: 0x0, Size: 0x10]
	FString FilterName;//[Offset: 0x10, Size: 0x10]
	FString SubFilterName;//[Offset: 0x20, Size: 0x10]
	FString[] UsedCurrencyNames;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Storecatalog_StoreCatalog.ProtoMessage
	Storecatalog_StoreCatalogList SoftCatalogList;//[Offset: 0x8, Size: 0x28]
	Storecatalog_StoreCatalogList GachaCatalogList;//[Offset: 0x30, Size: 0x28]
	Storecatalog_StoreCatalogList[] EventCatalogLists;//[Offset: 0x58, Size: 0x10]
	Storecatalog_StoreCatalogList MtxCatalogList;//[Offset: 0x68, Size: 0x28]
	Storecatalog_StoreCatalogList RegularCatalogList;//[Offset: 0x90, Size: 0x28]

--------------------------------
Class: Storecatalog_StoreCatalogList.ProtoMessage
	Storecatalog_StoreCatalogItem[] CatalogItems;//[Offset: 0x8, Size: 0x10]
	FString EventName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Storecatalog_StoreCatalogItem.ProtoMessage
	FString CatalogItemId;//[Offset: 0x8, Size: 0x10]
	Storecatalog_StoreInventoryItem[] Gain;//[Offset: 0x18, Size: 0x10]
	Storecatalog_StoreInventoryItem[] Cost;//[Offset: 0x28, Size: 0x10]
	Timestamphelpers_TimestampRange ActiveTime;//[Offset: 0x38, Size: 0x48]
	FString ItemTelemetryName;//[Offset: 0x80, Size: 0x10]
	FString ItemThumbnailOverridePath;//[Offset: 0x90, Size: 0x10]
	Storecatalog_StoreCatalogPriceChoice[] PricesChoices;//[Offset: 0xa0, Size: 0x10]
	FString ItemDisplayNameOverride;//[Offset: 0xb0, Size: 0x10]
	float UsdPrice;//[Offset: 0xc0, Size: 0x4]
	FString IosSku;//[Offset: 0xc8, Size: 0x10]
	FString AndroidSku;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: Storecatalog_StoreInventoryItem.ProtoMessage
	int64 Value;//[Offset: 0x8, Size: 0x8]
	FString InventoryId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Timestamphelpers_TimestampRange.ProtoMessage
	Protowrappers_TimestampWrapper StartDate;//[Offset: 0x8, Size: 0x20]
	Protowrappers_TimestampWrapper EndDate;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: Protowrappers_TimestampWrapper.ProtoMessage
	Timestamp_Timestamp Value;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: Storecatalog_StoreCatalogPriceChoice.ProtoMessage
	FString PriceId;//[Offset: 0x8, Size: 0x10]
	Storecatalog_StoreInventoryItem[] Cost;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PlayerInventory
	<FString,int64> Inventory;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: BoostersService_ActiveBoostersResponse.ProtoMessage
	Boosters_ActiveBoosterInfo[] Boosters;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Boosters_ActiveBoosterInfo.ProtoMessage
	Boosters_BoosterDefinition BoosterDef;//[Offset: 0x8, Size: 0x28]
	Timestamphelpers_TimestampRange ActiveTime;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: Boosters_BoosterDefinition.ProtoMessage
	FString BoosterInventoryId;//[Offset: 0x8, Size: 0x10]
	enum BoosterType;//[Offset: 0x18, Size: 0x1]
	float BoosterMultiplier;//[Offset: 0x1c, Size: 0x4]
	int BoosterLumpSumAwarded;//[Offset: 0x20, Size: 0x4]
	int BoosterLength;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: PlayerBoosters
	<FString,int64> AvailableBoosterCountsByInventoryId;//[Offset: 0x0, Size: 0x50]
	<FString,Boosters_BoosterDefinition> BoosterDefinitions;//[Offset: 0x50, Size: 0x50]
	BoostersService_AllActiveBoosters AllActiveBoosters;//[Offset: 0xa0, Size: 0x18]

--------------------------------
Class: BoostersService_AllActiveBoosters.ProtoMessage
	Boosters_ActiveBoosterInfo[] ActiveBoosters;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BoostersService_ActivateBoosterResponse.ProtoMessage
	Boosters_ActiveBoosterInfo ActivatedBooster;//[Offset: 0x8, Size: 0x78]
	BoostersService_AllActiveBoosters AllActiveBoosters;//[Offset: 0x80, Size: 0x18]

--------------------------------
Class: PlayerAssignmentsSubsystem.GameInstanceSubsystem.Subsystem.Object
	PlayerAssignmentServiceRpcClient* RpcClient_PlayerAssignmentService;//[Offset: 0x30, Size: 0x8]
	PlayerEventHubServiceRpcClient* RpcClient_PlayerEventHubService;//[Offset: 0x38, Size: 0x8]
	delegate OnAssignmentClaimedDelegate;//[Offset: 0x40, Size: 0x10]
	delegate OnAssignmentClaimFailedDelegate;//[Offset: 0x50, Size: 0x10]
	delegate OnEventRewardClaimedDelegate;//[Offset: 0x60, Size: 0x10]
	delegate OnEventRewardClaimFailedDelegate;//[Offset: 0x70, Size: 0x10]
	delegate OnAssignmentSeriesHasClaimableRewards;//[Offset: 0x80, Size: 0x10]
	void OnWalletLevelsUpdated(out const WalletLevels Wallet);// 0x5560af0
	void OnEventHubLiveDataUpdated();// 0x5560c44
	void OnAssignmentsLiveDataUpdated();// 0x5560c60
	bool IsCurrentlyClaimingEventReward();// 0x555eee0
	bool IsCurrentlyClaimingAssignmentReward();// 0x555eefc
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x55609e4
	void HandleClaimEventRewardResponse(PlayerEventHubServiceRpcClient* RpcClient, out const EventhubService_EventClaimResponse response, GrpcStatus Status);// 0x555e878
	void HandleClaimAssignmentResponse(PlayerAssignmentServiceRpcClient* RpcClient, out const AssignmentService_AssignmentClaimResponse response, GrpcStatus Status);// 0x555eb94
	void GetUIThemeAsset(FString ContentId, delegate OnThemeAssetLoadedDelegate);// 0x555ef18
	void GetPlayerHubEventData(FString EventId, out PlayerHubEventData OutEventData, out enum OutputPins);// 0x5560334
	bool GetHasCompletedAllSeriesAssignments(FString SeriesId);// 0x555f01c
	bool GetHasClaimableSeriesRewards(FString SeriesId);// 0x555f1e8
	void GetEventAssignmentSeriesData(enum SeriesCategory, FString EventId, out FString[] OutSeriesIds, out enum OutputPins);// 0x556014c
	void GetAssignmentSeriesDataFromId(FString SeriesId, out AssignmentSeriesData OutSeriesData, out enum OutputPins);// 0x555fdf0
	void GetAssignmentSeriesData(enum SeriesCategory, out AssignmentSeriesData OutSeriesData, out enum OutputPins);// 0x555faa4
	void GetAssignmentGroupData(FString SeriesId, FString GroupID, out AssignmentGroupData OutGroupData, out enum OutputPins);// 0x555f7bc
	void GetAssignmentData(FString SeriesId, FString GroupID, FString AssignmentId, out AssignmentData OutAssignmentData, out enum OutputPins);// 0x555f418
	void GetActiveEventIDs(out FString[] OutActiveEvents);// 0x55608f0
	bool ClaimEventReward(FString EventId, const int RewardIndex);// 0x555f0dc
	bool ClaimAssignmentReward(FString SeriesId, FString GroupID, FString AssignmentId);// 0x555f2a8

--------------------------------
Class: PlayerAssignmentServiceRpcClient.RpcClient.Object
	delegate EventclaimAssignmentRewardsDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventgetActiveAssignmentsDynamic;//[Offset: 0x118, Size: 0x10]
	bool getActiveAssignments(AssignmentService_GetActiveAssignmentsRequest Request, out const GrpcClientContext Context);// 0x400bd4c
	bool claimAssignmentRewards(AssignmentService_AssignmentClaimRequest Request, out const GrpcClientContext Context);// 0x400bf50

--------------------------------
Class: AssignmentService_GetActiveAssignmentsRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: AssignmentService_AssignmentClaimRequest.IdempotentProtoMessage.ProtoMessage
	FString AssignmentId;//[Offset: 0x18, Size: 0x10]
	FString GroupID;//[Offset: 0x28, Size: 0x10]
	FString SeriesId;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: PlayerEventHubServiceRpcClient.RpcClient.Object
	delegate EventgetActiveEventsDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventclaimEventRewardsDynamic;//[Offset: 0x118, Size: 0x10]
	bool getActiveEvents(EventhubService_GetActiveEventsRequest Request, out const GrpcClientContext Context);// 0x4043d84
	bool claimEventRewards(EventhubService_EventClaimRequest Request, out const GrpcClientContext Context);// 0x4043b08

--------------------------------
Class: EventhubService_GetActiveEventsRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: EventhubService_EventClaimRequest.IdempotentProtoMessage.ProtoMessage
	FString EventId;//[Offset: 0x18, Size: 0x10]
	int RewardTrackLevel;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EventhubService_EventClaimResponse.ProtoMessage
	FString EventId;//[Offset: 0x8, Size: 0x10]
	EventhubService_PlayerEventHub EventHub;//[Offset: 0x18, Size: 0x18]
	int PlayerXpReward;//[Offset: 0x30, Size: 0x4]
	<FString,int> InventoryRewards;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: EventhubService_PlayerEventHub.ProtoMessage
	EventhubService_PlayerHubEvent[] Events;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: EventhubService_PlayerHubEvent.ProtoMessage
	FString EventId;//[Offset: 0x8, Size: 0x10]
	int RepeatCount;//[Offset: 0x18, Size: 0x4]
	bool[] RewardsCollected;//[Offset: 0x20, Size: 0x10]
	enum Status;//[Offset: 0x30, Size: 0x1]
	int AssignmentProgress;//[Offset: 0x34, Size: 0x4]
	int AssignmentTotal;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AssignmentService_AssignmentClaimResponse.ProtoMessage
	FString AssignmentId;//[Offset: 0x8, Size: 0x10]
	FString GroupID;//[Offset: 0x18, Size: 0x10]
	FString SeriesId;//[Offset: 0x28, Size: 0x10]
	AssignmentService_PlayerAssignmentSeriesMap SeriesMap;//[Offset: 0x38, Size: 0x68]
	int PlayerXpReward;//[Offset: 0xa0, Size: 0x4]
	<FString,int> InventoryRewards;//[Offset: 0xa8, Size: 0x50]

--------------------------------
Class: AssignmentService_PlayerAssignmentSeriesMap.ProtoMessage
	<int,AssignmentService_PlayerAssignmentSeries> OngoingSeries;//[Offset: 0x8, Size: 0x50]
	AssignmentService_PlayerAssignmentSeries[] EventSeries;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: AssignmentService_PlayerAssignmentSeries.ProtoMessage
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	FString SeriesId;//[Offset: 0x18, Size: 0x10]
	<FString,AssignmentService_PlayerAssignmentGroup> GroupProgress;//[Offset: 0x28, Size: 0x50]
	<FString,bool> GroupCompletionRewardsClaimed;//[Offset: 0x78, Size: 0x50]
	bool bSeriesCompletionRewardClaimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	int RepeatCount;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: AssignmentService_PlayerAssignmentGroup.ProtoMessage
	<FString,int> AssignmentProgress;//[Offset: 0x8, Size: 0x50]
	<FString,bool> RewardsClaimed;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: PlayerHubEventData
	FString EventId;//[Offset: 0x0, Size: 0x10]
	EventhubService_PlayerHubEvent PlayerEventData;//[Offset: 0x10, Size: 0x40]
	Eventhub_HubEvent HubEvent;//[Offset: 0x50, Size: 0x190]
	int64 EventProgress;//[Offset: 0x1e0, Size: 0x8]
	FString[] AssignmentSeriesIds;//[Offset: 0x1e8, Size: 0x10]
	PlayerHubEventRewardData[] RewardData;//[Offset: 0x1f8, Size: 0x10]

--------------------------------
Class: Eventhub_HubEvent.ProtoMessage
	FString NameLocText;//[Offset: 0x8, Size: 0x10]
	FString DescriptionLocText;//[Offset: 0x18, Size: 0x10]
	int Priority;//[Offset: 0x28, Size: 0x4]
	Schedule_Schedule ActiveSchedule;//[Offset: 0x30, Size: 0x68]
	int PreviewDurationInHours;//[Offset: 0x98, Size: 0x4]
	int ClaimDurationInHours;//[Offset: 0x9c, Size: 0x4]
	FString[] CurrencyIds;//[Offset: 0xa0, Size: 0x10]
	FString[] StoreIds;//[Offset: 0xb0, Size: 0x10]
	FString DeepLinkUrl;//[Offset: 0xc0, Size: 0x10]
	FString DeepLinkLocText;//[Offset: 0xd0, Size: 0x10]
	FString ProgressCurrencyId;//[Offset: 0xe0, Size: 0x10]
	Eventhub_RewardThreshold[] RewardThresholds;//[Offset: 0xf0, Size: 0x10]
	FString InterstitialContentId;//[Offset: 0x100, Size: 0x10]
	Eventhub_PlayerDependency[] Dependencies;//[Offset: 0x110, Size: 0x10]
	Filtercriteria_FilterCriteria FilterCriteria;//[Offset: 0x120, Size: 0x50]
	FString[] PreviewRewardIds;//[Offset: 0x170, Size: 0x10]
	FString ThemeAsset;//[Offset: 0x180, Size: 0x10]

--------------------------------
Class: Schedule_Schedule.ProtoMessage
	Timestamphelpers_TimestampRange Range;//[Offset: 0x8, Size: 0x48]
	bool bRepeats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RepeatCount;//[Offset: 0x54, Size: 0x4]
	FString Frequency;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: Eventhub_RewardThreshold.ProtoMessage
	int RequiredPoints;//[Offset: 0x8, Size: 0x4]
	FString[] RewardIds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Eventhub_PlayerDependency.ProtoMessage
	FString DependencyId;//[Offset: 0x8, Size: 0x10]
	int Quantity;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Filtercriteria_FilterCriteria.ProtoMessage
	enum FilterMethod;//[Offset: 0x8, Size: 0x1]
	FString A;//[Offset: 0x10, Size: 0x10]
	FString B;//[Offset: 0x20, Size: 0x10]
	FString C;//[Offset: 0x30, Size: 0x10]
	FString D;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PlayerHubEventRewardData
	Eventhub_RewardThreshold RewardThreshold;//[Offset: 0x0, Size: 0x20]
	bool bClaimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bClaimable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	int ClaimIndex;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AssignmentSeriesData
	FString SeriesId;//[Offset: 0x0, Size: 0x10]
	Assignments_AssignmentSeries AssignmentSeries;//[Offset: 0x10, Size: 0x138]
	AssignmentGroupData[] AssignmentGroups;//[Offset: 0x148, Size: 0x10]
	int TotalAssignments;//[Offset: 0x158, Size: 0x4]
	int CompletedAssignments;//[Offset: 0x15c, Size: 0x4]
	int RequiredCompleteAssignmentsForReward;//[Offset: 0x160, Size: 0x4]
	Reward_Reward[] Rewards;//[Offset: 0x168, Size: 0x10]
	bool RewardClaimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]

--------------------------------
Class: Assignments_AssignmentSeries.ProtoMessage
	enum Category;//[Offset: 0x8, Size: 0x1]
	FString LocText;//[Offset: 0x10, Size: 0x10]
	FString ThemeAsset;//[Offset: 0x20, Size: 0x10]
	FString[] AssignmentGroupIds;//[Offset: 0x30, Size: 0x10]
	FString[] CompletionRewardIds;//[Offset: 0x40, Size: 0x10]
	Schedule_Schedule Schedule;//[Offset: 0x50, Size: 0x68]
	int MinRank;//[Offset: 0xb8, Size: 0x4]
	int CompletionRewardGroupThreshold;//[Offset: 0xbc, Size: 0x4]
	FString DescriptionText;//[Offset: 0xc0, Size: 0x10]
	FString EventId;//[Offset: 0xd0, Size: 0x10]
	Filtercriteria_FilterCriteria FilterCriteria;//[Offset: 0xe0, Size: 0x50]
	bool bUseConstantScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]

--------------------------------
Class: AssignmentGroupData
	FString GroupID;//[Offset: 0x0, Size: 0x10]
	AssignmentData[] Assignments;//[Offset: 0x10, Size: 0x10]
	Assignments_AssignmentGroup AssignmentGroup;//[Offset: 0x20, Size: 0x40]
	Reward_Reward[] Rewards;//[Offset: 0x60, Size: 0x10]
	bool RewardClaimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: AssignmentData
	FString AssignmentId;//[Offset: 0x0, Size: 0x10]
	Assignments_Assignment Assignment;//[Offset: 0x10, Size: 0xc0]
	Reward_Reward[] ScoreRewards;//[Offset: 0xd0, Size: 0x10]
	Reward_Reward[] Rewards;//[Offset: 0xe0, Size: 0x10]
	int CurrentProgress;//[Offset: 0xf0, Size: 0x4]
	int RequiredProgress;//[Offset: 0xf4, Size: 0x4]
	bool RewardClaimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: Assignments_Assignment.ProtoMessage
	FString LocText;//[Offset: 0x8, Size: 0x10]
	Assignments_AssignmentAction action;//[Offset: 0x18, Size: 0xa8]

--------------------------------
Class: Assignments_AssignmentAction.ProtoMessage
	enum ActionType;//[Offset: 0x8, Size: 0x1]
	Assignments_AssignmentGameplayAction Gameplay;//[Offset: 0x10, Size: 0x28]
	Assignments_WeaponRankUpAssignmentAction WeaponRankUp;//[Offset: 0x38, Size: 0x28]
	Assignments_SendChatAssignmentAction SendChat;//[Offset: 0x60, Size: 0x18]
	Assignments_UseItemAssignmentAction UseItem;//[Offset: 0x78, Size: 0x18]
	Assignments_OpenGachaAssignmentAction OpenGacha;//[Offset: 0x90, Size: 0x18]

--------------------------------
Class: Assignments_AssignmentGameplayAction.ProtoMessage
	FString EventId;//[Offset: 0x8, Size: 0x10]
	FString[] ConditionIds;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Assignments_WeaponRankUpAssignmentAction.ProtoMessage
	FString WeaponId;//[Offset: 0x8, Size: 0x10]
	FString WeaponGroupId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Assignments_SendChatAssignmentAction.ProtoMessage
	FString ChannelId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Assignments_UseItemAssignmentAction.ProtoMessage
	FString InventoryId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Assignments_OpenGachaAssignmentAction.ProtoMessage
	FString GachaId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Reward_Reward.ProtoMessage
	FString Type;//[Offset: 0x8, Size: 0x10]
	FString SubType;//[Offset: 0x18, Size: 0x10]
	FString Source;//[Offset: 0x28, Size: 0x10]
	Reward_Item[] Items;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: Reward_Item.ProtoMessage
	FString ContentId;//[Offset: 0x8, Size: 0x10]
	int64 Quantity;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: Assignments_AssignmentGroup.ProtoMessage
	FString LocText;//[Offset: 0x8, Size: 0x10]
	FString[] CompletionRewardIds;//[Offset: 0x18, Size: 0x10]
	int CompletionRewardThreshold;//[Offset: 0x28, Size: 0x4]
	Assignments_AssignmentGroupEntry[] Assignments;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Assignments_AssignmentGroupEntry.ProtoMessage
	FString AssignmentId;//[Offset: 0x8, Size: 0x10]
	int Quantity;//[Offset: 0x18, Size: 0x4]
	FString[] RewardIds;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ODMatchStateSubsystem.GameInstanceSubsystem.Subsystem.Object
	float MatchStatePollInterval;//[Offset: 0x50, Size: 0x4]
	delegate OnMatchmakingMatchReady;//[Offset: 0x58, Size: 0x10]
	delegate OnGetMatchStateReceived;//[Offset: 0x68, Size: 0x10]
	delegate OnUIEnterMatchPhaseUpdated;//[Offset: 0x78, Size: 0x10]
	ChannelCredentials* ChannelCredentials;//[Offset: 0x88, Size: 0x8]
	MatchStateServiceRpcClient* RpcClient_MatchState;//[Offset: 0x90, Size: 0x8]
	CohoMatchmakingSubsystem* MatchmakingSubsystem;//[Offset: 0x180, Size: 0x8]
	MetaServerGameConfigSubsystem* GameConfigSubsystem;//[Offset: 0x188, Size: 0x8]
	void ScheduleGetMatchStateRequest();// 0x54d6cc8
	void OnMatchmakingError(FString ErrorMessage, const enum Queue);// 0x54d6f3c
	void OnMatchmakingCanceled();// 0x54d703c
	void OnGetMatchStateSuccess(MatchStateServiceRpcClient* RpcClient, out const MatchStateService_MatchStateResponse response, GrpcStatus Status);// 0x54d6cdc
	void OnGamePhaseChanged(enum OldPhase, enum NewPhase);// 0x54d6bd4
	void OnAssignedToMatch(FString InHost, int InPort, FString InMatchId, FString InTicketId, const enum Queue);// 0x54d7050
	void JoinMatch();// 0x54d7310
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x54d6ac8
	void getMatchState();// 0x54d6f28
	bool GetIsBotMatch();// 0x54d69dc
	enum GetCurrentUIEnterMatchPhase();// 0x54d724c
	void ClearUIMatchPhaseTimer(FString MapName);// 0x54d6a14
	void BeginUIEnterMatchPhaseTimer(enum UIEnterMatchPhase);// 0x54d7268

--------------------------------
Class: MatchStateServiceRpcClient.RpcClient.Object
	delegate EventgetMatchStateDynamic;//[Offset: 0xc0, Size: 0x10]
	bool getMatchState(MatchStateService_MatchStateRequest Request, out const GrpcClientContext Context);// 0x4075034

--------------------------------
Class: MatchStateService_MatchStateRequest.IdempotentProtoMessage.ProtoMessage
	FString MatchId;//[Offset: 0x18, Size: 0x10]
	FString TicketId;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: CohoMatchmakingSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnMatchmakingSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnMatchmakingError;//[Offset: 0x40, Size: 0x10]
	delegate OnMatchmakingCancel;//[Offset: 0x50, Size: 0x10]
	delegate OnMatchmakingBegan;//[Offset: 0x60, Size: 0x10]
	delegate OnAssignedToInstance;//[Offset: 0x70, Size: 0x10]
	float InitialTicketPollInterval;//[Offset: 0x80, Size: 0x4]
	float SubsequentTicketPollInterval;//[Offset: 0x84, Size: 0x4]
	FString ServerRootCAFile;//[Offset: 0x88, Size: 0x10]
	ChannelCredentials* ChannelCredentials;//[Offset: 0x1d0, Size: 0x8]
	MatchmakingServiceRpcClient* RpcClient_Match;//[Offset: 0x1d8, Size: 0x8]
	void StartPortalMatchmaking();// 0x3b92abc
	void StartMatchmaking();// 0x3b92ae4
	void StartFTUEMatchmaking();// 0x3b92ad0
	void SetMatchmakingMap(FString Map);// 0x3b92854
	void ScheduleGetMatchmakeStatusRequest(FString TicketId, const float PollTime);// 0x3b91e0c
	void OnStartMatchmakingSuccess(MatchmakingServiceRpcClient* RpcClient, out const CohoDedicatedserver_StartMatchmakingResponse response, GrpcStatus Status);// 0x3b92570
	void OnGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x3b91f0c
	void OnGetMatchmakingStatusSuccess(MatchmakingServiceRpcClient* RpcClient, out const CohoDedicatedserver_GetMatchmakingStatusResponse response, GrpcStatus Status);// 0x3b9222c
	void OnCancelMatchmakingStatusSuccess(MatchmakingServiceRpcClient* RpcClient, out const CohoDedicatedserver_CancelMatchmakingResponse response, GrpcStatus Status);// 0x3b92018
	bool IsPendingInFlightMatchmakingCancelRequest();// 0x3b92974
	bool IsMatchmaking();// 0x3b9293c
	float GetMatchmakingTime();// 0x3b92908
	void GetMatchmakingStatus(const FString TicketId);// 0x3b929c0
	FString GetMatchmakingMap();// 0x3b927a4
	void CancelMatchmaking();// 0x3b929ac

--------------------------------
Class: MatchmakingServiceRpcClient.RpcClient.Object
	delegate EventcancelMatchmakingDynamic;//[Offset: 0x120, Size: 0x10]
	delegate EventgetMatchmakingStatusDynamic;//[Offset: 0x148, Size: 0x10]
	delegate EventstartMatchmakingDynamic;//[Offset: 0x170, Size: 0x10]
	bool StartMatchmaking(CohoDedicatedserver_StartMatchmakingRequest Request, out const GrpcClientContext Context);// 0x4031934
	bool GetMatchmakingStatus(CohoDedicatedserver_GetMatchmakingStatusRequest Request, out const GrpcClientContext Context);// 0x4031cdc
	bool CancelMatchmaking(CohoDedicatedserver_CancelMatchmakingRequest Request, out const GrpcClientContext Context);// 0x4031f50

--------------------------------
Class: CohoDedicatedserver_StartMatchmakingRequest.IdempotentProtoMessage.ProtoMessage
	FString ConfigurationName;//[Offset: 0x18, Size: 0x10]
	CohoDedicatedserver_MatchmakingPlayer[] Players;//[Offset: 0x28, Size: 0x10]
	<FString,ByteArray> Properties;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: CohoDedicatedserver_MatchmakingPlayer.ProtoMessage
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	CohoDedicatedserver_PlayerAttribute[] PlayerAttributes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: CohoDedicatedserver_PlayerAttribute.ProtoMessage
	FString Key;//[Offset: 0x8, Size: 0x10]
	Any_Any Value;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: Any_Any.ProtoMessage
	FString TypeUrl;//[Offset: 0x8, Size: 0x10]
	ByteArray Value;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ByteArray
	byte[] Bytes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CohoDedicatedserver_GetMatchmakingStatusRequest.IdempotentProtoMessage.ProtoMessage
	FString TicketId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: CohoDedicatedserver_CancelMatchmakingRequest.IdempotentProtoMessage.ProtoMessage
	FString TicketId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: CohoDedicatedserver_StartMatchmakingResponse.ProtoMessage
	FString TicketId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CohoDedicatedserver_GetMatchmakingStatusResponse.ProtoMessage
	enum Status;//[Offset: 0x8, Size: 0x1]
	CohoDedicatedserver_GameSession Session;//[Offset: 0x10, Size: 0x90]
	FString ErrorMessage;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: CohoDedicatedserver_GameSession.ProtoMessage
	FString Host;//[Offset: 0x8, Size: 0x10]
	int Port;//[Offset: 0x18, Size: 0x4]
	CohoDedicatedserver_PlayerSession[] Sessions;//[Offset: 0x20, Size: 0x10]
	FString MatchId;//[Offset: 0x30, Size: 0x10]
	<FString,FString> Properties;//[Offset: 0x40, Size: 0x50]

--------------------------------
Class: CohoDedicatedserver_PlayerSession.ProtoMessage
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	FString PlayerSessionId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: CohoDedicatedserver_CancelMatchmakingResponse.ProtoMessage

--------------------------------
Class: MatchStateService_MatchStateResponse.ProtoMessage
	enum MatchState;//[Offset: 0x8, Size: 0x1]
	int PlayersCount;//[Offset: 0xc, Size: 0x4]
	int MaxPlayers;//[Offset: 0x10, Size: 0x4]
	FString MapName;//[Offset: 0x18, Size: 0x10]
	FString GameMode;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ODNimbleSubsystem.ODMetaServerConnectionSubsystem.ODGameInstanceSubsystemWithDeferredInitialize.GameInstanceSubsystem.Subsystem.Object
	bool PersonaHasConflict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	delegate OnCheckAgeComplianceComplete;//[Offset: 0x38, Size: 0x10]
	delegate FindUsersComplete;//[Offset: 0x48, Size: 0x10]
	delegate OnSearchPersonasComplete;//[Offset: 0x58, Size: 0x10]
	delegate UserDisplayNameChanged;//[Offset: 0x68, Size: 0x10]
	delegate OnNimbleDisplayNameError;//[Offset: 0x78, Size: 0x10]
	delegate OnNimblePersonaConflictReceived;//[Offset: 0x88, Size: 0x10]
	delegate OnNimbleConflictResolutionCanceled;//[Offset: 0x98, Size: 0x10]
	enum CachedAgeComplianceStatus;//[Offset: 0xb8, Size: 0x1]
	ODNimblePersona* CurrentPersona;//[Offset: 0x140, Size: 0x8]
	<FString,ODNimblePersonaGCHolder> CachedUsers;//[Offset: 0x158, Size: 0x50]
	<FString,ODNimblePersonaGCHolder> CachedSearchPersonas;//[Offset: 0x1a8, Size: 0x50]
	void TryForceNewPersonaId(const bool bForce);// 0x54f0d8c
	void SetBirthdate(const DateTime birthdate);// 0x54f0c44
	void ResolvePersonaConflict(FString PersonaId);// 0x54f0688
	void PersonaSearch(FString searchString);// 0x54f08f0
	FString GetPersonaNickname(const bool bAllowEmpty);// 0x54f073c
	FString GetPersonaDisplayName();// 0x54f0840
	bool GetIsNimbleEnabled();// 0x54f0d1c
	DateTime GetBirthdate();// 0x54f0ce8
	void GetAgeComplianceStatus();// 0x54f0b8c
	void FindUsersByUserIds(out const <FString> InUserIds);// 0x54f09a4
	static bool DoesPersonaResetRequireRestart();// 0x54f0d54
	static bool DoesLocalPersonaExist();// 0x54f0e3c
	enum CheckODAgeComplianceStatus();// 0x54f0b58
	void CheckAgeComplianceOfDateTime(const DateTime birthdate);// 0x54f0ba0
	void CheckAgeCompliance();// 0x54f0660
	void ChangeUserDisplayName(FString InDisplayName);// 0x54f0aa4
	void CancelResolvePersonaConflict();// 0x54f0674

--------------------------------
Class: ODMetaServerConnectionSubsystem.ODGameInstanceSubsystemWithDeferredInitialize.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: ODGameInstanceSubsystemWithDeferredInitialize.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: ODNimblePersonaGCHolder
	ODNimblePersona* persona;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Timespan

--------------------------------
Class: InitService_InitResponse.ProtoMessage
	Gamedata_Player Player;//[Offset: 0x8, Size: 0x108]
	Gamedata_Profile Profile;//[Offset: 0x110, Size: 0xe0]
	Gamedata_ClassLoadouts ClassLoadouts;//[Offset: 0x1f0, Size: 0x88]
	Gameconfiguration_GameConfig GameConfig;//[Offset: 0x278, Size: 0x1458]
	Gamedata_BattleStats BattleStats;//[Offset: 0x16d0, Size: 0x58]
	ProfileSettings_PlayerSettings PlayerSettings;//[Offset: 0x1728, Size: 0x48]
	TutorialProgression_TutorialProgression TutorialProgression;//[Offset: 0x1770, Size: 0x38]
	Gamedata_BadgingStatus BadgingStatus;//[Offset: 0x17a8, Size: 0x178]
	Livedata_LiveData LiveData;//[Offset: 0x1920, Size: 0x6b0]
	Cohodata_Catalog Catalog;//[Offset: 0x1fd0, Size: 0x18]
	Gamedata_MatchmakingSettings MatchmakingSettings;//[Offset: 0x1fe8, Size: 0x18]
	PlayerInventory_PlayerInventory Inventory;//[Offset: 0x2000, Size: 0x58]
	AssignmentService_PlayerAssignmentSeriesMap Assignments;//[Offset: 0x2058, Size: 0x68]
	EventhubService_PlayerEventHub Events;//[Offset: 0x20c0, Size: 0x18]
	StoreService_StoreFrontCatalogData StoreFrontCatalogData;//[Offset: 0x20d8, Size: 0xa8]
	LogincalendarService_PlayerLoginCalendarProgressGroup LoginCalendarProgressGroup;//[Offset: 0x2180, Size: 0x58]

--------------------------------
Class: Gamedata_BattleStats.ProtoMessage
	int TotalBattles;//[Offset: 0x8, Size: 0x4]
	int TotalWins;//[Offset: 0xc, Size: 0x4]
	int64 TotalKill;//[Offset: 0x10, Size: 0x8]
	int64 TotalDeath;//[Offset: 0x18, Size: 0x8]
	int64 TotalScore;//[Offset: 0x20, Size: 0x8]
	int TotalXp;//[Offset: 0x28, Size: 0x4]
	Gamedata_BattleXPEarned BattleXp;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: Gamedata_BattleXPEarned.ProtoMessage
	int Kills;//[Offset: 0x8, Size: 0x4]
	int MatchTime;//[Offset: 0xc, Size: 0x4]
	int Objective;//[Offset: 0x10, Size: 0x4]
	int WinBonus;//[Offset: 0x14, Size: 0x4]
	int WinOfTheDayBonus;//[Offset: 0x18, Size: 0x4]
	int TotalEarnedFromMatch;//[Offset: 0x1c, Size: 0x4]
	float BoosterMultiplier;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: Livedata_LiveData.ProtoMessage
	Ftue_FTUE Ftue;//[Offset: 0x8, Size: 0x18]
	Gameactivitypool_GameActivityPool GameActivityPool;//[Offset: 0x20, Size: 0x110]
	Matchmakingportals_MatchmakingPortals MatchmakingPortals;//[Offset: 0x130, Size: 0x18]
	Assignmentspool_AssignmentsPool AssignmentsPool;//[Offset: 0x148, Size: 0x1c0]
	Masterdata_MasterData MasterData;//[Offset: 0x308, Size: 0x58]
	Storecatalog_StoreCatalog StoreCatalog;//[Offset: 0x360, Size: 0xb8]
	Gacha_GachaConfig GachaConfig;//[Offset: 0x418, Size: 0x58]
	Boosters_Boosters Boosters;//[Offset: 0x470, Size: 0x68]
	Pack_PackCollection PackCollection;//[Offset: 0x4d8, Size: 0x58]
	Currency_CurrencyConfigs CurrencyConfigs;//[Offset: 0x530, Size: 0x58]
	Eventhub_EventHub Events;//[Offset: 0x588, Size: 0x58]
	Botconfigs_BotConfigs BotConfigs;//[Offset: 0x5e0, Size: 0x60]
	Combatrewards_CombatRewards CombatRewards;//[Offset: 0x640, Size: 0x18]
	Logincalendarpool_LoginCalendarPool LoginCalendarPool;//[Offset: 0x658, Size: 0x58]

--------------------------------
Class: Ftue_FTUE.ProtoMessage
	Ftue_FTUEInstance[] Instances;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Ftue_FTUEInstance.ProtoMessage
	FString SegmentId;//[Offset: 0x8, Size: 0x10]
	Ftue_FTUEActivity[] FtueActivity;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Ftue_FTUEActivity.ProtoMessage
	FString UniqueName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Gameactivitypool_GameActivityPool.ProtoMessage
	Gameactivities_MatchActivityPool MatchActivityPool;//[Offset: 0x8, Size: 0x58]
	Gameactivities_AnalyticActivityPool AnalyticActivityPool;//[Offset: 0x60, Size: 0x58]
	Gameactivities_UIActivityPool UiActivityPool;//[Offset: 0xb8, Size: 0x58]

--------------------------------
Class: Gameactivities_MatchActivityPool.ProtoMessage
	<FString,Gameactivities_MatchActivity> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Gameactivities_MatchActivity.ProtoMessage
	Gameactivities_GameActivity CommonData;//[Offset: 0x8, Size: 0x80]
	FString PortalName;//[Offset: 0x88, Size: 0x10]
	FString[] MatchModifications;//[Offset: 0x98, Size: 0x10]
	int HumanPlayerCount;//[Offset: 0xa8, Size: 0x4]
	FString FleetType;//[Offset: 0xb0, Size: 0x10]
	FString MatchmakingPage;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: Gameactivities_GameActivity.ProtoMessage
	FString UniqueName;//[Offset: 0x8, Size: 0x10]
	FString Branch;//[Offset: 0x18, Size: 0x10]
	int Priority;//[Offset: 0x28, Size: 0x4]
	FString ActivationRequirement;//[Offset: 0x30, Size: 0x10]
	FString ActivationContext;//[Offset: 0x40, Size: 0x10]
	FString[] Dependencies;//[Offset: 0x50, Size: 0x10]
	FString MinimumVersion;//[Offset: 0x60, Size: 0x10]
	FString MaximumVersion;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: Gameactivities_AnalyticActivityPool.ProtoMessage
	<FString,Gameactivities_AnalyticActivity> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Gameactivities_AnalyticActivity.ProtoMessage
	Gameactivities_GameActivity CommonData;//[Offset: 0x8, Size: 0x80]
	FString AnalyticName;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: Gameactivities_UIActivityPool.ProtoMessage
	<FString,Gameactivities_UIActivity> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Gameactivities_UIActivity.ProtoMessage
	Gameactivities_GameActivity CommonData;//[Offset: 0x8, Size: 0x80]
	FString MessageId;//[Offset: 0x88, Size: 0x10]
	FString FocusPage;//[Offset: 0x98, Size: 0x10]
	FString FocusItem;//[Offset: 0xa8, Size: 0x10]
	FString MessageTest;//[Offset: 0xb8, Size: 0x10]
	FString DismissMode;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: Matchmakingportals_MatchmakingPortals.ProtoMessage
	Matchmakingportals_MatchmakingPortal[] Portals;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Matchmakingportals_MatchmakingPortal.ProtoMessage
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString Description;//[Offset: 0x18, Size: 0x10]
	FString Category;//[Offset: 0x28, Size: 0x10]
	Matchmakingportals_MapDetails[] MapDetails;//[Offset: 0x38, Size: 0x10]
	Timestamphelpers_TimestampRange Availability;//[Offset: 0x48, Size: 0x48]
	bool bExclusiveSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	FString[] Segments;//[Offset: 0x98, Size: 0x10]
	Filtercriteria_FilterCriteria FilterCriteria;//[Offset: 0xa8, Size: 0x50]
	FString SmallDecoratorTexturePath;//[Offset: 0xf8, Size: 0x10]
	FString TallDecoratorTexturePath;//[Offset: 0x108, Size: 0x10]
	Matchmakingportals_MatchModification[] MatchMods;//[Offset: 0x118, Size: 0x10]

--------------------------------
Class: Matchmakingportals_MapDetails.ProtoMessage
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString Mode;//[Offset: 0x18, Size: 0x10]
	int TeamSize;//[Offset: 0x28, Size: 0x4]
	int TeamCount;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: Matchmakingportals_MatchModification.ProtoMessage
	FString Name;//[Offset: 0x8, Size: 0x10]
	<FString,FString> Params;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: Assignmentspool_AssignmentsPool.ProtoMessage
	Assignments_RewardPool RewardPool;//[Offset: 0x8, Size: 0x58]
	Assignments_ActionConditionPool ActionConditionPool;//[Offset: 0x60, Size: 0x58]
	Assignments_AssignmentPool AssignmentPool;//[Offset: 0xb8, Size: 0x58]
	Assignments_AssignmentGroupPool AssignmentGroupPool;//[Offset: 0x110, Size: 0x58]
	Assignments_AssignmentSeriesPool AssignmentSeriesPool;//[Offset: 0x168, Size: 0x58]

--------------------------------
Class: Assignments_RewardPool.ProtoMessage
	<FString,Reward_Reward> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Assignments_ActionConditionPool.ProtoMessage
	<FString,Assignments_ActionCondition> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Assignments_ActionCondition.ProtoMessage
	FString ContentId;//[Offset: 0x8, Size: 0x10]
	FString Description;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Assignments_AssignmentPool.ProtoMessage
	<FString,Assignments_Assignment> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Assignments_AssignmentGroupPool.ProtoMessage
	<FString,Assignments_AssignmentGroup> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Assignments_AssignmentSeriesPool.ProtoMessage
	<FString,Assignments_AssignmentSeries> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Masterdata_MasterData.ProtoMessage
	<FString,Masterdata_MasterDataValue> DataTypesToValues;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Masterdata_MasterDataValue.ProtoMessage
	FString[] ValueList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Gacha_GachaConfig.ProtoMessage
	<FString,Gacha_GachaBoxConfig> GachaBoxConfigs;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Gacha_GachaBoxConfig.ProtoMessage
	FString ConfigId;//[Offset: 0x8, Size: 0x10]
	Gacha_GachaRewardItem[] Rewards;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Gacha_GachaRewardItem.ProtoMessage
	FString RewardId;//[Offset: 0x8, Size: 0x10]
	FString ItemId;//[Offset: 0x18, Size: 0x10]
	int Quantity;//[Offset: 0x28, Size: 0x4]
	int ProbabilityWeight;//[Offset: 0x2c, Size: 0x4]
	enum ItemType;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Boosters_Boosters.ProtoMessage
	<FString,Boosters_BoosterDefinition> BoostersById;//[Offset: 0x8, Size: 0x50]
	Boosters_GlobalBooster[] GlobalBoosters;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: Boosters_GlobalBooster.ProtoMessage
	FString BoosterName;//[Offset: 0x8, Size: 0x10]
	enum BoosterType;//[Offset: 0x18, Size: 0x1]
	float BoosterMultiplier;//[Offset: 0x1c, Size: 0x4]
	Timestamphelpers_TimestampRange ActiveTime;//[Offset: 0x20, Size: 0x48]

--------------------------------
Class: Pack_PackCollection.ProtoMessage
	<FString,Pack_Pack> Packs;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Pack_Pack.ProtoMessage
	FString PackDefinitionId;//[Offset: 0x8, Size: 0x10]
	FString PackInstanceId;//[Offset: 0x18, Size: 0x10]
	FString Name;//[Offset: 0x28, Size: 0x10]
	FString PackType;//[Offset: 0x38, Size: 0x10]
	FString Description;//[Offset: 0x48, Size: 0x10]
	FString State;//[Offset: 0x58, Size: 0x10]
	Protowrappers_TimestampWrapper DateOpened;//[Offset: 0x68, Size: 0x20]
	Protowrappers_TimestampWrapper DateGranted;//[Offset: 0x88, Size: 0x20]
	Protowrappers_TimestampWrapper DateClaimed;//[Offset: 0xa8, Size: 0x20]
	FString EarnedBy;//[Offset: 0xc8, Size: 0x10]
	Protowrappers_TimestampWrapper LastUpdatedDate;//[Offset: 0xd8, Size: 0x20]
	Pack_PricePoint[] PricePoints;//[Offset: 0xf8, Size: 0x10]
	Pack_Content[] Contents;//[Offset: 0x108, Size: 0x10]
	FString ImageUrl;//[Offset: 0x118, Size: 0x10]
	FString Grantable;//[Offset: 0x128, Size: 0x10]
	Pack_GrantableType[] GrantableTypes;//[Offset: 0x138, Size: 0x10]
	int MaxLimitToGrant;//[Offset: 0x148, Size: 0x4]

--------------------------------
Class: Pack_PricePoint.ProtoMessage
	FString Price;//[Offset: 0x8, Size: 0x10]
	FString Currency;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Pack_Content.ProtoMessage
	FString ItemDefinitionId;//[Offset: 0x8, Size: 0x10]
	FString ItemId;//[Offset: 0x18, Size: 0x10]
	FString Name;//[Offset: 0x28, Size: 0x10]
	FString Type;//[Offset: 0x38, Size: 0x10]
	FString Description;//[Offset: 0x48, Size: 0x10]
	int Quantity;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: Pack_GrantableType.ProtoMessage
	FString Type;//[Offset: 0x8, Size: 0x10]
	FString[] Values;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Currency_CurrencyConfigs.ProtoMessage
	<FString,Currency_CurrencyConfig> CurrencyConfigMap;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Currency_CurrencyConfig.ProtoMessage
	FString CurrencyInventoryItemId;//[Offset: 0x8, Size: 0x10]
	Timestamphelpers_TimestampRange ActiveTime;//[Offset: 0x18, Size: 0x48]
	Currency_ConversionRate ConversionRate;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: Currency_ConversionRate.ProtoMessage
	float From;//[Offset: 0x8, Size: 0x4]
	float To;//[Offset: 0xc, Size: 0x4]
	FString ToCurrencyInventoryItemId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Eventhub_EventHub.ProtoMessage
	<FString,Eventhub_HubEvent> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Botconfigs_BotConfigs.ProtoMessage
	Botconfigs_BotCosmeticConfig[] BotCosmetics;//[Offset: 0x8, Size: 0x10]
	Botconfigs_BotLoadoutConfigOptions BotLoadouts;//[Offset: 0x18, Size: 0x48]

--------------------------------
Class: Botconfigs_BotCosmeticConfig.ProtoMessage
	FString SkinContentId;//[Offset: 0x8, Size: 0x10]
	FString GlovesContentId;//[Offset: 0x18, Size: 0x10]
	FString BackpackContentId;//[Offset: 0x28, Size: 0x10]
	int ChanceToPick;//[Offset: 0x38, Size: 0x4]
	int MaxCountInGame;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: Botconfigs_BotLoadoutConfigOptions.ProtoMessage
	Botconfigs_BotWeaponOption[] PrimaryWeapons;//[Offset: 0x8, Size: 0x10]
	Botconfigs_BotWeaponOption[] SecondaryWeapons;//[Offset: 0x18, Size: 0x10]
	Botconfigs_BotWeaponOption[] Grenades;//[Offset: 0x28, Size: 0x10]
	Botconfigs_BotWeaponOption[] Gadgets;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: Botconfigs_BotWeaponOption.ProtoMessage
	FString EquipmentContentId;//[Offset: 0x8, Size: 0x10]
	FString OpticContentId;//[Offset: 0x18, Size: 0x10]
	FString[] PossibleEquipmentSkins;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Combatrewards_CombatRewards.ProtoMessage
	Protowrappers_TimeOfDayWrapper FirstWinBonusDailyResetTimeUtc;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Protowrappers_TimeOfDayWrapper.ProtoMessage
	int Hour;//[Offset: 0x8, Size: 0x4]
	int Minute;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Logincalendarpool_LoginCalendarPool.ProtoMessage
	<FString,Logincalendar_LoginCalendar> Entries;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: Logincalendar_LoginCalendar.ProtoMessage
	FString ID;//[Offset: 0x8, Size: 0x10]
	FString ThemeObjectId;//[Offset: 0x18, Size: 0x10]
	int TabPriorityNumber;//[Offset: 0x28, Size: 0x4]
	FString TabNameLocText;//[Offset: 0x30, Size: 0x10]
	FString NameLocText;//[Offset: 0x40, Size: 0x10]
	FString DescriptionLocText;//[Offset: 0x50, Size: 0x10]
	enum ScheduleType;//[Offset: 0x60, Size: 0x1]
	Logincalendar_LoginCalendarIntervalReward[] IntervalRewards;//[Offset: 0x68, Size: 0x10]
	Logincalendar_LoginCalendarRetroactivePurchasableCostItem[] RetroactivePurchasableCosts;//[Offset: 0x78, Size: 0x10]
	Logincalendar_LoginCalendarPurchaseCostItem[] PurchaseCosts;//[Offset: 0x88, Size: 0x10]
	bool bRetroactivePurchasable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bBeginsWithUserInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	int LoginIntervalInMinutes;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: Logincalendar_LoginCalendarIntervalReward.ProtoMessage
	FString RewardItemId;//[Offset: 0x8, Size: 0x10]
	FString RewardArtOverride;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Logincalendar_LoginCalendarRetroactivePurchasableCostItem.ProtoMessage
	Logincalendar_LoginCalendarPurchaseCostItem[] Costs;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Logincalendar_LoginCalendarPurchaseCostItem.ProtoMessage
	FString InventoryId;//[Offset: 0x8, Size: 0x10]
	int64 Quantity;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: Cohodata_Catalog.ProtoMessage
	Cohodata_CatalogItem[] Items;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Cohodata_CatalogItem.ProtoMessage
	FString ID;//[Offset: 0x8, Size: 0x10]
	Cohodata_CatalogItemCost[] Cost;//[Offset: 0x18, Size: 0x10]
	Cohodata_CatalogItemValue[] Items;//[Offset: 0x28, Size: 0x10]
	<FString,FString> Properties;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: Cohodata_CatalogItemCost.ProtoMessage
	FString CostId;//[Offset: 0x8, Size: 0x10]
	int64 Value;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: Cohodata_CatalogItemValue.ProtoMessage
	FString ItemId;//[Offset: 0x8, Size: 0x10]
	int64 Value;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PlayerInventory_PlayerInventory.ProtoMessage
	<FString,PlayerInventory_InventoryItem> Items;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: PlayerInventory_InventoryItem.ProtoMessage
	int64 Value;//[Offset: 0x8, Size: 0x8]
	FString InventoryId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StoreService_StoreFrontCatalogData.ProtoMessage
	<FString,StoreService_StoreFrontSubFilterList> Filters;//[Offset: 0x8, Size: 0x50]
	<FString,StoreService_StoreFrontCatalogList> StoreFrontCatalogLists;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: StoreService_StoreFrontCatalogList.ProtoMessage
	StoreService_StoreFrontCatalogItem[] CatalogItem;//[Offset: 0x8, Size: 0x10]
	FString FilterName;//[Offset: 0x18, Size: 0x10]
	FString SubFilterName;//[Offset: 0x28, Size: 0x10]
	FString[] UsedCurrencies;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: StoreService_StoreFrontCatalogItem.ProtoMessage
	FString CatalogItemId;//[Offset: 0x8, Size: 0x10]
	Timestamp_Timestamp ExpireAt;//[Offset: 0x18, Size: 0x18]
	StoreService_StoreFrontItem[] Items;//[Offset: 0x30, Size: 0x10]
	StoreService_StoreFrontPrice[] Prices;//[Offset: 0x40, Size: 0x10]
	Timestamp_Timestamp ActiveFrom;//[Offset: 0x50, Size: 0x18]
	FString ItemThumbnailOverridePath;//[Offset: 0x68, Size: 0x10]
	StoreService_StoreFrontPriceChoice[] PriceChoices;//[Offset: 0x78, Size: 0x10]
	FString ItemDisplayNameOverride;//[Offset: 0x88, Size: 0x10]
	bool bIsMtx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	FString AndroidSku;//[Offset: 0xa0, Size: 0x10]
	FString IosSku;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: StoreService_StoreFrontItem.ProtoMessage
	FString InventoryItemId;//[Offset: 0x8, Size: 0x10]
	int Quantity;//[Offset: 0x18, Size: 0x4]
	FString ContentDefId;//[Offset: 0x20, Size: 0x10]
	FString ParentContentDefId;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StoreService_StoreFrontPrice.ProtoMessage
	FString ContentDefId;//[Offset: 0x8, Size: 0x10]
	int Quantity;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: StoreService_StoreFrontPriceChoice.ProtoMessage
	FString PriceId;//[Offset: 0x8, Size: 0x10]
	StoreService_StoreFrontPrice[] Prices;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LogincalendarService_PlayerLoginCalendarProgressGroup.ProtoMessage
	<FString,LogincalendarService_PlayerLoginCalendarProgress> LoginCalendarProgressGroup;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: LogincalendarService_PlayerLoginCalendarProgress.ProtoMessage
	int[] NodeStatus;//[Offset: 0x8, Size: 0x10]
	Timestamp_Timestamp StartTimestamp;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: InitService_HeartbeatResponse.ProtoMessage
	int64 ServerTime;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PlayerService_GetPublicProfilesResponse.ProtoMessage
	Gamedata_PublicProfile[] Profiles;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BattlestatsService_GetMatchResultsResponse.ProtoMessage
	FString MatchId;//[Offset: 0x8, Size: 0x10]
	MatchView_MatchResultsView MatchResultsView;//[Offset: 0x18, Size: 0x128]

--------------------------------
Class: MatchView_MatchResultsView.ProtoMessage
	FString MatchId;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
	bool bIsPlayerOnWinningTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	MatchView_Podium Winners;//[Offset: 0x30, Size: 0x68]
	MatchView_Podium Losers;//[Offset: 0x98, Size: 0x68]
	FString MapName;//[Offset: 0x100, Size: 0x10]
	FString GameMode;//[Offset: 0x110, Size: 0x10]
	enum PlayerMatchOutcome;//[Offset: 0x120, Size: 0x1]
	enum MatchOutcome;//[Offset: 0x121, Size: 0x1]

--------------------------------
Class: MatchView_Podium.ProtoMessage
	int TeamId;//[Offset: 0x8, Size: 0x4]
	int64 TeamScore;//[Offset: 0x10, Size: 0x8]
	<int,MatchView_PlayerMatchResults> PlayerMatchResults;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MatchView_PlayerMatchResults.ProtoMessage
	int Placement;//[Offset: 0x8, Size: 0x4]
	MatchView_PlayerMatchDetails PlayerDetails;//[Offset: 0x10, Size: 0x470]
	MatchView_WeaponMatchDetails[] WeaponDetails;//[Offset: 0x480, Size: 0x10]

--------------------------------
Class: MatchView_PlayerMatchDetails.ProtoMessage
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	FString Name;//[Offset: 0x18, Size: 0x10]
	MatchRecord_PlayerStats Stats;//[Offset: 0x28, Size: 0x20]
	Gamedata_BattleXPEarned XpEarned;//[Offset: 0x48, Size: 0x28]
	bool bHasRankUpResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	MatchView_RankUpResult RankUpResults;//[Offset: 0x78, Size: 0x78]
	bool bIsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	FString SpawnedClass;//[Offset: 0xf8, Size: 0x10]
	Loadout_LoadoutV2 LastSpawnedLoadoutV2;//[Offset: 0x108, Size: 0x368]

--------------------------------
Class: MatchRecord_PlayerStats.ProtoMessage
	int Score;//[Offset: 0x8, Size: 0x4]
	int Kills;//[Offset: 0xc, Size: 0x4]
	int Deaths;//[Offset: 0x10, Size: 0x4]
	int Objectives;//[Offset: 0x14, Size: 0x4]
	int MatchDurationInSeconds;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MatchView_RankUpResult.ProtoMessage
	Gamedata_Progression PreMatchProgression;//[Offset: 0x8, Size: 0x10]
	Gamedata_Progression PostMatchProgression;//[Offset: 0x18, Size: 0x10]
	<int,ProgressionCommon_UnlockableContent> NewlyUnlockContentPerRank;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MatchView_WeaponMatchDetails.ProtoMessage
	FString ContentId;//[Offset: 0x8, Size: 0x10]
	MatchRecord_WeaponStats Stats;//[Offset: 0x18, Size: 0x18]
	Gamedata_WeaponXpEarned XpEarned;//[Offset: 0x30, Size: 0x20]
	bool bHasRankUpResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	MatchView_RankUpResult RankUpResults;//[Offset: 0x58, Size: 0x78]

--------------------------------
Class: MatchRecord_WeaponStats.ProtoMessage
	int Kills;//[Offset: 0x8, Size: 0x4]
	int Assists;//[Offset: 0xc, Size: 0x4]
	int EquipmentActiveDurationInSeconds;//[Offset: 0x10, Size: 0x4]
	bool bExcludeFromXp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: Gamedata_WeaponXpEarned.ProtoMessage
	int Kills;//[Offset: 0x8, Size: 0x4]
	int Assists;//[Offset: 0xc, Size: 0x4]
	int EquipmentActiveDurationInSeconds;//[Offset: 0x10, Size: 0x4]
	float BoosterMultiplier;//[Offset: 0x14, Size: 0x4]
	int TotalEarnedFromMatch;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: WwceFlowService_EncryptTPTKResponse.ProtoMessage
	FString EncryptedTptk;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AuthService_EadpLoginResponse.ProtoMessage
	FString SessionToken;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
	FString DisplayName;//[Offset: 0x28, Size: 0x10]
	FString AnonymousToken;//[Offset: 0x38, Size: 0x10]
	FString NucleusId;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnonymousAuthService_LoginResponse.ProtoMessage
	FString SessionToken;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ODRenderingSettingsSubsystem.GameInstanceSubsystem.Subsystem.Object
	DataTable* SettingsDefinitionTable;//[Offset: 0x30, Size: 0x8]
	DataTable* GraphicsQualityLevelSettingsTable;//[Offset: 0x38, Size: 0x8]
	delegate OnGraphicsQualityTierChanged;//[Offset: 0x40, Size: 0x10]
	void ResetAllRenderingSettings();// 0x551d0bc
	void RegisterParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x551d014
	void OnToggleSettingSaved(out const ProfileSettings_OnOffToggleProfileSetting PlayerSetting);// 0x551ce7c
	void OnRadioSettingSaved(out const ProfileSettings_RadioProfileSetting PlayerSetting);// 0x551ccc4
	void OnPlayerSettingsLoaded();// 0x551cf58
	void OnCvarChanged();// 0x551ccb0
	void OnBoolSettingSaved(out const ProfileSettings_BoolProfileSetting PlayerSetting);// 0x551cda0
	bool IsSettingEditable(out const FName SettingId);// 0x551d23c
	int GetSettingDefaultValue(out const FName SettingId);// 0x551d180
	void DeregisterParticleSystem(ParticleSystemComponent* ParticleComponent);// 0x551cf6c
	void ApplySettingsFromPlayerProfile(bool bForceApplySettings);// 0x551d0d0

--------------------------------
Class: PlayerService_SaveRadioSelectSettingResponse.ProtoMessage
	ProfileSettings_RadioProfileSetting Setting;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: PlayerService_SaveOnOffToggleSettingResponse.ProtoMessage
	ProfileSettings_OnOffToggleProfileSetting Setting;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: PlayerService_SaveFloatPlayerSettingResponse.ProtoMessage
	ProfileSettings_FloatRangeProfileSetting Setting;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: PlayerService_SaveBoolProfileSettingResponse.ProtoMessage
	ProfileSettings_BoolProfileSetting Setting;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: ServerPlayerLoadoutComponent.ActorComponent.Object
	void OnLoadPlayerLoadout(out const DgsPlayerinfoService_DgsPlayerInfo response);// 0x5577d38

--------------------------------
Class: DgsPlayerinfoService_DgsPlayerInfo.ProtoMessage
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	DgsSessionService_UserSessionData SessionData;//[Offset: 0x18, Size: 0x78]
	Gamedata_ClassLoadouts Loadouts;//[Offset: 0x90, Size: 0x88]
	Gamedata_Profile Profile;//[Offset: 0x118, Size: 0xe0]
	AssignmentService_PlayerAssignmentSeriesMap Assignments;//[Offset: 0x1f8, Size: 0x68]

--------------------------------
Class: DgsSessionService_UserSessionData.ProtoMessage
	FString userId;//[Offset: 0x8, Size: 0x10]
	FString SessionId;//[Offset: 0x18, Size: 0x10]
	FString Country;//[Offset: 0x28, Size: 0x10]
	FString DeviceID;//[Offset: 0x38, Size: 0x10]
	FString DeviceModel;//[Offset: 0x48, Size: 0x10]
	FString OsVersion;//[Offset: 0x58, Size: 0x10]
	FString Platform;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: ServerPlayerAssignmentComponent.ActorComponent.Object
	ODLiveOpsSubsystem* LiveOpsSubsystem;//[Offset: 0xb0, Size: 0x8]
	AssignmentsSubsystem* AssignmentsSubsystem;//[Offset: 0xb8, Size: 0x8]
	FString PlayerId;//[Offset: 0xc0, Size: 0x10]
	void OnUpdatePlayerAssignmentProgress(out const AssignmentService_PlayerAssignmentSeriesMap response);// 0x557728c
	void OnMatchEnded(int WinningTeam);// 0x55771e4
	void OnLogout(out const enum GamePhase);// 0x5577130
	void OnLoadPlayerAssignments(out const DgsPlayerinfoService_DgsPlayerInfo response);// 0x55773c4
	void LoadPlayerAssignments();// 0x5577810

--------------------------------
Class: ODLiveOpsSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnLiveDataUpdated;//[Offset: 0x40, Size: 0x10]
	delegate OnMatchmakingPortalsUpdated;//[Offset: 0x50, Size: 0x10]
	delegate OnAssignmentsDataUpdated;//[Offset: 0x60, Size: 0x10]
	delegate OnEventHubDataUpdated;//[Offset: 0x70, Size: 0x10]
	GameDataServiceRpcClient* RpcClient_GameData;//[Offset: 0x98, Size: 0x8]
	bool TryGetHubEventFromId(FString EventId, out Eventhub_HubEvent OutEventHub);// 0x54d43e0
	bool TryGetAssignmentSeriesFromId(FString SeriesId, out Assignments_AssignmentSeries OutAssignmentSeries);// 0x54d4b54
	bool TryGetAssignmentRewardFromId(FString RewardId, out Reward_Reward OutReward);// 0x54d484c
	bool TryGetAssignmentGroupFromId(FString GroupID, out Assignments_AssignmentGroup OutAssignmentGroup);// 0x54d4e28
	bool TryGetAssignmentFromId(FString AssignmentId, out Assignments_Assignment OutAssignment);// 0x54d5048
	bool TryGetAssignmentActionConditionFromId(FString ConditionId, out Assignments_ActionCondition OutActionCondition);// 0x54d4a08
	void RefreshMatchmakingPortals();// 0x54d43cc
	void RefreshEventHub();// 0x54d43a4
	void RefreshAssignments();// 0x54d43b8
	static FString GetTeamSizesString(out const Matchmakingportals_MatchmakingPortal Portal);// 0x54d52c8
	FString[] GetPortalCategoryNames();// 0x54d580c
	Matchmakingportals_MatchmakingPortal[] GetNonExpiredPortalsInCategory(FString Category);// 0x54d566c
	Matchmakingportals_MatchmakingPortal[] GetNonExpiredMatchmakingPortals();// 0x54d5dc0
	Matchmakingportals_MatchmakingPortal[] GetNonExclusivePortalsInCategory(FString Category);// 0x54d559c
	Matchmakingportals_MatchmakingPortal GetMatchmakingPortal(FString Name);// 0x54d5924
	Matchmakingportals_MatchmakingPortal[] GetAllPortalsInCategory(FString Category);// 0x54d573c

--------------------------------
Class: GameDataServiceRpcClient.RpcClient.Object
	delegate EventGetAssignmentsDynamic;//[Offset: 0x120, Size: 0x10]
	delegate EventGetEventHubDynamic;//[Offset: 0x148, Size: 0x10]
	delegate EventGetMatchmakingPortalsDynamic;//[Offset: 0x170, Size: 0x10]
	bool GetMatchmakingPortals(GameDataService_GetMatchmakingPortalsRequest Request, out const GrpcClientContext Context);// 0x4058eac
	bool GetEventHub(GameDataService_GetEventHubRequest Request, out const GrpcClientContext Context);// 0x40590b0
	bool GetAssignments(GameDataService_GetAssignmentsRequest Request, out const GrpcClientContext Context);// 0x40592b4

--------------------------------
Class: GameDataService_GetMatchmakingPortalsRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: GameDataService_GetEventHubRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: GameDataService_GetAssignmentsRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: AssignmentsSubsystem.GameInstanceSubsystem.Subsystem.Object
	ODOnlineMetaServerSubsystem* MetaServerSubsystem;//[Offset: 0xb8, Size: 0x8]
	DGSAssignmentServiceRpcClient* RpcClient_Assignment;//[Offset: 0xd0, Size: 0x8]
	<FString,PlayerAssignmentData> PlayerIdToPlayerAssignmentsMap;//[Offset: 0x1d0, Size: 0x50]
	AssignmentEvent*[] AssignmentEventQueue;//[Offset: 0x220, Size: 0x10]
	void QueueAssignmentEvent(AssignmentEvent* Event);// 0x5380120
	void OnVehicleDestroyedEvent(out const VehicleDamagedEvent DamageEvent);// 0x537fd40
	void OnVehicleDamageEvent(out const VehicleDamagedEvent DamageEvent);// 0x537fe38
	void OnSpawnEvent(out const PlayerSpawnedEvent PlayerSpawnedEvent);// 0x537fa84
	void OnScoreEvent(out const PlayerScoredEvent PlayerScoredEvent);// 0x537f9bc
	void OnMatchEnded(int WinningTeamIndex);// 0x537f90c
	void OnKillEvent(out const CharacterDamagedEvent DamageInfo);// 0x537fb54
	void OnDamageEvent(out const DamageReceived DamageInfo);// 0x537fc4c
	void OnCharacterKilledEvent(out const CharacterDamagedEvent DamageEvent);// 0x537ff30
	void OnCharacterDamageEvent(out const CharacterDamagedEvent DamageEvent);// 0x5380028
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x53807bc
	void HandleGetPlayerAssignments(DGSAssignmentServiceRpcClient* RpcClient, out const AssignmentService_PlayerAssignmentResponse response, GrpcStatus Status);// 0x53804f4
	void HandleAddAssignmentProgress(DGSAssignmentServiceRpcClient* RpcClient, out const AssignmentService_AssignmentProgressResponse response, GrpcStatus Status);// 0x53801c8

--------------------------------
Class: AssignmentEvent.Object
	enum EventType;//[Offset: 0x28, Size: 0x1]
	FString PlayerId;//[Offset: 0x30, Size: 0x10]
	FString[] ConditionalsMet;//[Offset: 0x40, Size: 0x10]
	int AssignmentProgressDelta;//[Offset: 0x50, Size: 0x4]
	void TryAddAssignmentCondition(bool bShouldAddConditionId, FString ConditionId);// 0x537874c
	void SetAssignmentProgressDelta(int NewAssignmentProgressDelta);// 0x53786a4
	void PrintDebugString();// 0x5378690

--------------------------------
Class: PlayerScoredEvent
	ODPlayerState* ScoringPlayerState;//[Offset: 0x0, Size: 0x8]
	enum EventType;//[Offset: 0x8, Size: 0x1]
	float PointValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ODOnlineMetaServerSubsystem.GameInstanceSubsystem.Subsystem.Object
	BattleStatsServiceRpcClient* RpcClient_BattleStats;//[Offset: 0xa8, Size: 0x8]
	DGSSessionServiceRpcClient* RpcClient_DGSSessionService;//[Offset: 0xb0, Size: 0x8]
	DGSAuthServiceRpcClient* RpcClient_DGSAuthService;//[Offset: 0xb8, Size: 0x8]
	BackfillingServiceRpcClient* RpcClient_Backfilling;//[Offset: 0xc0, Size: 0x8]
	DgsPlayerInfoServiceRpcClient* RpcClient_DgsPlayerInfoService;//[Offset: 0xc8, Size: 0x8]
	ODMetaServerDgsPlayerInfoSubsystem* DgsPlayerInfoSubsystem;//[Offset: 0xd0, Size: 0x8]
	FString DefaultMetaServerUrl;//[Offset: 0xe8, Size: 0x10]
	MetaServerGameConfigSubsystem* GameConfigSubsystem;//[Offset: 0x120, Size: 0x8]
	FString ServerRootCAFile;//[Offset: 0x1c8, Size: 0x10]
	TelemetryServiceSubsystem* TelemetryServerInstance;//[Offset: 0x1d8, Size: 0x8]
	ChannelCredentials* ChannelCredentials;//[Offset: 0x280, Size: 0x8]
	void updateBattleStats(out const MatchRecord_MatchRecord MatchRecord);// 0x54f9e40
	void HandleUpdateBattleStatsGrpcError(RpcClient* RpcClient, out const RpcError Error);// 0x54f9b70
	void HandleUpdateBattleStats(BattleStatsServiceRpcClient* RpcClient, out const BattlestatsService_UpdateBattleStatsResponse response, GrpcStatus Status);// 0x54f9848
	void HandleStartSession(DGSSessionServiceRpcClient* RpcClient, out const DgsSessionService_StartDGSSessionResponse response, GrpcStatus Status);// 0x54f7e04
	void HandleNotifyMapLoadComplete(DGSSessionServiceRpcClient* RpcClient, out const DgsSessionService_NotifyMapLoadCompleteResponse response, GrpcStatus Status);// 0x54f7bf0
	void HandleMultiplayLogin(DGSAuthServiceRpcClient* RpcClient, out const DgsAuthService_DGSLoginResponse response, GrpcStatus Status);// 0x54f9614
	void HandleGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x54f9c7c
	FString GetSessionIdString();// 0x54f9d88
	FString GetCurrentURL();// 0x54f9fe0

--------------------------------
Class: MatchRecord_MatchRecord.ProtoMessage
	FString MatchId;//[Offset: 0x8, Size: 0x10]
	MatchRecord_PlayerMatchRecord[] PlayerRecords;//[Offset: 0x18, Size: 0x10]
	<int,int64> TeamScores;//[Offset: 0x28, Size: 0x50]
	FString MapName;//[Offset: 0x78, Size: 0x10]
	FString GameMode;//[Offset: 0x88, Size: 0x10]
	enum MatchOutcome;//[Offset: 0x98, Size: 0x1]

--------------------------------
Class: MatchRecord_PlayerMatchRecord.ProtoMessage
	FString PlayerId;//[Offset: 0x8, Size: 0x10]
	int TeamId;//[Offset: 0x18, Size: 0x4]
	int64 Score;//[Offset: 0x20, Size: 0x8]
	int64 Kill;//[Offset: 0x28, Size: 0x8]
	int64 Death;//[Offset: 0x30, Size: 0x8]
	Gamedata_SoldierClassProgressions SoldierClassProgressions;//[Offset: 0x38, Size: 0x58]
	Gamedata_AssetProgression AssetProgressions;//[Offset: 0x90, Size: 0x58]
	Gamedata_BattleXPEarned XpEarned;//[Offset: 0xe8, Size: 0x28]
	MatchRecord_PlayerStats PlayerStats;//[Offset: 0x110, Size: 0x20]
	<FString,MatchRecord_WeaponStats> WeaponStats;//[Offset: 0x130, Size: 0x50]
	<FString,Gamedata_WeaponXpEarned> WeaponXpEarned;//[Offset: 0x180, Size: 0x50]
	MatchRecord_ProgressionChanges ProgressionChanges;//[Offset: 0x1d0, Size: 0x80]
	MatchRecord_AdditionalMatchInformation AdditionalInformation;//[Offset: 0x250, Size: 0x380]
	FString PlayerName;//[Offset: 0x5d0, Size: 0x10]
	bool bIsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	enum PlayerMatchOutcome;//[Offset: 0x5e1, Size: 0x1]

--------------------------------
Class: MatchRecord_ProgressionChanges.ProtoMessage
	MatchRecord_ProgressionChange Player;//[Offset: 0x8, Size: 0x28]
	<FString,MatchRecord_ProgressionChange> Weapons;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: MatchRecord_ProgressionChange.ProtoMessage
	Gamedata_Progression Starting;//[Offset: 0x8, Size: 0x10]
	Gamedata_Progression Ending;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MatchRecord_AdditionalMatchInformation.ProtoMessage
	FString LastSpawnedClass;//[Offset: 0x8, Size: 0x10]
	Loadout_LoadoutV2 LastSpawnedLoadoutV2;//[Offset: 0x18, Size: 0x368]

--------------------------------
Class: BattleStatsServiceRpcClient.RpcClient.Object
	delegate EventupdateBattleStatsDynamic;//[Offset: 0xc0, Size: 0x10]
	bool updateBattleStats(BattlestatsService_UpdateBattleStatsRequest Request, out const GrpcClientContext Context);// 0x4016a74

--------------------------------
Class: BattlestatsService_UpdateBattleStatsRequest.IdempotentProtoMessage.ProtoMessage
	MatchRecord_MatchRecord MatchRecord;//[Offset: 0x18, Size: 0xa0]
	Cohodata_Version DataVersion;//[Offset: 0xb8, Size: 0x18]
	int GameConfigVersion;//[Offset: 0xd0, Size: 0x4]
	FString LiveDataVersion;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: BattlestatsService_UpdateBattleStatsResponse.ProtoMessage
	MatchRecord_MatchRecord MatchRecord;//[Offset: 0x8, Size: 0xa0]

--------------------------------
Class: DGSSessionServiceRpcClient.RpcClient.Object
	delegate EventgetUserMetaSessionDynamic;//[Offset: 0x150, Size: 0x10]
	delegate EventstartSessionDynamic;//[Offset: 0x178, Size: 0x10]
	delegate EventnotifyMapLoadCompleteDynamic;//[Offset: 0x1a0, Size: 0x10]
	delegate EventheartbeatDynamic;//[Offset: 0x1c8, Size: 0x10]
	bool startSession(DgsSessionService_StartDGSSessionRequest Request, out const GrpcClientContext Context);// 0x40353e4
	bool notifyMapLoadComplete(DgsSessionService_NotifyMapLoadCompleteRequest Request, out const GrpcClientContext Context);// 0x4035110
	bool heartbeat(DgsSessionService_DGSHeartbeatRequest Request, out const GrpcClientContext Context);// 0x4034ef0
	bool getUserMetaSession(DgsSessionService_UserMetaSessionRequest Request, out const GrpcClientContext Context);// 0x4035678

--------------------------------
Class: DgsSessionService_StartDGSSessionRequest.IdempotentProtoMessage.ProtoMessage
	Cohodata_Version DgsVersion;//[Offset: 0x18, Size: 0x18]
	int GameConfigVersion;//[Offset: 0x30, Size: 0x4]
	FString LiveDataVersion;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DgsSessionService_NotifyMapLoadCompleteRequest.IdempotentProtoMessage.ProtoMessage
	FString MatchId;//[Offset: 0x18, Size: 0x10]
	FString MapName;//[Offset: 0x28, Size: 0x10]
	int GameMode;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: DgsSessionService_DGSHeartbeatRequest.IdempotentProtoMessage.ProtoMessage
	Timestamp_Timestamp TimeStamp;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: DgsSessionService_UserMetaSessionRequest.IdempotentProtoMessage.ProtoMessage
	FString[] userIds;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: DGSAuthServiceRpcClient.RpcClient.Object
	delegate EventdgsMultiplayLoginDynamic;//[Offset: 0xc0, Size: 0x10]
	bool dgsMultiplayLogin(DgsAuthService_DGSMultiplayLoginRequest Request, out const GrpcClientContext Context);// 0x40333d4

--------------------------------
Class: DgsAuthService_DGSMultiplayLoginRequest.IdempotentProtoMessage.ProtoMessage
	FString MpSessionId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: BackfillingServiceRpcClient.RpcClient.Object
	delegate EventupdateStateDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventstartSessionDynamic;//[Offset: 0x118, Size: 0x10]
	bool updateState(BackfillingService_BackfillingUpdateRequest Request, out const GrpcClientContext Context);// 0x4015fc4
	bool startSession(BackfillingService_StartBackfillingRequest Request, out const GrpcClientContext Context);// 0x4015cf8

--------------------------------
Class: BackfillingService_BackfillingUpdateRequest.IdempotentProtoMessage.ProtoMessage

--------------------------------
Class: BackfillingService_StartBackfillingRequest.IdempotentProtoMessage.ProtoMessage
	FString MpSessionId;//[Offset: 0x18, Size: 0x10]
	FString AuthToken;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DgsPlayerInfoServiceRpcClient.RpcClient.Object
	delegate EventgetPlayerInfoDynamic;//[Offset: 0xc0, Size: 0x10]
	bool getPlayerInfo(DgsPlayerinfoService_DgsPlayerInfoRequest Request, out const GrpcClientContext Context);// 0x4033dd4

--------------------------------
Class: DgsPlayerinfoService_DgsPlayerInfoRequest.IdempotentProtoMessage.ProtoMessage
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
	FString LiveDataVersion;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ODMetaServerDgsPlayerInfoSubsystem.GameInstanceSubsystem.Subsystem.Object
	ODOnlineMetaServerSubsystem* MetaServerSubsystem;//[Offset: 0x38, Size: 0x8]
	<FString,DgsPlayerinfoService_DgsPlayerInfo> PlayersInfo;//[Offset: 0x40, Size: 0x50]
	void ResetAllPlayerInfoData();// 0x5419648
	void OnLiveDataUpdated();// 0x5419634
	void HandlePlayerInfoResponse(DgsPlayerInfoServiceRpcClient* RpcClient, out const DgsPlayerinfoService_DgsPlayerInfoResponse response, GrpcStatus Status);// 0x541965c
	void HandleCheatGrpcErrors(RpcClient* RpcClient, out const RpcError Error);// 0x5419c28

--------------------------------
Class: DgsPlayerinfoService_DgsPlayerInfoResponse.ProtoMessage
	DgsPlayerinfoService_DgsPlayerInfo PlayerInfo;//[Offset: 0x8, Size: 0x260]

--------------------------------
Class: DgsSessionService_StartDGSSessionResponse.ProtoMessage
	Gameconfiguration_GameConfig GameConfig;//[Offset: 0x8, Size: 0x1458]
	Livedata_LiveData LiveData;//[Offset: 0x1460, Size: 0x6b0]

--------------------------------
Class: DgsSessionService_NotifyMapLoadCompleteResponse.ProtoMessage

--------------------------------
Class: DgsAuthService_DGSLoginResponse.ProtoMessage
	FString JwtToken;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: DGSAssignmentServiceRpcClient.RpcClient.Object
	delegate EventgetPlayerAssignmentsDynamic;//[Offset: 0xf0, Size: 0x10]
	delegate EventaddAssignmentProgressDynamic;//[Offset: 0x118, Size: 0x10]
	bool getPlayerAssignments(AssignmentService_GetPlayerAssignmentsRequest Request, out const GrpcClientContext Context);// 0x400b79c
	bool addAssignmentProgress(AssignmentService_AssignmentProgressRequest Request, out const GrpcClientContext Context);// 0x400b430

--------------------------------
Class: AssignmentService_GetPlayerAssignmentsRequest.IdempotentProtoMessage.ProtoMessage
	FString PlayerId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AssignmentService_AssignmentProgressRequest.IdempotentProtoMessage.ProtoMessage
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
	<FString,int> AssignmentProgress;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: PlayerAssignmentData
	AssignmentObject*[] AssignmentObjects;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AssignmentObject.Object
	bool ConsumeAssignmentEvent(const AssignmentEvent* Event);// 0x5379640

--------------------------------
Class: AssignmentService_PlayerAssignmentResponse.ProtoMessage
	AssignmentService_PlayerAssignmentSeriesMap SeriesMap;//[Offset: 0x8, Size: 0x68]
	FString PlayerId;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AssignmentService_AssignmentProgressResponse.ProtoMessage
	AssignmentService_PlayerAssignmentSeriesMap SeriesMap;//[Offset: 0x8, Size: 0x68]
	FString PlayerId;//[Offset: 0x70, Size: 0x10]
	int PlayerXpReward;//[Offset: 0x80, Size: 0x4]
	<FString,int> InventoryRewards;//[Offset: 0x88, Size: 0x50]

--------------------------------
Class: AssignmentsCharacterDebugComponent.ActorComponent.Object
	delegate OnAssignmentEventLogUpdated;//[Offset: 0xb0, Size: 0x10]
	delegate OnAssignmentsUpdated;//[Offset: 0xc0, Size: 0x10]
	delegate OnAssignmentsLiveDataValidationLogUpdated;//[Offset: 0xd0, Size: 0x10]
	AssignmentEventDebugData[] AssignmentEventLog;//[Offset: 0xe0, Size: 0x10]
	AssignmentInfo[] Assignments;//[Offset: 0xf0, Size: 0x10]
	AssignmentLiveDataValidationLogs AssignmentsValidationLogs;//[Offset: 0x100, Size: 0x58]
	FString PlayerId;//[Offset: 0x158, Size: 0x10]
	FString DGSLiveDataVersion;//[Offset: 0x168, Size: 0x10]
	void UpdateAssignmentsData(FString InPlayerId, out const FString[] AssignmentIds, out const int ProgressGained);// 0x5379fd8
	void ServerToggleReplication(bool bToggle);// 0x5379c40
	void OnRep_AssignmentsLiveDataValidationLog();// 0x5379d34
	void OnRep_Assignments();// 0x5379d48
	void OnRep_AssignmentEventLog();// 0x5379d5c
	FString BuildLiveDataValidationRichText();// 0x5379d70
	FString BuildEventLogRichText(out const enum[] SelectedEvents);// 0x5379ed0
	FString BuildAssignmentsRichText();// 0x5379e20
	void AddAssignmentEventToLog(AssignmentEvent* AssignmentEvent);// 0x537a334
	void AddAssignmentData(FString InPlayerId, out const AssignmentInfo AssignmentData);// 0x537a174

--------------------------------
Class: AssignmentEventDebugData
	enum EventType;//[Offset: 0x0, Size: 0x1]
	FString[] ConditionalsMet;//[Offset: 0x8, Size: 0x10]
	float EventServerTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AssignmentInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString AssignmentId;//[Offset: 0x10, Size: 0x10]
	enum EventType;//[Offset: 0x20, Size: 0x1]
	FString[] ConditionIds;//[Offset: 0x28, Size: 0x10]
	int RequiredProgress;//[Offset: 0x38, Size: 0x4]
	int CurrentProgress;//[Offset: 0x3c, Size: 0x4]
	FString LocText;//[Offset: 0x40, Size: 0x10]
	FString[] ErrorLog;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: AssignmentLiveDataValidationLogs
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString[] AssignmentSeriesPoolLog;//[Offset: 0x8, Size: 0x10]
	FString[] AssignmentGroupPoolLog;//[Offset: 0x18, Size: 0x10]
	FString[] AssignmentsPoolLog;//[Offset: 0x28, Size: 0x10]
	FString[] AssignmentsActionPoolLog;//[Offset: 0x38, Size: 0x10]
	FString[] AssignmentsConditionPoolLog;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 0x5a0]
	ExponentialHeightFogComponent* HeightFog;//[Offset: 0x7a0, Size: 0x8]
	float Priority;//[Offset: 0x7a8, Size: 0x4]
	float BlendRadius;//[Offset: 0x7ac, Size: 0x4]
	float BlendWeight;//[Offset: 0x7b0, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b4, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b4, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x812aecc

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x1f4, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x1f8, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x1fc, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x208, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x218, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x220, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x224, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x234, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x238, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x23c, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x240, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x244, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x254, Size: 0x4]
	float StartDistance;//[Offset: 0x258, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x25c, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x264, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x268, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x26c, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x27c, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x280, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x284, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x7fcd58c
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x7fcd4e4
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x7fcd398
	void SetVolumetricFogDistance(float NewValue);// 0x7fcd2f0
	void SetVolumetricFogAlbedo(Color NewValue);// 0x7fcd440
	void SetVolumetricFog(bool bNewValue);// 0x7fcd634
	void SetStartDistance(float Value);// 0x7fcd78c
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x7fcdc24
	void SetInscatteringTextureTint(LinearColor Value);// 0x7fcdb7c
	void SetInscatteringColorCubemapAngle(float Value);// 0x7fcdd74
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x7fcde1c
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x7fcdccc
	void SetFogMaxOpacity(float Value);// 0x7fcd834
	void SetFogInscatteringColor(LinearColor Value);// 0x7fcdec4
	void SetFogHeightFalloff(float Value);// 0x7fcd8dc
	void SetFogDensity(float Value);// 0x7fcdf6c
	void SetFogCutoffDistance(float Value);// 0x7fcd6e4
	void SetDirectionalInscatteringStartDistance(float Value);// 0x7fcda2c
	void SetDirectionalInscatteringExponent(float Value);// 0x7fcdad4
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x7fcd984

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ODSaveGame.SaveGame.Object
	enum SoldierClass;//[Offset: 0x28, Size: 0x1]
	enum ConnectionType;//[Offset: 0x29, Size: 0x1]
	bool ShowDebugText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bUseAutofire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	<FString,ODUITemplateCustomizationRecord> CustomHUDs;//[Offset: 0x30, Size: 0x50]
	float CameraRotationAnimationScale;//[Offset: 0x80, Size: 0x4]
	Guid LastMatchId;//[Offset: 0x84, Size: 0x10]
	<FName> CompletedGameActivities;//[Offset: 0x98, Size: 0x50]
	MatchActivity BootcampToResume;//[Offset: 0xe8, Size: 0xb0]
	FName BootcampCheckpointToRestore;//[Offset: 0x198, Size: 0x8]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: ODUITemplateCustomizationRecord
	FString TemplateID;//[Offset: 0x0, Size: 0x10]
	<FString,ODUIWidgetCustomizationRecord> Widgets;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: ODUIWidgetCustomizationRecord
	FString WidgetID;//[Offset: 0x0, Size: 0x10]
	Vector2D position;//[Offset: 0x10, Size: 0x8]
	float Scale;//[Offset: 0x18, Size: 0x4]
	float Opacity;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: MatchActivity.GameActivity.TableRowBase
	FName PortalName;//[Offset: 0x64, Size: 0x8]
	FName[] MatchModifications;//[Offset: 0x70, Size: 0x10]
	byte HumanPlayerCount;//[Offset: 0x80, Size: 0x1]
	enum FleetType;//[Offset: 0x81, Size: 0x1]
	class UserWidget* MatchmakingPage;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameActivity.TableRowBase
	FName Name;//[Offset: 0x8, Size: 0x8]
	FName Branch;//[Offset: 0x10, Size: 0x8]
	byte Priority;//[Offset: 0x18, Size: 0x1]
	enum ActivationRequirement;//[Offset: 0x19, Size: 0x1]
	FString ActivationContext;//[Offset: 0x20, Size: 0x10]
	FName[] Dependencies;//[Offset: 0x30, Size: 0x10]
	FString MinimumVersion;//[Offset: 0x40, Size: 0x10]
	FString MaximumVersion;//[Offset: 0x50, Size: 0x10]
	enum ActivityType;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PlayerInputComponent.ODInputComponentBase.ActorComponent.Object
	ODPlayerController* OwnerPlayer;//[Offset: 0x1e8, Size: 0x8]
	Rotator LastControlDirection;//[Offset: 0x1f0, Size: 0xc]
	byte UnchangedInputCount;//[Offset: 0x1fc, Size: 0x1]
	float LastInputStateSentTime;//[Offset: 0x200, Size: 0x4]
	PlayerCommandHistory* ClientInputHistory;//[Offset: 0x208, Size: 0x8]
	PlayerCommandBuffer* ServerInputBuffer;//[Offset: 0x210, Size: 0x8]
	PlayerMinimalStateBuffer* ClientStateBuffer;//[Offset: 0x218, Size: 0x8]
	PlayerCommandState PrevCommandState;//[Offset: 0x248, Size: 0x50]
	uint32 CorrectionFixedStepCount;//[Offset: 0x2dc, Size: 0x4]
	uint32 CorrectionSubFixedStepCount;//[Offset: 0x2e0, Size: 0x4]
	uint32 CorrectionFixedStepCommandId;//[Offset: 0x2e4, Size: 0x4]
	uint32 CorrectionSubFixedStepCommandId;//[Offset: 0x2e8, Size: 0x4]
	PlayerFullState* PlayerCorrectionState;//[Offset: 0x2f0, Size: 0x8]
	PlayerFullState* PlayerState;//[Offset: 0x2f8, Size: 0x8]
	VehicleSeatComponent* PossessedVehicleSeat;//[Offset: 0x300, Size: 0x8]
	ODCharacter* PossessedCharacter;//[Offset: 0x308, Size: 0x8]
	int SingleStepFixedStepCount;//[Offset: 0x310, Size: 0x4]
	int SingleStepSubFixedStepCount;//[Offset: 0x314, Size: 0x4]
	PlayerInputComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x318, Size: 0x30]
	Actor*[] PredictedActors;//[Offset: 0x348, Size: 0x10]
	void ServerOnPlayerPossessVehicleSeat(VehicleSeatComponent* NewPossessedVehicleSeat);// 0x556dff8
	void ServerOnPlayerPossessCharacter(ODCharacter* NewPossessedCharacter);// 0x556e0a0
	void OnRep_PredictedActors(out const Actor*[] OldPredictedActors);// 0x556df38

--------------------------------
Class: ODInputComponentBase.ActorComponent.Object
	PlayerCommandState CurrentFixedStepCommandState;//[Offset: 0xc8, Size: 0x50]
	PlayerCommandState CurrentSubFixedStepCommandState;//[Offset: 0x118, Size: 0x50]
	Vector2D TickMoveInput;//[Offset: 0x168, Size: 0x8]
	Vector2D TickLookInput;//[Offset: 0x170, Size: 0x8]
	void ToggleInput(enum InputType);// 0x54cd8d4
	void SwapSeat(VehicleSeatComponent* VehicleSeatComponent);// 0x54cd82c
	void ReleasedInput(enum InputType);// 0x54cd984
	void PressedInput(enum InputType);// 0x54cda34
	void ClickedInput(enum InputType);// 0x54cdae4

--------------------------------
Class: PlayerCommandHistory.Object
	PlayerCommandState[] CommandStates;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: PlayerCommandBuffer.Object

--------------------------------
Class: PlayerMinimalStateBuffer.Object

--------------------------------
Class: PlayerFullState.Object
	uint32 CommandId;//[Offset: 0x28, Size: 0x4]
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	uint32 ServerFixedStepCount;//[Offset: 0x30, Size: 0x4]
	CharacterFullState* CharacterState;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: CharacterFullState.Object
	SoldierKitFullState* SoldierKitState;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SoldierKitFullState.BaseKitFullState.Object
	EquipmentActor*[] LoadoutEquipment;//[Offset: 0x68, Size: 0x10]
	EquipmentActorFullState*[] LoadoutEquipmentActorStates;//[Offset: 0x78, Size: 0x10]
	SoldierEquipmentStateMachineState SwapStateMachineState;//[Offset: 0x88, Size: 0x30]

--------------------------------
Class: SoldierEquipmentStateMachineState.StateMachineState
	EquipmentActor* CurrentEquipment;//[Offset: 0x10, Size: 0x8]
	EquipmentActor* NextEquipment;//[Offset: 0x18, Size: 0x8]
	EquipmentActor* EquipmentToDrop;//[Offset: 0x20, Size: 0x8]
	float EndStateTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PlayerInputComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: DamageArbitrationComponent.ActorComponent.Object
	ODPlayerController* OwnerPlayer;//[Offset: 0xb0, Size: 0x8]
	DamageEventQueue* ClientDamageQueue;//[Offset: 0xb8, Size: 0x8]
	int LastHandledDamageId;//[Offset: 0xc0, Size: 0x4]
	void ServerReceiveDamageEvents(const DamageArbitrationEvents DamageEvents);// 0x53bb4b8
	void OnRep_LastHandledDamageId();// 0x53bb4a4

--------------------------------
Class: DamageArbitrationEvents
	DamageEventQueue* EventsToSerialize;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: DamageEventQueue.Object

--------------------------------
Class: DestructionArbitrationComponent.ActorComponent.Object
	DestructionArbitrationEvent[] PendingDestructionEvents;//[Offset: 0xb0, Size: 0x10]
	ODPlayerController* ODPlayerController;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: DestructionArbitrationEvent
	Actor* Victim;//[Offset: 0x8, Size: 0x8]
	Controller* InstigatorPlayer;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: FiringTypePlayerSettings
	enum FiringType;//[Offset: 0x0, Size: 0x1]
	OptionalFiringTypeSetting ContinuousFireOnHold;//[Offset: 0x1, Size: 0x1]
	OptionalFiringTypeSetting FireOnPress;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: OptionalFiringTypeSetting
	bool bValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bIsSet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: BootcampManager.Actor.Object
	delegate OnStageBegin;//[Offset: 0x260, Size: 0x10]
	delegate OnGoalAdded;//[Offset: 0x270, Size: 0x10]
	delegate OnGoalCompleted;//[Offset: 0x280, Size: 0x10]
	delegate OnGoalsCleared;//[Offset: 0x290, Size: 0x10]
	PlayerTrigger* Trigger;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AudioComponent;//[Offset: 0x2a8, Size: 0x8]
	BootcampStage*[] Stages;//[Offset: 0x2b0, Size: 0x10]
	bool bStagesAreOrdered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool bAutoBeginBootcamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	FName BootcampBeginMessageId;//[Offset: 0x2c4, Size: 0x8]
	<FName> LevelsToStreamInOnBootcampBegin;//[Offset: 0x2d0, Size: 0x50]
	<FName> LevelsToStreamOutOnBootcampBegin;//[Offset: 0x320, Size: 0x50]
	bool bAllowLevelsToBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool bAllowLevelsToBeUnloaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	<FName> LevelsPendingLoad;//[Offset: 0x378, Size: 0x50]
	<FName> LevelsPendingUnload;//[Offset: 0x3c8, Size: 0x50]
	byte MaxNumPlayers;//[Offset: 0x418, Size: 0x1]
	bool bBootcampHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1]
	float DelayBeforeInitialTutorial;//[Offset: 0x41c, Size: 0x4]
	ODPlayerController*[] PlayersInBootcamp;//[Offset: 0x420, Size: 0x10]
	int LastCompletedStageIndex;//[Offset: 0x430, Size: 0x4]
	ODPlayerState*[] PlayersReadyForBootcamp;//[Offset: 0x438, Size: 0x10]
	bool bIsBootcampAwaitingPlayerResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	<BootcampStage*> ActiveStages;//[Offset: 0x450, Size: 0x50]
	<FName> RevealedPrompts;//[Offset: 0x4a0, Size: 0x50]
	void WaitForActorChannel();// 0x53a310c
	void TryStreamLevels(out const <FName> Levels, bool bShouldBeLoaded, out int UUID, bool bShouldBlock);// 0x53a336c
	bool StartBootcamp(out const ODPlayerController*[] ForPlayerControllers);// 0x53a3c50
	void SetLevelsCanBeStreamed(bool bShouldBeAbleToLoad, bool bShouldBeAbleToUnload, bool bBlockOnLoad, bool bBlockOnUnload);// 0x53a31dc
	void SetCollisionEnabled(bool bCollisionWantsToBeOn);// 0x53a2ac0
	void ServerOnPlayerStartsBootcamp(Controller* BootcampInstigator);// 0x53a2d9c
	void ServerCompleteStage(BootcampStage* Stage, enum CompletionStatus);// 0x53a3790
	void ServerBeginStageByIndex(int StageIndex, float DelayBeforeStart, bool bTeleportPlayer);// 0x53a2f40
	void RevealUIPrompt(out const FName PromptToReveal, bool bAllowRevealingMultipleTimes);// 0x53a3594
	void RefreshStages();// 0x53a31c8
	void OnRep_BootcampAwaitingPlayerResponse();// 0x53a288c
	void OnPlayerCountUpdated();// 0x53a2aac
	void OnPlayerControllerCreated(ODPlayerController* Controller);// 0x53a3120
	void OnGamePhaseChanged(enum PreviousPhase, enum CurrentPhase);// 0x53a29b8
	void MulticastAllBootcampRequestsConfirmed();// 0x53a2d80
	bool IsActorChannelReady();// 0x53a30d4
	FString[] GetStreamingLevelNames();// 0x53a28a0
	void GetAllPlayerControllers(out ODPlayerController*[] OutAllPlayerControllers);// 0x53a2b70
	void CompleteStage(BootcampStage* Stage, enum CompletionStatus);// 0x53a38c8
	void BeginStageByName(out const FName StageName, float DelayBeforeStart, bool bTeleportPlayer);// 0x53a3b04
	void BeginStage_Internal(BootcampStage* Stage, bool bTeleportPlayer);// 0x53a2e44
	void BeginStage(BootcampStage* Stage, float DelayBeforeStart, bool bTeleportPlayer);// 0x53a39bc
	void AuthorityOnPlayerRespondToBootcamp(ODPlayerController* Confirmer, bool bPlayerAgreedToBootcamp);// 0x53a3694
	void AnyBootcampStarted(BootcampManager* Manager);// 0x53a2cd8
	void AnyBootcampEnded(BootcampManager* Manager);// 0x53a2c30

--------------------------------
Class: BootcampStage.NavigationObjectBase.Actor.Object
	delegate OnStageBegin;//[Offset: 0x278, Size: 0x10]
	delegate OnStageCompletedOrSkipped;//[Offset: 0x288, Size: 0x10]
	delegate OnStageSuccess;//[Offset: 0x298, Size: 0x10]
	delegate OnStageFailed;//[Offset: 0x2a8, Size: 0x10]
	delegate OnStageSkipped;//[Offset: 0x2b8, Size: 0x10]
	int Index;//[Offset: 0x2c8, Size: 0x4]
	BootcampManager* OurManager;//[Offset: 0x2d0, Size: 0x8]
	bool bShowTutorialPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	FName TutorialPromptId;//[Offset: 0x2dc, Size: 0x8]
	bool bCompleteStageWhenPromptIsDismissed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	<enum> TutorialButtonsToAdd;//[Offset: 0x2e8, Size: 0x50]
	<enum> CurrentTutorialButtons;//[Offset: 0x338, Size: 0x50]
	bool bSendAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	AkAudioEvent* StageAudio;//[Offset: 0x390, Size: 0x8]
	float AudioTriggerDelay;//[Offset: 0x398, Size: 0x4]
	class VoiceOverConversation* ConversationClass;//[Offset: 0x3a0, Size: 0x8]
	VoiceOverConversation* Conversation;//[Offset: 0x3a8, Size: 0x8]
	MaterialInterface* StagePostProcessMaterial;//[Offset: 0x3b0, Size: 0x8]
	float PostProcessWeight;//[Offset: 0x3b8, Size: 0x4]
	bool bRemovePostProcessEffectOnStageFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	bool bTeleportPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 0x1]
	float TeleportCameraFadeOutTime;//[Offset: 0x3c0, Size: 0x4]
	float TeleportCameraHoldTime;//[Offset: 0x3c4, Size: 0x4]
	float TeleportCameraFadeInTime;//[Offset: 0x3c8, Size: 0x4]
	LinearColor TeleportFadeColor;//[Offset: 0x3cc, Size: 0x10]
	bool bAlsoFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	Vector[] PlayerTeleportOffsets;//[Offset: 0x3e0, Size: 0x10]
	bool bExitVehicleOnTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	GameplayTagContainer GoalsToAdd;//[Offset: 0x3f8, Size: 0x20]
	GameplayTagContainer GoalsToComplete;//[Offset: 0x418, Size: 0x20]
	bool bClearCompletedGoalsOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	float GoalCompletionDelayTime;//[Offset: 0x43c, Size: 0x4]
	bool bHasStageBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	enum StageCompletionStatus;//[Offset: 0x441, Size: 0x1]
	bool bAllowAutoProgression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1]
	bool bAutoBeginAfterPreviousStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x443, Size: 0x1]
	float AutoBeginDelay;//[Offset: 0x444, Size: 0x4]
	bool bRunLogicEvenIfSkipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bAllowAsSavePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	bool bClearBootcampSaveDataOnCompleteOrSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 0x1]
	<Volume*> VolumesToEnableOnStageBegin;//[Offset: 0x450, Size: 0x50]
	<Volume*> VolumesToDisableOnStageBegin;//[Offset: 0x4a0, Size: 0x50]
	<Volume*> VolumesToEnableOnStageComplete;//[Offset: 0x4f0, Size: 0x50]
	<Volume*> VolumesToDisableOnStageComplete;//[Offset: 0x540, Size: 0x50]
	<FName> LevelsToStreamInOnStageBegin;//[Offset: 0x590, Size: 0x50]
	bool bBeginStageLevelStreamInCanBeAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	<FName> LevelsToStreamOutOnStageBegin;//[Offset: 0x5e8, Size: 0x50]
	bool bBeginStageLevelStreamOutCanBeAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	<FName> LevelsToStreamInOnStageComplete;//[Offset: 0x640, Size: 0x50]
	bool bCompleteStageLevelStreamInCanBeAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	<FName> LevelsToStreamOutOnStageComplete;//[Offset: 0x698, Size: 0x50]
	bool bCompleteStageLevelStreamOutCanBeAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]
	static bool WantsResumeBootcamp(Object* WorldContextObject);// 0x53a9bd0
	void TryTeleportToStage(bool bForceTeleport);// 0x53a982c
	void TriggerStageAudio(BootcampManager* Manager);// 0x53a9984
	void TeleportPlayersToStage();// 0x53a9ca0
	void StartFadeIn();// 0x53a971c
	void SetLevelsShouldBeLoaded(out const <FName> Levels, bool bShouldBeLoaded, out int UUID, bool bIsBlocking);// 0x53a9300
	void SetAreVolumesEnabled(out const <Volume*> Volumes, bool bShouldBeEnabled);// 0x53a9528
	void OnTutorialPromptDismissed(FName MessageId);// 0x53a9674
	void OnTriggeredConversationReady(TriggeredVoiceOverConversation* TriggeredConversation);// 0x53a9258
	void K2_OnTeleportedTo(BootcampManager* BootcampManager, out const ODPlayerController*[] PlayerControllers);// 0x59ef218
	void K2_OnManagerReady(BootcampManager* Manager, out const ODPlayerController*[] PlayerControllers);// 0x59ef218
	void K2_OnLocalPlayerControllerAvailable(ODPlayerController* PC);// 0x59ef218
	void K2_CompleteStage(BootcampManager* BootcampManager, enum CompletionStatus, out const ODPlayerController*[] PlayerControllers);// 0x59ef218
	void K2_BeginStage(BootcampManager* BootcampManager, out const ODPlayerController*[] PlayerControllers, bool bIsFirstAttempt);// 0x59ef218
	bool IsStageComplete();// 0x53a9c7c
	FString[] GetStreamingLevelNames();// 0x53a9140
	FString GetDebugOutput();// 0x53a9a2c
	void FadeOutComplete(ODPlayerController*[] PlayerControllers);// 0x53a9730
	void CompleteStage(BootcampManager* BootcampManager, out const ODPlayerController*[] AllPlayerControllers, enum CompletionStatus);// 0x53a9cb4
	void ClearCompletedGoals(BootcampManager* Manager);// 0x53a98dc
	static void ClearBootcampSaveData(Object* WorldContextObject, bool bPreserveMatchActivity);// 0x53a9ae4
	void BeginStage(BootcampManager* BootcampManager, out const ODPlayerController*[] AllPlayerControllers, bool bForceTeleportPlayer);// 0x53a9e04

--------------------------------
Class: VoiceOverConversation.Object
	ConversationVoiceLine[] ConversationEvents;//[Offset: 0x28, Size: 0x10]
	bool bRunOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bTriggerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float TriggerDelay;//[Offset: 0x3c, Size: 0x4]
	float FinishDelay;//[Offset: 0x40, Size: 0x4]
	byte Priority;//[Offset: 0x44, Size: 0x1]
	enum InterruptBehavior;//[Offset: 0x45, Size: 0x1]
	float BufferTime;//[Offset: 0x48, Size: 0x4]
	bool bConversationHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bAllowNextVoiceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	int ActiveEvent;//[Offset: 0x50, Size: 0x4]
	PostedVoiceLine* ActiveVoiceLine;//[Offset: 0x58, Size: 0x8]
	World* OurWorld;//[Offset: 0x60, Size: 0x8]
	delegate OnConversationStart;//[Offset: 0x68, Size: 0x10]
	delegate OnConversationFinishNaturally;//[Offset: 0x78, Size: 0x10]
	delegate OnConversationInterrupted;//[Offset: 0x88, Size: 0x10]
	delegate OnConversationRemovedFromBuffer;//[Offset: 0x98, Size: 0x10]
	delegate OnStartVoiceLine;//[Offset: 0xa8, Size: 0x10]
	void OnVoiceLineFinished(PostedVoiceLine* VoiceLine);// 0x53b9658
	void OnVoiceLineCanceled(PostedVoiceLine* VoiceLine);// 0x53b95b0
	bool OnEvent(enum Event);// 0x53b971c
	bool Init(Object* WorldContextObject);// 0x53b97d0
	void Deinit();// 0x53b9700
	bool BeginNextVoiceLine();// 0x53b9578

--------------------------------
Class: ConversationVoiceLine.VoiceLine
	bool bWaitForEventEndBeforeContinuing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float WaitDuration;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: VoiceLine
	AkAudioEvent* VoiceLine;//[Offset: 0x0, Size: 0x8]
	float FinishDelay;//[Offset: 0x8, Size: 0x4]
	float TriggerDelay;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PostedVoiceLine.Object
	uint32 AkPlayingId;//[Offset: 0x28, Size: 0x4]
	Actor* Speaker;//[Offset: 0x30, Size: 0x8]
	VoiceLine VoiceLine;//[Offset: 0x38, Size: 0x10]
	World* OurWorld;//[Offset: 0x48, Size: 0x8]
	delegate OnVoiceLineStarted;//[Offset: 0x50, Size: 0x10]
	delegate OnVoiceLineEnded;//[Offset: 0x60, Size: 0x10]
	delegate OnVoiceLineCanceled;//[Offset: 0x70, Size: 0x10]
	void StopVoiceLine();// 0x545c0c8
	void StartVoiceLine();// 0x545c0dc
	void OnAkCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x545c0f0

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TriggeredVoiceOverConversation.VoiceOverConversation.Object
	GameplayTag ConversationId;//[Offset: 0xc0, Size: 0x8]
	GameplayTagContainer PrerequisiteConversations;//[Offset: 0xc8, Size: 0x20]
	bool bStartImmediatelyWhenReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bHasBeenBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bConversationReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	delegate OnConversationReady;//[Offset: 0xf0, Size: 0x10]
	void Ready();// 0x53b9e60

--------------------------------
Class: PlayerTrigger.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnTriggered;//[Offset: 0x478, Size: 0x10]
	delegate OnBecomeOccupied;//[Offset: 0x488, Size: 0x10]
	delegate OnBecomeEmpty;//[Offset: 0x498, Size: 0x10]
	enum TriggerType;//[Offset: 0x4a8, Size: 0x1]
	byte NumPawnsToTrigger;//[Offset: 0x4a9, Size: 0x1]
	enum InteractableType;//[Offset: 0x4aa, Size: 0x1]
	float InteractionDistance;//[Offset: 0x4ac, Size: 0x4]
	<class Pawn> DisallowedPawnTypes;//[Offset: 0x4b0, Size: 0x50]
	bool bInvertDisallowedPawnTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	<Pawn*> PawnsInTrigger;//[Offset: 0x508, Size: 0x50]
	void SetTriggerType(enum NewTriggerType);// 0x556f1c0
	void RemoveActorFromOverlaps(Actor* Actor);// 0x556ed4c
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x556edf4
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x556ef7c

--------------------------------
Class: ODGameInstance.GameInstance.Object
	ODGlobalUIMessageObject* GlobalUIMessageObject;//[Offset: 0x1d8, Size: 0x8]
	ODSaveGame* SaveGame;//[Offset: 0x1e0, Size: 0x8]
	ODRenderingSettingsSubsystem* RenderingSettingsSubsystem;//[Offset: 0x1e8, Size: 0x8]
	void SetStatus(FString Status);// 0x54c5f14
	void SetServerInfoHandler(out const interface classNone Handler);// 0x54c5de8
	void SetMatchmakingServer(FString MatchmakingServer);// 0x54c5c70
	void SetBotServer(FString BotServer);// 0x54c5bb4
	void RequestBots();// 0x54c5b98
	void OnServerMatchInfo(FString ServerMatchInfo);// 0x54c5d2c
	void OnEnteredForeground();// 0x54c5930
	void OnEnteredBackground();// 0x54c5944
	void NotifyUserRequestMatch();// 0x54c5b50
	void NotifyShutdown();// 0x54c5ec0
	void NotifyServerReady();// 0x54c5ef8
	void NotifyServerFull();// 0x54c5edc
	bool HasPerformanceTestSucceeded();// 0x54c5a00
	void GetServerMatch();// 0x54c5ea4
	ODSaveGame* GetSaveGame();// 0x54c5a6c
	FString GetSaveFileName();// 0x54c5aa0
	ODRenderingSettingsSubsystem* GetRenderingSettingsSubsystem();// 0x54c5a38
	static ODGameInstance* GetODGameInstance(const Object* WorldContextObject);// 0x54c5958
	ODGlobalUIMessageObject* GetGlobalUIMessageObject();// 0x54c5b64
	void EnableScreensaver();// 0x54c5908
	void DisableScreensaver();// 0x54c591c

--------------------------------
Class: ODGlobalUIMessageObject.Object
	delegate OnShowPage;//[Offset: 0x28, Size: 0x10]
	delegate OnShowPageWithParams;//[Offset: 0x38, Size: 0x10]
	delegate OnPageBack;//[Offset: 0x48, Size: 0x10]
	delegate OnPageBackNotHandled;//[Offset: 0x58, Size: 0x10]
	delegate OnEnteringPageWithParams;//[Offset: 0x68, Size: 0x10]
	delegate OnLeavingPage;//[Offset: 0x78, Size: 0x10]
	delegate OnUserUpdatedSettings;//[Offset: 0x88, Size: 0x10]
	delegate OnMailButtonClicked;//[Offset: 0x98, Size: 0x10]
	delegate OnSettingsButtonClicked;//[Offset: 0xa8, Size: 0x10]
	delegate OnShowCustomizeHUDSettings;//[Offset: 0xb8, Size: 0x10]
	delegate OnPlayMenuButtonClicked;//[Offset: 0xc8, Size: 0x10]
	delegate OnShowErrorMessage;//[Offset: 0xd8, Size: 0x10]
	delegate OnShowFatalMetaServerErrorMessage;//[Offset: 0xe8, Size: 0x10]
	delegate OnSetFrontendCameraToTarget;//[Offset: 0xf8, Size: 0x10]
	delegate OnShowMinimapOverlay;//[Offset: 0x108, Size: 0x10]
	delegate OnHidingMinimapOverlay;//[Offset: 0x118, Size: 0x10]
	delegate OnShowingCommanderCamView;//[Offset: 0x128, Size: 0x10]
	delegate OnHidingCommanderCamView;//[Offset: 0x138, Size: 0x10]
	delegate OnFadeUIToColor;//[Offset: 0x148, Size: 0x10]
	delegate OnFadeUIIn;//[Offset: 0x158, Size: 0x10]
	delegate OnAddWidgetToPopupOverlay;//[Offset: 0x168, Size: 0x10]
	delegate OnAddModalToPopupOverlay;//[Offset: 0x178, Size: 0x10]
	delegate OnDismissModalRequested;//[Offset: 0x188, Size: 0x10]
	delegate OnDisplayGenericMessage;//[Offset: 0x198, Size: 0x10]
	class UserWidget* MainMenuOverridePageAssetID;//[Offset: 0x1a8, Size: 0x28]
	Object*[] MainMenuOverridePageInitParams;//[Offset: 0x1d0, Size: 0x10]
	delegate OnBootFlowProgressUpdated;//[Offset: 0x1e0, Size: 0x10]
	delegate OnSkipBootFlowRequested;//[Offset: 0x1f0, Size: 0x10]
	delegate OnShowWebBrowserRequested;//[Offset: 0x200, Size: 0x10]
	delegate OnPushBackButtonTarget;//[Offset: 0x210, Size: 0x10]
	delegate OnRemoveBackButtonTarget;//[Offset: 0x220, Size: 0x10]

--------------------------------
Class: BPC_CombatAudioEvents_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	ODOnlineGameStateBase* ODGameState;//[Offset: 0xb8, Size: 0x8]
	FName CurrentLevelName;//[Offset: 0xc0, Size: 0x8]
	AkSwitchValue* CurrentLevelSwitch;//[Offset: 0xc8, Size: 0x8]
	void ApplyLevelWwiseSwitch();// 0x59ef218
	void HandleLobbyPhase();// 0x59ef218
	void HandleGameEnd(int WinningTeamIndex, FName LocEndGameEventName);// 0x59ef218
	void HandleBattlePhase();// 0x59ef218
	void InitOnObjectiveManager(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, ITGameObjectiveDelegateSet* CallFunc_GetDelegateSet_ReturnValue, bool CallFunc_IsInitialized_ReturnValue);// 0x59ef218
	void OnMatchPhaseChanged(enum PreviousPhase, enum CurrentPhase);// 0x59ef218
	void PlayLobbyMusic();// 0x59ef218
	void Init();// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void ExecuteUbergraph_BPC_CombatAudioEvents(int EntryPoint);// 0x59ef218

--------------------------------
Class: ODTutorialGameState.ODOnlineGameStateBase.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: ODCollisionHit
	Vector Impulse;//[Offset: 0x0, Size: 0xc]
	float DamageAmount;//[Offset: 0xc, Size: 0x4]
	Vector Location;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: PlayerCommands
	Actor* LockTarget;//[Offset: 0x0, Size: 0x8]
	PlayerCommandState[] CommandStates;//[Offset: 0x8, Size: 0x10]
	PlayerCommandHistory* CommandHistory;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ODCameraInfo
	Vector CameraLocation;//[Offset: 0x0, Size: 0xc]
	Vector CameraForward;//[Offset: 0xc, Size: 0xc]
	Rotator CurrentAngularVelocity;//[Offset: 0x18, Size: 0xc]
	Vector2D ViewportSize;//[Offset: 0x24, Size: 0x8]
	float ViewportScale;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ODPlayerCameraManager.PlayerCameraManager.Actor.Object
	delegate OnViewTargetChanged;//[Offset: 0x29c8, Size: 0x10]
	CameraActionParams CommanderCamTransitionParams;//[Offset: 0x29d8, Size: 0x28]
	CameraActionParams KillCamTransitionParams;//[Offset: 0x2a00, Size: 0x28]
	CameraActionParams RivalCamTransitionParams;//[Offset: 0x2a28, Size: 0x28]
	CameraActionParams PrespawnToCombatTransitionParams;//[Offset: 0x2a50, Size: 0x28]
	float PrespawnFirstPersonTransitionTime;//[Offset: 0x2a78, Size: 0x4]
	float DyingCamTime;//[Offset: 0x2a7c, Size: 0x4]
	float KillCamTime;//[Offset: 0x2a80, Size: 0x4]
	float RivalCamTime;//[Offset: 0x2a84, Size: 0x4]
	float KillCamUnitsBehindPlayer;//[Offset: 0x2a88, Size: 0x4]
	float KillCamUnitsAbovePlayer;//[Offset: 0x2a8c, Size: 0x4]
	float KillCamFOV;//[Offset: 0x2a90, Size: 0x4]
	PostProcessSettings KillCameraPostProcessSettings;//[Offset: 0x2aa0, Size: 0x5a0]
	PostProcessSettings RivalCameraPostProcessSettings;//[Offset: 0x3040, Size: 0x5a0]
	CameraActor* KillCameraActor;//[Offset: 0x35e0, Size: 0x8]
	CameraActor* RivalCameraActor;//[Offset: 0x35e8, Size: 0x8]
	float RivalCamFocusAreaCM;//[Offset: 0x3608, Size: 0x4]
	float RivalCamFovMin;//[Offset: 0x360c, Size: 0x4]
	float RivalCamFovMax;//[Offset: 0x3610, Size: 0x4]
	CameraActor* CommanderCamActor;//[Offset: 0x3618, Size: 0x8]
	Actor* TrackingTarget;//[Offset: 0x3620, Size: 0x8]
	float ScreenshakeMultiplier;//[Offset: 0x3640, Size: 0x4]
	CameraActor* CommanderSpawnTransitionActor;//[Offset: 0x3648, Size: 0x8]
	ODPlayerController* ODPCOwner;//[Offset: 0x36e8, Size: 0x8]
	PlayerCameraStateMachine* StateMachine;//[Offset: 0x3700, Size: 0x8]
	void UpdateGlobalScreenshakeMultiplier(float NewScreenshakeMultiplier);// 0x54fd368
	void RequestCameraState(const enum InState);// 0x54fd030
	void OnPlayerCameraStateChanged(enum NewState);// 0x59ef218
	void OnFloatSettingUpdated(out const ProfileSettings_FloatRangeProfileSetting Setting, float ComputedValue);// 0x54fcec0
	CameraActionHandle MoveCameraToViewTargetAndTrackActor(Actor* InViewTarget, Actor* InTrackTarget, out const CameraActionParams Params);// 0x54fd0d8
	CameraActionHandle MoveCameraToViewTarget(Actor* InViewTarget, out const CameraActionParams Params);// 0x54fd244
	void LoadPlayerSettings();// 0x54fcfe8
	enum GetCameraState();// 0x54fcffc

--------------------------------
Class: PlayerCameraStateMachine.Object
	ODPlayerCameraManager* OwningCameraManager;//[Offset: 0x58, Size: 0x8]
	CameraActor* CommanderSpawnTransitionActor;//[Offset: 0x78, Size: 0x8]
	CameraActor* CommanderCamActor;//[Offset: 0x80, Size: 0x8]
	int PrespawnCount;//[Offset: 0xa8, Size: 0x4]
	int DeathCount;//[Offset: 0xac, Size: 0x4]
	HealthComponent* DeadHealthComponent;//[Offset: 0xb0, Size: 0x8]
	float EndStateTime;//[Offset: 0xb8, Size: 0x4]
	bool bHasCameraTransitionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]

--------------------------------
Class: CameraActionHandle

--------------------------------
Class: ODAIBotAutomatedTestComponent.ActorComponent.Object
	delegate OnGetKill;//[Offset: 0xb0, Size: 0x10]
	delegate OnMatchPhaseChanged;//[Offset: 0xc0, Size: 0x10]
	delegate OnConquestPointCaptured;//[Offset: 0xf0, Size: 0x10]
	delegate OnCharacterBeginClimb;//[Offset: 0x100, Size: 0x10]
	delegate OnCharacterEndClimb;//[Offset: 0x110, Size: 0x10]
	ODCharacter* KilledCharacter;//[Offset: 0x120, Size: 0x8]
	enum MatchState;//[Offset: 0x128, Size: 0x1]
	void ServerToggleBotsStressTest();// 0x543613c
	void ServerTeleportServerBots(const Vector Location);// 0x5436334
	void ServerTeleportMe(const Vector Location);// 0x5436250
	void ServerRestoreAfterLaddersTest();// 0x5436198
	void ServerPrepareForLaddersTest();// 0x54361f4
	void OnRep_MatchState(enum PreviousValue);// 0x5435fec
	void OnRep_KilledCharacter(ODCharacter* PreviousValue);// 0x5436094
	void ConquestPointTeamOwnershipChanged(int NewOwner, int OldOwner);// 0x5435efc
	void BroadcastTestResultInformation(enum Result, FString ExecutionMessage);// 0x5436418

--------------------------------
Class: BP_ODPlayerCameraManager_C.ODPlayerCameraManager.PlayerCameraManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3720, Size: 0x8]
	void OnPlayerCameraStateChanged(enum NewState);// 0x59ef218
	void ExecuteUbergraph_BP_ODPlayerCameraManager(int EntryPoint, enum K2Node_Event_NewState, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODGameStateBase_C* K2Node_DynamicCast_AsBP_ODGame_State_Base, bool K2Node_DynamicCast_bSuccess, BP_ODGameStateBase_C* K2Node_DynamicCast_AsBP_ODGame_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SoundtrackSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, int CallFunc_StartMusic_ReturnValue, int CallFunc_StartMusic_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x59ef218

--------------------------------
Class: BP_ODGameStateBase_C.ODOnlineGameStateBase.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x500, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x508, Size: 0x8]
	float Percent of Game Score Remaining;//[Offset: 0x510, Size: 0x4]
	float Percent of Game Time Remaining;//[Offset: 0x514, Size: 0x4]
	float Percent of Game Remaining;//[Offset: 0x518, Size: 0x4]
	delegate On Percent of Game Score Remaining Updated;//[Offset: 0x520, Size: 0x10]
	delegate On Percent of Game Time Remaining Updated;//[Offset: 0x530, Size: 0x10]
	delegate On Percent of Game Remaining Updated;//[Offset: 0x540, Size: 0x10]
	TimerHandle Time Changed Timer Handle;//[Offset: 0x550, Size: 0x8]
	float Music Tension Level 1 Threshold;//[Offset: 0x558, Size: 0x4]
	float Music Tension Level 2 Threshold;//[Offset: 0x55c, Size: 0x4]
	float Music Tension Level 3 Threshold;//[Offset: 0x560, Size: 0x4]
	byte Current Music Tension;//[Offset: 0x564, Size: 0x1]
	int[] Starting Scores;//[Offset: 0x568, Size: 0x10]
	int Starting Time;//[Offset: 0x578, Size: 0x4]
	bool Objective Manager Replicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]
	bool Player Spawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 0x1]
	bool Battle Music Okay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57e, Size: 0x1]
	bool Has Bound to Game Progress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57f, Size: 0x1]
	void Client Bind To Game Progress(ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, ITScoreObjectiveData* CallFunc_GetObjectiveData_ReturnValue, bool CallFunc_IsValid_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetRemainingTimeInCurrentPhase_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x59ef218
	void Client On Game Ended(int Winning Team, SoundtrackSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, SoundtrackSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, int CallFunc_StartMusic_ReturnValue, int CallFunc_StartMusic_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void Client on Game Phase Changed(enum PreviousPhase, enum CurrentPhase, bool K2Node_SwitchEnum_CmpSuccess, SoundtrackSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAlreadyPlaying_ReturnValue, int CallFunc_StartMusic_ReturnValue);// 0x59ef218
	void Client On Pawn Spawned(ODCharacter* Character);// 0x59ef218
	void Maybe Start Battle Music(ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, ODPlayerCameraManager* CallFunc_GetCameraManager_ReturnValue, enum CallFunc_GetCameraState_ReturnValue, SoundtrackSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_StartMusic_ReturnValue, int CallFunc_StartMusic_ReturnValue, int CallFunc_StartMusic_ReturnValue, bool CallFunc_IsAlreadyPlaying_ReturnValue, bool CallFunc_IsAlreadyPlaying_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x59ef218
	void Client Check Percent of Game Remaining(float Possible Percent Remaining, float CallFunc_FMin_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue);// 0x59ef218
	void Update Music Tension(byte Desired Tension, bool Force, bool CallFunc_HasAuthority_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue);// 0x59ef218
	void Determine New Music Tension Level(float Test Threshold, byte Desired Tension, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x59ef218
	void Client On Objective Manager Available(ITGameObjectiveManager* Objective Manager, delegate K2Node_CreateDelegate_OutputDelegate, ITGameObjectiveDelegateSet* CallFunc_GetDelegateSet_ReturnValue, ITGameObjectiveDelegateSet* CallFunc_GetDelegateSet_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue);// 0x59ef218
	void Client Percent of Game Remaining Updated(float Old Percent, float New Percent);// 0x59ef218
	void Client On Time Changed(int CallFunc_GetRemainingTimeInCurrentPhase_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x59ef218
	void Client On Scores Changed(int Team Index, int Score Delta, int New Score, int[] Current Scores, float Current Percent of Game Remaining, ITScoreObjectiveData* Score Data, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const int Temp_int_Variable, int CallFunc_MinOfIntArray_IndexOfMinValue, int CallFunc_MinOfIntArray_MinValue, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue, GenericTeamId CallFunc_IntToGenericTeamId_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, GenericTeamId CallFunc_IntToGenericTeamId_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, ScoreMinMax CallFunc_GetScoreLimits_ReturnValue, ScoreMinMax CallFunc_GetScoreLimits_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_GetIsDecrementalScoring_ReturnValue, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, ITScoreObjectiveData* CallFunc_GetObjectiveData_ReturnValue);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void ExecuteUbergraph_BP_ODGameStateBase(int EntryPoint, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, ODCharacter* K2Node_DynamicCast_AsODCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x59ef218
	void On Percent of Game Remaining Updated__DelegateSignature(float Old Percent, float New Percent);// 0x59ef218
	void On Percent of Game Time Remaining Updated__DelegateSignature(float Old Percent, float New Percent);// 0x59ef218
	void On Percent of Game Score Remaining Updated__DelegateSignature(float Old Percent, float New Value);// 0x59ef218

--------------------------------
Class: ITScoreObjectiveData.ITObjectiveData.Object
	delegate OnScoreChanged;//[Offset: 0x40, Size: 0x10]
	int[] Scores;//[Offset: 0x50, Size: 0x10]
	<GenericTeamId,ScoreMinMax> TeamScoreLimits;//[Offset: 0x68, Size: 0x50]
	void SetTeamScore(const int TeamIndex, const int NewScore, bool bBroadcastOnScoreChanged);// 0x53fd034
	void SetStartingScore(const int InStartingScore, out const GenericTeamId Team);// 0x53fdcb4
	void SetScoreLimits(const int InMinScore, const int InMaxScore, out const GenericTeamId Team);// 0x53fdacc
	void SetMinScore(const int InMinScore, out const GenericTeamId Team);// 0x53fd870
	void SetMaxScore(const int InMaxScore, out const GenericTeamId Team);// 0x53fd614
	void SetIsDecrementalScoring(const bool bInIsDecremental);// 0x53fd564
	void OnScoringConditionMet(int TeamIndex, int ScoreValue);// 0x53fcf44
	void OnRep_Scores(out const int[] OldScores);// 0x53fce84
	int[] GetScores();// 0x53fd4c0
	ScoreMinMax GetScoreLimits(GenericTeamId Team);// 0x53fd31c
	int GetMaxScore(out const GenericTeamId Team);// 0x53fd178
	bool GetIsDecrementalScoring();// 0x53fd544

--------------------------------
Class: ScoreMinMax
	int MinScore;//[Offset: 0x0, Size: 0x4]
	int MaxScore;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundtrackSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnMusicEnded;//[Offset: 0x38, Size: 0x10]
	delegate OnActiveConversationEnded;//[Offset: 0x48, Size: 0x10]
	GameplayTag ActiveMusic;//[Offset: 0x58, Size: 0x8]
	VoiceOverConversation* ActiveConversation;//[Offset: 0x60, Size: 0x8]
	VoiceOverConversation* BufferedConversation;//[Offset: 0x68, Size: 0x8]
	MapSoundtrackLookup* MapSoundtrackTable;//[Offset: 0x70, Size: 0x8]
	uint32 MusicPlayingId;//[Offset: 0x78, Size: 0x4]
	uint32 AmbiencePlayingId;//[Offset: 0x7c, Size: 0x4]
	void StopGlobalAmbience();// 0x558c698
	void StopCurrentMusic();// 0x558c5d4
	int StartMusic(GameplayTag MusicType);// 0x558c5e8
	int StartGlobalAmbience();// 0x558c6ac
	bool StartConversation(VoiceOverConversation* Conversation);// 0x558c440
	void StartBufferedConversation();// 0x558c07c
	void OnPlayerControllerAvailable(ODPlayerController* PC);// 0x558c138
	void OnMusicEndCallback(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x558c1f4
	void OnConversationEnded(VoiceOverConversation* Conversation);// 0x558c090
	bool IsAnyMusicPlaying();// 0x558c4f4
	bool IsAlreadyPlaying(GameplayTag TagToCheck);// 0x558c518
	bool HasActiveConversation();// 0x558c408
	void EndConversation(bool bImmediately, bool bClearBuffer);// 0x558c310
	void ClearBufferedConversation();// 0x558c2fc
	void ClearActiveMusic();// 0x558c1e0
	void BeginPlay();// 0x558c2e8

--------------------------------
Class: MapSoundtrackLookup.AudioLookup.PrimaryDataAsset.DataAsset.Object
	<GameplayTag,AudioEvent> MusicTracks;//[Offset: 0x30, Size: 0x50]
	<GameplayTag,AkSwitchValue*> MapMusicTrackSwitches;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: ODHUD.HUD.Actor.Object

--------------------------------
Class: BP_ODPlayerState_C.ODPlayerState.PlayerState.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4f8, Size: 0x8]

--------------------------------
Class: BP_ODOnlineGameStateBase_TutorialMatch_C.BP_ODGameStateBase_C.ODOnlineGameStateBase.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: iTAux.Actor.Object
	bool performDebugOperations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	bool printDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	bool printErrorMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a, Size: 0x1]
	bool tickWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1]
	bool ignoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	float defaultTimerInterval;//[Offset: 0x250, Size: 0x4]
	iTweenEvent*[] currentTweens;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: iTweenEvent.Actor.Object
	SplineComponent* OldSplineComponent;//[Offset: 0x288, Size: 0x8]
	bool DestroyNewSplineObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	iTAux* aux;//[Offset: 0x2b0, Size: 0x8]
	byte coordinateSpace;//[Offset: 0x2b8, Size: 0x1]
	bool sweepTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	bool tieToObjectValidity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	bool enforceValueTo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb, Size: 0x1]
	float timerInterval;//[Offset: 0x2bc, Size: 0x4]
	byte vectorConstraints;//[Offset: 0x2c0, Size: 0x1]
	byte vector2DConstraints;//[Offset: 0x2c1, Size: 0x1]
	byte rotatorConstraints;//[Offset: 0x2c2, Size: 0x1]
	byte delayType;//[Offset: 0x2c3, Size: 0x1]
	byte tickType;//[Offset: 0x2c4, Size: 0x1]
	byte easeType;//[Offset: 0x2c5, Size: 0x1]
	CurveFloat* customEaseTypeCurve;//[Offset: 0x2c8, Size: 0x8]
	float punchAmplitude;//[Offset: 0x2d0, Size: 0x4]
	byte loopType;//[Offset: 0x2d4, Size: 0x1]
	byte Orientation;//[Offset: 0x2d5, Size: 0x1]
	Object* OrientationTarget;//[Offset: 0x2d8, Size: 0x8]
	float orientationSpeed;//[Offset: 0x2e0, Size: 0x4]
	bool tickWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool ignoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	byte EventType;//[Offset: 0x2e6, Size: 0x1]
	HitResult SweepResult;//[Offset: 0x2e8, Size: 0x88]
	bool shouldTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool isTweenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	bool cullNonRenderedTweens;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 0x1]
	float secondsToWaitBeforeCull;//[Offset: 0x378, Size: 0x4]
	Actor* actorTweening;//[Offset: 0x380, Size: 0x8]
	Widget* widgetTweening;//[Offset: 0x388, Size: 0x8]
	SceneComponent* componentTweening;//[Offset: 0x390, Size: 0x8]
	Object* onTweenStartTarget;//[Offset: 0x398, Size: 0x8]
	Object* onTweenUpdateTarget;//[Offset: 0x3a0, Size: 0x8]
	Object* onTweenLoopTarget;//[Offset: 0x3a8, Size: 0x8]
	Object* onTweenCompleteTarget;//[Offset: 0x3b0, Size: 0x8]
	FName tweenName;//[Offset: 0x3b8, Size: 0x8]
	float tickTypeValue;//[Offset: 0x3c0, Size: 0x4]
	float Alpha;//[Offset: 0x3c4, Size: 0x4]
	bool playingBackward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	int numberOfLoopSections;//[Offset: 0x3cc, Size: 0x4]
	int maximumLoopSections;//[Offset: 0x3d0, Size: 0x4]
	bool actorTickableWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	float actorTimeDilation;//[Offset: 0x3d8, Size: 0x4]
	int tweenIndex;//[Offset: 0x3dc, Size: 0x4]
	float Delay;//[Offset: 0x3e0, Size: 0x4]
	SplineComponent* SplineComponent;//[Offset: 0x3e8, Size: 0x8]
	bool interpolateToSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	bool switchPathOrientationDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 0x1]
	float generatedPointDistance;//[Offset: 0x3f4, Size: 0x4]
	float PathLookDistance;//[Offset: 0x3f8, Size: 0x4]
	bool destroySplineObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	DataTypeValues dtv;//[Offset: 0x400, Size: 0x34]
	Vector vectorFrom;//[Offset: 0x434, Size: 0xc]
	Vector vectorTo;//[Offset: 0x440, Size: 0xc]
	Vector vectorTemp;//[Offset: 0x44c, Size: 0xc]
	Rotator rotatorFrom;//[Offset: 0x458, Size: 0xc]
	Rotator rotatorTo;//[Offset: 0x464, Size: 0xc]
	Rotator rotatorTemp;//[Offset: 0x470, Size: 0xc]
	bool shortestPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1]
	Vector2D vector2DFrom;//[Offset: 0x480, Size: 0x8]
	Vector2D vector2DTo;//[Offset: 0x488, Size: 0x8]
	Vector2D vector2DTemp;//[Offset: 0x490, Size: 0x8]
	float floatFrom;//[Offset: 0x498, Size: 0x4]
	float floatTo;//[Offset: 0x49c, Size: 0x4]
	float floatTemp;//[Offset: 0x4a0, Size: 0x4]
	LinearColor linearColorFrom;//[Offset: 0x4a4, Size: 0x10]
	LinearColor linearColorTo;//[Offset: 0x4b4, Size: 0x10]
	LinearColor linearColorTemp;//[Offset: 0x4c4, Size: 0x10]
	Vector LocationOffset;//[Offset: 0x4d4, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4e0, Size: 0xc]
	Vector scale3DOffset;//[Offset: 0x4ec, Size: 0xc]
	Vector2D translationOffset;//[Offset: 0x4f8, Size: 0x8]
	Vector2D shearOffset;//[Offset: 0x500, Size: 0x8]
	Vector2D scaleOffset;//[Offset: 0x508, Size: 0x8]
	float angleOffset;//[Offset: 0x510, Size: 0x4]
	void UpdateTween();// 0x3b89828
	void SwitchValues();// 0x3b893a4
	void SpacializeValues();// 0x3b893b8
	void SetTimerInterval(float Interval);// 0x3b89850
	void SetTickTypeValue();// 0x3b896f0
	void RunInterface(Object* Target, byte Type);// 0x3b8917c
	void RestorePauseTimeDilationSettings();// 0x3b89704
	void RestartTween();// 0x3b8983c
	void ReconstructSpline();// 0x3b890dc
	void ParseParameters(FString Params);// 0x3b8972c
	void OrientToTargetFunction();// 0x3b89104
	void OrientToPathFunction();// 0x3b890f0
	void LoopWithoutDelay();// 0x3b893cc
	void LoopWithDelay();// 0x3b893e0
	void LoopSectionStuff();// 0x3b893f4
	bool IsEventDataType();// 0x3b89270
	void InitEvent();// 0x3b8912c
	void IgnorePauseTimeDilationSettings();// 0x3b89718
	FString GetEventTypeEnumAsFString(byte enumValue);// 0x3b892a8
	float GetAlphaFromEquation(float Value);// 0x3b89640
	void EndPhase();// 0x3b8941c
	float EaseOutBounce(float Value);// 0x3b894e0
	float EaseInOutBounce(float Value);// 0x3b89430
	float EaseInBounce(float Value);// 0x3b89590
	void DelayTween();// 0x3b89408
	void CheckTargetValidity();// 0x3b89118
	void CheckLoopType();// 0x3b89168
	void CheckIfFirstDelay();// 0x3b89154
	void BindDelegates();// 0x3b89140

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x448, Size: 0x70]
	InterpCurveVector SplineInfo;//[Offset: 0x4b8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4d0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4e8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x500, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x51c, Size: 0x4]
	float Duration;//[Offset: 0x520, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x527, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52a, Size: 0x1]
	float LoopPosition;//[Offset: 0x52c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x530, Size: 0xc]
	void UpdateSpline();// 0x819bdd8
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x8199f4c
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte coordinateSpace, bool bUpdateSpline);// 0x8199a48
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x819b16c
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte coordinateSpace, bool bUpdateSpline);// 0x8199bd8
	void SetTangentColor(out const LinearColor TangentColor);// 0x819b00c
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte coordinateSpace, bool bUpdateSpline);// 0x8199dbc
	void SetSplineWorldPoints(out const Vector[] Points);// 0x819a2a4
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x819957c
	void SetSplinePoints(out const Vector[] Points, byte coordinateSpace, bool bUpdateSpline);// 0x819a36c
	void SetSplineLocalPoints(out const Vector[] Points);// 0x819a1dc
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x819b0bc
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x8199774
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte coordinateSpace, bool bUpdateSpline);// 0x81998b8
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte coordinateSpace, bool bUpdateSpline);// 0x819a04c
	void SetDrawDebug(bool bShow);// 0x819af5c
	void SetDefaultUpVector(out const Vector UpVector, byte coordinateSpace);// 0x81982a0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x819ad20
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x819ae64
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x819a634
	bool IsClosedLoop();// 0x819ace8
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x8197c14
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x8196cd8
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x8197a5c
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x81972ec
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x819935c
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x8197f84
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x819708c
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x8197dcc
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x81983c8
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x819b21c
	Vector GetUpVectorAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity);// 0x8196b84
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x8198d5c
	Vector GetUpVectorAtSplineInputKey(float InKey, byte coordinateSpace);// 0x819b8d8
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte coordinateSpace);// 0x819795c
	Transform GetTransformAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x8196880
	Transform GetTransformAtSplinePoint(int PointIndex, byte coordinateSpace, bool bUseScale);// 0x819894c
	Transform GetTransformAtSplineInputKey(float InKey, byte coordinateSpace, bool bUseScale);// 0x819b678
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte coordinateSpace, bool bUseScale);// 0x819754c
	Vector GetTangentAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity);// 0x8196f38
	Vector GetTangentAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x819915c
	Vector GetTangentAtSplineInputKey(float InKey, byte coordinateSpace);// 0x819bbd8
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte coordinateSpace);// 0x8197ccc
	byte GetSplinePointType(int PointIndex);// 0x81996c4
	float GetSplineLength();// 0x8198394
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x8196628
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x8198aac
	Vector GetScaleAtSplineInputKey(float InKey);// 0x819b4c8
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x81976ac
	Rotator GetRotationAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity);// 0x8196de4
	Rotator GetRotationAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x8198e5c
	Rotator GetRotationAtSplineInputKey(float InKey, byte coordinateSpace);// 0x819b9d8
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte coordinateSpace);// 0x8197b14
	float GetRollAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity);// 0x8196730
	float GetRollAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x8198b60
	float GetRollAtSplineInputKey(float InKey, byte coordinateSpace);// 0x819b57c
	float GetRollAtDistanceAlongSpline(float Distance, byte coordinateSpace);// 0x8197760
	Vector GetRightVectorAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity);// 0x8196a30
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x8198c5c
	Vector GetRightVectorAtSplineInputKey(float InKey, byte coordinateSpace);// 0x819b7d8
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte coordinateSpace);// 0x819785c
	int GetNumberOfSplineSegments();// 0x8199514
	int GetNumberOfSplinePoints();// 0x8199548
	Vector GetLocationAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity);// 0x81973f8
	Vector GetLocationAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x8199414
	Vector GetLocationAtSplineInputKey(float InKey, byte coordinateSpace);// 0x819bcd8
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte coordinateSpace);// 0x819803c
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte coordinateSpace);// 0x81987bc
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x8198674
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x8198f5c
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x819813c
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x81984c8
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x819b31c
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x81985c4
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x819b418
	Vector GetDirectionAtTime(float Time, byte coordinateSpace, bool bUseConstantVelocity);// 0x8197198
	Vector GetDirectionAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x819925c
	Vector GetDirectionAtSplineInputKey(float InKey, byte coordinateSpace);// 0x819bad8
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte coordinateSpace);// 0x8197e84
	Vector GetDefaultUpVector(byte coordinateSpace);// 0x81981ec
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte coordinateSpace);// 0x819905c
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace);// 0x8196048
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace, bool bUseScale);// 0x8195c18
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace);// 0x8196258
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x8195d80
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace);// 0x8196150
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace);// 0x8195e3c
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace);// 0x8195f40
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace);// 0x8196468
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x8196570
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte coordinateSpace);// 0x8196360
	void ClearSplinePoints(bool bUpdateSpline);// 0x819ac38
	void AddSplineWorldPoint(out const Vector position);// 0x819a57c
	void AddSplinePointAtIndex(out const Vector position, int Index, byte coordinateSpace, bool bUpdateSpline);// 0x819a72c
	void AddSplinePoint(out const Vector position, byte coordinateSpace, bool bUpdateSpline);// 0x819a8c0
	void AddSplineLocalPoint(out const Vector position);// 0x819a4c4
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x819aa08
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x819ab14

--------------------------------
Class: SplineCurves
	InterpCurveVector position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
	uint32 Version;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DataTypeValues
	Vector vectorCurrent;//[Offset: 0x0, Size: 0xc]
	Rotator rotatorCurrent;//[Offset: 0xc, Size: 0xc]
	Vector2D vector2DCurrent;//[Offset: 0x18, Size: 0x8]
	float floatCurrent;//[Offset: 0x20, Size: 0x4]
	LinearColor linearColorCurrent;//[Offset: 0x24, Size: 0x10]

--------------------------------
Class: BP_CombatUISingleton_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x250, Size: 0x8]
	BP_KillFeedData_C*[] KillFeedDataArray;//[Offset: 0x258, Size: 0x10]
	delegate OnKillFeedDataItemUpdated;//[Offset: 0x268, Size: 0x10]
	int RushSectorCount;//[Offset: 0x278, Size: 0x4]
	delegate OnPingFeedDataItemUpdated;//[Offset: 0x280, Size: 0x10]
	BP_PingFeedData_C*[] PingFeedDataArray;//[Offset: 0x290, Size: 0x10]
	delegate OnShowWorldUIObjects;//[Offset: 0x2a0, Size: 0x10]
	void GetColorForPlayerState(ODPlayerState* PlayerState, out LinearColor Color, PlayerController* CallFunc_GetPlayerController_ReturnValue, SquadComponent* CallFunc_GetSquadComponentNonConst_ReturnValue, byte CallFunc_GetSquadNumber_ReturnValue, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_UI_IsMySquadId_IsMySquad, byte CallFunc_GetActorAttitudes_ReturnValue, LinearColor CallFunc_UI_GetTeamColor_Color);// 0x59ef218
	void SetPingedItemTextAndColor(enum PingAttitude, Actor* PingedObjective, bool IsSquadmate, out FText OutText, out LinearColor OutColor, FText PingedItemText, LinearColor PingedItemColor, FText Temp_text_Variable, LinearColor CallFunc_UI_GetTeamColor_Color, LinearColor CallFunc_UI_GetTeamColor_Color, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool Temp_bool_Variable, interface classNone K2Node_DynamicCast_AsMarkable_Objective_Interface, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default, FText CallFunc_GetPingedItemName_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue);// 0x59ef218
	void OnPingReceived(out const FText TextToDisplay, GenericUIAnchorComponent* PingAnchor, out const SquadPing PingDetails, BP_PingFeedData_C* PingFeedData, BP_PingFeedData_C* OldPingFeedData, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetSquadNumber_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, FText CallFunc_SetPingedItemTextAndColor_OutText, LinearColor CallFunc_SetPingedItemTextAndColor_OutColor, bool Temp_bool_Variable, BP_PingFeedData_C* CallFunc_SpawnObject_ReturnValue, LinearColor K2Node_Select_Default, BP_PingFeedData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x59ef218
	void IsPlayerRushAttacker(out bool IsOnAttackingTeam, PlayerController* CallFunc_GetPlayerController_ReturnValue, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x59ef218
	void GetRushSectorCount(out int TotalSectorCount);// 0x59ef218
	void CountRushSectors(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_Rush_MCOM_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_Rush_MCOM_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetOwningSector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Max_ReturnValue);// 0x59ef218
	void GetPrettyMapName(FString EngineMapName, out FText MapDisplayName, out bool Found, FName EngineName, FText CallFunc_Conv_StringToText_ReturnValue, BPS_UIMapInfo CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Len_ReturnValue, int CallFunc_FindSubstring_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0x59ef218
	void SetupKillFeedData(PlayerState* InKillerState, PlayerState* InVictimState, out PrimaryPawnDeath InPawnDeathInfo, BP_KillFeedData_C* InKillFeedData, FText KillerName, LinearColor VictimColor, FText VictimName, LinearColor KillerColor, PlayerState* VictimState, PlayerState* KillerState, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, LinearColor CallFunc_GetColorForPlayerState_Color, LinearColor CallFunc_GetColorForPlayerState_Color, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x59ef218
	void OnAnyPlayerKilled(const PlayerState* InKillerState, const PlayerState* InVictimState, out const PrimaryPawnDeath InPawnDeathInfo, BP_KillFeedData_C* OldKillFeedData, BP_KillFeedData_C* KillFeedData, PrimaryPawnDeath PawnDeathInfo, PlayerState* VictimState, PlayerState* KillerState, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, BP_KillFeedData_C* CallFunc_SpawnObject_ReturnValue, BP_KillFeedData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void TryInitializeFeedMessages();// 0x59ef218
	void ExecuteUbergraph_BP_CombatUISingleton(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PlayerHUDComponent* CallFunc_GetLocalPlayerHUD_ReturnValue);// 0x59ef218
	void OnShowWorldUIObjects__DelegateSignature(bool Show);// 0x59ef218
	void OnPingFeedDataItemUpdated__DelegateSignature(BP_PingFeedData_C* InOldPingFeedData, BP_PingFeedData_C* InNewPingFeedData);// 0x59ef218
	void OnKillFeedDataItemUpdated__DelegateSignature(BP_KillFeedData_C* RemovedKillFeedData, BP_KillFeedData_C* NewKillFeedData);// 0x59ef218

--------------------------------
Class: BP_KillFeedData_C.Object
	FText AttackerText;//[Offset: 0x28, Size: 0x18]
	FText VictimText;//[Offset: 0x40, Size: 0x18]
	LinearColor AttackerTeamColor;//[Offset: 0x58, Size: 0x10]
	LinearColor VictimTeamColor;//[Offset: 0x68, Size: 0x10]
	Texture2D* Icon;//[Offset: 0x78, Size: 0x8]
	Vector2D IconUsedPixelSize;//[Offset: 0x80, Size: 0x8]
	bool bPreventIconFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	void Initialize(FText AttackerText, FText VictimText, LinearColor AttackerTeamColor, LinearColor VictimTeamColor, Texture2D* Icon, Vector2D IconUsedPixelSize, bool bPreventIconFlip);// 0x59ef218

--------------------------------
Class: BP_PingFeedData_C.Object
	FText PingOwnerText;//[Offset: 0x28, Size: 0x18]
	FText PingTargetText;//[Offset: 0x40, Size: 0x18]
	LinearColor PingOwnerColor;//[Offset: 0x58, Size: 0x10]
	LinearColor PingTargetColor;//[Offset: 0x68, Size: 0x10]
	FText PingMessage;//[Offset: 0x78, Size: 0x18]
	void Initialize(FText PingOwnerText, FText PingTargetText, LinearColor PingOwnerColor, LinearColor PingTargetColor, FText PingMessage);// 0x59ef218

--------------------------------
Class: BP_Rush_MCOM_C.ODDestructibleObjective.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x268, Size: 0x8]
	MarkableObjectiveComponent* MarkableObjective;//[Offset: 0x270, Size: 0x8]
	AkComponent* AudioComponent;//[Offset: 0x278, Size: 0x8]
	StaticMeshComponent* Bomb;//[Offset: 0x280, Size: 0x8]
	SceneComponent* LightOriginLocation;//[Offset: 0x288, Size: 0x8]
	GenericUIAnchorComponent* UIAnchor;//[Offset: 0x290, Size: 0x8]
	SphereComponent* Collision;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MCOM_Mesh;//[Offset: 0x2a0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a8, Size: 0x8]
	float ArmDuration;//[Offset: 0x2b0, Size: 0x4]
	float DisarmDuration;//[Offset: 0x2b4, Size: 0x4]
	float DetonateDuration;//[Offset: 0x2b8, Size: 0x4]
	float DetonateFinaleDuration;//[Offset: 0x2bc, Size: 0x4]
	TimerHandle DetonateTimerHandle;//[Offset: 0x2c0, Size: 0x8]
	TimerHandle ArmTimerHandle;//[Offset: 0x2c8, Size: 0x8]
	TimerHandle DisarmTimerHandle;//[Offset: 0x2d0, Size: 0x8]
	delegate OnMCOMStationDestroyed;//[Offset: 0x2d8, Size: 0x10]
	FName MCOMLabel;//[Offset: 0x2e8, Size: 0x8]
	TimerHandle ArmedLightTimer;//[Offset: 0x2f0, Size: 0x8]
	ParticleSystemComponent* LightParticleSystem;//[Offset: 0x2f8, Size: 0x8]
	float LightScale;//[Offset: 0x300, Size: 0x4]
	float MaxInteractionDistance;//[Offset: 0x304, Size: 0x4]
	bool bIsArmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	Controller* CurrentInteractingController;//[Offset: 0x310, Size: 0x8]
	AkAudioEvent* DisarmStartSFX;//[Offset: 0x318, Size: 0x8]
	AkAudioEvent* ArmStartSFX;//[Offset: 0x320, Size: 0x8]
	AkAudioEvent* ArmedLoopSFX;//[Offset: 0x328, Size: 0x8]
	AkAudioEvent* DisarmedCompleteSFX;//[Offset: 0x330, Size: 0x8]
	delegate OnFinishedArming;//[Offset: 0x338, Size: 0x10]
	delegate OnFinishedDisarming;//[Offset: 0x348, Size: 0x10]
	TimerHandle DetonateFinaleTimer;//[Offset: 0x358, Size: 0x8]
	delegate OnStartedArming;//[Offset: 0x360, Size: 0x10]
	delegate OnStartedDisarming;//[Offset: 0x370, Size: 0x10]
	bool bAllowInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	FString LastInteractingPlayerId;//[Offset: 0x388, Size: 0x10]
	Controller* LastInteractingController;//[Offset: 0x398, Size: 0x8]
	delegate OnInterruptedArming;//[Offset: 0x3a0, Size: 0x10]
	delegate OnInterruptedDisarming;//[Offset: 0x3b0, Size: 0x10]
	float TimeToDetonate;//[Offset: 0x3c0, Size: 0x4]
	ExplosionProperties Explosion Properties;//[Offset: 0x3c8, Size: 0x58]
	DamageProperties Explosion Damage;//[Offset: 0x420, Size: 0x60]
	ImpactCameraFade Explosion Camera Fade;//[Offset: 0x480, Size: 0x58]
	<enum,AttitudeBasedPingInfo> Armed Voice Lines;//[Offset: 0x4d8, Size: 0x50]
	<enum,AttitudeBasedPingInfo> Disarmed Voice Lines;//[Offset: 0x528, Size: 0x50]
	float Disarmed Spawn Weight;//[Offset: 0x578, Size: 0x4]
	float Armed Spawn Weight;//[Offset: 0x57c, Size: 0x4]
	float Destroyed Spawn Weight;//[Offset: 0x580, Size: 0x4]
	TimerHandle DetonateAnnouncerWarningTimer;//[Offset: 0x588, Size: 0x8]
	float GetScore(GenericTeamId Team);// 0x59ef218
	AkComponent* GetAudioObjectNonConst();// 0x59ef218
	FName GetPingedItemTelemetryId();// 0x59ef218
	FText GetPingedItemName(FText CallFunc_Conv_NameToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x59ef218
	enum GetAttitudeOverride(out const SquadPing PingDetails, out bool bOutOverrodeAttitude, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, int CallFunc_GenericTeamIdToInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x59ef218
	FText GetTextForPing(out const SquadPing PingDetails);// 0x59ef218
	MarkableObjectiveComponent* GetMarkableObjectiveComponentNonConst();// 0x59ef218
	float GetInteractionTime(out const GenericTeamId TeamId, int CallFunc_GenericTeamIdToInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x59ef218
	bool CanInteractWith(const ODCharacter* Character, BP_ODObjectiveManager_C* Objective Manager, bool CallFunc_IsValid_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsInSectorTransition_ReturnValue, int CallFunc_GetCurrentSector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, BP_ODObjectiveManager_C* K2Node_DynamicCast_AsBP_ODObjective_Manager, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	enum GetInteractableType();// 0x59ef218
	float GetMaxInteractionDistance();// 0x59ef218
	void Announcer_OnMCOMTimer(GameStateBase* CallFunc_GetGameState_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, BP_ODObjectiveManager_Rush_C* K2Node_DynamicCast_AsBP_ODObjective_Manager_Rush, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AreTeamsFriendly_ReturnValue);// 0x59ef218
	void IsMCOMActive(BP_ODObjectiveManager_C* ObjManager, out bool Active, bool CallFunc_IsInSectorTransition_ReturnValue, int CallFunc_GetCurrentSector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x59ef218
	enum GetObjectiveStatus(enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, BP_ODObjectiveManager_C* K2Node_DynamicCast_AsBP_ODObjective_Manager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsMCOMActive_Active, enum K2Node_Select_Default);// 0x59ef218
	void Announcer_OnMCOMDestroyed(int MCOMsRemainingInSector, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, bool CallFunc_AreTeamsFriendly_ReturnValue, BP_ODObjectiveManager_Rush_C* K2Node_DynamicCast_AsBP_ODObjective_Manager_Rush, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetSectorCount_ReturnValue, int CallFunc_GetCurrentSector_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void Announcer_OnMCOMDisarmed(bool ArmedByLocalPlayer, PlayerController* CallFunc_GetPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, BP_ODObjectiveManager_Rush_C* K2Node_DynamicCast_AsBP_ODObjective_Manager_Rush, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AreTeamsFriendly_ReturnValue, int CallFunc_GetCurrentSector_ReturnValue, int CallFunc_GetSectorCount_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void Announcer_OnMCOMArmed(bool ArmedByLocalPlayer, PlayerController* CallFunc_GetPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, BP_ODObjectiveManager_Rush_C* K2Node_DynamicCast_AsBP_ODObjective_Manager_Rush, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AreTeamsFriendly_ReturnValue, int CallFunc_GetCurrentSector_ReturnValue, int CallFunc_GetSectorCount_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void CheckForSameTeamOnPoint(Actor* ExitingPlayer, int CachedTeamID, Controller* CachedController, bool ShouldCancelTimer, BP_ODCharacter_C* K2Node_DynamicCast_AsBP_ODCharacter, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, int CallFunc_GenericTeamIdToInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, Actor* CallFunc_Array_Get_Item, TimerHandle K2Node_Select_Default, BP_ODCharacter_C* K2Node_DynamicCast_AsBP_ODCharacter, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_GenericTeamIdToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x59ef218
	void DestroyStation(BP_ODObjectiveManager_Rush_C* K2Node_DynamicCast_AsBP_ODObjective_Manager_Rush, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Num_MCOMs_in_Sector_Num_MCOMs, FString CallFunc_Conv_NameToString_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_ODOnlineGameMode_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_Mode_Rush, bool K2Node_DynamicCast_bSuccess, ITGameObjectiveDelegateSet* CallFunc_GetDelegateSet_ReturnValue, ODRushGameObjectiveDelegateSet* K2Node_DynamicCast_AsODRush_Game_Objective_Delegate_Set, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	void UserConstructionScript();// 0x59ef218
	void RequestSetAudioSwitch(FString SwitchGroup, FString SwitchState, float Delay);// 0x59ef218
	void OnPinged(out const SquadPing PingDetails);// 0x59ef218
	void MulticastOnArmingStarted();// 0x59ef218
	void MulticastOnArmed();// 0x59ef218
	void MulticastOnDisarmed();// 0x59ef218
	void MulticastOnDestroyed();// 0x59ef218
	void MulticastOnDisarmingStarted();// 0x59ef218
	void StartDetonateFinale();// 0x59ef218
	void MulticastOnDisarmingInterrupted();// 0x59ef218
	void MulticastOnArmingInterrupted();// 0x59ef218
	void MulticastPlayDestroyedAnnouncerAudio(int MCOMsRemainingInSector);// 0x59ef218
	void PlayAnnouncerDetonationWarning();// 0x59ef218
	void ArmBomb();// 0x59ef218
	void DisarmBomb();// 0x59ef218
	void BndEvt__Collision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x59ef218
	void Interact(Controller* InteractingController);// 0x59ef218
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void ExecuteUbergraph_BP_Rush_MCOM(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString K2Node_Event_SwitchGroup, FString K2Node_Event_SwitchState, float K2Node_Event_Delay, const SquadPing K2Node_Event_PingDetails, const Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Rush_MCOM_Destroyed_C* CallFunc_FinishSpawningActor_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, PlayerHUDComponent* CallFunc_GetLocalPlayerHUD_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerHUDComponent* CallFunc_GetLocalPlayerHUD_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, DamageOrigin K2Node_MakeStruct_DamageOrigin, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, int CallFunc_K2_PostAudioEvent_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, bool CallFunc_NotEqual_IntInt_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioEventParams K2Node_MakeStruct_AudioEventParams, int CallFunc_K2_PostAudioEvent_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int K2Node_CustomEvent_MCOMsRemainingInSector, ITTeamPlayerStart*[] CallFunc_GetAllActorsOfClass_OutActors, ITTeamPlayerStart* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Set_Remove_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, BP_ODObjectiveManager_C* K2Node_DynamicCast_AsBP_ODObjective_Manager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsMCOMActive_Active, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, ITGameObjectiveDelegateSet* CallFunc_GetDelegateSet_ReturnValue, ITGameObjectiveDelegateSet* CallFunc_GetDelegateSet_ReturnValue, ODRushGameObjectiveDelegateSet* K2Node_DynamicCast_AsODRush_Game_Objective_Delegate_Set, bool K2Node_DynamicCast_bSuccess, ODRushGameObjectiveDelegateSet* K2Node_DynamicCast_AsODRush_Game_Objective_Delegate_Set, bool K2Node_DynamicCast_bSuccess, Controller* K2Node_Event_InteractingController, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, int CallFunc_GenericTeamIdToInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_ODOnlineGameMode_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_Mode_Rush, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_NameToString_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_ODOnlineGameMode_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_Mode_Rush, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_NameToString_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPlayerIdFromController_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, FString CallFunc_GetPlayerIdFromController_ReturnValue);// 0x59ef218
	void OnInterruptedDisarming__DelegateSignature();// 0x59ef218
	void OnInterruptedArming__DelegateSignature();// 0x59ef218
	void OnStartedDisarming__DelegateSignature(float Duration);// 0x59ef218
	void OnStartedArming__DelegateSignature(float Duration);// 0x59ef218
	void OnFinishedDisarming__DelegateSignature();// 0x59ef218
	void OnFinishedArming__DelegateSignature(float TimeToDestroy);// 0x59ef218
	void OnMCOMStationDestroyed__DelegateSignature(Actor* DestroyedStation);// 0x59ef218

--------------------------------
Class: ODDestructibleObjective.Actor.Object
	ITGameObjectiveManager* ObjectiveManager;//[Offset: 0x258, Size: 0x8]
	int Sector;//[Offset: 0x260, Size: 0x4]
	void OnDisarmingStarted(Controller* Controller, float TimeLeft);// 0x54ad390
	void OnDisarmingFinished(Controller* Controller, float TimeLeft);// 0x54ad294
	void OnArmingStarted(Controller* Controller, float TimeLeft);// 0x54ad588
	void OnArmingFinished(Controller* Controller, float TimeLeft);// 0x54ad48c
	int GetOwningSector();// 0x54ad684
	FString DumpState();// 0x54ad1dc

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: BP_ODObjectiveManager_C.ITGameObjectiveManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x438, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x440, Size: 0x8]
	float SectorTransitionDuration;//[Offset: 0x448, Size: 0x4]
	delegate OnSectorTransitionPhaseStart;//[Offset: 0x450, Size: 0x10]
	delegate OnSectorTransitionPhaseEnd;//[Offset: 0x460, Size: 0x10]
	DataTable* AnnouncerAudioEvents;//[Offset: 0x470, Size: 0x8]
	delegate OnAnyConquestPointOwnerChanged;//[Offset: 0x478, Size: 0x10]
	ODConquestPointScoringCondition* ConquestPointScoringCondition;//[Offset: 0x488, Size: 0x8]
	float[] ScorePercentThresholds;//[Offset: 0x490, Size: 0x10]
	ITScoreObjectiveData* ScoreData;//[Offset: 0x4a0, Size: 0x8]
	int LastLeadingTeam;//[Offset: 0x4a8, Size: 0x4]
	float MinTimeToAnnounceLeadChange;//[Offset: 0x4ac, Size: 0x4]
	float TimeOfLastLeadChange;//[Offset: 0x4b0, Size: 0x4]
	int[] StartingScores;//[Offset: 0x4b8, Size: 0x10]
	bool PlayScorePercentAnnouncements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	bool PlayAbsoluteScoreAnnouncement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 0x1]
	bool PlayLeadChangeAnnouncement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ca, Size: 0x1]
	bool PlayTimeRemainingAnnouncement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cb, Size: 0x1]
	float LastAnnouncerLineTime;//[Offset: 0x4cc, Size: 0x4]
	float AnnouncerCooldownTime;//[Offset: 0x4d0, Size: 0x4]
	bool Play First Blood Announcement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	ITTimeGameEndCondition* TimeGameEndCondition;//[Offset: 0x4d8, Size: 0x8]
	int[] TimeThresholds;//[Offset: 0x4e0, Size: 0x10]
	bool PlayScoreGainingAnnouncement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	int PrevScoreDifference;//[Offset: 0x4f4, Size: 0x4]
	float LastScoreGainCheckTime;//[Offset: 0x4f8, Size: 0x4]
	int RemainingTime;//[Offset: 0x4fc, Size: 0x4]
	void OnRep_RemainingTime(FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0x59ef218
	void Announcer_CalculateScoreGain(float ScoreGainCheckInterval, int Score Gain Threshold, int CallFunc_Abs_Int_ReturnValue, int CallFunc_SignOfInteger_ReturnValue, float CallFunc_GetAudioTimeSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_SignOfInteger_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x59ef218
	void Announcer_CalculateTimeThresholds(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetRemainingTimeInSeconds_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x59ef218
	void Announcer_AbsoluteScoreUpdate(GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, int CallFunc_GenericTeamIdToInt_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void Announcer_CheckForLeadChange(float CallFunc_GetTimeSeconds_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x59ef218
	void Announcer_PlaySectorTransitionEnd();// 0x59ef218
	void Announcer_PlaySectorTransitionStart();// 0x59ef218
	void Announcer_CalculateScorePercentThresholds(float RoundPercent, int TeamIndex, int NewScoreValue, float LocCurrentScoreThreshold, FString LocAnnouncerEventName, float CallFunc_Conv_IntToFloat_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, int Temp_int_Array_Index_Variable, GenericTeamId K2Node_MakeStruct_GenericTeamId, int CallFunc_GenericTeamIdToInt_ReturnValue, int Temp_int_Loop_Counter_Variable, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, int CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Get_Item, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void Announcer_PlayRoundEnd(bool CallFunc_HasAuthority_ReturnValue, int CallFunc_GetCachedWinningTeam_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void Announcer_PlayRoundStart();// 0x59ef218
	void PlayAnnouncerAudioLine(FName EventName, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_GetAudioTimeSeconds_ReturnValue, float CallFunc_GetAudioTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, BPS_AnnouncerAudioEvents CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_PlayAnnouncerAudio_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void StartSectorTransitionPhase();// 0x59ef218
	void EndSectorTransitionPhase();// 0x59ef218
	void MulticastSectorTransitionStart(TimerHandle SectorTransitionTimerHandle, float SectorTransitionDuration);// 0x59ef218
	void MulticastSectorTransitionEnd();// 0x59ef218
	void OnMatchPhaseChanged(enum PreviousPhase, enum CurrentPhase);// 0x59ef218
	void ClientPlayAnnouncerAudioRoundStart();// 0x59ef218
	void ClientPlayAnnouncerAudioRoundEnd();// 0x59ef218
	void OnAnyConquestPointOwnerChanged_Event();// 0x59ef218
	void PlayDominatingAnnouncerAudio();// 0x59ef218
	void MuticastPlayDominatingAudio(int Team);// 0x59ef218
	void ClientPlayAnnouncerAudio(FName EventName);// 0x59ef218
	void HandleScoreChangeAudioEvents(int TeamIndex, int ScoreDeltaValue, int NewScoreValue);// 0x59ef218
	void OnObjectiveManagerAvailable();// 0x59ef218
	void ExecuteUbergraph_BP_ODObjectiveManager(int EntryPoint, const int[] CallFunc_GetScores_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float K2Node_Event_DeltaSeconds, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle K2Node_CustomEvent_SectorTransitionTimerHandle, float K2Node_CustomEvent_SectorTransitionDuration, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, enum K2Node_CustomEvent_PreviousPhase, enum K2Node_CustomEvent_CurrentPhase, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_GetTeamWithMostConquestPoints_OutTeamIndex, int CallFunc_GetTeamWithMostConquestPoints_OutOwnershipDifferential, int K2Node_CustomEvent_Team, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, const ITScoringCondition*[] CallFunc_GetScoringConditions_ReturnValue, ITScoringCondition* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_ODConquestPointScoringCondition_C* K2Node_DynamicCast_AsBP_ODConquest_Point_Scoring_Condition, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_EventName, ITScoreObjectiveData* CallFunc_GetObjectiveData_ReturnValue, int K2Node_CustomEvent_TeamIndex, int K2Node_CustomEvent_ScoreDeltaValue, int K2Node_CustomEvent_NewScoreValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsInitialized_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_KotH_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Kot_H, bool K2Node_DynamicCast_bSuccess, BP_ODOnlineGameState_Domination_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Domination, bool K2Node_DynamicCast_bSuccess, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, ITGameEndCondition*[] CallFunc_GetAllGameEndConditions_OutArray, ITGameEndCondition* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ITTimeGameEndCondition* K2Node_DynamicCast_AsITTime_Game_End_Condition, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x59ef218
	void OnAnyConquestPointOwnerChanged__DelegateSignature();// 0x59ef218
	void OnSectorTransitionPhaseEnd__DelegateSignature();// 0x59ef218
	void OnSectorTransitionPhaseStart__DelegateSignature(TimerHandle SectorTransitionTimerHandle, float SectorTransitionDuration);// 0x59ef218

--------------------------------
Class: BP_ODOnlineGameState_Rush_C.BP_ODGameStateBase_C.ODOnlineGameStateBase.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x580, Size: 0x8]
	GenericTeamId AttackingTeamId;//[Offset: 0x588, Size: 0x1]
	void Update Music Tension(byte Desired Tension, bool Force, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void OnObjectiveManagerInit();// 0x59ef218
	void ExecuteUbergraph_BP_ODOnlineGameState_Rush(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, ITGameObjectiveManager* CallFunc_GetObjectiveManager_ReturnValue, BP_ODObjectiveManager_C* K2Node_DynamicCast_AsBP_ODObjective_Manager, bool K2Node_DynamicCast_bSuccess, ITAsymmScoreAndDestructionGameEndCondition* CallFunc_GetGameEndCondition_ReturnValue, bool CallFunc_IsInitialized_ReturnValue, GenericTeamId CallFunc_GetAttackingTeamId_ReturnValue);// 0x59ef218

--------------------------------
Class: ITAsymmScoreAndDestructionGameEndCondition.ITScoreGameEndCondition.ITGameEndCondition.Object
	Actor*[] DestructibleActors;//[Offset: 0xc8, Size: 0x10]
	bool bEnteringSectorResetsAttackerScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	int AttackerStartingScore;//[Offset: 0xdc, Size: 0x4]
	int AttackerMinScore;//[Offset: 0xe0, Size: 0x4]
	bool bPreventLossIfInSectorTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	float AttackerArmSeconds;//[Offset: 0xe8, Size: 0x4]
	float DefenderDisarmSeconds;//[Offset: 0xec, Size: 0x4]
	class ITScoreObjectiveData* ScoreObjectiveDataClass;//[Offset: 0xf0, Size: 0x8]
	class ITDestructibleObjectiveData* DestructibleObjectiveDataClass;//[Offset: 0xf8, Size: 0x8]
	ITDestructibleObjectiveData* DestructibleObjectiveData;//[Offset: 0x100, Size: 0x8]
	<Object*> ArmedObjectives;//[Offset: 0x108, Size: 0x50]
	void OnObjectiveDisarmed(const Object* Objective);// 0x5400d8c
	void OnObjectiveDestroyed(const Object* Objective);// 0x5400ce4
	void OnObjectiveArmed(const Object* Objective, float TimeLeft);// 0x5400e34
	void K2_IncrementSector(const int WinningTeam);// 0x5400f28

--------------------------------
Class: ITScoreGameEndCondition.ITGameEndCondition.Object
	bool bTargetScoreEndsGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bTargetScoreIncrementsSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bTargetScoreDecrementsSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bEnteringSectorResetsWinnerScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	bool bTargetScoreIsLoseCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bLowerScoreIsWinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	int TargetScore;//[Offset: 0x98, Size: 0x4]
	int StartingScore;//[Offset: 0x9c, Size: 0x4]
	int MinScore;//[Offset: 0xa0, Size: 0x4]
	int MaxScore;//[Offset: 0xa4, Size: 0x4]
	int MaxTimeInSeconds;//[Offset: 0xa8, Size: 0x4]
	enum ScoringApplicationRule;//[Offset: 0xac, Size: 0x1]
	ITScoreObjectiveData* ScoreObjectiveData;//[Offset: 0xc0, Size: 0x8]
	void TargetScoreMetDelegate__DelegateSignature(int TeamIndex);// 0x59ef218
	void OnScoreChanged(int TeamIndex, int ScoreChange, int NewScoreValue);// 0x54005c0

--------------------------------
Class: ITDestructibleObjectiveData.ITObjectiveData.Object
	delegate OnActorDestroyed;//[Offset: 0x40, Size: 0x10]
	Actor*[] RemainingDestructibleActors;//[Offset: 0x58, Size: 0x10]
	void OnRep_RemainingDestructibleActors(out const Actor*[] OldActors);// 0x53fea44
	GenericTeamId GetAttackingTeamId();// 0x53feb04

--------------------------------
Class: BPS_AnnouncerAudioEvents
	GameplayTag Event_10_A7FBE1404AEB8F2B61E8CCA17A179B5D;//[Offset: 0x0, Size: 0x8]
	byte Priority_14_B0AC2F1649075DA09F9D6E952AFF12E6;//[Offset: 0x8, Size: 0x1]
	float ReserveTime_9_C1F70AC4420F82ADA3028798B13607BA;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BP_ODConquestPointScoringCondition_C.ODConquestPointScoringCondition.ITScoringCondition.ITGameRule.Object
	float test;//[Offset: 0xa8, Size: 0x4]
	bool CalculateScoreChangeFixedInterval(out int OutTeamToApplyScoreChangeTo, out int OutScoreChange, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_GetTeamWithMostConquestPoints_OutTeamIndex, int CallFunc_GetTeamWithMostConquestPoints_OutOwnershipDifferential, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue);// 0x59ef218

--------------------------------
Class: ODConquestPointScoringCondition.ITScoringCondition.ITGameRule.Object
	class ITConquestObjectiveData* ConquestObjectiveDataClass;//[Offset: 0x58, Size: 0x8]
	ITConquestObjectiveData* ConquestObjectiveData;//[Offset: 0x60, Size: 0x8]
	int NumberOfConquestPoints;//[Offset: 0x68, Size: 0x4]
	float ScoreCalculationInterval;//[Offset: 0x78, Size: 0x4]
	bool bUseFixedTickScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	CurveFloat* DynamicTickCurve;//[Offset: 0x80, Size: 0x8]
	bool bTiesStillScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	void OnObjectiveSpawned(Actor* ObjectiveActor);// 0x549fbe4
	void OnMatchPhaseChanged(enum PreviousMatchState, enum CurrentMatchState);// 0x549fa00
	void OnConquestPointOwnerChanged(int NewOwningTeam, int OldOwningTeam);// 0x549faf4
	void GetTeamWithMostConquestPoints(out int OutTeamIndex, out int OutOwnershipDifferential);// 0x549fc8c
	bool CalculateScoreChangeFixedInterval(out int OutTeamToApplyScoreChangeTo, out int OutScoreChange);// 0x549fe50
	bool CalculateScoreChangeDynamicInterval(out int OutTeamToApplyScoreChangeTo);// 0x549fd90

--------------------------------
Class: ITConquestObjectiveData.ITObjectiveData.Object
	int[] TeamConquestPointsOwned;//[Offset: 0x40, Size: 0x10]
	ODConquestPoint*[] ConquestPoints;//[Offset: 0x50, Size: 0x10]
	int[] GetTeamConquestPointsOwnedNonConst();// 0x53fe588

--------------------------------
Class: BP_ODOnlineGameState_KotH_C.BP_ODGameStateBase_C.ODOnlineGameStateBase.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: BP_ODOnlineGameState_Domination_C.BP_ODGameStateBase_C.ODOnlineGameStateBase.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: ITTimeGameEndCondition.ITGameEndCondition.Object
	int MaxTimeInSeconds;//[Offset: 0x90, Size: 0x4]
	int GetRemainingTimeInSeconds();// 0x54009d8

--------------------------------
Class: BP_ODObjectiveManager_Rush_C.BP_ODObjectiveManager_C.ITGameObjectiveManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x500, Size: 0x8]
	int[] MCOMStationsPerSector;//[Offset: 0x508, Size: 0x10]
	int TEMPCurrentSector;//[Offset: 0x518, Size: 0x4]
	delegate OnSectorTransitionStart;//[Offset: 0x520, Size: 0x10]
	int Starting Sector;//[Offset: 0x530, Size: 0x4]
	byte Music Tension;//[Offset: 0x534, Size: 0x1]
	int LastSectorIndex;//[Offset: 0x538, Size: 0x4]
	enum UpdateAttackerTicketsAt;//[Offset: 0x53c, Size: 0x1]
	enum UpdateAttackerTicketType;//[Offset: 0x53d, Size: 0x1]
	int AttackerTicketsToAdd;//[Offset: 0x540, Size: 0x4]
	void Announcer_CalculateScorePercentThresholds(float RoundPercent, int TeamIndex, int NewScoreValue, float LocCurrentScoreThreshold, FString LocAnnouncerEventName, float CallFunc_Conv_IntToFloat_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, int Temp_int_Array_Index_Variable, GenericTeamId K2Node_MakeStruct_GenericTeamId, int CallFunc_GenericTeamIdToInt_ReturnValue, int Temp_int_Loop_Counter_Variable, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_AreTeamsFriendly_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamIdStatic_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Array_Get_Item, FString CallFunc_SelectString_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x59ef218
	void Announcer_PlaySectorTransitionEnd(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Is_Last_Sector_Is_Last_Sector);// 0x59ef218
	void Announcer_PlaySectorTransitionStart(bool CallFunc_HasAuthority_ReturnValue, int CallFunc_GetCurrentSector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x59ef218
	void Announcer_PlayRoundStart(PlayerController* CallFunc_GetPlayerController_ReturnValue, ODPlayerController* K2Node_DynamicCast_AsODPlayer_Controller, bool K2Node_DynamicCast_bSuccess, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AreTeamsFriendly_ReturnValue);// 0x59ef218
	void Announcer_PlayRoundEnd(bool CallFunc_HasAuthority_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, int CallFunc_GetCachedWinningTeam_ReturnValue, bool CallFunc_AreTeamsFriendly_ReturnValue, ODPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x59ef218
	void Get Num MCOMs in Sector(out int Num MCOMs, int CallFunc_GetCurrentSector_ReturnValue);// 0x59ef218
	void Decrement Tension(byte Min Tension, bool CallFunc_Greater_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x59ef218
	void Increment Tension(byte Max Tension, bool CallFunc_Less_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x59ef218
	void Is Last Sector(out bool Is Last Sector, int CallFunc_GetCurrentSector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x59ef218
	void OnRep_Music Tension(bool CallFunc_HasAuthority_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x59ef218
	void UpdateAttackerTickets(int LocNewTicketValue, ITAsymmScoreAndDestructionGameEndCondition* CallFunc_GetGameEndCondition_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_RushGameEndCondition_C* CallFunc_GetGameEndCondition_ReturnValue, GenericTeamId CallFunc_GetAttackingTeamId_ReturnValue, int CallFunc_GenericTeamIdToInt_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue);// 0x59ef218
	void MoveToNextSector(out bool IsMatchOver, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BP_RushGameEndCondition_C* CallFunc_GetGameEndCondition_ReturnValue, bool CallFunc_Is_Last_Sector_Is_Last_Sector);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void HandleMCOMStationDestruction(Actor* DestroyedStation);// 0x59ef218
	void Print Scores();// 0x59ef218
	void OnSectorTransitionFinished();// 0x59ef218
	void OnMatchPhasedChanged(enum PreviousPhase, enum CurrentPhase);// 0x59ef218
	void OnLogin(PlayerController* NewPlayerController);// 0x59ef218
	void ClientPlaySectorTransitionStartAnnouncerAudio(bool IsFinalSector);// 0x59ef218
	void ClientPlaySectorTransitionEndAnnouncerAudio(bool IsFinalSector);// 0x59ef218
	void OnObjectiveManagerAvailable();// 0x59ef218
	void ExecuteUbergraph_BP_ODObjectiveManager_Rush(int EntryPoint, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_ODOnlineGameMode_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_Mode_Rush, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_Rush_MCOM_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_Rush_MCOM_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* K2Node_CustomEvent_DestroyedStation, int CallFunc_SelectInt_ReturnValue, BP_Rush_MCOM_C* K2Node_DynamicCast_AsBP_Rush_MCOM, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_MoveToNextSector_IsMatchOver, int CallFunc_GetCurrentSector_ReturnValue, BP_RushGameEndCondition_C* CallFunc_GetGameEndCondition_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, const int[] CallFunc_GetScores_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString Temp_string_Variable, int CallFunc_GetCurrentSector_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_ODOnlineGameMode_SquadRush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_Mode_Squad_Rush, bool K2Node_DynamicCast_bSuccess, BP_ODOnlineGameMode_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_Mode_Rush, bool K2Node_DynamicCast_bSuccess, BP_ODOnlineGameMode_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_Mode_Rush, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_PreviousPhase, enum K2Node_CustomEvent_CurrentPhase, WorldSettings* CallFunc_GetWorldSettings_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, ODWorldSettings* K2Node_DynamicCast_AsODWorld_Settings, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetEditorStartingSector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetCurrentSector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameModeBase* CallFunc_GetGameMode_ReturnValue, ODOnlineGameModeBase* K2Node_DynamicCast_AsODOnline_Game_Mode_Base, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerController* K2Node_CustomEvent_NewPlayerController, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Is_Last_Sector_Is_Last_Sector, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_CustomEvent_IsFinalSector, bool K2Node_CustomEvent_IsFinalSector, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ODPlayerController* K2Node_DynamicCast_AsODPlayer_Controller, bool K2Node_DynamicCast_bSuccess, BP_ODOnlineGameState_Rush_C* K2Node_DynamicCast_AsBP_ODOnline_Game_State_Rush, bool K2Node_DynamicCast_bSuccess, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, bool CallFunc_AreTeamsFriendly_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, ODPlayerController* K2Node_DynamicCast_AsODPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, GenericTeamId CallFunc_GetGenericTeamId_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_AreTeamsFriendly_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ITGameObjectiveDelegateSet* CallFunc_GetDelegateSet_ReturnValue, ODRushGameObjectiveDelegateSet* K2Node_DynamicCast_AsODRush_Game_Objective_Delegate_Set, bool K2Node_DynamicCast_bSuccess, FString Temp_string_Variable, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue);// 0x59ef218
	void OnSectorTransitionStart__DelegateSignature();// 0x59ef218

--------------------------------
Class: BP_RushGameEndCondition_C.ITAsymmScoreAndDestructionGameEndCondition.ITScoreGameEndCondition.ITGameEndCondition.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x158, Size: 0x8]
	void EndGameAttackerVictory();// 0x59ef218
	void ExecuteUbergraph_BP_RushGameEndCondition(int EntryPoint);// 0x59ef218

--------------------------------
Class: BP_ODOnlineGameMode_Rush_C.BP_ODOnlineGameModeBase_C.ODOnlineGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6a0, Size: 0x8]
	bool IsAvailableOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	void ReceiveBeginPlay();// 0x59ef218
	void ExecuteUbergraph_BP_ODOnlineGameMode_Rush(int EntryPoint);// 0x59ef218

--------------------------------
Class: BP_ODOnlineGameModeBase_C.ODOnlineGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x690, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x698, Size: 0x8]
	void ReceiveBeginPlay();// 0x59ef218
	void ExecuteUbergraph_BP_ODOnlineGameModeBase(int EntryPoint);// 0x59ef218

--------------------------------
Class: ODOnlineGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	bool bLimitToOneHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	byte NumberOfTeams;//[Offset: 0x348, Size: 0x1]
	byte[] TeamCounts;//[Offset: 0x350, Size: 0x10]
	<PlayerController*> PlayerControllers;//[Offset: 0x360, Size: 0x50]
	class AIController* AIControllerClassToSpawn;//[Offset: 0x3b0, Size: 0x8]
	float MinBotSpawnInterval;//[Offset: 0x3b8, Size: 0x4]
	float GrantKillOnLogoutTimeLimit;//[Offset: 0x3bc, Size: 0x4]
	float LobbyTeamBalancingInterval;//[Offset: 0x3c0, Size: 0x4]
	byte MaxChangesPerTeamBalance;//[Offset: 0x3c4, Size: 0x1]
	float BattlePhaseTeamBalancingInterval;//[Offset: 0x3c8, Size: 0x4]
	byte TargetMatchPlayerCount;//[Offset: 0x3cc, Size: 0x1]
	byte WarmupTime;//[Offset: 0x3cd, Size: 0x1]
	ODTeamStruct[] TeamPlayers;//[Offset: 0x3d0, Size: 0x10]
	class Actor* ConditionsManagerClassToSpawn;//[Offset: 0x3e0, Size: 0x8]
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	delegate OnConquestPointSpawned;//[Offset: 0x3f0, Size: 0x10]
	BattleServerTelemetryComponent* BattleServerTelemetryComponent;//[Offset: 0x400, Size: 0x8]
	bool bForceStartMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40a, Size: 0x1]
	bool bSpawnInstantly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40a, Size: 0x1]
	delegate OnPostLogin;//[Offset: 0x508, Size: 0x10]
	delegate OnAddedToTeam;//[Offset: 0x518, Size: 0x10]
	byte AllowedTeamSizeDifference;//[Offset: 0x539, Size: 0x1]
	bool bAllowLateJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53a, Size: 0x1]
	bool bUseTerritoryConflict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53b, Size: 0x1]
	Object* ServerManagerGame;//[Offset: 0x540, Size: 0x8]
	ITGameObjectiveManager* ObjectiveManager;//[Offset: 0x548, Size: 0x8]
	PlayerController*[] DeferredSpawnPlayers;//[Offset: 0x550, Size: 0x10]
	<PlayerController*,byte> TerritoryConflictTeams;//[Offset: 0x590, Size: 0x50]
	DamageArbitrator* DamageArbitrator;//[Offset: 0x5f8, Size: 0x8]
	ServerTickRateMonitor* ServerTickRateMonitor;//[Offset: 0x600, Size: 0x8]
	int CurrentForceStartThreshold;//[Offset: 0x608, Size: 0x4]
	float ForceStartTimerSeconds;//[Offset: 0x60c, Size: 0x4]
	int SelectedDefaultThreshold;//[Offset: 0x610, Size: 0x4]
	ODForceStartThresholds[] SelectedForceStartThresholds;//[Offset: 0x618, Size: 0x10]
	ODForceStartRule[] ForceStartRules;//[Offset: 0x628, Size: 0x10]
	ODProgressionStatUtils* ProgressionStatUtils;//[Offset: 0x638, Size: 0x8]
	MetaServerGameConfigSubsystem* GameConfigSubsystem;//[Offset: 0x658, Size: 0x8]
	DGSPlayerLoginManager* PlayerLoginManager;//[Offset: 0x688, Size: 0x8]
	void ToggleBotsUseGrenadesOnly();// 0x54f2c90
	bool ShouldMatchRecordXP();// 0x54f29a4
	void SetUseTerritoryConflict(const bool bInUseTerritoryConflict);// 0x54f29f8
	void OnStopGame(int WinningTeamIndex);// 0x54f2db0
	void OnPlayerInitialLoadoutReceived(ODPlayerController* ODPlayer);// 0x54f28fc
	void HandlePlayerSpawned(Controller* Controller, Pawn* PlayerPawn, bool bIsRespawn);// 0x54f2b4c
	void HandlePlayerDeath(Actor* DeadActor);// 0x54f2aa4
	void HandleOnLiveDataReady();// 0x54f28e8
	void HandleGameConfigReady();// 0x54f28d4
	bool GetUseTerritoryConflict();// 0x54f29dc
	void ForceWinNow(int WinningTeam);// 0x54f2cb8
	void ForceTieNow();// 0x54f2ca4
	void ForceStartMatch();// 0x54f2d60
	enum CalculateNextSpawningBotSoldierClass();// 0x54f2d74

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2e8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2f4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2f8, Size: 0x4]
	int NumBots;//[Offset: 0x2fc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x300, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x304, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x308, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x310, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x320, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x324, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void StartMatch();// 0x7fd4ae0
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x7fd48a0
	void Say(FString Msg);// 0x7fd4950
	void RestartGame();// 0x7fd4aa8
	bool ReadyToStartMatch();// 0x7fd4a4c
	bool ReadyToEndMatch();// 0x7fd4a0c
	void K2_OnSetMatchState(FName NewState);// 0x59ef218
	bool IsMatchInProgress();// 0x7fd4afc
	FName getMatchState();// 0x7fd4b3c
	void EndMatch();// 0x7fd4ac4
	void AbortMatch();// 0x7fd4a8c

--------------------------------
Class: ODTeamStruct
	int PlayerId;//[Offset: 0x0, Size: 0x4]
	Controller* Controller;//[Offset: 0x8, Size: 0x8]
	GenericTeamId TeamNumber;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DamageArbitrator.Object
	bool bEnableDamageArbitration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float MaxBallisticWaitTime;//[Offset: 0x3c, Size: 0x4]
	float Max2DDamageLocationThresholdSq;//[Offset: 0x40, Size: 0x4]
	float MaxHitLocationThresholdSq;//[Offset: 0x44, Size: 0x4]
	float MaxZDamageLocationThreshold;//[Offset: 0x48, Size: 0x4]
	float MaxMeleeReachDistanceMultiplier;//[Offset: 0x4c, Size: 0x4]
	float MaxExplosionReachDistanceMultiplier;//[Offset: 0x50, Size: 0x4]
	float MaxTakeDownAngleMultiplier;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: ServerTickRateMonitor.Object

--------------------------------
Class: ODForceStartThresholds
	int TimerThresholdSeconds;//[Offset: 0x0, Size: 0x4]
	int PlayerThreshold;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ODForceStartRule
	FString MapName;//[Offset: 0x0, Size: 0x10]
	int DefaultForceStartThreshold;//[Offset: 0x10, Size: 0x4]
	ODForceStartThresholds[] ForceStartThresholds;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: DGSPlayerLoginManager.Object
	DGSLoginProcessorData[] LoginProcessors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DGSLoginProcessorData
	DGSPlayerLoginProcessorBase* LoginProcessor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DGSPlayerLoginProcessorBase.Object

--------------------------------
Class: BP_ODOnlineGameMode_SquadRush_C.BP_ODOnlineGameModeBase_C.ODOnlineGameModeBase.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6a0, Size: 0x8]
	bool IsAvailableOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	void ReceiveBeginPlay();// 0x59ef218
	void ExecuteUbergraph_BP_ODOnlineGameMode_SquadRush(int EntryPoint);// 0x59ef218

--------------------------------
Class: ODRushGameObjectiveDelegateSet.ITGameObjectiveDelegateSet.Actor.Object
	delegate OnObjectiveArmed;//[Offset: 0x288, Size: 0x10]
	delegate OnObjectiveDestroyed;//[Offset: 0x298, Size: 0x10]
	delegate OnObjectiveDisarmed;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSectorTransitionStarted;//[Offset: 0x2b8, Size: 0x10]
	delegate OnSectorTransitionFinished;//[Offset: 0x2c8, Size: 0x10]
	GenericTeamId AttackingTeam;//[Offset: 0x2d8, Size: 0x1]
	void Multicast_SectorTransitionStarted(float TimeLeft);// 0x5524780
	void Multicast_SectorTransitionFinished(int CurrentSector);// 0x55246d0
	void Multicast_ObjectiveDisarmed(Object* Objective);// 0x5524830
	void Multicast_ObjectiveDestroyed(Object* Objective);// 0x55248e0
	void Multicast_ObjectiveArmed(Object* Objective, float TimeLeft);// 0x5524990

--------------------------------
Class: ExplosionProperties
	bool bShouldDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAllowFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	CurveFloat* DamageFalloffCurve;//[Offset: 0x8, Size: 0x8]
	byte[] CollisionChannels;//[Offset: 0x10, Size: 0x10]
	float ExplosionInnerRadius;//[Offset: 0x20, Size: 0x4]
	float ExplosionOuterRadius;//[Offset: 0x24, Size: 0x4]
	CurveFloat* ExplosiveImpulseFalloffCurve;//[Offset: 0x28, Size: 0x8]
	float ExplosivePhysicalForce;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ExplosionForceToMassMultiplierCurve;//[Offset: 0x38, Size: 0x8]
	float DestructionDamageFalloffExponent;//[Offset: 0x40, Size: 0x4]
	float DestructionBaseDamage;//[Offset: 0x44, Size: 0x4]
	bool bOverrideOuterRadiusForDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float DestructionOuterRadius;//[Offset: 0x4c, Size: 0x4]
	bool bIsShapedCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: BP_Rush_MCOM_Destroyed_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	AkComponent* Play_C4_Explosion;//[Offset: 0x250, Size: 0x8]
	ParticleSystemComponent* Fire;//[Offset: 0x258, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x260, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x268, Size: 0x8]
	float Spawn Weight;//[Offset: 0x270, Size: 0x4]
	float GetScore(GenericTeamId Team);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void Disable Fire();// 0x59ef218
	void ExecuteUbergraph_BP_Rush_MCOM_Destroyed(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, BotHearingParams K2Node_MakeStruct_BotHearingParams, AudioEventParams K2Node_MakeStruct_AudioEventParams, AudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_K2_PostAudioEvent_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x59ef218

--------------------------------
Class: ITTeamPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	GenericTeamId TeamOwner;//[Offset: 0x288, Size: 0x1]
	bool bSpawnEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	<Actor*> SpawnWeightModifiers;//[Offset: 0x290, Size: 0x50]
	bool bWasAddedToObjectMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	void K2_SetSpawnEnabled(bool InIsEnabled);// 0x5406684
	void K2_SetOwningTeam(GenericTeamId InTeam);// 0x540677c
	bool K2_GetSpawnEnabled();// 0x540673c
	GenericTeamId K2_GetOwningTeam();// 0x5406838

--------------------------------
Class: BPS_UIMapInfo
	FText DisplayName_2_7C46F91F41BFE5C1CDE2CEBF700DF1DD;//[Offset: 0x0, Size: 0x18]
	Texture2D* PostgameImage_6_58E693EC43FC39B6B2439E86E2E419CE;//[Offset: 0x18, Size: 0x28]
	FText SubtitleText_9_DE9EA31D466431F725974D93AA26C59E;//[Offset: 0x40, Size: 0x18]
	Texture2D* LobbyModeImage_14_37DB9EDD4B411870D30E678CC3641959;//[Offset: 0x58, Size: 0x28]
	Texture2D* LobbyPlayerListImage_15_592220AE4C35E0CC4CED9AAF3B32789C;//[Offset: 0x80, Size: 0x28]

--------------------------------
Class: BP_ODObjectiveManager_TutorialMatch_C.BP_ODObjectiveManager_C.ITGameObjectiveManager.Actor.Object

--------------------------------
Class: BP_StatSystem_C.StatSystem.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: MatchModificationManager.Actor.Object
	MatchModificationBase*[] ActiveMatchModifications;//[Offset: 0x250, Size: 0x10]
	FString[] MatchModDebugInfoLogs;//[Offset: 0x260, Size: 0x10]
	void SpawnPortalMatchModifiers();// 0x541378c
	void OnServerMapLoadComplete(FString MapName, FString MatchId);// 0x54137a0

--------------------------------
Class: ODDestructionManagerActor.Actor.Object
	ODRemovedNonDestructibleActorsArray RemovedNonDestructibleActors;//[Offset: 0x248, Size: 0x118]

--------------------------------
Class: ODRemovedNonDestructibleActorsArray.FastArraySerializer
	ODRemovedNonDestructibleActorsEntry[] Actors;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ODRemovedNonDestructibleActorsEntry.FastArraySerializerItem
	Actor* Actor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BP_EnterMatch_UIFacade_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x250, Size: 0x8]
	FString CurrentLobbyPage;//[Offset: 0x258, Size: 0x10]
	delegate ChangeLobbyPage;//[Offset: 0x268, Size: 0x10]
	delegate RefreshLobbyListPage;//[Offset: 0x278, Size: 0x10]
	delegate OnMatchmakingCancelled;//[Offset: 0x288, Size: 0x10]
	delegate MatchmakingInitiated;//[Offset: 0x298, Size: 0x10]
	delegate OnMatchmakingReady;//[Offset: 0x2a8, Size: 0x10]
	delegate OnMatchmakingError;//[Offset: 0x2b8, Size: 0x10]
	bool MatchmakingIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	void IsMatchmakingActive(out bool IsActive, CohoMatchmakingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool CallFunc_IsMatchmaking_ReturnValue);// 0x59ef218
	void GetTimeSinceMatchmakingStarted(out Timespan Timespan, CohoMatchmakingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, float CallFunc_GetMatchmakingTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, Timespan CallFunc_MakeTimespan_ReturnValue);// 0x59ef218
	void GetPlayerTeam(PlayerState* Player, out bool IsFriendly, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, ODPlayerState* K2Node_DynamicCast_AsODPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x59ef218
	void FindMapUIInfo(FString MapFileName, out BPS_UIMapInfo MapInfo, out bool Succeeded, FName EngineName, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Len_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, BPS_UIMapInfo CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_FindSubstring_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x59ef218
	void FindModeUIInfo(enum ModeType, out BPS_UIModeInfo ModeUIInfo, out bool Succeeded, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BPS_UIModeInfo CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x59ef218
	void GetLobbyPlayerPageBGImage(out Texture2D* BGTexture, FString CallFunc_GetCurrentLevelName_ReturnValue, BPS_UIMapInfo CallFunc_FindMapUIInfo_MapInfo, bool CallFunc_FindMapUIInfo_Succeeded, Object* CallFunc_LoadAsset_Blocking_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	void GetPlayerSquad(PlayerState* Player, out byte Squad, BP_ODPlayerState_C* K2Node_DynamicCast_AsBP_ODPlayer_State, bool K2Node_DynamicCast_bSuccess, SquadComponent* CallFunc_GetSquadComponentNonConst_ReturnValue, byte CallFunc_GetSquadNumber_ReturnValue);// 0x59ef218
	void GetPlayerRank(PlayerState* Player, out int Rank);// 0x59ef218
	void GetPlayerFrame(PlayerState* Player, out Texture2D* FrameTexture);// 0x59ef218
	void GetPlayerIcon(PlayerState* Player, out Texture2D* IconTexture);// 0x59ef218
	void GetPlayerDisplayName(PlayerState* PlayerState, out FString Name, FString CallFunc_GetPlayerName_ReturnValue);// 0x59ef218
	void GetPlayersInMatch(out PlayerState*[] PlayerList, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	void GetLobbyScreenTipText(out FText TipText, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_RandomInteger_ReturnValue, FName CallFunc_Array_Get_Item, BPS_TipText CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x59ef218
	void GetModeDescriptionText(out FText ModeDescriptionText, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess, BPS_UIModeInfo CallFunc_FindModeUIInfo_ModeUIInfo, bool CallFunc_FindModeUIInfo_Succeeded);// 0x59ef218
	void GetModeDisplayName(out FText ModeDisplayName, GameStateBase* CallFunc_GetGameState_ReturnValue, ODOnlineGameStateBase* K2Node_DynamicCast_AsODOnline_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	void GetLobbyModePageBGImage(out Texture2D* ModeBG, FString CallFunc_GetCurrentLevelName_ReturnValue, BPS_UIMapInfo CallFunc_FindMapUIInfo_MapInfo, bool CallFunc_FindMapUIInfo_Succeeded, Object* CallFunc_LoadAsset_Blocking_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	void GetMapDisplayName(out FText MapDisplayName, FString CallFunc_GetCurrentLevelName_ReturnValue, BPS_UIMapInfo CallFunc_FindMapUIInfo_MapInfo, bool CallFunc_FindMapUIInfo_Succeeded, FText CallFunc_Conv_StringToText_ReturnValue);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void WaitAndShowPlayerListPage();// 0x59ef218
	void WaitAndShowModePage();// 0x59ef218
	void OnMatchmakingMatchReady_Event();// 0x59ef218
	void OnGetMatchStateReceived_Event(enum MatchState);// 0x59ef218
	void OnMatchmakingError_Event(FString ErrorMessage, enum MatchmakingQueue);// 0x59ef218
	void UpdateMatchmakingStatus();// 0x59ef218
	void SignalMatchmakingInitiated();// 0x59ef218
	void SignalMatchmakingCancelled();// 0x59ef218
	void ExecuteUbergraph_BP_EnterMatch_UIFacade(int EntryPoint, bool CallFunc_IsOnMainMenu_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_MatchState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, CohoMatchmakingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, FString K2Node_CustomEvent_ErrorMessage, enum K2Node_CustomEvent_MatchmakingQueue, bool CallFunc_IsMatchmaking_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, CohoMatchmakingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, ODMatchStateSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue);// 0x59ef218
	void OnMatchmakingCancelled__DelegateSignature();// 0x59ef218
	void OnMatchmakingError__DelegateSignature(FString ErrorMessage);// 0x59ef218
	void OnMatchmakingReady__DelegateSignature();// 0x59ef218
	void MatchmakingInitiated__DelegateSignature();// 0x59ef218
	void RefreshLobbyListPage__DelegateSignature();// 0x59ef218
	void ChangeLobbyPage__DelegateSignature(FString NewPageName);// 0x59ef218

--------------------------------
Class: BPS_UIModeInfo
	enum ModeType_2_582161014C80CE0275FD6B9A76529461;//[Offset: 0x0, Size: 0x1]
	FText DefaultDisplayName_5_A36F6E2E41C737D92CAF3F9959581813;//[Offset: 0x8, Size: 0x18]
	FText Description_7_0F8845CF4E7DD5BB805822AE1B84A8FB;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: BPS_TipText
	FText TipText_2_BB39286E41B456F3D47FD2841AB179E4;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: BP_SniperRifle_338Recon_C.BP_SniperRifle_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_SniperRifle_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object
	float GetUIStatHipfireRange(float MinDispersionRangeDeg, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_DegTan_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x59ef218

--------------------------------
Class: BP_Equipment_Base_C.EquipmentActor.Actor.Object
	AnimSequence* FPHandsIk;//[Offset: 0x718, Size: 0x8]
	TPHandsIkEquipmentSet TPHandsIk;//[Offset: 0x720, Size: 0x30]
	byte LocomotionEquipmentType;//[Offset: 0x750, Size: 0x1]
	byte SpecificWeaponType;//[Offset: 0x751, Size: 0x1]
	BlendSpaceBase* CharacterEquipAnimationFP;//[Offset: 0x758, Size: 0x8]
	BlendSpaceBase* CharacterHolsterAnimationFP;//[Offset: 0x760, Size: 0x8]
	BlendSpaceBase* CharacterEquipAnimationTP;//[Offset: 0x768, Size: 0x8]
	BlendSpaceBase* CharacterHolsterAnimationTP;//[Offset: 0x770, Size: 0x8]
	BlendSpaceBase* CharacterReloadAnimationFP;//[Offset: 0x778, Size: 0x8]
	BlendSpaceBase* CharacterReloadAnimationTP;//[Offset: 0x780, Size: 0x8]
	BlendSpaceBase* CharacterFireAnimationFP;//[Offset: 0x788, Size: 0x8]
	BlendSpaceBase* CharacterFireAnimationTP;//[Offset: 0x790, Size: 0x8]
	EquipmentAnimationSet_C* EquipmentAnimationSet;//[Offset: 0x798, Size: 0x8]

--------------------------------
Class: TPHandsIkEquipmentSet
	AnimSequence* StandIdleWalkPose_20_DA9E3A92451B679489E193B51D051275;//[Offset: 0x0, Size: 0x8]
	AnimSequence* StandSprintPose_15_AE418F4B4A93D29C7F1E2E8C55A0242C;//[Offset: 0x8, Size: 0x8]
	AnimSequence* CrouchIdlePose_17_F4F0FEF64DED1D492A05B091234EFBE2;//[Offset: 0x10, Size: 0x8]
	AnimSequence* CrouchWalkPose_16_127ED23D4D981F188E6E37B22FF131DD;//[Offset: 0x18, Size: 0x8]
	AnimSequence* ProneIdlePose_18_E7CED25841F13EB9B2D164AEFC882A8B;//[Offset: 0x20, Size: 0x8]
	AnimSequence* ProneWalkPose_19_ADCA5B8E494D514F6E1A14992FC127AA;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: EquipmentAnimationSet_C.PrimaryDataAsset.DataAsset.Object
	BlendSpaceBase* ReloadFP;//[Offset: 0x30, Size: 0x8]
	BlendSpaceBase* ReloadTP;//[Offset: 0x38, Size: 0x8]
	BlendSpaceBase* ShortReloadFP;//[Offset: 0x40, Size: 0x8]
	BlendSpaceBase* ShortReloadTP;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BP_Handgun_M1911_C.BP_Handgun_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_Handgun_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_Grenade_ATGrenade_C.BP_Grenade_Base_C.BP_Gadget_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_Grenade_Base_C.BP_Gadget_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7a8, Size: 0x8]
	ParticleSystemComponent* PS_Grenade_Impact_indicator;//[Offset: 0x7b0, Size: 0x8]
	StaticMeshComponent* GrenadeArcImpactMesh;//[Offset: 0x7b8, Size: 0x8]
	SplineMeshComponent* ArcSplineMesh;//[Offset: 0x7c0, Size: 0x8]
	bool bDrawProjectilePath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	PredictProjectilePathPointData[] PredictedPathData;//[Offset: 0x7d0, Size: 0x10]
	float SimPathTime;//[Offset: 0x7e0, Size: 0x4]
	bool bDrawDebugArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 0x1]
	TimerHandle ArcDelayTimerHandle;//[Offset: 0x7e8, Size: 0x8]
	HitResult HitResult;//[Offset: 0x7f0, Size: 0x88]
	PredictProjectilePathPointData Last Trace Destination;//[Offset: 0x878, Size: 0x1c]
	LinearColor DebugArcColor;//[Offset: 0x894, Size: 0x10]
	float ImpactZOffset;//[Offset: 0x8a4, Size: 0x4]
	float GrenadeArcDelay;//[Offset: 0x8a8, Size: 0x4]
	bool bUseFastThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 0x1]
	bool bAlignImpactIndicatorToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ad, Size: 0x1]
	Vector ArcStartOffset;//[Offset: 0x8b0, Size: 0xc]
	PredictProjectilePathResult CachedPredictionResult;//[Offset: 0x8c0, Size: 0xb8]
	Vector ProjectileSpawnOffset;//[Offset: 0x978, Size: 0xc]
	void K2_GetCustomLaunchLocationAndDirection(out Vector OutOrigin, out Vector OutDirection, Vector CallFunc_MakeVector_ReturnValue, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, LaunchEquipmentAction* K2Node_DynamicCast_AsLaunch_Equipment_Action, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLineOfAimOriginAndDirection_OutBallisticOrigin, Vector CallFunc_GetLineOfAimOriginAndDirection_OutBallisticDirection, Rotator CallFunc_MakeRotFromXZ_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x59ef218
	void GetGrenadeLifetime(out float Lifetime, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, LaunchEquipmentAction* K2Node_DynamicCast_AsLaunch_Equipment_Action, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetProjectileLifetime_ReturnValue);// 0x59ef218
	void SetImpactPointMeshVisibility(bool bSetVisible);// 0x59ef218
	void SetSplineMeshVisibility(bool bSetVisible, bool CallFunc_IsVisible_ReturnValue);// 0x59ef218
	void UserConstructionScript(int NewLocalVar, SplineMeshComponent* NewLocalVar);// 0x59ef218
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void GrenadeFullyInitialized();// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void Grenade Arc Delay();// 0x59ef218
	void SetDrawPath(bool DrawPath);// 0x59ef218
	void OnGrenadeSwapIn(enum OldState, enum NewState);// 0x59ef218
	void OnGrenadeThrow(enum OldState, enum NewState);// 0x59ef218
	void OnFinishThrow(enum OldState, enum NewState);// 0x59ef218
	void Unequip();// 0x59ef218
	void Stop Drawing Grenade Arc();// 0x59ef218
	void StartDrawingGrenadeArc();// 0x59ef218
	void Default Throw();// 0x59ef218
	void FastThrow();// 0x59ef218
	void OnGrenadeHold(enum OldState, enum NewState);// 0x59ef218
	void OnGrenadeRelease(enum OldState, enum NewState);// 0x59ef218
	void OnGrenadeIdle(enum OldState, enum NewState);// 0x59ef218
	void OnPostRelease(enum OldState, enum NewState);// 0x59ef218
	void ExecuteUbergraph_BP_Grenade_Base(int EntryPoint, float CallFunc_GetGrenadeLifetime_Lifetime, bool CallFunc_Greater_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float K2Node_Event_DeltaSeconds, delegate K2Node_CreateDelegate_OutputDelegate, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, Pawn* CallFunc_GetOwningPawnNonConst_ReturnValue, const Actor*[] K2Node_MakeArray_Array, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, bool CallFunc_IsInitialized_ReturnValue, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, LaunchEquipmentAction* K2Node_DynamicCast_AsLaunch_Equipment_Action, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, int CallFunc_Array_LastIndex_ReturnValue, PredictProjectilePathPointData CallFunc_Array_Get_Item, PredictProjectilePathPointData CallFunc_Array_Get_Item, PredictProjectilePathPointData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, PredictProjectilePathPointData CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, PredictProjectilePathPointData CallFunc_Array_Get_Item, int CallFunc_Array_LastIndex_ReturnValue, PredictProjectilePathPointData CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_InverseTransformDirection_ReturnValue, Vector CallFunc_InverseTransformDirection_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_InverseTransformLocation_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_GetGrenadeLifetime_Lifetime, HitResult CallFunc_K2_AddLocalOffset_SweepHitResult, PredictProjectilePathResult CallFunc_PredictProjectilePath_OutPredictResult, bool CallFunc_PredictProjectilePath_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool K2Node_CustomEvent_DrawPath, Vector CallFunc_GetActorEyesViewPoint_OutLocation, Rotator CallFunc_GetActorEyesViewPoint_OutRotation, Rotator CallFunc_MakeRotFromZX_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Rotator CallFunc_MakeRotFromZ_ReturnValue, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, FString CallFunc_GetBlueprintCallstack_ReturnValue, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, BaseKitComponent* CallFunc_GetKitComponentNonConst_ReturnValue, SoldierKitComponent* K2Node_DynamicCast_AsSoldier_Kit_Component, bool K2Node_DynamicCast_bSuccess, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, bool CallFunc_IsValid_ReturnValue, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, bool CallFunc_IsInitialized_ReturnValue, bool CallFunc_SwapInPrimary_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator K2Node_Select_Default, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, LaunchEquipmentAction* K2Node_DynamicCast_AsLaunch_Equipment_Action, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLineOfAimOriginAndDirection_OutBallisticOrigin, Vector CallFunc_GetLineOfAimOriginAndDirection_OutBallisticDirection, Rotator CallFunc_MakeRotFromXZ_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_InverseTransformLocation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Pawn* CallFunc_GetOwningPawnNonConst_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetOwningPawnNonConst_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValidMemory_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, float CallFunc_GetPrimaryPostDelayUseTime_ReturnValue, float CallFunc_GetPrimaryPreDelayUseTime_ReturnValue, Pawn* CallFunc_GetOwningPawnNonConst_ReturnValue, Controller* CallFunc_GetOwningControllerNonConst_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, ODPlayerController* K2Node_DynamicCast_AsODPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate);// 0x59ef218

--------------------------------
Class: BP_Gadget_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object
	bool bHideReticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x4f8, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x550, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x55c, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x560, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x570, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x578, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57c, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x57d, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x580, Size: 0x4]
	void UpdateMesh();// 0x81a41c4
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x81a3f5c
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x81a39e4
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x81a38b4
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x81a4090
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x81a3788
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x81a3b10
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x81a319c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x81a32d0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x81a3cf4
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x81a365c
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x81a352c
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x81a3e28
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x81a3400
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x81a306c
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x81a2f3c
	Vector GetStartTangent();// 0x81a4058
	Vector2D GetStartScale();// 0x81a3adc
	float GetStartRoll();// 0x81a39b0
	Vector GetStartPosition();// 0x81a418c
	Vector2D GetStartOffset();// 0x81a3880
	Vector GetSplineUpDir();// 0x81a3298
	byte GetForwardAxis();// 0x81a33cc
	Vector GetEndTangent();// 0x81a3df0
	Vector2D GetEndScale();// 0x81a3754
	float GetEndRoll();// 0x81a3628
	Vector GetEndPosition();// 0x81a3f24
	Vector2D GetEndOffset();// 0x81a34f8
	float GetBoundaryMin();// 0x81a3168
	float GetBoundaryMax();// 0x81a3038

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: BP_Melee_M9Bayonet_C.BP_Handgun_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7a0, Size: 0x8]
	float LongPressTime;//[Offset: 0x7a8, Size: 0x4]
	bool ShouldStayEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 0x1]
	bool IsCheckingPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ad, Size: 0x1]
	float PressTimeElapsed;//[Offset: 0x7b0, Size: 0x4]
	void OnPostFire(enum OldState, enum NewState);// 0x59ef218
	void MeleePressed();// 0x59ef218
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void OnEquipmentFullyInitialized();// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void MeleeReleased();// 0x59ef218
	void ExecuteUbergraph_BP_Melee_M9Bayonet(int EntryPoint, Controller* CallFunc_GetOwningControllerNonConst_ReturnValue, ODPlayerController* K2Node_DynamicCast_AsODPlayer_Controller, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_DeltaSeconds, delegate K2Node_CreateDelegate_OutputDelegate, PlayerHUDComponent* CallFunc_GetLocalPlayerHUD_ReturnValue, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsInitialized_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, PlayerHUDComponent* CallFunc_GetLocalPlayerHUD_ReturnValue, FString CallFunc_GetBlueprintCallstack_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetIsEquipped_ReturnValue, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, Pawn* CallFunc_GetOwningPawnNonConst_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidMemory_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Controller* CallFunc_GetOwningControllerNonConst_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ODPlayerController* K2Node_DynamicCast_AsODPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetOwningControllerNonConst_ReturnValue, ODPlayerController* K2Node_DynamicCast_AsODPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x59ef218

--------------------------------
Class: BP_PersistentAudioActor_C.Actor.Object
	AkComponent* AkComponent;//[Offset: 0x248, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x250, Size: 0x8]
	FName CurrentMusicEvent;//[Offset: 0x258, Size: 0x8]
	void SetSwitch(AkSwitchValue* SwitchValue);// 0x59ef218
	void StopMusic(bool CallFunc_NotEqual_NameName_ReturnValue);// 0x59ef218
	void StartMusic(FName EventName);// 0x59ef218
	void LogError(FName EventName, FString DataTableName, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x59ef218
	void PlayOneShot(FName EventName, const AkExternalSourceInfo[] Temp_struct_Variable, BPS_OneShots CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PostAkEvent_ReturnValue);// 0x59ef218
	void InternalPlayMusic(FName EventName, bool IsStart, const AkExternalSourceInfo[] Temp_struct_Variable, BPS_MusicEvents CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, const delegate Temp_delegate_Variable, bool Temp_bool_Variable, FName Temp_name_Variable, bool Temp_bool_Variable, FName K2Node_Select_Default, AkAudioEvent* K2Node_Select_Default, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, BPS_MusicEvents CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x59ef218

--------------------------------
Class: BPS_OneShots
	AkAudioEvent* AudioEvent_2_709689604BD8465FB651D2B05C3175DB;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BPS_MusicEvents
	AkAudioEvent* Start_5_8EB82B8D47289E60982AEBA697EEF785;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* Stop_6_3EBD2A6142F939DA93C9DC9F51635738;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BP_LMG_LSAT_C.BP_LMG_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_LMG_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_Deployable_SpottingDrone_C.BP_Deployable_Base_C.BP_Gadget_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7a8, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x7b0, Size: 0x8]
	float CoolDownTime;//[Offset: 0x7b8, Size: 0x4]
	bool DrawPatrolPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 0x1]
	Actor* PreviewActor;//[Offset: 0x7c0, Size: 0x8]
	bool bCanDeploy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	Vector Overlap Box Extent;//[Offset: 0x7cc, Size: 0xc]
	float PreviewDistance;//[Offset: 0x7d8, Size: 0x4]
	float SpawnOffsetForward;//[Offset: 0x7dc, Size: 0x4]
	void UpdatePreviewMaterial(SpottingDronePreviewActor_C* K2Node_DynamicCast_AsSpotting_Drone_Preview_Actor, bool K2Node_DynamicCast_bSuccess, SpottingDronePreviewActor_C* K2Node_DynamicCast_AsSpotting_Drone_Preview_Actor, bool K2Node_DynamicCast_bSuccess);// 0x59ef218
	Transform GetPreviewTransform(BaseKitComponent* CallFunc_GetKitComponentNonConst_ReturnValue, Vector CallFunc_GetCameraLocationAndDirection_OutLocation, Vector CallFunc_GetCameraLocationAndDirection_OutDirection, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0x59ef218
	bool K2_CanUse();// 0x59ef218
	void PreviewStartOverlap(Actor* OverlappedActor, Actor* OtherActor);// 0x59ef218
	void PreviewEndOverlap(Actor* OverlappedActor, Actor* OtherActor);// 0x59ef218
	void OnDronePostFire(enum OldState, enum NewState);// 0x59ef218
	void OnUnequip();// 0x59ef218
	void K2_ProcessEquipmentInput(out const PlayerCommandState Command, out const EquipmentStateMachineInput EquipmentInput, float DeltaTime);// 0x59ef218
	void DroneFullyInitialized();// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void DronePreFire(enum OldState, enum NewState);// 0x59ef218
	void OnDroneSwapIn(enum OldState, enum NewState);// 0x59ef218
	void ExecuteUbergraph_BP_Deployable_SpottingDrone(int EntryPoint, Actor* K2Node_CustomEvent_OverlappedActor, Actor* K2Node_CustomEvent_OtherActor, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_CustomEvent_OverlappedActor, Actor* K2Node_CustomEvent_OtherActor, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, delegate K2Node_CreateDelegate_OutputDelegate, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, const PlayerCommandState K2Node_Event_Command, const EquipmentStateMachineInput K2Node_Event_EquipmentInput, float K2Node_Event_DeltaTime, bool CallFunc_IsInitialized_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, EquipmentStateMachine* CallFunc_GetEquipmentStateMachineNonConst_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, DeployableEquipmentAction* K2Node_DynamicCast_AsDeployable_Equipment_Action, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetOwningControllerNonConst_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_GetActorEyesViewPoint_OutLocation, Rotator CallFunc_GetActorEyesViewPoint_OutRotation, BaseKitComponent* CallFunc_GetKitComponentNonConst_ReturnValue, Vector CallFunc_GetCameraLocationAndDirection_OutLocation, Vector CallFunc_GetCameraLocationAndDirection_OutDirection, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue);// 0x59ef218

--------------------------------
Class: BP_Deployable_Base_C.BP_Gadget_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: SpottingDronePreviewActor_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x258, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	void Swap Material On Collision End();// 0x59ef218
	void Swap Material On Collision();// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void ReceiveTick(float DeltaSeconds);// 0x59ef218
	void ReceiveEndPlay(byte EndPlayReason);// 0x59ef218
	void ExecuteUbergraph_SpottingDronePreviewActor(int EntryPoint, byte K2Node_Event_EndPlayReason, float K2Node_Event_DeltaSeconds);// 0x59ef218

--------------------------------
Class: DeployableEquipmentAction.EquipmentAction.Object
	bool bOverrideSpawnTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	Transform SpawnTransformOverride;//[Offset: 0x120, Size: 0x30]
	bool bTrackDeployablesForSpec;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float DeployableSpawnForwardOffset;//[Offset: 0x154, Size: 0x4]
	float DeployableSpawnHeightOffset;//[Offset: 0x158, Size: 0x4]
	enum DeployablePlacementType;//[Offset: 0x15c, Size: 0x1]
	class DeployedGadgetActor* DeployGadgetActor;//[Offset: 0x160, Size: 0x28]
	Actor*[] ActiveDeployedActors;//[Offset: 0x188, Size: 0x10]
	int MaxDeployedActors;//[Offset: 0x198, Size: 0x4]
	void OnGadgetStateChanged(Actor* DeployedGadget, bool bIsEnabled);// 0x53bd19c
	class DeployedGadgetActor GetDeployGadgetActor();// 0x53bd298
	enum GetDeployablePlacementType();// 0x53bd3d4
	float GetDeployableHeightOffset();// 0x53bd3f0
	float GetDeployableForwardOffset();// 0x53bd40c

--------------------------------
Class: DeployedGadgetActor.Actor.Object
	delegate OnGadgetStateChanged;//[Offset: 0x270, Size: 0x10]
	SceneComponent* RootSceneComponent;//[Offset: 0x280, Size: 0x8]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x288, Size: 0x8]
	HealthComponent* HealthComponent;//[Offset: 0x290, Size: 0x8]
	OverlapWatcher* OverlapWatcherComponent;//[Offset: 0x298, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x2a0, Size: 0x8]
	EquipmentActor* InstigatingEquipment;//[Offset: 0x2a8, Size: 0x8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	float DeployedSurfaceRaycastDistance;//[Offset: 0x2bc, Size: 0x4]
	ImpactFXProperties DestructionFX;//[Offset: 0x2c0, Size: 0x150]
	float Lifetime;//[Offset: 0x410, Size: 0x4]
	float DeathDelayTime;//[Offset: 0x414, Size: 0x4]
	ODPropertyModifierSet* PropertyModifierSet;//[Offset: 0x448, Size: 0x8]
	bool ShouldTrackActorNonConst(const Actor* OtherActor);// 0x53be0dc
	bool ShouldTrackActor(const Actor* OtherActor);// 0x53be1b8
	void SetEnabled(bool bInEnabled, bool bForceNotify);// 0x53bdfdc
	void ServerInitialize(bool bAllowRecycling);// 0x53be498
	void ServerDespawn();// 0x53be2c4
	void ServerDeploy(Transform NewTransform, Controller* InInstigator, EquipmentActor* InEquipment, byte InDeployedSurfaceType);// 0x53be2d8
	void OnRep_PlayerState();// 0x53bddd4
	void OnRep_IsEnabled();// 0x53bdde8
	void OnInstigatorDestroyed(Actor* DeadActor);// 0x53bde8c
	void OnGadgetDestroyed();// 0x53bde70
	void OnDeath(Actor* DeadActor);// 0x53bdf34
	void K2_OnPlayerStateUpdated();// 0x59ef218
	void K2_OnIsEnabledChanged(bool bNewIsEnabledState);// 0x59ef218
	PlayerState* GetOwningPlayerStateNonConst();// 0x53be274
	Controller* GetOwningControllerNonConst();// 0x53be290
	Transform GetDestructionFXTransform();// 0x53bddfc

--------------------------------
Class: OverlapWatcher.ActorComponent.Object
	ShapeComponent*[] CollisionVolumes;//[Offset: 0xb0, Size: 0x10]
	delegate OnActorEnteredRange;//[Offset: 0xc0, Size: 0x10]
	delegate OnActorLeftRange;//[Offset: 0xd0, Size: 0x10]
	delegate ShouldTrackActorDelegate;//[Offset: 0xe0, Size: 0x10]
	bool bFireTriggerOverlapEventsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	<Actor*> ActorsInRange;//[Offset: 0xf8, Size: 0x50]
	bool bCheckLineOfSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	Vector LineOfSightOrigin;//[Offset: 0x14c, Size: 0xc]
	byte TraceChannel;//[Offset: 0x158, Size: 0x1]
	int MaxTracesPerFrame;//[Offset: 0x15c, Size: 0x4]
	bool bDrawTraceDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float DebugDuration;//[Offset: 0x164, Size: 0x4]
	<Actor*,bool> ActorVisibilityStatus;//[Offset: 0x188, Size: 0x50]
	bool ShouldTrackActor(const Actor* OtherActor);// 0x5554b6c
	void SetTriggerCollisionEnabled(bool bTriggerCollisionEnabled);// 0x5554ff4
	void OnTriggerEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5554c28
	void OnTriggerBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5554db0
	void OnActorDiedInRange(Actor* KilledActor);// 0x5554ac4
	void K2_ActorLeftRange(Actor* TriggeredActor);// 0x59ef218
	void K2_ActorEnteredRange(Actor* TriggeredActor);// 0x59ef218
	bool IsActorVisibleAndInRange(Actor* Actor);// 0x555495c
	bool IsActorInRange(Actor* Actor);// 0x5554a10

--------------------------------
Class: ImpactFXProperties
	bool bAlwaysPlayGenericImpactParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAlwaysOrientParticlesWorldUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FXSystemAsset* GenericImpactParticle;//[Offset: 0x8, Size: 0x8]
	<byte,FXSystemAsset*> ImpactParticles;//[Offset: 0x10, Size: 0x50]
	Vector ParticleScale;//[Offset: 0x60, Size: 0xc]
	MaterialInterface* GenericImpactDecal;//[Offset: 0x70, Size: 0x8]
	<byte,MaterialInterface*> ImpactDecals;//[Offset: 0x78, Size: 0x50]
	Vector DecalSize;//[Offset: 0xc8, Size: 0xc]
	float DecalLifetime;//[Offset: 0xd4, Size: 0x4]
	float DecalFadeStartDelay;//[Offset: 0xd8, Size: 0x4]
	float DecalFadeDuration;//[Offset: 0xdc, Size: 0x4]
	float DecalFadeScreenSize;//[Offset: 0xe0, Size: 0x4]
	bool bRandomlyRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1]
	AkAudioEvent* GenericImpactSound;//[Offset: 0xe8, Size: 0x8]
	<byte,AkAudioEvent*> ImpactSounds;//[Offset: 0xf0, Size: 0x50]
	class CameraShakeBase* CameraShake;//[Offset: 0x140, Size: 0x8]
	float CameraShakeInnerRadius;//[Offset: 0x148, Size: 0x4]
	float CameraShakeOuterRadius;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: BP_AssaultRifle_QBZ_C.BP_AssaultRifle_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_AssaultRifle_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_Handgun_P226_C.BP_Handgun_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_SMG_P90_C.BP_SMG_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_SMG_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_Handgun_CZ75_C.BP_Handgun_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_FragGrenade_C.BP_Grenade_Base_C.BP_Gadget_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_RocketLauncher_SMAW_C.BP_RocketLauncher_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_RocketLauncher_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_SMG_PP2000_C.BP_SMG_Base_C.BP_Gun_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object

--------------------------------
Class: BP_SupplyCrate_ActorProjectile_C.BP_Deployable_Base_C.BP_Gadget_Base_C.BP_Equipment_Base_C.EquipmentActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7a8, Size: 0x8]
	Vector ProjectileSpawnOffset;//[Offset: 0x7b0, Size: 0xc]
	void K2_GetCustomLaunchLocationAndDirection(out Vector OutOrigin, out Vector OutDirection, Vector CallFunc_Vector_Up_ReturnValue, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, LaunchEquipmentAction* K2Node_DynamicCast_AsLaunch_Equipment_Action, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLineOfAimOriginAndDirection_OutBallisticOrigin, Vector CallFunc_GetLineOfAimOriginAndDirection_OutBallisticDirection, Rotator CallFunc_MakeRotFromXZ_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x59ef218
	void OnOwnerDeath(Actor* KilledActor, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetBlueprintCallstack_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, EquipmentStats* CallFunc_GetEquipmentStatsNonConst_ReturnValue, EquipmentAction* CallFunc_GetPrimaryBallisticLauncherNonConst_ReturnValue, SpawnActorProjectileEquipmentAction* K2Node_DynamicCast_AsSpawn_Actor_Projectile_Equipment_Action, bool K2Node_DynamicCast_bSuccess, ActorProjectile*[] CallFunc_GetActiveProjectiles_Projectiles, bool CallFunc_HasActiveProjectiles_ReturnValue, ActorProjectile* CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x59ef218
	void ReceiveBeginPlay();// 0x59ef218
	void OnInitialized();// 0x59ef218
	void ExecuteUbergraph_BP_SupplyCrate_ActorProjectile(int EntryPoint, bool CallFunc_IsInitialized_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetOwningPawnNonConst_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HealthComponent* CallFunc_GetHealthComponentFromActorNonConst_ReturnValue, CharacterHealthComponent* K2Node_DynamicCast_AsCharacter_Health_Component, bool K2Node_DynamicCast_bSuccess);// 0x59ef218

--------------------------------
Class: SpawnActorProjectileEquipmentAction.LaunchEquipmentAction.EquipmentAction.Object
	class ActorProjectile* ActorClassToSpawn;//[Offset: 0x138, Size: 0x8]
	byte MaxActiveProjectiles;//[Offset: 0x140, Size: 0x1]
	bool bDespawnProjectilesOnOwningPawnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	ActorProjectile*[] SpawnedProjectiles;//[Offset: 0x148, Size: 0x10]
	ActorProjectile*[] PredictedProjectiles;//[Offset: 0x158, Size: 0x10]
	float InitialLaunchSpeed;//[Offset: 0x168, Size: 0x4]
	float AdditionalUpwardsVelocity;//[Offset: 0x16c, Size: 0x4]
	float ForwardsSpawnOffset;//[Offset: 0x170, Size: 0x4]
	CurveVector* InitialVelocityScaleByPitch;//[Offset: 0x178, Size: 0x8]
	bool bInheritPlayerVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bSpawnPredictiveProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	bool bSpawnProjectileAtVisualOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1]
	bool bShouldTargetEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 0x1]
	bool bShouldTargetFriendlies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	HealthComponent* WatchedOwnerHealthComponent;//[Offset: 0x188, Size: 0x8]
	void OnOwningEquipmentFullyInitialized();// 0x5371598
	void OnOwnerPawnDied(Actor* DeadActor);// 0x53714f0
	bool HasActiveProjectiles();// 0x53715ac
	void GetActiveProjectiles(out ActorProjectile*[] Projectiles);// 0x53715f8
	void DestroyAllActiveProjectiles();// 0x53715e4

--------------------------------
Class: PickupActor.Actor.Object
	float MaxInteractionDistance;//[Offset: 0x250, Size: 0x4]
	PickupData* PickupData;//[Offset: 0x258, Size: 0x8]
	PrimitiveComponent* Trigger;//[Offset: 0x260, Size: 0x8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x268, Size: 0x8]
	GenericUIAnchorComponent* UIAnchor;//[Offset: 0x270, Size: 0x8]
	class PickupData* PickupClassToSpawn;//[Offset: 0x278, Size: 0x8]
	void SetPickupData(PickupData* InPickupData);// 0x555b704
	void OnRep_PickupData(const PickupData* OldPickupData);// 0x555b3fc
	void OnOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x555b4ac
	void ApplyScatterImpulse();// 0x555b6f0

--------------------------------
